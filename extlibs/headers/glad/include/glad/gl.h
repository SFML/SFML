/**
 * Loader generated by glad 2.0.8 on Sat Apr 19 13:18:30 2025
 *
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 *
 * Generator: C/C++
 * Specification: gl
 * Extensions: 680
 *
 * APIs:
 *  - gl:compatibility=4.6
 *  - gles1:common=1.0
 *
 * Options:
 *  - ALIAS = True
 *  - DEBUG = False
 *  - HEADER_ONLY = True
 *  - LOADER = False
 *  - MX = False
 *  - ON_DEMAND = False
 *
 * Commandline:
 *    --merge --api='gl:compatibility=4.6,gles1:common=1.0' --extensions='GL_3DFX_multisample,GL_3DFX_tbuffer,GL_3DFX_texture_compression_FXT1,GL_AMD_blend_minmax_factor,GL_AMD_conservative_depth,GL_AMD_debug_output,GL_AMD_depth_clamp_separate,GL_AMD_draw_buffers_blend,GL_AMD_framebuffer_multisample_advanced,GL_AMD_framebuffer_sample_positions,GL_AMD_gcn_shader,GL_AMD_gpu_shader_half_float,GL_AMD_gpu_shader_int16,GL_AMD_gpu_shader_int64,GL_AMD_interleaved_elements,GL_AMD_multi_draw_indirect,GL_AMD_name_gen_delete,GL_AMD_occlusion_query_event,GL_AMD_performance_monitor,GL_AMD_pinned_memory,GL_AMD_query_buffer_object,GL_AMD_sample_positions,GL_AMD_seamless_cubemap_per_texture,GL_AMD_shader_atomic_counter_ops,GL_AMD_shader_ballot,GL_AMD_shader_explicit_vertex_parameter,GL_AMD_shader_gpu_shader_half_float_fetch,GL_AMD_shader_image_load_store_lod,GL_AMD_shader_stencil_export,GL_AMD_shader_trinary_minmax,GL_AMD_sparse_texture,GL_AMD_stencil_operation_extended,GL_AMD_texture_gather_bias_lod,GL_AMD_texture_texture4,GL_AMD_transform_feedback3_lines_triangles,GL_AMD_transform_feedback4,GL_AMD_vertex_shader_layer,GL_AMD_vertex_shader_tessellator,GL_AMD_vertex_shader_viewport_index,GL_APPLE_aux_depth_stencil,GL_APPLE_client_storage,GL_APPLE_element_array,GL_APPLE_fence,GL_APPLE_float_pixels,GL_APPLE_flush_buffer_range,GL_APPLE_object_purgeable,GL_APPLE_rgb_422,GL_APPLE_row_bytes,GL_APPLE_specular_vector,GL_APPLE_texture_range,GL_APPLE_transform_hint,GL_APPLE_vertex_array_object,GL_APPLE_vertex_array_range,GL_APPLE_vertex_program_evaluators,GL_APPLE_ycbcr_422,GL_ARB_ES2_compatibility,GL_ARB_ES3_1_compatibility,GL_ARB_ES3_2_compatibility,GL_ARB_ES3_compatibility,GL_ARB_arrays_of_arrays,GL_ARB_base_instance,GL_ARB_bindless_texture,GL_ARB_blend_func_extended,GL_ARB_buffer_storage,GL_ARB_cl_event,GL_ARB_clear_buffer_object,GL_ARB_clear_texture,GL_ARB_clip_control,GL_ARB_color_buffer_float,GL_ARB_compatibility,GL_ARB_compressed_texture_pixel_storage,GL_ARB_compute_shader,GL_ARB_compute_variable_group_size,GL_ARB_conditional_render_inverted,GL_ARB_conservative_depth,GL_ARB_copy_buffer,GL_ARB_copy_image,GL_ARB_cull_distance,GL_ARB_debug_output,GL_ARB_depth_buffer_float,GL_ARB_depth_clamp,GL_ARB_depth_texture,GL_ARB_derivative_control,GL_ARB_direct_state_access,GL_ARB_draw_buffers,GL_ARB_draw_buffers_blend,GL_ARB_draw_elements_base_vertex,GL_ARB_draw_indirect,GL_ARB_draw_instanced,GL_ARB_enhanced_layouts,GL_ARB_explicit_attrib_location,GL_ARB_explicit_uniform_location,GL_ARB_fragment_coord_conventions,GL_ARB_fragment_layer_viewport,GL_ARB_fragment_program,GL_ARB_fragment_program_shadow,GL_ARB_fragment_shader,GL_ARB_fragment_shader_interlock,GL_ARB_framebuffer_no_attachments,GL_ARB_framebuffer_object,GL_ARB_framebuffer_sRGB,GL_ARB_geometry_shader4,GL_ARB_get_program_binary,GL_ARB_get_texture_sub_image,GL_ARB_gl_spirv,GL_ARB_gpu_shader5,GL_ARB_gpu_shader_fp64,GL_ARB_gpu_shader_int64,GL_ARB_half_float_pixel,GL_ARB_half_float_vertex,GL_ARB_imaging,GL_ARB_indirect_parameters,GL_ARB_instanced_arrays,GL_ARB_internalformat_query,GL_ARB_internalformat_query2,GL_ARB_invalidate_subdata,GL_ARB_map_buffer_alignment,GL_ARB_map_buffer_range,GL_ARB_matrix_palette,GL_ARB_multi_bind,GL_ARB_multi_draw_indirect,GL_ARB_multisample,GL_ARB_multitexture,GL_ARB_occlusion_query,GL_ARB_occlusion_query2,GL_ARB_parallel_shader_compile,GL_ARB_pipeline_statistics_query,GL_ARB_pixel_buffer_object,GL_ARB_point_parameters,GL_ARB_point_sprite,GL_ARB_polygon_offset_clamp,GL_ARB_post_depth_coverage,GL_ARB_program_interface_query,GL_ARB_provoking_vertex,GL_ARB_query_buffer_object,GL_ARB_robust_buffer_access_behavior,GL_ARB_robustness,GL_ARB_robustness_isolation,GL_ARB_sample_locations,GL_ARB_sample_shading,GL_ARB_sampler_objects,GL_ARB_seamless_cube_map,GL_ARB_seamless_cubemap_per_texture,GL_ARB_separate_shader_objects,GL_ARB_shader_atomic_counter_ops,GL_ARB_shader_atomic_counters,GL_ARB_shader_ballot,GL_ARB_shader_bit_encoding,GL_ARB_shader_clock,GL_ARB_shader_draw_parameters,GL_ARB_shader_group_vote,GL_ARB_shader_image_load_store,GL_ARB_shader_image_size,GL_ARB_shader_objects,GL_ARB_shader_precision,GL_ARB_shader_stencil_export,GL_ARB_shader_storage_buffer_object,GL_ARB_shader_subroutine,GL_ARB_shader_texture_image_samples,GL_ARB_shader_texture_lod,GL_ARB_shader_viewport_layer_array,GL_ARB_shading_language_100,GL_ARB_shading_language_420pack,GL_ARB_shading_language_include,GL_ARB_shading_language_packing,GL_ARB_shadow,GL_ARB_shadow_ambient,GL_ARB_sparse_buffer,GL_ARB_sparse_texture,GL_ARB_sparse_texture2,GL_ARB_sparse_texture_clamp,GL_ARB_spirv_extensions,GL_ARB_stencil_texturing,GL_ARB_sync,GL_ARB_tessellation_shader,GL_ARB_texture_barrier,GL_ARB_texture_border_clamp,GL_ARB_texture_buffer_object,GL_ARB_texture_buffer_object_rgb32,GL_ARB_texture_buffer_range,GL_ARB_texture_compression,GL_ARB_texture_compression_bptc,GL_ARB_texture_compression_rgtc,GL_ARB_texture_cube_map,GL_ARB_texture_cube_map_array,GL_ARB_texture_env_add,GL_ARB_texture_env_combine,GL_ARB_texture_env_crossbar,GL_ARB_texture_env_dot3,GL_ARB_texture_filter_anisotropic,GL_ARB_texture_filter_minmax,GL_ARB_texture_float,GL_ARB_texture_gather,GL_ARB_texture_mirror_clamp_to_edge,GL_ARB_texture_mirrored_repeat,GL_ARB_texture_multisample,GL_ARB_texture_non_power_of_two,GL_ARB_texture_query_levels,GL_ARB_texture_query_lod,GL_ARB_texture_rectangle,GL_ARB_texture_rg,GL_ARB_texture_rgb10_a2ui,GL_ARB_texture_stencil8,GL_ARB_texture_storage,GL_ARB_texture_storage_multisample,GL_ARB_texture_swizzle,GL_ARB_texture_view,GL_ARB_timer_query,GL_ARB_transform_feedback2,GL_ARB_transform_feedback3,GL_ARB_transform_feedback_instanced,GL_ARB_transform_feedback_overflow_query,GL_ARB_transpose_matrix,GL_ARB_uniform_buffer_object,GL_ARB_vertex_array_bgra,GL_ARB_vertex_array_object,GL_ARB_vertex_attrib_64bit,GL_ARB_vertex_attrib_binding,GL_ARB_vertex_blend,GL_ARB_vertex_buffer_object,GL_ARB_vertex_program,GL_ARB_vertex_shader,GL_ARB_vertex_type_10f_11f_11f_rev,GL_ARB_vertex_type_2_10_10_10_rev,GL_ARB_viewport_array,GL_ARB_window_pos,GL_ATI_draw_buffers,GL_ATI_element_array,GL_ATI_envmap_bumpmap,GL_ATI_fragment_shader,GL_ATI_map_object_buffer,GL_ATI_meminfo,GL_ATI_pixel_format_float,GL_ATI_pn_triangles,GL_ATI_separate_stencil,GL_ATI_text_fragment_shader,GL_ATI_texture_env_combine3,GL_ATI_texture_float,GL_ATI_texture_mirror_once,GL_ATI_vertex_array_object,GL_ATI_vertex_attrib_array_object,GL_ATI_vertex_streams,GL_EXT_422_pixels,GL_EXT_EGL_image_storage,GL_EXT_EGL_sync,GL_EXT_abgr,GL_EXT_bgra,GL_EXT_bindable_uniform,GL_EXT_blend_color,GL_EXT_blend_equation_separate,GL_EXT_blend_func_separate,GL_EXT_blend_logic_op,GL_EXT_blend_minmax,GL_EXT_blend_subtract,GL_EXT_clip_volume_hint,GL_EXT_cmyka,GL_EXT_color_subtable,GL_EXT_compiled_vertex_array,GL_EXT_convolution,GL_EXT_coordinate_frame,GL_EXT_copy_texture,GL_EXT_cull_vertex,GL_EXT_debug_label,GL_EXT_debug_marker,GL_EXT_depth_bounds_test,GL_EXT_direct_state_access,GL_EXT_draw_buffers2,GL_EXT_draw_instanced,GL_EXT_draw_range_elements,GL_EXT_external_buffer,GL_EXT_fog_coord,GL_EXT_framebuffer_blit,GL_EXT_framebuffer_blit_layers,GL_EXT_framebuffer_multisample,GL_EXT_framebuffer_multisample_blit_scaled,GL_EXT_framebuffer_object,GL_EXT_framebuffer_sRGB,GL_EXT_geometry_shader4,GL_EXT_gpu_program_parameters,GL_EXT_gpu_shader4,GL_EXT_histogram,GL_EXT_index_array_formats,GL_EXT_index_func,GL_EXT_index_material,GL_EXT_index_texture,GL_EXT_light_texture,GL_EXT_memory_object,GL_EXT_memory_object_fd,GL_EXT_memory_object_win32,GL_EXT_misc_attribute,GL_EXT_multi_draw_arrays,GL_EXT_multisample,GL_EXT_multiview_tessellation_geometry_shader,GL_EXT_multiview_texture_multisample,GL_EXT_multiview_timer_query,GL_EXT_packed_depth_stencil,GL_EXT_packed_float,GL_EXT_packed_pixels,GL_EXT_paletted_texture,GL_EXT_pixel_buffer_object,GL_EXT_pixel_transform,GL_EXT_pixel_transform_color_table,GL_EXT_point_parameters,GL_EXT_polygon_offset,GL_EXT_polygon_offset_clamp,GL_EXT_post_depth_coverage,GL_EXT_provoking_vertex,GL_EXT_raster_multisample,GL_EXT_rescale_normal,GL_EXT_secondary_color,GL_EXT_semaphore,GL_EXT_semaphore_fd,GL_EXT_semaphore_win32,GL_EXT_separate_shader_objects,GL_EXT_separate_specular_color,GL_EXT_shader_framebuffer_fetch,GL_EXT_shader_framebuffer_fetch_non_coherent,GL_EXT_shader_image_load_formatted,GL_EXT_shader_image_load_store,GL_EXT_shader_integer_mix,GL_EXT_shader_samples_identical,GL_EXT_shadow_funcs,GL_EXT_shared_texture_palette,GL_EXT_sparse_texture2,GL_EXT_stencil_clear_tag,GL_EXT_stencil_two_side,GL_EXT_stencil_wrap,GL_EXT_subtexture,GL_EXT_texture,GL_EXT_texture3D,GL_EXT_texture_array,GL_EXT_texture_buffer_object,GL_EXT_texture_compression_latc,GL_EXT_texture_compression_rgtc,GL_EXT_texture_compression_s3tc,GL_EXT_texture_cube_map,GL_EXT_texture_env_add,GL_EXT_texture_env_combine,GL_EXT_texture_env_dot3,GL_EXT_texture_filter_anisotropic,GL_EXT_texture_filter_minmax,GL_EXT_texture_integer,GL_EXT_texture_lod_bias,GL_EXT_texture_mirror_clamp,GL_EXT_texture_object,GL_EXT_texture_perturb_normal,GL_EXT_texture_sRGB,GL_EXT_texture_sRGB_R8,GL_EXT_texture_sRGB_RG8,GL_EXT_texture_sRGB_decode,GL_EXT_texture_shadow_lod,GL_EXT_texture_shared_exponent,GL_EXT_texture_snorm,GL_EXT_texture_storage,GL_EXT_texture_swizzle,GL_EXT_timer_query,GL_EXT_transform_feedback,GL_EXT_vertex_array,GL_EXT_vertex_array_bgra,GL_EXT_vertex_attrib_64bit,GL_EXT_vertex_shader,GL_EXT_vertex_weighting,GL_EXT_win32_keyed_mutex,GL_EXT_window_rectangles,GL_EXT_x11_sync_object,GL_GREMEDY_frame_terminator,GL_GREMEDY_string_marker,GL_HP_convolution_border_modes,GL_HP_image_transform,GL_HP_occlusion_test,GL_HP_texture_lighting,GL_IBM_cull_vertex,GL_IBM_multimode_draw_arrays,GL_IBM_rasterpos_clip,GL_IBM_static_data,GL_IBM_texture_mirrored_repeat,GL_IBM_vertex_array_lists,GL_INGR_blend_func_separate,GL_INGR_color_clamp,GL_INGR_interlace_read,GL_INTEL_blackhole_render,GL_INTEL_conservative_rasterization,GL_INTEL_fragment_shader_ordering,GL_INTEL_framebuffer_CMAA,GL_INTEL_map_texture,GL_INTEL_parallel_arrays,GL_INTEL_performance_query,GL_KHR_blend_equation_advanced,GL_KHR_blend_equation_advanced_coherent,GL_KHR_context_flush_control,GL_KHR_debug,GL_KHR_no_error,GL_KHR_parallel_shader_compile,GL_KHR_robust_buffer_access_behavior,GL_KHR_robustness,GL_KHR_shader_subgroup,GL_KHR_texture_compression_astc_hdr,GL_KHR_texture_compression_astc_ldr,GL_KHR_texture_compression_astc_sliced_3d,GL_MESAX_texture_stack,GL_MESA_framebuffer_flip_x,GL_MESA_framebuffer_flip_y,GL_MESA_framebuffer_swap_xy,GL_MESA_pack_invert,GL_MESA_program_binary_formats,GL_MESA_resize_buffers,GL_MESA_shader_integer_functions,GL_MESA_texture_const_bandwidth,GL_MESA_tile_raster_order,GL_MESA_window_pos,GL_MESA_ycbcr_texture,GL_NVX_blend_equation_advanced_multi_draw_buffers,GL_NVX_conditional_render,GL_NVX_gpu_memory_info,GL_NVX_gpu_multicast2,GL_NVX_linked_gpu_multicast,GL_NVX_progress_fence,GL_NV_alpha_to_coverage_dither_control,GL_NV_bindless_multi_draw_indirect,GL_NV_bindless_multi_draw_indirect_count,GL_NV_bindless_texture,GL_NV_blend_equation_advanced,GL_NV_blend_equation_advanced_coherent,GL_NV_blend_minmax_factor,GL_NV_blend_square,GL_NV_clip_space_w_scaling,GL_NV_command_list,GL_NV_compute_program5,GL_NV_compute_shader_derivatives,GL_NV_conditional_render,GL_NV_conservative_raster,GL_NV_conservative_raster_dilate,GL_NV_conservative_raster_pre_snap,GL_NV_conservative_raster_pre_snap_triangles,GL_NV_conservative_raster_underestimation,GL_NV_copy_depth_to_color,GL_NV_copy_image,GL_NV_deep_texture3D,GL_NV_depth_buffer_float,GL_NV_depth_clamp,GL_NV_draw_texture,GL_NV_draw_vulkan_image,GL_NV_evaluators,GL_NV_explicit_multisample,GL_NV_fence,GL_NV_fill_rectangle,GL_NV_float_buffer,GL_NV_fog_distance,GL_NV_fragment_coverage_to_color,GL_NV_fragment_program,GL_NV_fragment_program2,GL_NV_fragment_program4,GL_NV_fragment_program_option,GL_NV_fragment_shader_barycentric,GL_NV_fragment_shader_interlock,GL_NV_framebuffer_mixed_samples,GL_NV_framebuffer_multisample_coverage,GL_NV_geometry_program4,GL_NV_geometry_shader4,GL_NV_geometry_shader_passthrough,GL_NV_gpu_multicast,GL_NV_gpu_program4,GL_NV_gpu_program5,GL_NV_gpu_program5_mem_extended,GL_NV_gpu_shader5,GL_NV_half_float,GL_NV_internalformat_sample_query,GL_NV_light_max_exponent,GL_NV_memory_attachment,GL_NV_memory_object_sparse,GL_NV_mesh_shader,GL_NV_multisample_coverage,GL_NV_multisample_filter_hint,GL_NV_occlusion_query,GL_NV_packed_depth_stencil,GL_NV_parameter_buffer_object,GL_NV_parameter_buffer_object2,GL_NV_path_rendering,GL_NV_path_rendering_shared_edge,GL_NV_pixel_data_range,GL_NV_point_sprite,GL_NV_present_video,GL_NV_primitive_restart,GL_NV_primitive_shading_rate,GL_NV_query_resource,GL_NV_query_resource_tag,GL_NV_register_combiners,GL_NV_register_combiners2,GL_NV_representative_fragment_test,GL_NV_robustness_video_memory_purge,GL_NV_sample_locations,GL_NV_sample_mask_override_coverage,GL_NV_scissor_exclusive,GL_NV_shader_atomic_counters,GL_NV_shader_atomic_float,GL_NV_shader_atomic_float64,GL_NV_shader_atomic_fp16_vector,GL_NV_shader_atomic_int64,GL_NV_shader_buffer_load,GL_NV_shader_buffer_store,GL_NV_shader_storage_buffer_object,GL_NV_shader_subgroup_partitioned,GL_NV_shader_texture_footprint,GL_NV_shader_thread_group,GL_NV_shader_thread_shuffle,GL_NV_shading_rate_image,GL_NV_stereo_view_rendering,GL_NV_tessellation_program5,GL_NV_texgen_emboss,GL_NV_texgen_reflection,GL_NV_texture_barrier,GL_NV_texture_compression_vtc,GL_NV_texture_env_combine4,GL_NV_texture_expand_normal,GL_NV_texture_multisample,GL_NV_texture_rectangle,GL_NV_texture_rectangle_compressed,GL_NV_texture_shader,GL_NV_texture_shader2,GL_NV_texture_shader3,GL_NV_timeline_semaphore,GL_NV_transform_feedback,GL_NV_transform_feedback2,GL_NV_uniform_buffer_std430_layout,GL_NV_uniform_buffer_unified_memory,GL_NV_vdpau_interop,GL_NV_vdpau_interop2,GL_NV_vertex_array_range,GL_NV_vertex_array_range2,GL_NV_vertex_attrib_integer_64bit,GL_NV_vertex_buffer_unified_memory,GL_NV_vertex_program,GL_NV_vertex_program1_1,GL_NV_vertex_program2,GL_NV_vertex_program2_option,GL_NV_vertex_program3,GL_NV_vertex_program4,GL_NV_video_capture,GL_NV_viewport_array2,GL_NV_viewport_swizzle,GL_OES_byte_coordinates,GL_OES_compressed_paletted_texture,GL_OES_fixed_point,GL_OES_query_matrix,GL_OES_read_format,GL_OES_single_precision,GL_OML_interlace,GL_OML_resample,GL_OML_subsample,GL_OVR_multiview,GL_OVR_multiview2,GL_PGI_misc_hints,GL_PGI_vertex_hints,GL_REND_screen_coordinates,GL_S3_s3tc,GL_SGIS_detail_texture,GL_SGIS_fog_function,GL_SGIS_generate_mipmap,GL_SGIS_multisample,GL_SGIS_pixel_texture,GL_SGIS_point_line_texgen,GL_SGIS_point_parameters,GL_SGIS_sharpen_texture,GL_SGIS_texture4D,GL_SGIS_texture_border_clamp,GL_SGIS_texture_color_mask,GL_SGIS_texture_edge_clamp,GL_SGIS_texture_filter4,GL_SGIS_texture_lod,GL_SGIS_texture_select,GL_SGIX_async,GL_SGIX_async_histogram,GL_SGIX_async_pixel,GL_SGIX_blend_alpha_minmax,GL_SGIX_calligraphic_fragment,GL_SGIX_clipmap,GL_SGIX_convolution_accuracy,GL_SGIX_depth_pass_instrument,GL_SGIX_depth_texture,GL_SGIX_flush_raster,GL_SGIX_fog_offset,GL_SGIX_fragment_lighting,GL_SGIX_framezoom,GL_SGIX_igloo_interface,GL_SGIX_instruments,GL_SGIX_interlace,GL_SGIX_ir_instrument1,GL_SGIX_list_priority,GL_SGIX_pixel_texture,GL_SGIX_pixel_tiles,GL_SGIX_polynomial_ffd,GL_SGIX_reference_plane,GL_SGIX_resample,GL_SGIX_scalebias_hint,GL_SGIX_shadow,GL_SGIX_shadow_ambient,GL_SGIX_sprite,GL_SGIX_subsample,GL_SGIX_tag_sample_buffer,GL_SGIX_texture_add_env,GL_SGIX_texture_coordinate_clamp,GL_SGIX_texture_lod_bias,GL_SGIX_texture_multi_buffer,GL_SGIX_texture_scale_bias,GL_SGIX_vertex_preclip,GL_SGIX_ycrcb,GL_SGIX_ycrcb_subsample,GL_SGIX_ycrcba,GL_SGI_color_matrix,GL_SGI_color_table,GL_SGI_texture_color_table,GL_SUNX_constant_data,GL_SUN_convolution_border_modes,GL_SUN_global_alpha,GL_SUN_mesh_array,GL_SUN_slice_accum,GL_SUN_triangle_list,GL_SUN_vertex,GL_WIN_phong_shading,GL_WIN_specular_fog,GL_AMD_compressed_3DC_texture,GL_AMD_compressed_ATC_texture,GL_APPLE_copy_texture_levels,GL_APPLE_framebuffer_multisample,GL_APPLE_sync,GL_APPLE_texture_2D_limited_npot,GL_APPLE_texture_format_BGRA8888,GL_APPLE_texture_max_level,GL_ARM_rgba8,GL_EXT_discard_framebuffer,GL_EXT_map_buffer_range,GL_EXT_multisampled_render_to_texture,GL_EXT_read_format_bgra,GL_EXT_robustness,GL_EXT_sRGB,GL_EXT_texture_compression_dxt1,GL_EXT_texture_format_BGRA8888,GL_IMG_multisampled_render_to_texture,GL_IMG_read_format,GL_IMG_texture_compression_pvrtc,GL_IMG_texture_env_enhanced_fixed_function,GL_IMG_user_clip_plane,GL_OES_EGL_image,GL_OES_EGL_image_external,GL_OES_blend_equation_separate,GL_OES_blend_func_separate,GL_OES_blend_subtract,GL_OES_compressed_ETC1_RGB8_sub_texture,GL_OES_compressed_ETC1_RGB8_texture,GL_OES_depth24,GL_OES_depth32,GL_OES_draw_texture,GL_OES_element_index_uint,GL_OES_extended_matrix_palette,GL_OES_fbo_render_mipmap,GL_OES_framebuffer_object,GL_OES_mapbuffer,GL_OES_matrix_get,GL_OES_matrix_palette,GL_OES_packed_depth_stencil,GL_OES_point_size_array,GL_OES_point_sprite,GL_OES_required_internalformat,GL_OES_rgb8_rgba8,GL_OES_stencil1,GL_OES_stencil4,GL_OES_stencil8,GL_OES_stencil_wrap,GL_OES_surfaceless_context,GL_OES_texture_cube_map,GL_OES_texture_env_crossbar,GL_OES_texture_mirrored_repeat,GL_OES_texture_npot,GL_OES_vertex_array_object,GL_QCOM_driver_control,GL_QCOM_extended_get,GL_QCOM_extended_get2,GL_QCOM_perfmon_global_mode,GL_QCOM_tiled_rendering,GL_QCOM_writeonly_rendering' c --alias --header-only
 *
 * Online:
 *    http://glad.sh/#api=gl%3Acompatibility%3D4.6%2Cgles1%3Acommon%3D1.0&generator=c&options=MERGE%2CALIAS%2CHEADER_ONLY
 *
 */

#ifndef SF_GLAD_GL_H_
#define SF_GLAD_GL_H_

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifdef __gl_h_
  #error OpenGL (gl.h) header already included (API: gl), remove previous include!
#endif
#define __gl_h_ 1
#ifdef __gl3_h_
  #error OpenGL (gl3.h) header already included (API: gl), remove previous include!
#endif
#define __gl3_h_ 1
#ifdef __glext_h_
  #error OpenGL (glext.h) header already included (API: gl), remove previous include!
#endif
#define __glext_h_ 1
#ifdef __gl3ext_h_
  #error OpenGL (gl3ext.h) header already included (API: gl), remove previous include!
#endif
#define __gl3ext_h_ 1
#ifdef __gles1_gl_h_
  #error OpenGL ES 1 header already included (API: gles1), remove previous include!
#endif
#define __gles1_gl_h_ 1
#ifdef __clang__
#pragma clang diagnostic pop
#endif

#define SF_GLAD_GL
#define GLAD_OPTION_GL_ALIAS
#define GLAD_OPTION_GL_HEADER_ONLY

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#define GLAD_UNUSED(x) (void)(x)

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.8"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GL_1PASS_EXT 0x80A1
#define GL_1PASS_SGIS 0x80A1
#define GL_2D 0x0600
#define GL_2PASS_0_EXT 0x80A2
#define GL_2PASS_0_SGIS 0x80A2
#define GL_2PASS_1_EXT 0x80A3
#define GL_2PASS_1_SGIS 0x80A3
#define GL_2X_BIT_ATI 0x00000001
#define GL_2_BYTES 0x1407
#define GL_2_BYTES_NV 0x1407
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_3_BYTES 0x1408
#define GL_3_BYTES_NV 0x1408
#define GL_422_AVERAGE_EXT 0x80CE
#define GL_422_EXT 0x80CC
#define GL_422_REV_AVERAGE_EXT 0x80CF
#define GL_422_REV_EXT 0x80CD
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_4PASS_0_EXT 0x80A4
#define GL_4PASS_0_SGIS 0x80A4
#define GL_4PASS_1_EXT 0x80A5
#define GL_4PASS_1_SGIS 0x80A5
#define GL_4PASS_2_EXT 0x80A6
#define GL_4PASS_2_SGIS 0x80A6
#define GL_4PASS_3_EXT 0x80A7
#define GL_4PASS_3_SGIS 0x80A7
#define GL_4X_BIT_ATI 0x00000002
#define GL_4_BYTES 0x1409
#define GL_4_BYTES_NV 0x1409
#define GL_8X_BIT_ATI 0x00000004
#define GL_ABGR_EXT 0x8000
#define GL_ACCUM 0x0100
#define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_PROGRAM_EXT 0x8B8D
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
#define GL_ADD 0x0104
#define GL_ADD_ATI 0x8963
#define GL_ADD_SIGNED 0x8574
#define GL_ADD_SIGNED_ARB 0x8574
#define GL_ADD_SIGNED_EXT 0x8574
#define GL_ADJACENT_PAIRS_NV 0x90AE
#define GL_AFFINE_2D_NV 0x9092
#define GL_AFFINE_3D_NV 0x9094
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210
#define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211
#define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E
#define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
#define GL_ALL_COMPLETED_NV 0x84F2
#define GL_ALL_PIXELS_AMD 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALL_STATIC_DATA_IBM 103060
#define GL_ALPHA 0x1906
#define GL_ALPHA12 0x803D
#define GL_ALPHA12_EXT 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA16F_ARB 0x881C
#define GL_ALPHA16F_EXT 0x881C
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_ALPHA16_EXT 0x803E
#define GL_ALPHA16_SNORM 0x9018
#define GL_ALPHA32F_ARB 0x8816
#define GL_ALPHA32F_EXT 0x8816
#define GL_ALPHA32I_EXT 0x8D84
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_ALPHA4 0x803B
#define GL_ALPHA4_EXT 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA8I_EXT 0x8D90
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_ALPHA8_EXT 0x803C
#define GL_ALPHA8_SNORM 0x9014
#define GL_ALPHA_BIAS 0x0D1D
#define GL_ALPHA_BITS 0x0D55
#define GL_ALPHA_FLOAT16_APPLE 0x881C
#define GL_ALPHA_FLOAT16_ATI 0x881C
#define GL_ALPHA_FLOAT32_APPLE 0x8816
#define GL_ALPHA_FLOAT32_ATI 0x8816
#define GL_ALPHA_INTEGER 0x8D97
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
#define GL_ALPHA_MAX_SGIX 0x8321
#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
#define GL_ALPHA_MIN_SGIX 0x8320
#define GL_ALPHA_REF_COMMAND_NV 0x000F
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_SNORM 0x9010
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV 0x934D
#define GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV 0x934F
#define GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV 0x934E
#define GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV 0x92BF
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALWAYS 0x0207
#define GL_ALWAYS_FAST_HINT_PGI 0x1A20C
#define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D
#define GL_AMBIENT 0x1200
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_ARC_TO_NV 0xFE
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8
#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
#define GL_ARRAY_SIZE 0x92FB
#define GL_ARRAY_STRIDE 0x92FE
#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
#define GL_ASYNC_MARKER_SGIX 0x8329
#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV 0x959E
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV 0x959F
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATTACHED_MEMORY_OBJECT_NV 0x95A4
#define GL_ATTACHED_MEMORY_OFFSET_NV 0x95A5
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ATTENUATION_EXT 0x834D
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_AUTO_NORMAL 0x0D80
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_AUX_BUFFERS 0x0C00
#define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14
#define GL_AVERAGE_EXT 0x8335
#define GL_AVERAGE_HP 0x8160
#define GL_BACK 0x0405
#define GL_BACK_LEFT 0x0402
#define GL_BACK_NORMALS_HINT_PGI 0x1A223
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_RIGHT 0x0403
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_BEVEL_NV 0x90A6
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA8_EXT 0x93A1
#define GL_BGRA_EXT 0x80E1
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_BGR_EXT 0x80E0
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BIAS_BIT_ATI 0x00000008
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
#define GL_BINORMAL_ARRAY_EXT 0x843A
#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
#define GL_BITMAP 0x1A00
#define GL_BITMAP_TOKEN 0x0704
#define GL_BLACKHOLE_RENDER_INTEL 0x83FC
#define GL_BLEND 0x0BE2
#define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285
#define GL_BLEND_ADVANCED_COHERENT_NV 0x9285
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_COLOR_COMMAND_NV 0x000B
#define GL_BLEND_COLOR_EXT 0x8005
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_OVERLAP_NV 0x9281
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLOCK_INDEX 0x92FD
#define GL_BLUE 0x1905
#define GL_BLUE_BIAS 0x0D1B
#define GL_BLUE_BITS 0x0D54
#define GL_BLUE_BIT_ATI 0x00000004
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_BLUE_MAX_CLAMP_INGR 0x8566
#define GL_BLUE_MIN_CLAMP_INGR 0x8562
#define GL_BLUE_NV 0x1905
#define GL_BLUE_SCALE 0x0D1A
#define GL_BOLD_BIT_NV 0x01
#define GL_BOOL 0x8B56
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_BOUNDING_BOX_NV 0x908D
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#define GL_BUFFER 0x82E0
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_BUFFER_OBJECT_APPLE 0x85B3
#define GL_BUFFER_OBJECT_EXT 0x9151
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_BUMP_ENVMAP_ATI 0x877B
#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
#define GL_BUMP_ROT_MATRIX_ATI 0x8775
#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
#define GL_BUMP_TARGET_ATI 0x877C
#define GL_BUMP_TEX_UNITS_ATI 0x8778
#define GL_BYTE 0x1400
#define GL_C3F_V3F 0x2A24
#define GL_C4F_N3F_V3F 0x2A26
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_CCW 0x0901
#define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#define GL_CLAMP 0x2900
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_BORDER_ARB 0x812D
#define GL_CLAMP_TO_BORDER_SGIS 0x812D
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_TO_EDGE_SGIS 0x812F
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLEAR 0x1500
#define GL_CLEAR_BUFFER 0x82B4
#define GL_CLEAR_TEXTURE 0x9365
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_CLIP_FAR_HINT_PGI 0x1A221
#define GL_CLIP_NEAR_HINT_PGI 0x1A220
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
#define GL_CLOSE_PATH_NV 0x00
#define GL_CMYKA_EXT 0x800D
#define GL_CMYK_EXT 0x800C
#define GL_CND0_ATI 0x896B
#define GL_CND_ATI 0x896A
#define GL_COEFF 0x0A00
#define GL_COLOR 0x1800
#define GL_COLOR3_BIT_PGI 0x00010000
#define GL_COLOR4_BIT_PGI 0x00020000
#define GL_COLORBURN_KHR 0x929A
#define GL_COLORBURN_NV 0x929A
#define GL_COLORDODGE_KHR 0x9299
#define GL_COLORDODGE_NV 0x9299
#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D
#define GL_COLOR_ARRAY_LIST_IBM 103072
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_COMPONENTS 0x8283
#define GL_COLOR_ENCODING 0x8296
#define GL_COLOR_FLOAT_APPLE 0x8A0F
#define GL_COLOR_INDEX 0x1900
#define GL_COLOR_INDEX12_EXT 0x80E6
#define GL_COLOR_INDEX16_EXT 0x80E7
#define GL_COLOR_INDEX1_EXT 0x80E2
#define GL_COLOR_INDEX2_EXT 0x80E3
#define GL_COLOR_INDEX4_EXT 0x80E4
#define GL_COLOR_INDEX8_EXT 0x80E5
#define GL_COLOR_INDEXES 0x1603
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATRIX 0x80B1
#define GL_COLOR_MATRIX_SGI 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
#define GL_COLOR_RENDERABLE 0x8286
#define GL_COLOR_SAMPLES_NV 0x8E20
#define GL_COLOR_SUM 0x8458
#define GL_COLOR_SUM_ARB 0x8458
#define GL_COLOR_SUM_CLAMP_NV 0x854F
#define GL_COLOR_SUM_EXT 0x8458
#define GL_COLOR_TABLE 0x80D0
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
#define GL_COLOR_TABLE_BIAS 0x80D7
#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
#define GL_COLOR_TABLE_FORMAT 0x80D8
#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
#define GL_COLOR_TABLE_RED_SIZE 0x80DA
#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
#define GL_COLOR_TABLE_SCALE 0x80D6
#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
#define GL_COLOR_TABLE_SGI 0x80D0
#define GL_COLOR_TABLE_WIDTH 0x80D9
#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMBINE 0x8570
#define GL_COMBINE4_NV 0x8503
#define GL_COMBINER0_NV 0x8550
#define GL_COMBINER1_NV 0x8551
#define GL_COMBINER2_NV 0x8552
#define GL_COMBINER3_NV 0x8553
#define GL_COMBINER4_NV 0x8554
#define GL_COMBINER5_NV 0x8555
#define GL_COMBINER6_NV 0x8556
#define GL_COMBINER7_NV 0x8557
#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
#define GL_COMBINER_AB_OUTPUT_NV 0x854A
#define GL_COMBINER_BIAS_NV 0x8549
#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
#define GL_COMBINER_CD_OUTPUT_NV 0x854B
#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
#define GL_COMBINER_INPUT_NV 0x8542
#define GL_COMBINER_MAPPING_NV 0x8543
#define GL_COMBINER_MUX_SUM_NV 0x8547
#define GL_COMBINER_SCALE_NV 0x8548
#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_ALPHA_ARB 0x8572
#define GL_COMBINE_ALPHA_EXT 0x8572
#define GL_COMBINE_ARB 0x8570
#define GL_COMBINE_EXT 0x8570
#define GL_COMBINE_RGB 0x8571
#define GL_COMBINE_RGB_ARB 0x8571
#define GL_COMBINE_RGB_EXT 0x8571
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_COMPILE_STATUS 0x8B81
#define GL_COMPLETION_STATUS_ARB 0x91B1
#define GL_COMPLETION_STATUS_KHR 0x91B1
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
#define GL_COMPRESSED_RG 0x8226
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#define GL_COMPRESSED_SRGB_EXT 0x8C48
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#define GL_COMPUTE_PROGRAM_NV 0x90FB
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC
#define GL_COMPUTE_SHADER 0x91B9
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_COMP_BIT_ATI 0x00000002
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONFORMANT_NV 0x9374
#define GL_CONIC_CURVE_TO_NV 0x1A
#define GL_CONJOINT_NV 0x9284
#define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE
#define GL_CONSERVATIVE_RASTERIZATION_NV 0x9346
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
#define GL_CONSERVATIVE_RASTER_DILATE_NV 0x9379
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A
#define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV 0x9550
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
#define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD
#define GL_CONSTANT 0x8576
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_CONSTANT_ARB 0x8576
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_CONSTANT_BORDER 0x8151
#define GL_CONSTANT_BORDER_HP 0x8151
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONSTANT_COLOR0_NV 0x852A
#define GL_CONSTANT_COLOR1_NV 0x852B
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_CONSTANT_EXT 0x8576
#define GL_CONSTANT_NV 0x8576
#define GL_CONST_BW_TILING_MESA 0x8BBE
#define GL_CONST_EYE_NV 0x86E5
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_FLAGS 0x821E
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0x00000008
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_CONTEXT_ROBUST_ACCESS 0x90F3
#define GL_CONTINUOUS_AMD 0x9007
#define GL_CONTRAST_NV 0x92A1
#define GL_CONVEX_HULL_NV 0x908B
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_1D_EXT 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_CONVOLUTION_2D_EXT 0x8011
#define GL_CONVOLUTION_BORDER_COLOR 0x8154
#define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154
#define GL_CONVOLUTION_BORDER_MODE 0x8013
#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
#define GL_CONVOLUTION_FILTER_BIAS 0x8015
#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
#define GL_CONVOLUTION_FILTER_SCALE 0x8014
#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
#define GL_CONVOLUTION_FORMAT 0x8017
#define GL_CONVOLUTION_FORMAT_EXT 0x8017
#define GL_CONVOLUTION_HEIGHT 0x8019
#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
#define GL_CONVOLUTION_HINT_SGIX 0x8316
#define GL_CONVOLUTION_WIDTH 0x8018
#define GL_CONVOLUTION_WIDTH_EXT 0x8018
#define GL_CON_0_ATI 0x8941
#define GL_CON_10_ATI 0x894B
#define GL_CON_11_ATI 0x894C
#define GL_CON_12_ATI 0x894D
#define GL_CON_13_ATI 0x894E
#define GL_CON_14_ATI 0x894F
#define GL_CON_15_ATI 0x8950
#define GL_CON_16_ATI 0x8951
#define GL_CON_17_ATI 0x8952
#define GL_CON_18_ATI 0x8953
#define GL_CON_19_ATI 0x8954
#define GL_CON_1_ATI 0x8942
#define GL_CON_20_ATI 0x8955
#define GL_CON_21_ATI 0x8956
#define GL_CON_22_ATI 0x8957
#define GL_CON_23_ATI 0x8958
#define GL_CON_24_ATI 0x8959
#define GL_CON_25_ATI 0x895A
#define GL_CON_26_ATI 0x895B
#define GL_CON_27_ATI 0x895C
#define GL_CON_28_ATI 0x895D
#define GL_CON_29_ATI 0x895E
#define GL_CON_2_ATI 0x8943
#define GL_CON_30_ATI 0x895F
#define GL_CON_31_ATI 0x8960
#define GL_CON_3_ATI 0x8944
#define GL_CON_4_ATI 0x8945
#define GL_CON_5_ATI 0x8946
#define GL_CON_6_ATI 0x8947
#define GL_CON_7_ATI 0x8948
#define GL_CON_8_ATI 0x8949
#define GL_CON_9_ATI 0x894A
#define GL_COORD_REPLACE 0x8862
#define GL_COORD_REPLACE_ARB 0x8862
#define GL_COORD_REPLACE_NV 0x8862
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_COUNTER_RANGE_AMD 0x8BC1
#define GL_COUNTER_TYPE_AMD 0x8BC0
#define GL_COUNT_DOWN_NV 0x9089
#define GL_COUNT_UP_NV 0x9088
#define GL_COVERAGE_MODULATION_NV 0x9332
#define GL_COVERAGE_MODULATION_TABLE_NV 0x9331
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333
#define GL_CUBIC_CURVE_TO_NV 0x0C
#define GL_CUBIC_EXT 0x8334
#define GL_CUBIC_HP 0x815F
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CULL_FRAGMENT_NV 0x86E7
#define GL_CULL_MODES_NV 0x86E0
#define GL_CULL_VERTEX_EXT 0x81AA
#define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB
#define GL_CULL_VERTEX_IBM 103050
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_CURRENT_BINORMAL_EXT 0x843C
#define GL_CURRENT_BIT 0x00000001
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
#define GL_CURRENT_TANGENT_EXT 0x843B
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_TIME_NV 0x8E28
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_CURRENT_VERTEX_EXT 0x87E2
#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
#define GL_CURRENT_WEIGHT_ARB 0x86A8
#define GL_CW 0x0900
#define GL_D3D12_FENCE_VALUE_EXT 0x9595
#define GL_DARKEN_KHR 0x9297
#define GL_DARKEN_NV 0x9297
#define GL_DATA_BUFFER_AMD 0x9151
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_API_ARB 0x8246
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DECAL 0x2101
#define GL_DECODE_EXT 0x8A49
#define GL_DECR 0x1E03
#define GL_DECR_WRAP 0x8508
#define GL_DECR_WRAP_EXT 0x8508
#define GL_DEDICATED_MEMORY_OBJECT_EXT 0x9581
#define GL_DEFORMATIONS_MASK_SGIX 0x8196
#define GL_DELETE_STATUS 0x8B80
#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
#define GL_DEPTH 0x1801
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH24_STENCIL8_EXT 0x88F0
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_DEPTH_BIAS 0x0D1F
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_BOUNDS_EXT 0x8891
#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
#define GL_DEPTH_CLAMP 0x864F
#define GL_DEPTH_CLAMP_FAR_AMD 0x901F
#define GL_DEPTH_CLAMP_NEAR_AMD 0x901E
#define GL_DEPTH_CLAMP_NV 0x864F
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT16_ARB 0x81A5
#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT24_ARB 0x81A6
#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
#define GL_DEPTH_COMPONENT32_ARB 0x81A7
#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_DEPTH_SAMPLES_NV 0x932D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_DEPTH_STENCIL_EXT 0x84F9
#define GL_DEPTH_STENCIL_NV 0x84F9
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DETACHED_BUFFERS_NV 0x95AB
#define GL_DETACHED_MEMORY_INCARNATION_NV 0x95A9
#define GL_DETACHED_TEXTURES_NV 0x95AA
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
#define GL_DETAIL_TEXTURE_2D_SGIS 0x8095
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
#define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A
#define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B
#define GL_DEVICE_LUID_EXT 0x9599
#define GL_DEVICE_NODE_MASK_EXT 0x959A
#define GL_DEVICE_UUID_EXT 0x9597
#define GL_DIFFERENCE_KHR 0x929E
#define GL_DIFFERENCE_NV 0x929E
#define GL_DIFFUSE 0x1201
#define GL_DISCARD_ATI 0x8763
#define GL_DISCARD_NV 0x8530
#define GL_DISCRETE_AMD 0x9006
#define GL_DISJOINT_NV 0x9283
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_DISPLAY_LIST 0x82E7
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#define GL_DITHER 0x0BD0
#define GL_DOMAIN 0x0A02
#define GL_DONT_CARE 0x1100
#define GL_DOT2_ADD_ATI 0x896C
#define GL_DOT3_ATI 0x8966
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DOT3_RGBA_ARB 0x86AF
#define GL_DOT3_RGBA_EXT 0x8741
#define GL_DOT3_RGB_ARB 0x86AE
#define GL_DOT3_RGB_EXT 0x8740
#define GL_DOT4_ATI 0x8967
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
#define GL_DOT_PRODUCT_NV 0x86EC
#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
#define GL_DOUBLE 0x140A
#define GL_DOUBLEBUFFER 0x0C32
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT2_EXT 0x8F46
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT3_EXT 0x8F47
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT4_EXT 0x8F48
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#define GL_DRAW_ARRAYS_COMMAND_NV 0x0003
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER15_ARB 0x8834
#define GL_DRAW_BUFFER15_ATI 0x8834
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42
#define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40
#define GL_DRAW_PIXELS_APPLE 0x8A0A
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_DRIVER_UUID_EXT 0x9598
#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
#define GL_DSDT8_MAG8_NV 0x870A
#define GL_DSDT8_NV 0x8709
#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
#define GL_DSDT_MAG_NV 0x86F6
#define GL_DSDT_MAG_VIB_NV 0x86F7
#define GL_DSDT_NV 0x86F5
#define GL_DST_ALPHA 0x0304
#define GL_DST_ATOP_NV 0x928F
#define GL_DST_COLOR 0x0306
#define GL_DST_IN_NV 0x928B
#define GL_DST_NV 0x9287
#define GL_DST_OUT_NV 0x928D
#define GL_DST_OVER_NV 0x9289
#define GL_DS_BIAS_NV 0x8716
#define GL_DS_SCALE_NV 0x8710
#define GL_DT_BIAS_NV 0x8717
#define GL_DT_SCALE_NV 0x8711
#define GL_DU8DV8_ATI 0x877A
#define GL_DUAL_ALPHA12_SGIS 0x8112
#define GL_DUAL_ALPHA16_SGIS 0x8113
#define GL_DUAL_ALPHA4_SGIS 0x8110
#define GL_DUAL_ALPHA8_SGIS 0x8111
#define GL_DUAL_INTENSITY12_SGIS 0x811A
#define GL_DUAL_INTENSITY16_SGIS 0x811B
#define GL_DUAL_INTENSITY4_SGIS 0x8118
#define GL_DUAL_INTENSITY8_SGIS 0x8119
#define GL_DUAL_LUMINANCE12_SGIS 0x8116
#define GL_DUAL_LUMINANCE16_SGIS 0x8117
#define GL_DUAL_LUMINANCE4_SGIS 0x8114
#define GL_DUAL_LUMINANCE8_SGIS 0x8115
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D
#define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124
#define GL_DUDV_ATI 0x8779
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#define GL_DYNAMIC_ATI 0x8761
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_EDGEFLAG_BIT_PGI 0x00040000
#define GL_EDGE_FLAG 0x0B43
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30
#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C
#define GL_EIGHTH_BIT_ATI 0x00000020
#define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008
#define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29
#define GL_ELEMENT_ARRAY_APPLE 0x8A0C
#define GL_ELEMENT_ARRAY_ATI 0x8768
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33
#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E
#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
#define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F
#define GL_EMBOSS_CONSTANT_NV 0x855E
#define GL_EMBOSS_LIGHT_NV 0x855D
#define GL_EMBOSS_MAP_NV 0x855F
#define GL_EMISSION 0x1600
#define GL_ENABLE_BIT 0x00002000
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EVAL_2D_NV 0x86C0
#define GL_EVAL_BIT 0x00010000
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
#define GL_EXCLUSION_KHR 0x92A0
#define GL_EXCLUSION_NV 0x92A0
#define GL_EXCLUSIVE_EXT 0x8F11
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_EXPAND_NEGATE_NV 0x8539
#define GL_EXPAND_NORMAL_NV 0x8538
#define GL_EXTENSIONS 0x1F03
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
#define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2
#define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_LINEAR_NV 0x2400
#define GL_EYE_LINE_SGIS 0x81F6
#define GL_EYE_PLANE 0x2502
#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
#define GL_EYE_POINT_SGIS 0x81F4
#define GL_EYE_RADIAL_NV 0x855B
#define GL_E_TIMES_F_NV 0x8531
#define GL_FACTOR_MAX_AMD 0x901D
#define GL_FACTOR_MIN_AMD 0x901C
#define GL_FAILURE_NV 0x9030
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FEEDBACK 0x1C01
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_FENCE_APPLE 0x8A0B
#define GL_FENCE_CONDITION_NV 0x84F4
#define GL_FENCE_STATUS_NV 0x84F3
#define GL_FIELDS_NV 0x8E27
#define GL_FIELD_LOWER_NV 0x9023
#define GL_FIELD_UPPER_NV 0x9022
#define GL_FILE_NAME_NV 0x9074
#define GL_FILL 0x1B02
#define GL_FILL_RECTANGLE_NV 0x933C
#define GL_FILTER 0x829A
#define GL_FILTER4_SGIS 0x8146
#define GL_FIRST_TO_REST_NV 0x90AF
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_FIXED 0x140C
#define GL_FIXED_OES 0x140C
#define GL_FIXED_ONLY 0x891D
#define GL_FIXED_ONLY_ARB 0x891D
#define GL_FLAT 0x1D00
#define GL_FLOAT 0x1406
#define GL_FLOAT16_MAT2_AMD 0x91C5
#define GL_FLOAT16_MAT2x3_AMD 0x91C8
#define GL_FLOAT16_MAT2x4_AMD 0x91C9
#define GL_FLOAT16_MAT3_AMD 0x91C6
#define GL_FLOAT16_MAT3x2_AMD 0x91CA
#define GL_FLOAT16_MAT3x4_AMD 0x91CB
#define GL_FLOAT16_MAT4_AMD 0x91C7
#define GL_FLOAT16_MAT4x2_AMD 0x91CC
#define GL_FLOAT16_MAT4x3_AMD 0x91CD
#define GL_FLOAT16_NV 0x8FF8
#define GL_FLOAT16_VEC2_NV 0x8FF9
#define GL_FLOAT16_VEC3_NV 0x8FFA
#define GL_FLOAT16_VEC4_NV 0x8FFB
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_R16_NV 0x8884
#define GL_FLOAT_R32_NV 0x8885
#define GL_FLOAT_RG16_NV 0x8886
#define GL_FLOAT_RG32_NV 0x8887
#define GL_FLOAT_RGB16_NV 0x8888
#define GL_FLOAT_RGB32_NV 0x8889
#define GL_FLOAT_RGBA16_NV 0x888A
#define GL_FLOAT_RGBA32_NV 0x888B
#define GL_FLOAT_RGBA_MODE_NV 0x888E
#define GL_FLOAT_RGBA_NV 0x8883
#define GL_FLOAT_RGB_NV 0x8882
#define GL_FLOAT_RG_NV 0x8881
#define GL_FLOAT_R_NV 0x8880
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_FOG 0x0B60
#define GL_FOG_BIT 0x00000080
#define GL_FOG_COLOR 0x0B66
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
#define GL_FOG_COORDINATE_EXT 0x8451
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_DISTANCE_MODE_NV 0x855A
#define GL_FOG_END 0x0B64
#define GL_FOG_FUNC_POINTS_SGIS 0x812B
#define GL_FOG_FUNC_SGIS 0x812A
#define GL_FOG_HINT 0x0C54
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_MODE 0x0B65
#define GL_FOG_OFFSET_SGIX 0x8198
#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
#define GL_FOG_START 0x0B63
#define GL_FONT_ASCENDER_BIT_NV 0x00200000
#define GL_FONT_DESCENDER_BIT_NV 0x00400000
#define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368
#define GL_FONT_HAS_KERNING_BIT_NV 0x10000000
#define GL_FONT_HEIGHT_BIT_NV 0x00800000
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000
#define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369
#define GL_FONT_UNAVAILABLE_NV 0x936A
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
#define GL_FONT_UNINTELLIGIBLE_NV 0x936B
#define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000
#define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000
#define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000
#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRAGMENT_COLOR_EXT 0x834C
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401
#define GL_FRAGMENT_COVERAGE_COLOR_NV 0x92DE
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0x92DD
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#define GL_FRAGMENT_INPUT_NV 0x936D
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_LIGHT0_SGIX 0x840C
#define GL_FRAGMENT_LIGHT1_SGIX 0x840D
#define GL_FRAGMENT_LIGHT2_SGIX 0x840E
#define GL_FRAGMENT_LIGHT3_SGIX 0x840F
#define GL_FRAGMENT_LIGHT4_SGIX 0x8410
#define GL_FRAGMENT_LIGHT5_SGIX 0x8411
#define GL_FRAGMENT_LIGHT6_SGIX 0x8412
#define GL_FRAGMENT_LIGHT7_SGIX 0x8413
#define GL_FRAGMENT_LIGHTING_SGIX 0x8400
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
#define GL_FRAGMENT_MATERIAL_EXT 0x8349
#define GL_FRAGMENT_NORMAL_EXT 0x834A
#define GL_FRAGMENT_PROGRAM_ARB 0x8804
#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
#define GL_FRAGMENT_PROGRAM_NV 0x8870
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_ARB 0x8B30
#define GL_FRAGMENT_SHADER_ATI 0x8920
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_FRAMEBUFFER_FLIP_X_MESA 0x8BBC
#define GL_FRAMEBUFFER_FLIP_Y_MESA 0x8BBB
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
#define GL_FRAMEBUFFER_SWAP_XY_MESA 0x8BBD
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_FRAMEZOOM_FACTOR_SGIX 0x818C
#define GL_FRAMEZOOM_SGIX 0x818B
#define GL_FRAME_NV 0x8E26
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FRONT_FACE_COMMAND_NV 0x0012
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_FULL_RANGE_EXT 0x87E1
#define GL_FULL_STIPPLE_HINT_PGI 0x1A219
#define GL_FULL_SUPPORT 0x82B7
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_ADD_EXT 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_FUNC_SUBTRACT_EXT 0x800A
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
#define GL_GENERATE_MIPMAP_SGIS 0x8191
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002
#define GL_GEOMETRY_DEFORMATION_SGIX 0x8194
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEQUAL 0x0206
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
#define GL_GLOBAL_ALPHA_SUN 0x81D9
#define GL_GLYPH_HAS_KERNING_BIT_NV 0x100
#define GL_GLYPH_HEIGHT_BIT_NV 0x02
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#define GL_GLYPH_WIDTH_BIT_NV 0x01
#define GL_GPU_ADDRESS_NV 0x8F34
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_GREEN_BIAS 0x0D19
#define GL_GREEN_BITS 0x0D53
#define GL_GREEN_BIT_ATI 0x00000002
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_GREEN_MAX_CLAMP_INGR 0x8565
#define GL_GREEN_MIN_CLAMP_INGR 0x8561
#define GL_GREEN_NV 0x1904
#define GL_GREEN_SCALE 0x0D18
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#define GL_HALF_APPLE 0x140B
#define GL_HALF_BIAS_NEGATE_NV 0x853B
#define GL_HALF_BIAS_NORMAL_NV 0x853A
#define GL_HALF_BIT_ATI 0x00000008
#define GL_HALF_FLOAT 0x140B
#define GL_HALF_FLOAT_ARB 0x140B
#define GL_HALF_FLOAT_NV 0x140B
#define GL_HANDLE_TYPE_D3D11_IMAGE_EXT 0x958B
#define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C
#define GL_HANDLE_TYPE_D3D12_FENCE_EXT 0x9594
#define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A
#define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589
#define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0x9586
#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0x9587
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588
#define GL_HARDLIGHT_KHR 0x929B
#define GL_HARDLIGHT_NV 0x929B
#define GL_HARDMIX_NV 0x92A9
#define GL_HIGH_FLOAT 0x8DF2
#define GL_HIGH_INT 0x8DF5
#define GL_HILO16_NV 0x86F8
#define GL_HILO8_NV 0x885E
#define GL_HILO_NV 0x86F4
#define GL_HINT_BIT 0x00008000
#define GL_HISTOGRAM 0x8024
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
#define GL_HISTOGRAM_BLUE_SIZE 0x802A
#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
#define GL_HISTOGRAM_EXT 0x8024
#define GL_HISTOGRAM_FORMAT 0x8027
#define GL_HISTOGRAM_FORMAT_EXT 0x8027
#define GL_HISTOGRAM_GREEN_SIZE 0x8029
#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
#define GL_HISTOGRAM_RED_SIZE 0x8028
#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
#define GL_HISTOGRAM_SINK 0x802D
#define GL_HISTOGRAM_SINK_EXT 0x802D
#define GL_HISTOGRAM_WIDTH 0x8026
#define GL_HISTOGRAM_WIDTH_EXT 0x8026
#define GL_HI_BIAS_NV 0x8714
#define GL_HI_SCALE_NV 0x870E
#define GL_HORIZONTAL_LINE_TO_NV 0x06
#define GL_HSL_COLOR_KHR 0x92AF
#define GL_HSL_COLOR_NV 0x92AF
#define GL_HSL_HUE_KHR 0x92AD
#define GL_HSL_HUE_NV 0x92AD
#define GL_HSL_LUMINOSITY_KHR 0x92B0
#define GL_HSL_LUMINOSITY_NV 0x92B0
#define GL_HSL_SATURATION_KHR 0x92AE
#define GL_HSL_SATURATION_NV 0x92AE
#define GL_IDENTITY_NV 0x862A
#define GL_IGNORE_BORDER_HP 0x8150
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_1D_ARRAY_EXT 0x9052
#define GL_IMAGE_1D_EXT 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_2D_ARRAY_EXT 0x9053
#define GL_IMAGE_2D_EXT 0x904D
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_2D_RECT_EXT 0x904F
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_3D_EXT 0x904E
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_BUFFER_EXT 0x9051
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_CUBE_EXT 0x9050
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
#define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_MAG_FILTER_HP 0x815C
#define GL_IMAGE_MIN_FILTER_HP 0x815D
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_IMAGE_ROTATE_ANGLE_HP 0x8159
#define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B
#define GL_IMAGE_SCALE_X_HP 0x8155
#define GL_IMAGE_SCALE_Y_HP 0x8156
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_TRANSFORM_2D_HP 0x8161
#define GL_IMAGE_TRANSLATE_X_HP 0x8157
#define GL_IMAGE_TRANSLATE_Y_HP 0x8158
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
#define GL_INCLUSIVE_EXT 0x8F10
#define GL_INCR 0x1E02
#define GL_INCR_WRAP 0x8507
#define GL_INCR_WRAP_EXT 0x8507
#define GL_INDEX 0x8222
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E
#define GL_INDEX_ARRAY_LIST_IBM 103073
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INDEX_BITS 0x0D51
#define GL_INDEX_BIT_PGI 0x00080000
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_INDEX_MATERIAL_EXT 0x81B8
#define GL_INDEX_MATERIAL_FACE_EXT 0x81BA
#define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9
#define GL_INDEX_MODE 0x0C30
#define GL_INDEX_OFFSET 0x0D13
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_TEST_EXT 0x81B5
#define GL_INDEX_TEST_FUNC_EXT 0x81B6
#define GL_INDEX_TEST_REF_EXT 0x81B7
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
#define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181
#define GL_INT 0x1404
#define GL_INT16_NV 0x8FE4
#define GL_INT16_VEC2_NV 0x8FE5
#define GL_INT16_VEC3_NV 0x8FE6
#define GL_INT16_VEC4_NV 0x8FE7
#define GL_INT64_ARB 0x140E
#define GL_INT64_NV 0x140E
#define GL_INT64_VEC2_ARB 0x8FE9
#define GL_INT64_VEC2_NV 0x8FE9
#define GL_INT64_VEC3_ARB 0x8FEA
#define GL_INT64_VEC3_NV 0x8FEA
#define GL_INT64_VEC4_ARB 0x8FEB
#define GL_INT64_VEC4_NV 0x8FEB
#define GL_INT8_NV 0x8FE0
#define GL_INT8_VEC2_NV 0x8FE1
#define GL_INT8_VEC3_NV 0x8FE2
#define GL_INT8_VEC4_NV 0x8FE3
#define GL_INTENSITY 0x8049
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY12_EXT 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY16F_ARB 0x881D
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_INTENSITY16_EXT 0x804D
#define GL_INTENSITY16_SNORM 0x901B
#define GL_INTENSITY32F_ARB 0x8817
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY4_EXT 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_INTENSITY8_EXT 0x804B
#define GL_INTENSITY8_SNORM 0x9017
#define GL_INTENSITY_EXT 0x8049
#define GL_INTENSITY_FLOAT16_APPLE 0x881D
#define GL_INTENSITY_FLOAT16_ATI 0x881D
#define GL_INTENSITY_FLOAT32_APPLE 0x8817
#define GL_INTENSITY_FLOAT32_ATI 0x8817
#define GL_INTENSITY_SNORM 0x9013
#define GL_INTERLACE_OML 0x8980
#define GL_INTERLACE_READ_INGR 0x8568
#define GL_INTERLACE_READ_OML 0x8981
#define GL_INTERLACE_SGIX 0x8094
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERPOLATE 0x8575
#define GL_INTERPOLATE_ARB 0x8575
#define GL_INTERPOLATE_EXT 0x8575
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
#define GL_INT_IMAGE_1D_EXT 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
#define GL_INT_IMAGE_2D_EXT 0x9058
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_3D_EXT 0x9059
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_CUBE_EXT 0x905B
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_BUFFER_AMD 0x9002
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC4_ARB 0x8B55
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVARIANT_DATATYPE_EXT 0x87EB
#define GL_INVARIANT_EXT 0x87C2
#define GL_INVARIANT_VALUE_EXT 0x87EA
#define GL_INVERSE_NV 0x862B
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_INVERT 0x150A
#define GL_INVERTED_SCREEN_W_REND 0x8491
#define GL_INVERT_OVG_NV 0x92B4
#define GL_INVERT_RGB_NV 0x92A3
#define GL_IR_INSTRUMENT1_SGIX 0x817F
#define GL_ISOLINES 0x8E7A
#define GL_IS_PER_PATCH 0x92E7
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ITALIC_BIT_NV 0x02
#define GL_IUI_N3F_V2F_EXT 0x81AF
#define GL_IUI_N3F_V3F_EXT 0x81B0
#define GL_IUI_V2F_EXT 0x81AD
#define GL_IUI_V3F_EXT 0x81AE
#define GL_KEEP 0x1E00
#define GL_LARGE_CCW_ARC_TO_NV 0x16
#define GL_LARGE_CW_ARC_TO_NV 0x18
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027
#define GL_LAYER_NV 0x8DAA
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LAYOUT_COLOR_ATTACHMENT_EXT 0x958E
#define GL_LAYOUT_DEFAULT_INTEL 0
#define GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT 0x9531
#define GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT 0x9530
#define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F
#define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590
#define GL_LAYOUT_GENERAL_EXT 0x958D
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2
#define GL_LAYOUT_LINEAR_INTEL 1
#define GL_LAYOUT_SHADER_READ_ONLY_EXT 0x9591
#define GL_LAYOUT_TRANSFER_DST_EXT 0x9593
#define GL_LAYOUT_TRANSFER_SRC_EXT 0x9592
#define GL_LEFT 0x0406
#define GL_LEQUAL 0x0203
#define GL_LERP_ATI 0x8969
#define GL_LESS 0x0201
#define GL_LGPU_SEPARATE_STORAGE_BIT_NVX 0x0800
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_LIGHTEN_KHR 0x9298
#define GL_LIGHTEN_NV 0x9298
#define GL_LIGHTING 0x0B50
#define GL_LIGHTING_BIT 0x00000040
#define GL_LIGHT_ENV_MODE_SGIX 0x8407
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LINE 0x1B01
#define GL_LINEAR 0x2601
#define GL_LINEARBURN_NV 0x92A5
#define GL_LINEARDODGE_NV 0x92A4
#define GL_LINEARLIGHT_NV 0x92A7
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F
#define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098
#define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099
#define GL_LINEAR_DETAIL_SGIS 0x8097
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE
#define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF
#define GL_LINEAR_SHARPEN_SGIS 0x80AD
#define GL_LINEAR_TILING_EXT 0x9585
#define GL_LINES 0x0001
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINE_BIT 0x00000004
#define GL_LINE_LOOP 0x0002
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LINE_STRIP 0x0003
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_LINE_TOKEN 0x0702
#define GL_LINE_TO_NV 0x04
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_COMMAND_NV 0x000D
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINK_STATUS 0x8B82
#define GL_LIST_BASE 0x0B32
#define GL_LIST_BIT 0x00020000
#define GL_LIST_INDEX 0x0B33
#define GL_LIST_MODE 0x0B30
#define GL_LIST_PRIORITY_SGIX 0x8182
#define GL_LOAD 0x0101
#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
#define GL_LOCAL_CONSTANT_EXT 0x87C3
#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
#define GL_LOCAL_EXT 0x87C4
#define GL_LOCATION 0x930E
#define GL_LOCATION_COMPONENT 0x934A
#define GL_LOCATION_INDEX 0x930F
#define GL_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GL_LOWER_LEFT 0x8CA1
#define GL_LOW_FLOAT 0x8DF0
#define GL_LOW_INT 0x8DF3
#define GL_LO_BIAS_NV 0x8715
#define GL_LO_SCALE_NV 0x870F
#define GL_LUID_SIZE_EXT 8
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
#define GL_LUMINANCE12_EXT 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16F_ARB 0x881E
#define GL_LUMINANCE16F_EXT 0x881E
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
#define GL_LUMINANCE16_ALPHA16_SNORM 0x901A
#define GL_LUMINANCE16_EXT 0x8042
#define GL_LUMINANCE16_SNORM 0x9019
#define GL_LUMINANCE32F_ARB 0x8818
#define GL_LUMINANCE32F_EXT 0x8818
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
#define GL_LUMINANCE4_EXT 0x803F
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
#define GL_LUMINANCE8_ALPHA8_SNORM 0x9016
#define GL_LUMINANCE8_EXT 0x8040
#define GL_LUMINANCE8_SNORM 0x9015
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
#define GL_LUMINANCE_ALPHA16F_EXT 0x881F
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
#define GL_LUMINANCE_ALPHA32F_EXT 0x8819
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_LUMINANCE_ALPHA_SNORM 0x9012
#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
#define GL_LUMINANCE_FLOAT16_ATI 0x881E
#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
#define GL_LUMINANCE_FLOAT32_ATI 0x8818
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_LUMINANCE_SNORM 0x9011
#define GL_MAD_ATI 0x8968
#define GL_MAGNITUDE_BIAS_NV 0x8718
#define GL_MAGNITUDE_SCALE_NV 0x8712
#define GL_MAJOR_VERSION 0x821B
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_MAP1_BINORMAL_EXT 0x8446
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TANGENT_EXT 0x8444
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP2_BINORMAL_EXT 0x8447
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TANGENT_EXT 0x8445
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_STENCIL 0x0D11
#define GL_MAP_TESSELLATION_NV 0x86C2
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX7_NV 0x8637
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX_EXT 0x87C0
#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
#define GL_MATRIX_MODE 0x0BA0
#define GL_MATRIX_PALETTE_ARB 0x8840
#define GL_MATRIX_STRIDE 0x92FF
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
#define GL_MAT_EMISSION_BIT_PGI 0x00800000
#define GL_MAT_SHININESS_BIT_PGI 0x02000000
#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
#define GL_MAX 0x8008
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138
#define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_COARSE_FRAGMENT_SAMPLES_NV 0x955F
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD 0x91B3
#define GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD 0x91B4
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV 0x8E67
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV 0x8E6F
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
#define GL_MAX_CONVOLUTION_WIDTH 0x801A
#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0
#define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD 0x91B5
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_DETACHED_BUFFERS_NV 0x95AD
#define GL_MAX_DETACHED_TEXTURES_NV 0x95AC
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_MAX_DRAW_MESH_TASKS_COUNT_NV 0x953D
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_EXT 0x8008
#define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
#define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D
#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_IMAGE_UNITS_EXT 0x8F38
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_LGPU_GPUS_NVX 0x92BA
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
#define GL_MAX_MESH_ATOMIC_COUNTERS_NV 0x8E65
#define GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV 0x8E64
#define GL_MAX_MESH_IMAGE_UNIFORMS_NV 0x8E62
#define GL_MAX_MESH_OUTPUT_PRIMITIVES_NV 0x9539
#define GL_MAX_MESH_OUTPUT_VERTICES_NV 0x9538
#define GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV 0x8E66
#define GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV 0x8E61
#define GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV 0x9536
#define GL_MAX_MESH_UNIFORM_BLOCKS_NV 0x8E60
#define GL_MAX_MESH_UNIFORM_COMPONENTS_NV 0x8E63
#define GL_MAX_MESH_VIEWS_NV 0x9557
#define GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV 0x95A2
#define GL_MAX_MESH_WORK_GROUP_SIZE_NV 0x953B
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_RASTER_SAMPLES_EXT 0x9329
#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
#define GL_MAX_SHADER_COMPILER_THREADS_KHR 0x91B0
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHININESS_NV 0x8504
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198
#define GL_MAX_SPOT_EXPONENT_NV 0x8505
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_MAX_TASK_ATOMIC_COUNTERS_NV 0x8E6D
#define GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV 0x8E6C
#define GL_MAX_TASK_IMAGE_UNIFORMS_NV 0x8E6A
#define GL_MAX_TASK_OUTPUT_COUNT_NV 0x953A
#define GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV 0x8E6E
#define GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV 0x8E69
#define GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV 0x9537
#define GL_MAX_TASK_UNIFORM_BLOCKS_NV 0x8E68
#define GL_MAX_TASK_UNIFORM_COMPONENTS_NV 0x8E6B
#define GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV 0x95A3
#define GL_MAX_TASK_WORK_GROUP_SIZE_NV 0x953C
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_COORDS_NV 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV 0x95B6
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
#define GL_MAX_VERTEX_HINT_PGI 0x1A22D
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MAX_VIEWS_OVR 0x9631
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_WINDOW_RECTANGLES_EXT 0x8F14
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_MEDIUM_INT 0x8DF4
#define GL_MEMORY_ATTACHABLE_ALIGNMENT_NV 0x95A6
#define GL_MEMORY_ATTACHABLE_NV 0x95A8
#define GL_MEMORY_ATTACHABLE_SIZE_NV 0x95A7
#define GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV 0x9543
#define GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV 0x92DF
#define GL_MESH_OUTPUT_TYPE_NV 0x957B
#define GL_MESH_PRIMITIVES_OUT_NV 0x957A
#define GL_MESH_SHADER_BIT_NV 0x00000040
#define GL_MESH_SHADER_NV 0x9559
#define GL_MESH_SUBROUTINE_NV 0x957C
#define GL_MESH_SUBROUTINE_UNIFORM_NV 0x957E
#define GL_MESH_VERTICES_OUT_NV 0x9579
#define GL_MESH_WORK_GROUP_SIZE_NV 0x953E
#define GL_MIN 0x8007
#define GL_MINMAX 0x802E
#define GL_MINMAX_EXT 0x802E
#define GL_MINMAX_FORMAT 0x802F
#define GL_MINMAX_FORMAT_EXT 0x802F
#define GL_MINMAX_SINK 0x8030
#define GL_MINMAX_SINK_EXT 0x8030
#define GL_MINOR_VERSION 0x821C
#define GL_MINUS_CLAMPED_NV 0x92B3
#define GL_MINUS_NV 0x929F
#define GL_MIN_EXT 0x8007
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
#define GL_MIN_LOD_WARNING_AMD 0x919C
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
#define GL_MIN_SPARSE_LEVEL_AMD 0x919B
#define GL_MIPMAP 0x8293
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MIRRORED_REPEAT_ARB 0x8370
#define GL_MIRRORED_REPEAT_IBM 0x8370
#define GL_MIRROR_CLAMP_ATI 0x8742
#define GL_MIRROR_CLAMP_EXT 0x8742
#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
#define GL_MITER_REVERT_NV 0x90A7
#define GL_MITER_TRUNCATE_NV 0x90A8
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW0_ARB 0x1700
#define GL_MODELVIEW0_EXT 0x1700
#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
#define GL_MODELVIEW10_ARB 0x872A
#define GL_MODELVIEW11_ARB 0x872B
#define GL_MODELVIEW12_ARB 0x872C
#define GL_MODELVIEW13_ARB 0x872D
#define GL_MODELVIEW14_ARB 0x872E
#define GL_MODELVIEW15_ARB 0x872F
#define GL_MODELVIEW16_ARB 0x8730
#define GL_MODELVIEW17_ARB 0x8731
#define GL_MODELVIEW18_ARB 0x8732
#define GL_MODELVIEW19_ARB 0x8733
#define GL_MODELVIEW1_ARB 0x850A
#define GL_MODELVIEW1_EXT 0x850A
#define GL_MODELVIEW1_MATRIX_EXT 0x8506
#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
#define GL_MODELVIEW20_ARB 0x8734
#define GL_MODELVIEW21_ARB 0x8735
#define GL_MODELVIEW22_ARB 0x8736
#define GL_MODELVIEW23_ARB 0x8737
#define GL_MODELVIEW24_ARB 0x8738
#define GL_MODELVIEW25_ARB 0x8739
#define GL_MODELVIEW26_ARB 0x873A
#define GL_MODELVIEW27_ARB 0x873B
#define GL_MODELVIEW28_ARB 0x873C
#define GL_MODELVIEW29_ARB 0x873D
#define GL_MODELVIEW2_ARB 0x8722
#define GL_MODELVIEW30_ARB 0x873E
#define GL_MODELVIEW31_ARB 0x873F
#define GL_MODELVIEW3_ARB 0x8723
#define GL_MODELVIEW4_ARB 0x8724
#define GL_MODELVIEW5_ARB 0x8725
#define GL_MODELVIEW6_ARB 0x8726
#define GL_MODELVIEW7_ARB 0x8727
#define GL_MODELVIEW8_ARB 0x8728
#define GL_MODELVIEW9_ARB 0x8729
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_MODULATE 0x2100
#define GL_MODULATE_ADD_ATI 0x8744
#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
#define GL_MODULATE_SUBTRACT_ATI 0x8746
#define GL_MOVE_TO_CONTINUES_NV 0x90B6
#define GL_MOVE_TO_NV 0x02
#define GL_MOVE_TO_RESETS_NV 0x90B5
#define GL_MOV_ATI 0x8961
#define GL_MULT 0x0103
#define GL_MULTICAST_GPUS_NV 0x92BA
#define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549
#define GL_MULTIPLY_KHR 0x9294
#define GL_MULTIPLY_NV 0x9294
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLES_NV 0x9371
#define GL_MULTISAMPLE_3DFX 0x86B2
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#define GL_MULTISAMPLE_BIT_EXT 0x20000000
#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
#define GL_MULTISAMPLE_EXT 0x809D
#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_MULTISAMPLE_SGIS 0x809D
#define GL_MUL_ATI 0x8964
#define GL_MVP_MATRIX_EXT 0x87E3
#define GL_N3F_V3F 0x2A25
#define GL_NAMED_STRING_LENGTH_ARB 0x8DE9
#define GL_NAMED_STRING_TYPE_ARB 0x8DEA
#define GL_NAME_LENGTH 0x92F9
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_NAND 0x150E
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
#define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204
#define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202
#define GL_NEAREST 0x2600
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEGATE_BIT_ATI 0x00000004
#define GL_NEGATIVE_ONE_EXT 0x87DF
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_NEGATIVE_W_EXT 0x87DC
#define GL_NEGATIVE_X_EXT 0x87D9
#define GL_NEGATIVE_Y_EXT 0x87DA
#define GL_NEGATIVE_Z_EXT 0x87DB
#define GL_NEVER 0x0200
#define GL_NEXT_BUFFER_NV -2
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOOP 0x1505
#define GL_NOP_COMMAND_NV 0x0001
#define GL_NOR 0x1508
#define GL_NORMALIZE 0x0BA1
#define GL_NORMALIZED_RANGE_EXT 0x87E0
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C
#define GL_NORMAL_ARRAY_LIST_IBM 103071
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NORMAL_BIT_PGI 0x08000000
#define GL_NORMAL_MAP 0x8511
#define GL_NORMAL_MAP_ARB 0x8511
#define GL_NORMAL_MAP_EXT 0x8511
#define GL_NORMAL_MAP_NV 0x8511
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_NUM_DEVICE_UUIDS_EXT 0x9596
#define GL_NUM_EXTENSIONS 0x821D
#define GL_NUM_FILL_STREAMS_NV 0x8E29
#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
#define GL_NUM_PASSES_ATI 0x8970
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_NUM_SPARSE_LEVELS_ARB 0x91AA
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B6
#define GL_NUM_TILING_TYPES_EXT 0x9582
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8
#define GL_NUM_WINDOW_RECTANGLES_EXT 0x8F15
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_LINEAR_NV 0x2401
#define GL_OBJECT_LINE_SGIS 0x81F7
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_PLANE 0x2501
#define GL_OBJECT_POINT_SGIS 0x81F5
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_OBJECT_TYPE 0x9112
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F
#define GL_OCCLUSION_TEST_HP 0x8165
#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
#define GL_OFFSET 0x92FC
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
#define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
#define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
#define GL_ONE 1
#define GL_ONE_EXT 0x87DE
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_ALPHA_ARB 0x8598
#define GL_OPERAND0_ALPHA_EXT 0x8598
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND0_RGB_ARB 0x8590
#define GL_OPERAND0_RGB_EXT 0x8590
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_ALPHA_ARB 0x8599
#define GL_OPERAND1_ALPHA_EXT 0x8599
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND1_RGB_ARB 0x8591
#define GL_OPERAND1_RGB_EXT 0x8591
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_ALPHA_ARB 0x859A
#define GL_OPERAND2_ALPHA_EXT 0x859A
#define GL_OPERAND2_RGB 0x8592
#define GL_OPERAND2_RGB_ARB 0x8592
#define GL_OPERAND2_RGB_EXT 0x8592
#define GL_OPERAND3_ALPHA_NV 0x859B
#define GL_OPERAND3_RGB_NV 0x8593
#define GL_OPTIMAL_TILING_EXT 0x9584
#define GL_OP_ADD_EXT 0x8787
#define GL_OP_CLAMP_EXT 0x878E
#define GL_OP_CROSS_PRODUCT_EXT 0x8797
#define GL_OP_DOT3_EXT 0x8784
#define GL_OP_DOT4_EXT 0x8785
#define GL_OP_EXP_BASE_2_EXT 0x8791
#define GL_OP_FLOOR_EXT 0x878F
#define GL_OP_FRAC_EXT 0x8789
#define GL_OP_INDEX_EXT 0x8782
#define GL_OP_LOG_BASE_2_EXT 0x8792
#define GL_OP_MADD_EXT 0x8788
#define GL_OP_MAX_EXT 0x878A
#define GL_OP_MIN_EXT 0x878B
#define GL_OP_MOV_EXT 0x8799
#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
#define GL_OP_MUL_EXT 0x8786
#define GL_OP_NEGATE_EXT 0x8783
#define GL_OP_POWER_EXT 0x8793
#define GL_OP_RECIP_EXT 0x8794
#define GL_OP_RECIP_SQRT_EXT 0x8795
#define GL_OP_ROUND_EXT 0x8790
#define GL_OP_SET_GE_EXT 0x878C
#define GL_OP_SET_LT_EXT 0x878D
#define GL_OP_SUB_EXT 0x8796
#define GL_OR 0x1507
#define GL_ORDER 0x0A01
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUTPUT_COLOR0_EXT 0x879B
#define GL_OUTPUT_COLOR1_EXT 0x879C
#define GL_OUTPUT_FOG_EXT 0x87BD
#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
#define GL_OUTPUT_VERTEX_EXT 0x879A
#define GL_OUT_OF_MEMORY 0x0505
#define GL_OVERLAY_KHR 0x9296
#define GL_OVERLAY_NV 0x9296
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_CMYK_HINT_EXT 0x800E
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_IMAGE_DEPTH_SGIS 0x8131
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_PACK_INVERT_MESA 0x8758
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_RESAMPLE_OML 0x8984
#define GL_PACK_RESAMPLE_SGIX 0x842E
#define GL_PACK_ROW_BYTES_APPLE 0x8A15
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_VOLUMES_SGIS 0x8130
#define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
#define GL_PALETTE4_RGB5_A1_OES 0x8B94
#define GL_PALETTE4_RGB8_OES 0x8B90
#define GL_PALETTE4_RGBA4_OES 0x8B93
#define GL_PALETTE4_RGBA8_OES 0x8B91
#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
#define GL_PALETTE8_RGB5_A1_OES 0x8B99
#define GL_PALETTE8_RGB8_OES 0x8B95
#define GL_PALETTE8_RGBA4_OES 0x8B98
#define GL_PALETTE8_RGBA8_OES 0x8B96
#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_ARB 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
#define GL_PARTIAL_SUCCESS_NV 0x902E
#define GL_PASS_THROUGH_NV 0x86E6
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_PATCHES 0x000E
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATH_CLIENT_LENGTH_NV 0x907F
#define GL_PATH_COMMAND_COUNT_NV 0x909D
#define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#define GL_PATH_COORD_COUNT_NV 0x909E
#define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#define GL_PATH_DASH_CAPS_NV 0x907B
#define GL_PATH_DASH_OFFSET_NV 0x907E
#define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#define GL_PATH_END_CAPS_NV 0x9076
#define GL_PATH_ERROR_POSITION_NV 0x90AB
#define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#define GL_PATH_FILL_COVER_MODE_NV 0x9082
#define GL_PATH_FILL_MASK_NV 0x9081
#define GL_PATH_FILL_MODE_NV 0x9080
#define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#define GL_PATH_FORMAT_PS_NV 0x9071
#define GL_PATH_FORMAT_SVG_NV 0x9070
#define GL_PATH_GEN_COEFF_NV 0x90B1
#define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#define GL_PATH_GEN_MODE_NV 0x90B0
#define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#define GL_PATH_INITIAL_END_CAP_NV 0x9077
#define GL_PATH_JOIN_STYLE_NV 0x9079
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
#define GL_PATH_MITER_LIMIT_NV 0x907A
#define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6
#define GL_PATH_MODELVIEW_NV 0x1700
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3
#define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7
#define GL_PATH_PROJECTION_NV 0x1701
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#define GL_PATH_STENCIL_FUNC_NV 0x90B7
#define GL_PATH_STENCIL_REF_NV 0x90B8
#define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#define GL_PATH_STROKE_MASK_NV 0x9084
#define GL_PATH_STROKE_WIDTH_NV 0x9075
#define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
#define GL_PERCENTAGE_AMD 0x8BC3
#define GL_PERFMON_RESULT_AMD 0x8BC6
#define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4
#define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5
#define GL_PERFORMANCE_MONITOR_AMD 0x9152
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
#define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
#define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9
#define GL_PERFQUERY_FLUSH_INTEL 0x83FA
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
#define GL_PERFQUERY_WAIT_INTEL 0x83FB
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_PERTURB_EXT 0x85AE
#define GL_PER_GPU_STORAGE_BIT_NV 0x0800
#define GL_PER_GPU_STORAGE_NV 0x9548
#define GL_PER_STAGE_CONSTANTS_NV 0x8535
#define GL_PHONG_HINT_WIN 0x80EB
#define GL_PHONG_WIN 0x80EA
#define GL_PINLIGHT_NV 0x92A8
#define GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD 0x91AE
#define GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD 0x91AF
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
#define GL_PIXEL_COUNTER_BITS_NV 0x8864
#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
#define GL_PIXEL_COUNT_NV 0x8866
#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
#define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
#define GL_PIXEL_MAG_FILTER_EXT 0x8331
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MIN_FILTER_EXT 0x8332
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
#define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3
#define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4
#define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2
#define GL_PIXEL_TEXTURE_SGIS 0x8353
#define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
#define GL_PIXEL_TEX_GEN_SGIX 0x8139
#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142
#define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141
#define GL_PIXEL_TILE_WIDTH_SGIX 0x8140
#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
#define GL_PLUS_CLAMPED_NV 0x92B1
#define GL_PLUS_DARKER_NV 0x9292
#define GL_PLUS_NV 0x9291
#define GL_PN_TRIANGLES_ATI 0x87F0
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
#define GL_POINT 0x1B00
#define GL_POINTS 0x0000
#define GL_POINT_BIT 0x00000002
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_POINT_SPRITE 0x8861
#define GL_POINT_SPRITE_ARB 0x8861
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_POINT_SPRITE_NV 0x8861
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#define GL_POINT_TOKEN 0x0701
#define GL_POLYGON 0x0009
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
#define GL_POLYGON_OFFSET_COMMAND_NV 0x000E
#define GL_POLYGON_OFFSET_EXT 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_POLYGON_TOKEN 0x0703
#define GL_POSITION 0x1203
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8
#define GL_PRESENT_DURATION_NV 0x8E2B
#define GL_PRESENT_TIME_NV 0x8E2A
#define GL_PRESERVE_ATI 0x8762
#define GL_PREVIOUS 0x8578
#define GL_PREVIOUS_ARB 0x8578
#define GL_PREVIOUS_EXT 0x8578
#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
#define GL_PRIMARY_COLOR 0x8577
#define GL_PRIMARY_COLOR_ARB 0x8577
#define GL_PRIMARY_COLOR_EXT 0x8577
#define GL_PRIMARY_COLOR_NV 0x852C
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF
#define GL_PRIMITIVE_BOUNDING_BOX_ARB 0x92BE
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
#define GL_PRIMITIVE_RESTART_NV 0x8558
#define GL_PROGRAM 0x82E2
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_FORMAT_MESA 0x875F
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_ERROR_STRING_NV 0x8874
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_PROGRAM_OBJECT_EXT 0x8B40
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_PROJECTION 0x1701
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_PROTECTED_MEMORY_OBJECT_EXT 0x959B
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_PROXY_HISTOGRAM_EXT 0x8025
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_PROXY_TEXTURE_1D_EXT 0x8063
#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_PROXY_TEXTURE_2D_EXT 0x8064
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_PROXY_TEXTURE_4D_SGIS 0x8135
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
#define GL_PURGEABLE_APPLE 0x8A1D
#define GL_PURGED_CONTEXT_RESET_NV 0x92BB
#define GL_Q 0x2003
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_QUADRATIC_CURVE_TO_NV 0x0A
#define GL_QUADS 0x0007
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_QUAD_ALPHA4_SGIS 0x811E
#define GL_QUAD_ALPHA8_SGIS 0x811F
#define GL_QUAD_INTENSITY4_SGIS 0x8122
#define GL_QUAD_INTENSITY8_SGIS 0x8123
#define GL_QUAD_LUMINANCE4_SGIS 0x8120
#define GL_QUAD_LUMINANCE8_SGIS 0x8121
#define GL_QUAD_MESH_SUN 0x8614
#define GL_QUAD_STRIP 0x0008
#define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125
#define GL_QUARTER_BIT_ATI 0x00000010
#define GL_QUERY 0x82E3
#define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_AMD 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_BUFFER_BINDING_AMD 0x9193
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_OBJECT_AMD 0x9153
#define GL_QUERY_OBJECT_EXT 0x9153
#define GL_QUERY_RESOURCE_BUFFEROBJECT_NV 0x9547
#define GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV 0x9542
#define GL_QUERY_RESOURCE_RENDERBUFFER_NV 0x9546
#define GL_QUERY_RESOURCE_SYS_RESERVED_NV 0x9544
#define GL_QUERY_RESOURCE_TEXTURE_NV 0x9545
#define GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV 0x9540
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004
#define GL_QUERY_TARGET 0x82EA
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_R 0x2002
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R11F_G11F_B10F_EXT 0x8C3A
#define GL_R16 0x822A
#define GL_R16F 0x822D
#define GL_R16F_EXT 0x822D
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R16_SNORM 0x8F98
#define GL_R1UI_C3F_V3F_SUN 0x85C6
#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
#define GL_R1UI_C4UB_V3F_SUN 0x85C5
#define GL_R1UI_N3F_V3F_SUN 0x85C7
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
#define GL_R1UI_T2F_V3F_SUN 0x85C9
#define GL_R1UI_V3F_SUN 0x85C4
#define GL_R32F 0x822E
#define GL_R32F_EXT 0x822E
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_R3_G3_B2 0x2A10
#define GL_R8 0x8229
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R8_EXT 0x8229
#define GL_R8_SNORM 0x8F94
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_RASTER_MULTISAMPLE_EXT 0x9327
#define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
#define GL_RASTER_SAMPLES_EXT 0x9328
#define GL_READ_BUFFER 0x0C02
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_READ_ONLY 0x88B8
#define GL_READ_ONLY_ARB 0x88B8
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
#define GL_READ_WRITE 0x88BA
#define GL_READ_WRITE_ARB 0x88BA
#define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE
#define GL_RECT_NV 0xF6
#define GL_RED 0x1903
#define GL_REDUCE 0x8016
#define GL_REDUCE_EXT 0x8016
#define GL_RED_BIAS 0x0D15
#define GL_RED_BITS 0x0D52
#define GL_RED_BIT_ATI 0x00000001
#define GL_RED_INTEGER 0x8D94
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_RED_MAX_CLAMP_INGR 0x8564
#define GL_RED_MIN_CLAMP_INGR 0x8560
#define GL_RED_NV 0x1903
#define GL_RED_SCALE 0x0D14
#define GL_RED_SNORM 0x8F90
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_MESH_SHADER_NV 0x95A0
#define GL_REFERENCED_BY_TASK_SHADER_NV 0x95A1
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E
#define GL_REFERENCE_PLANE_SGIX 0x817D
#define GL_REFLECTION_MAP 0x8512
#define GL_REFLECTION_MAP_ARB 0x8512
#define GL_REFLECTION_MAP_EXT 0x8512
#define GL_REFLECTION_MAP_NV 0x8512
#define GL_REGISTER_COMBINERS_NV 0x8522
#define GL_REG_0_ATI 0x8921
#define GL_REG_10_ATI 0x892B
#define GL_REG_11_ATI 0x892C
#define GL_REG_12_ATI 0x892D
#define GL_REG_13_ATI 0x892E
#define GL_REG_14_ATI 0x892F
#define GL_REG_15_ATI 0x8930
#define GL_REG_16_ATI 0x8931
#define GL_REG_17_ATI 0x8932
#define GL_REG_18_ATI 0x8933
#define GL_REG_19_ATI 0x8934
#define GL_REG_1_ATI 0x8922
#define GL_REG_20_ATI 0x8935
#define GL_REG_21_ATI 0x8936
#define GL_REG_22_ATI 0x8937
#define GL_REG_23_ATI 0x8938
#define GL_REG_24_ATI 0x8939
#define GL_REG_25_ATI 0x893A
#define GL_REG_26_ATI 0x893B
#define GL_REG_27_ATI 0x893C
#define GL_REG_28_ATI 0x893D
#define GL_REG_29_ATI 0x893E
#define GL_REG_2_ATI 0x8923
#define GL_REG_30_ATI 0x893F
#define GL_REG_31_ATI 0x8940
#define GL_REG_3_ATI 0x8924
#define GL_REG_4_ATI 0x8925
#define GL_REG_5_ATI 0x8926
#define GL_REG_6_ATI 0x8927
#define GL_REG_7_ATI 0x8928
#define GL_REG_8_ATI 0x8929
#define GL_REG_9_ATI 0x892A
#define GL_RELATIVE_ARC_TO_NV 0xFF
#define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B
#define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#define GL_RELATIVE_LINE_TO_NV 0x05
#define GL_RELATIVE_MOVE_TO_NV 0x03
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#define GL_RELATIVE_RECT_NV 0xF7
#define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB
#define GL_RELATIVE_ROUNDED_RECT4_NV 0xED
#define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF
#define GL_RELATIVE_ROUNDED_RECT_NV 0xE9
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#define GL_RELEASED_APPLE 0x8A19
#define GL_RENDER 0x1C00
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_RENDERBUFFER_STORAGE_SAMPLES_AMD 0x91B2
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERER 0x1F01
#define GL_RENDER_GPU_MASK_NV 0x9558
#define GL_RENDER_MODE 0x0C40
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
#define GL_REPLACEMENT_CODE_SUN 0x81D8
#define GL_REPLACE_EXT 0x8062
#define GL_REPLACE_MIDDLE_SUN 0x0002
#define GL_REPLACE_OLDEST_SUN 0x0003
#define GL_REPLACE_VALUE_AMD 0x874B
#define GL_REPLICATE_BORDER 0x8153
#define GL_REPLICATE_BORDER_HP 0x8153
#define GL_REPRESENTATIVE_FRAGMENT_TEST_NV 0x937F
#define GL_RESAMPLE_AVERAGE_OML 0x8988
#define GL_RESAMPLE_DECIMATE_OML 0x8989
#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
#define GL_RESAMPLE_REPLICATE_OML 0x8986
#define GL_RESAMPLE_REPLICATE_SGIX 0x8433
#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
#define GL_RESCALE_NORMAL 0x803A
#define GL_RESCALE_NORMAL_EXT 0x803A
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_RESTART_PATH_NV 0xF0
#define GL_RESTART_SUN 0x0001
#define GL_RETAINED_APPLE 0x8A1B
#define GL_RETURN 0x0102
#define GL_RG 0x8227
#define GL_RG16 0x822C
#define GL_RG16F 0x822F
#define GL_RG16F_EXT 0x822F
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG16_SNORM 0x8F99
#define GL_RG32F 0x8230
#define GL_RG32F_EXT 0x8230
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_RG8 0x822B
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG8_EXT 0x822B
#define GL_RG8_SNORM 0x8F95
#define GL_RGB 0x1907
#define GL_RGB10 0x8052
#define GL_RGB10_A2 0x8059
#define GL_RGB10_A2UI 0x906F
#define GL_RGB10_A2_EXT 0x8059
#define GL_RGB10_EXT 0x8052
#define GL_RGB12 0x8053
#define GL_RGB12_EXT 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16F 0x881B
#define GL_RGB16F_ARB 0x881B
#define GL_RGB16F_EXT 0x881B
#define GL_RGB16I 0x8D89
#define GL_RGB16I_EXT 0x8D89
#define GL_RGB16UI 0x8D77
#define GL_RGB16UI_EXT 0x8D77
#define GL_RGB16_EXT 0x8054
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB2_EXT 0x804E
#define GL_RGB32F 0x8815
#define GL_RGB32F_ARB 0x8815
#define GL_RGB32F_EXT 0x8815
#define GL_RGB32I 0x8D83
#define GL_RGB32I_EXT 0x8D83
#define GL_RGB32UI 0x8D71
#define GL_RGB32UI_EXT 0x8D71
#define GL_RGB4 0x804F
#define GL_RGB4_EXT 0x804F
#define GL_RGB4_S3TC 0x83A1
#define GL_RGB5 0x8050
#define GL_RGB565 0x8D62
#define GL_RGB5_A1 0x8057
#define GL_RGB5_A1_EXT 0x8057
#define GL_RGB5_EXT 0x8050
#define GL_RGB8 0x8051
#define GL_RGB8I 0x8D8F
#define GL_RGB8I_EXT 0x8D8F
#define GL_RGB8UI 0x8D7D
#define GL_RGB8UI_EXT 0x8D7D
#define GL_RGB8_EXT 0x8051
#define GL_RGB8_SNORM 0x8F96
#define GL_RGB9_E5 0x8C3D
#define GL_RGB9_E5_EXT 0x8C3D
#define GL_RGBA 0x1908
#define GL_RGBA12 0x805A
#define GL_RGBA12_EXT 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16F 0x881A
#define GL_RGBA16F_ARB 0x881A
#define GL_RGBA16F_EXT 0x881A
#define GL_RGBA16I 0x8D88
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGBA16UI 0x8D76
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGBA16_EXT 0x805B
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA2 0x8055
#define GL_RGBA2_EXT 0x8055
#define GL_RGBA32F 0x8814
#define GL_RGBA32F_ARB 0x8814
#define GL_RGBA32F_EXT 0x8814
#define GL_RGBA32I 0x8D82
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGBA32UI 0x8D70
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGBA4 0x8056
#define GL_RGBA4_DXT5_S3TC 0x83A5
#define GL_RGBA4_EXT 0x8056
#define GL_RGBA4_S3TC 0x83A3
#define GL_RGBA8 0x8058
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGBA8_EXT 0x8058
#define GL_RGBA8_SNORM 0x8F97
#define GL_RGBA_DXT5_S3TC 0x83A4
#define GL_RGBA_FLOAT16_APPLE 0x881A
#define GL_RGBA_FLOAT16_ATI 0x881A
#define GL_RGBA_FLOAT32_APPLE 0x8814
#define GL_RGBA_FLOAT32_ATI 0x8814
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_RGBA_FLOAT_MODE_ATI 0x8820
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#define GL_RGBA_MODE 0x0C31
#define GL_RGBA_S3TC 0x83A2
#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
#define GL_RGBA_SNORM 0x8F93
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
#define GL_RGB_422_APPLE 0x8A1F
#define GL_RGB_FLOAT16_APPLE 0x881B
#define GL_RGB_FLOAT16_ATI 0x881B
#define GL_RGB_FLOAT32_APPLE 0x8815
#define GL_RGB_FLOAT32_ATI 0x8815
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RGB_RAW_422_APPLE 0x8A51
#define GL_RGB_S3TC 0x83A0
#define GL_RGB_SCALE 0x8573
#define GL_RGB_SCALE_ARB 0x8573
#define GL_RGB_SCALE_EXT 0x8573
#define GL_RGB_SNORM 0x8F92
#define GL_RG_INTEGER 0x8228
#define GL_RG_SNORM 0x8F91
#define GL_RIGHT 0x0407
#define GL_ROUNDED_RECT2_NV 0xEA
#define GL_ROUNDED_RECT4_NV 0xEC
#define GL_ROUNDED_RECT8_NV 0xEE
#define GL_ROUNDED_RECT_NV 0xE8
#define GL_ROUND_NV 0x90A4
#define GL_S 0x2000
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_BINDING 0x8919
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_BUFFER_AMD 0x9001
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_SAMPLER_OBJECT_AMD 0x9155
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_3DFX 0x86B4
#define GL_SAMPLES_ARB 0x80A9
#define GL_SAMPLES_EXT 0x80A9
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLES_PASSED_ARB 0x8914
#define GL_SAMPLES_SGIS 0x80A9
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLE_BUFFERS_EXT 0x80A8
#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_LOCATION_ARB 0x8E50
#define GL_SAMPLE_LOCATION_NV 0x8E50
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_EXT 0x80A0
#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_SGIS 0x80A0
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
#define GL_SAMPLE_PATTERN_EXT 0x80AC
#define GL_SAMPLE_PATTERN_SGIS 0x80AC
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SAMPLE_SHADING_ARB 0x8C36
#define GL_SATURATE_BIT_ATI 0x00000040
#define GL_SCALAR_EXT 0x87BE
#define GL_SCALEBIAS_HINT_SGIX 0x8322
#define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA
#define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB
#define GL_SCALE_BY_FOUR_NV 0x853F
#define GL_SCALE_BY_ONE_HALF_NV 0x8540
#define GL_SCALE_BY_TWO_NV 0x853E
#define GL_SCISSOR_BIT 0x00080000
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_BOX_EXCLUSIVE_NV 0x9556
#define GL_SCISSOR_COMMAND_NV 0x0011
#define GL_SCISSOR_TEST 0x0C11
#define GL_SCISSOR_TEST_EXCLUSIVE_NV 0x9555
#define GL_SCREEN_COORDINATES_REND 0x8490
#define GL_SCREEN_KHR 0x9295
#define GL_SCREEN_NV 0x9295
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#define GL_SECONDARY_COLOR_NV 0x852D
#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
#define GL_SELECT 0x1C02
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SEMAPHORE_TYPE_BINARY_NV 0x95B4
#define GL_SEMAPHORE_TYPE_NV 0x95B3
#define GL_SEMAPHORE_TYPE_TIMELINE_NV 0x95B5
#define GL_SEPARABLE_2D 0x8012
#define GL_SEPARABLE_2D_EXT 0x8012
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
#define GL_SET 0x150F
#define GL_SET_AMD 0x874A
#define GL_SHADER 0x82E1
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_CONSISTENT_NV 0x86DD
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_INCLUDE_ARB 0x8DAE
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_SHADER_OBJECT_EXT 0x8B48
#define GL_SHADER_OPERATION_NV 0x86DF
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_TYPE 0x8B4F
#define GL_SHADE_MODEL 0x0B54
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
#define GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV 0x956F
#define GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV 0x9566
#define GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV 0x9567
#define GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV 0x9568
#define GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV 0x9569
#define GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV 0x956A
#define GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV 0x956B
#define GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV 0x9565
#define GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV 0x956C
#define GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV 0x956D
#define GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV 0x956E
#define GL_SHADING_RATE_IMAGE_BINDING_NV 0x955B
#define GL_SHADING_RATE_IMAGE_NV 0x9563
#define GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV 0x95B2
#define GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV 0x955E
#define GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV 0x95B1
#define GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV 0x955D
#define GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV 0x955C
#define GL_SHADING_RATE_NO_INVOCATIONS_NV 0x9564
#define GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV 0x95AE
#define GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV 0x95AF
#define GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV 0x95B0
#define GL_SHADOW_AMBIENT_SGIX 0x80BF
#define GL_SHADOW_ATTENUATION_EXT 0x834E
#define GL_SHARED_EDGE_NV 0xC0
#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
#define GL_SHININESS 0x1601
#define GL_SHORT 0x1402
#define GL_SIGNALED 0x9119
#define GL_SIGNED_ALPHA8_NV 0x8706
#define GL_SIGNED_ALPHA_NV 0x8705
#define GL_SIGNED_HILO16_NV 0x86FA
#define GL_SIGNED_HILO8_NV 0x885F
#define GL_SIGNED_HILO_NV 0x86F9
#define GL_SIGNED_IDENTITY_NV 0x853C
#define GL_SIGNED_INTENSITY8_NV 0x8708
#define GL_SIGNED_INTENSITY_NV 0x8707
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
#define GL_SIGNED_LUMINANCE8_NV 0x8702
#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
#define GL_SIGNED_LUMINANCE_NV 0x8701
#define GL_SIGNED_NEGATE_NV 0x853D
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_SIGNED_RGB8_NV 0x86FF
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
#define GL_SIGNED_RGBA8_NV 0x86FC
#define GL_SIGNED_RGBA_NV 0x86FB
#define GL_SIGNED_RGB_NV 0x86FE
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_SINGLE_COLOR 0x81F9
#define GL_SINGLE_COLOR_EXT 0x81F9
#define GL_SKIP_COMPONENTS1_NV -6
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SKIP_DECODE_EXT 0x8A4A
#define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#define GL_SLICE_ACCUM_SUN 0x85CC
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
#define GL_SLUMINANCE8_EXT 0x8C47
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
#define GL_SLUMINANCE_EXT 0x8C46
#define GL_SMALL_CCW_ARC_TO_NV 0x12
#define GL_SMALL_CW_ARC_TO_NV 0x14
#define GL_SMOOTH 0x1D01
#define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#define GL_SM_COUNT_NV 0x933B
#define GL_SOFTLIGHT_KHR 0x929C
#define GL_SOFTLIGHT_NV 0x929C
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_ALPHA_ARB 0x8588
#define GL_SOURCE0_ALPHA_EXT 0x8588
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE0_RGB_ARB 0x8580
#define GL_SOURCE0_RGB_EXT 0x8580
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_ALPHA_ARB 0x8589
#define GL_SOURCE1_ALPHA_EXT 0x8589
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE1_RGB_ARB 0x8581
#define GL_SOURCE1_RGB_EXT 0x8581
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_ALPHA_ARB 0x858A
#define GL_SOURCE2_ALPHA_EXT 0x858A
#define GL_SOURCE2_RGB 0x8582
#define GL_SOURCE2_RGB_ARB 0x8582
#define GL_SOURCE2_RGB_EXT 0x8582
#define GL_SOURCE3_ALPHA_NV 0x858B
#define GL_SOURCE3_RGB_NV 0x8583
#define GL_SPARE0_NV 0x852E
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
#define GL_SPARE1_NV 0x852F
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8
#define GL_SPARSE_STORAGE_BIT_ARB 0x0400
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
#define GL_SPECULAR 0x1202
#define GL_SPHERE_MAP 0x2402
#define GL_SPIR_V_BINARY 0x9552
#define GL_SPIR_V_BINARY_ARB 0x9552
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_SPOT_CUTOFF 0x1206
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPRITE_AXIAL_SGIX 0x814C
#define GL_SPRITE_AXIS_SGIX 0x814A
#define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E
#define GL_SPRITE_MODE_SGIX 0x8149
#define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D
#define GL_SPRITE_SGIX 0x8148
#define GL_SPRITE_TRANSLATION_SGIX 0x814B
#define GL_SQUARE_NV 0x90A3
#define GL_SR8_EXT 0x8FBD
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_COLOR 0x88F9
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_ALPHA 0x858A
#define GL_SRC2_RGB 0x8582
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_ATOP_NV 0x928E
#define GL_SRC_COLOR 0x0300
#define GL_SRC_IN_NV 0x928A
#define GL_SRC_NV 0x9286
#define GL_SRC_OUT_NV 0x928C
#define GL_SRC_OVER_NV 0x9288
#define GL_SRG8_EXT 0x8FBE
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB8_ALPHA8_EXT 0x8C43
#define GL_SRGB8_EXT 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB_ALPHA_EXT 0x8C42
#define GL_SRGB_DECODE_ARB 0x8299
#define GL_SRGB_EXT 0x8C40
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STANDARD_FONT_FORMAT_NV 0x936C
#define GL_STANDARD_FONT_NAME_NV 0x9072
#define GL_STATIC_ATI 0x8760
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STATIC_VERTEX_ARRAY_IBM 103061
#define GL_STENCIL 0x1802
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_STENCIL_BITS 0x0D57
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_OP_VALUE_AMD 0x874C
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_REF_COMMAND_NV 0x000C
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_STENCIL_SAMPLES_NV 0x932E
#define GL_STENCIL_TAG_BITS_EXT 0x88F2
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STEREO 0x0C33
#define GL_STORAGE_CACHED_APPLE 0x85BE
#define GL_STORAGE_CLIENT_APPLE 0x85B4
#define GL_STORAGE_PRIVATE_APPLE 0x85BD
#define GL_STORAGE_SHARED_APPLE 0x85BF
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_RASTERIZATION_AMD 0x91A0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_READ_ARB 0x88E1
#define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216
#define GL_STRICT_LIGHTING_HINT_PGI 0x1A217
#define GL_STRICT_SCISSOR_HINT_PGI 0x1A218
#define GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR 0x00000004
#define GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR 0x00000008
#define GL_SUBGROUP_FEATURE_BASIC_BIT_KHR 0x00000001
#define GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR 0x00000040
#define GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV 0x00000100
#define GL_SUBGROUP_FEATURE_QUAD_BIT_KHR 0x00000080
#define GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR 0x00000010
#define GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR 0x00000020
#define GL_SUBGROUP_FEATURE_VOTE_BIT_KHR 0x00000002
#define GL_SUBGROUP_QUAD_ALL_STAGES_KHR 0x9535
#define GL_SUBGROUP_SIZE_KHR 0x9532
#define GL_SUBGROUP_SUPPORTED_FEATURES_KHR 0x9534
#define GL_SUBGROUP_SUPPORTED_STAGES_KHR 0x9533
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348
#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
#define GL_SUBTRACT 0x84E7
#define GL_SUBTRACT_ARB 0x84E7
#define GL_SUB_ATI 0x8965
#define GL_SUCCESS_NV 0x902F
#define GL_SUPERSAMPLE_SCALE_X_NV 0x9372
#define GL_SUPERSAMPLE_SCALE_Y_NV 0x9373
#define GL_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B7
#define GL_SURFACE_MAPPED_NV 0x8700
#define GL_SURFACE_REGISTERED_NV 0x86FD
#define GL_SURFACE_STATE_NV 0x86EB
#define GL_SWIZZLE_STQ_ATI 0x8977
#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
#define GL_SWIZZLE_STRQ_ATI 0x897A
#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
#define GL_SWIZZLE_STR_ATI 0x8976
#define GL_SWIZZLE_STR_DR_ATI 0x8978
#define GL_SYNC_CL_EVENT_ARB 0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_X11_FENCE_EXT 0x90E1
#define GL_SYSTEM_FONT_NAME_NV 0x9073
#define GL_T 0x2001
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_IUI_N3F_V2F_EXT 0x81B3
#define GL_T2F_IUI_N3F_V3F_EXT 0x81B4
#define GL_T2F_IUI_V2F_EXT 0x81B1
#define GL_T2F_IUI_V3F_EXT 0x81B2
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_V3F 0x2A27
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_T4F_V4F 0x2A28
#define GL_TABLE_TOO_LARGE 0x8031
#define GL_TABLE_TOO_LARGE_EXT 0x8031
#define GL_TANGENT_ARRAY_EXT 0x8439
#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
#define GL_TASK_SHADER_BIT_NV 0x00000080
#define GL_TASK_SHADER_NV 0x955A
#define GL_TASK_SUBROUTINE_NV 0x957D
#define GL_TASK_SUBROUTINE_UNIFORM_NV 0x957F
#define GL_TASK_WORK_GROUP_SIZE_NV 0x953F
#define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000
#define GL_TESSELLATION_FACTOR_AMD 0x9005
#define GL_TESSELLATION_MODE_AMD 0x9004
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_PROGRAM_NV 0x891E
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_PROGRAM_NV 0x891F
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TEXCOORD1_BIT_PGI 0x10000000
#define GL_TEXCOORD2_BIT_PGI 0x20000000
#define GL_TEXCOORD3_BIT_PGI 0x40000000
#define GL_TEXCOORD4_BIT_PGI 0x80000000
#define GL_TEXTURE 0x1702
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE31_ARB 0x84DF
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
#define GL_TEXTURE_1D_STACK_MESAX 0x8759
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
#define GL_TEXTURE_2D_STACK_MESAX 0x875A
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_TEXTURE_4DSIZE_SGIS 0x8136
#define GL_TEXTURE_4D_BINDING_SGIS 0x814F
#define GL_TEXTURE_4D_SGIS 0x8134
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_BIT 0x00040000
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
#define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046
#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
#define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
#define GL_TEXTURE_COMPARE_SGIX 0x819A
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009
#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001
#define GL_TEXTURE_DEFORMATION_SGIX 0x8195
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
#define GL_TEXTURE_DS_SIZE_NV 0x871D
#define GL_TEXTURE_DT_SIZE_NV 0x871E
#define GL_TEXTURE_ENV 0x2300
#define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
#define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
#define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_HI_SIZE_NV 0x871B
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_TEXTURE_IMMUTABLE_FORMAT_EXT 0x912F
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
#define GL_TEXTURE_LIGHTING_MODE_HP 0x8167
#define GL_TEXTURE_LIGHT_EXT 0x8350
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
#define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190
#define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E
#define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F
#define GL_TEXTURE_LO_SIZE_NV 0x871C
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MAG_SIZE_NV 0x871F
#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
#define GL_TEXTURE_NORMAL_EXT 0x85AF
#define GL_TEXTURE_POST_SPECULAR_HP 0x8168
#define GL_TEXTURE_PRE_SPECULAR_HP 0x8169
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
#define GL_TEXTURE_RECTANGLE_NV 0x84F5
#define GL_TEXTURE_REDUCTION_MODE_ARB 0x9366
#define GL_TEXTURE_REDUCTION_MODE_EXT 0x9366
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_SIZE_EXT 0x805C
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_SHADER_NV 0x86DE
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
#define GL_TEXTURE_SPARSE_ARB 0x91A6
#define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46
#define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42
#define GL_TEXTURE_TARGET 0x1006
#define GL_TEXTURE_TILING_EXT 0x9580
#define GL_TEXTURE_TOO_LARGE_EXT 0x8065
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#define GL_TEXTURE_VIEW 0x82B5
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_Q_SGIS 0x8137
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
#define GL_TILE_RASTER_ORDER_FIXED_MESA 0x8BB8
#define GL_TILE_RASTER_ORDER_INCREASING_X_MESA 0x8BB9
#define GL_TILE_RASTER_ORDER_INCREASING_Y_MESA 0x8BBA
#define GL_TILING_TYPES_EXT 0x9583
#define GL_TIMELINE_SEMAPHORE_VALUE_NV 0x9595
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_TIMESTAMP 0x8E28
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIME_ELAPSED_EXT 0x88BF
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_TRANSFORM_BIT 0x00001000
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_TRANSFORM_HINT_APPLE 0x85B1
#define GL_TRANSLATE_2D_NV 0x9090
#define GL_TRANSLATE_3D_NV 0x9091
#define GL_TRANSLATE_X_NV 0x908E
#define GL_TRANSLATE_Y_NV 0x908F
#define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#define GL_TRANSPOSE_NV 0x862C
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_LIST_SUN 0x81D7
#define GL_TRIANGLE_MESH_SUN 0x8615
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_TRIANGULAR_NV 0x90A5
#define GL_TRUE 1
#define GL_TYPE 0x92FA
#define GL_UNCORRELATED_NV 0x9282
#define GL_UNDEFINED_APPLE 0x8A1C
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV 0x959C
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV 0x959D
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
#define GL_UNIFORM_BUFFER_EXT 0x8DEE
#define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
#define GL_UNPACK_CMYK_HINT_EXT 0x800F
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
#define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_RESAMPLE_OML 0x8985
#define GL_UNPACK_RESAMPLE_SGIX 0x842F
#define GL_UNPACK_ROW_BYTES_APPLE 0x8A16
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
#define GL_UNSIGNED_IDENTITY_NV 0x8536
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_INT16_NV 0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#define GL_UNSIGNED_INT64_AMD 0x8BC2
#define GL_UNSIGNED_INT64_ARB 0x140F
#define GL_UNSIGNED_INT64_NV 0x140F
#define GL_UNSIGNED_INT64_VEC2_ARB 0x8FF5
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB 0x8FF6
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB 0x8FF7
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#define GL_UNSIGNED_INT8_NV 0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
#define GL_UNSIGNED_INT_24_8_NV 0x84FA
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_UNSIGNED_INVERT_NV 0x8537
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
#define GL_UNSIGNED_SHORT 0x1403
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
#define GL_UPLOAD_GPU_MASK_NVX 0x954A
#define GL_UPPER_LEFT 0x8CA2
#define GL_USE_MISSING_GLYPH_NV 0x90AA
#define GL_UTF16_NV 0x909B
#define GL_UTF8_NV 0x909A
#define GL_UUID_SIZE_EXT 16
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_VALIDATE_STATUS 0x8B83
#define GL_VARIABLE_A_NV 0x8523
#define GL_VARIABLE_B_NV 0x8524
#define GL_VARIABLE_C_NV 0x8525
#define GL_VARIABLE_D_NV 0x8526
#define GL_VARIABLE_E_NV 0x8527
#define GL_VARIABLE_F_NV 0x8528
#define GL_VARIABLE_G_NV 0x8529
#define GL_VARIANT_ARRAY_EXT 0x87E8
#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
#define GL_VARIANT_DATATYPE_EXT 0x87E5
#define GL_VARIANT_EXT 0x87C1
#define GL_VARIANT_VALUE_EXT 0x87E4
#define GL_VBO_FREE_MEMORY_ATI 0x87FB
#define GL_VECTOR_EXT 0x87BF
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERTEX23_BIT_PGI 0x00000004
#define GL_VERTEX4_BIT_PGI 0x00000008
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B
#define GL_VERTEX_ARRAY_LIST_IBM 103070
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
#define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154
#define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
#define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_VERTEX_BLEND_ARB 0x86A7
#define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B
#define GL_VERTEX_DATA_HINT_PGI 0x1A22A
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5
#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
#define GL_VERTEX_PRECLIP_SGIX 0x83EE
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_SHADER_EXT 0x8780
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0
#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
#define GL_VERTEX_SOURCE_ATI 0x8774
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_VERTEX_STREAM0_ATI 0x876C
#define GL_VERTEX_STREAM1_ATI 0x876D
#define GL_VERTEX_STREAM2_ATI 0x876E
#define GL_VERTEX_STREAM3_ATI 0x876F
#define GL_VERTEX_STREAM4_ATI 0x8770
#define GL_VERTEX_STREAM5_ATI 0x8771
#define GL_VERTEX_STREAM6_ATI 0x8772
#define GL_VERTEX_STREAM7_ATI 0x8773
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_VERTEX_TEXTURE 0x829B
#define GL_VERTEX_WEIGHTING_EXT 0x8509
#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
#define GL_VERTICAL_LINE_TO_NV 0x08
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_VERTICES_SUBMITTED_ARB 0x82EE
#define GL_VIBRANCE_BIAS_NV 0x8719
#define GL_VIBRANCE_SCALE_NV 0x8713
#define GL_VIDEO_BUFFER_BINDING_NV 0x9021
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
#define GL_VIDEO_BUFFER_NV 0x9020
#define GL_VIDEO_BUFFER_PITCH_NV 0x9028
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
#define GL_VIEWPORT 0x0BA2
#define GL_VIEWPORT_BIT 0x00000800
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_VIEWPORT_COMMAND_NV 0x0010
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_VIEWPORT_POSITION_W_SCALE_NV 0x937C
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354
#define GL_VIEWPORT_SWIZZLE_W_NV 0x935B
#define GL_VIEWPORT_SWIZZLE_X_NV 0x9358
#define GL_VIEWPORT_SWIZZLE_Y_NV 0x9359
#define GL_VIEWPORT_SWIZZLE_Z_NV 0x935A
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_ASTC_10x10_RGBA 0x9393
#define GL_VIEW_CLASS_ASTC_10x5_RGBA 0x9390
#define GL_VIEW_CLASS_ASTC_10x6_RGBA 0x9391
#define GL_VIEW_CLASS_ASTC_10x8_RGBA 0x9392
#define GL_VIEW_CLASS_ASTC_12x10_RGBA 0x9394
#define GL_VIEW_CLASS_ASTC_12x12_RGBA 0x9395
#define GL_VIEW_CLASS_ASTC_4x4_RGBA 0x9388
#define GL_VIEW_CLASS_ASTC_5x4_RGBA 0x9389
#define GL_VIEW_CLASS_ASTC_5x5_RGBA 0x938A
#define GL_VIEW_CLASS_ASTC_6x5_RGBA 0x938B
#define GL_VIEW_CLASS_ASTC_6x6_RGBA 0x938C
#define GL_VIEW_CLASS_ASTC_8x5_RGBA 0x938D
#define GL_VIEW_CLASS_ASTC_8x6_RGBA 0x938E
#define GL_VIEW_CLASS_ASTC_8x8_RGBA 0x938F
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_EAC_R11 0x9383
#define GL_VIEW_CLASS_EAC_RG11 0x9384
#define GL_VIEW_CLASS_ETC2_EAC_RGBA 0x9387
#define GL_VIEW_CLASS_ETC2_RGB 0x9385
#define GL_VIEW_CLASS_ETC2_RGBA 0x9386
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7
#define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197
#define GL_VIVIDLIGHT_NV 0x92A6
#define GL_VOLATILE_APPLE 0x8A1A
#define GL_WAIT_FAILED 0x911D
#define GL_WARPS_PER_SM_NV 0x933A
#define GL_WARP_SIZE_NV 0x9339
#define GL_WEIGHTED_AVERAGE_ARB 0x9367
#define GL_WEIGHTED_AVERAGE_EXT 0x9367
#define GL_WEIGHT_ARRAY_ARB 0x86AD
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
#define GL_WIDE_LINE_HINT_PGI 0x1A222
#define GL_WINDOW_RECTANGLE_EXT 0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT 0x8F13
#define GL_WRAP_BORDER_SUN 0x81D4
#define GL_WRITE_DISCARD_NV 0x88BE
#define GL_WRITE_ONLY 0x88B9
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
#define GL_W_EXT 0x87D8
#define GL_XOR 0x1506
#define GL_XOR_NV 0x1506
#define GL_X_EXT 0x87D5
#define GL_YCBAYCR8A_4224_NV 0x9032
#define GL_YCBCR_422_APPLE 0x85B9
#define GL_YCBCR_MESA 0x8757
#define GL_YCBYCR8_422_NV 0x9031
#define GL_YCRCBA_SGIX 0x8319
#define GL_YCRCB_422_SGIX 0x81BB
#define GL_YCRCB_444_SGIX 0x81BC
#define GL_YCRCB_SGIX 0x8318
#define GL_Y_EXT 0x87D6
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
#define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033
#define GL_ZERO 0
#define GL_ZERO_EXT 0x87DD
#define GL_ZERO_TO_ONE 0x935F
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_Z_EXT 0x87D7
#define GL_3DC_XY_AMD 0x87FA
#define GL_3DC_X_AMD 0x87F9
#define GL_ADD_BLEND_IMG 0x8C09
#define GL_ALPHA8_OES 0x803C
#define GL_ALREADY_SIGNALED_APPLE 0x911A
#define GL_ATC_RGBA_EXPLICIT_ALPHA_AMD 0x8C93
#define GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD 0x87EE
#define GL_ATC_RGB_AMD 0x8C92
#define GL_BGRA_IMG 0x80E1
#define GL_BLEND_DST_ALPHA_OES 0x80CA
#define GL_BLEND_DST_RGB_OES 0x80C8
#define GL_BLEND_EQUATION_ALPHA_OES 0x883D
#define GL_BLEND_EQUATION_OES 0x8009
#define GL_BLEND_EQUATION_RGB_OES 0x8009
#define GL_BLEND_SRC_ALPHA_OES 0x80CB
#define GL_BLEND_SRC_RGB_OES 0x80C9
#define GL_BUFFER_ACCESS_OES 0x88BB
#define GL_BUFFER_MAPPED_OES 0x88BC
#define GL_BUFFER_MAP_POINTER_OES 0x88BD
#define GL_CLIP_PLANE0_IMG 0x3000
#define GL_CLIP_PLANE1_IMG 0x3001
#define GL_CLIP_PLANE2_IMG 0x3002
#define GL_CLIP_PLANE3_IMG 0x3003
#define GL_CLIP_PLANE4_IMG 0x3004
#define GL_CLIP_PLANE5_IMG 0x3005
#define GL_COLOR_ATTACHMENT0_OES 0x8CE0
#define GL_COLOR_BUFFER_BIT0_QCOM 0x00000001
#define GL_COLOR_BUFFER_BIT1_QCOM 0x00000002
#define GL_COLOR_BUFFER_BIT2_QCOM 0x00000004
#define GL_COLOR_BUFFER_BIT3_QCOM 0x00000008
#define GL_COLOR_BUFFER_BIT4_QCOM 0x00000010
#define GL_COLOR_BUFFER_BIT5_QCOM 0x00000020
#define GL_COLOR_BUFFER_BIT6_QCOM 0x00000040
#define GL_COLOR_BUFFER_BIT7_QCOM 0x00000080
#define GL_COLOR_EXT 0x1800
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG 0x8C03
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG 0x8C02
#define GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG 0x8C01
#define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG 0x8C00
#define GL_CONDITION_SATISFIED_APPLE 0x911C
#define GL_CONTEXT_ROBUST_ACCESS_EXT 0x90F3
#define GL_COORD_REPLACE_OES 0x8862
#define GL_CURRENT_PALETTE_MATRIX_OES 0x8843
#define GL_DECR_WRAP_OES 0x8508
#define GL_DEPTH24_STENCIL8_OES 0x88F0
#define GL_DEPTH_ATTACHMENT_OES 0x8D00
#define GL_DEPTH_BUFFER_BIT0_QCOM 0x00000100
#define GL_DEPTH_BUFFER_BIT1_QCOM 0x00000200
#define GL_DEPTH_BUFFER_BIT2_QCOM 0x00000400
#define GL_DEPTH_BUFFER_BIT3_QCOM 0x00000800
#define GL_DEPTH_BUFFER_BIT4_QCOM 0x00001000
#define GL_DEPTH_BUFFER_BIT5_QCOM 0x00002000
#define GL_DEPTH_BUFFER_BIT6_QCOM 0x00004000
#define GL_DEPTH_BUFFER_BIT7_QCOM 0x00008000
#define GL_DEPTH_COMPONENT16_OES 0x81A5
#define GL_DEPTH_COMPONENT24_OES 0x81A6
#define GL_DEPTH_COMPONENT32_OES 0x81A7
#define GL_DEPTH_EXT 0x1801
#define GL_DEPTH_STENCIL_OES 0x84F9
#define GL_DOT3_RGBA_IMG 0x86AF
#define GL_DRAW_FRAMEBUFFER_APPLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING_APPLE 0x8CA6
#define GL_ETC1_RGB8_OES 0x8D64
#define GL_FACTOR_ALPHA_MODULATE_IMG 0x8C07
#define GL_FRAGMENT_ALPHA_MODULATE_IMG 0x8C08
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT 0x8D6C
#define GL_FRAMEBUFFER_BINDING_OES 0x8CA6
#define GL_FRAMEBUFFER_COMPLETE_OES 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG 0x9134
#define GL_FRAMEBUFFER_OES 0x8D40
#define GL_FRAMEBUFFER_UNDEFINED_OES 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED_OES 0x8CDD
#define GL_FUNC_ADD_OES 0x8006
#define GL_FUNC_REVERSE_SUBTRACT_OES 0x800B
#define GL_FUNC_SUBTRACT_OES 0x800A
#define GL_GUILTY_CONTEXT_RESET_EXT 0x8253
#define GL_INCR_WRAP_OES 0x8507
#define GL_INNOCENT_CONTEXT_RESET_EXT 0x8254
#define GL_INVALID_FRAMEBUFFER_OPERATION_OES 0x0506
#define GL_LOSE_CONTEXT_ON_RESET_EXT 0x8252
#define GL_LUMINANCE4_ALPHA4_OES 0x8043
#define GL_LUMINANCE8_ALPHA8_OES 0x8045
#define GL_LUMINANCE8_OES 0x8040
#define GL_MAP_FLUSH_EXPLICIT_BIT_EXT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT_EXT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT_EXT 0x0004
#define GL_MAP_READ_BIT_EXT 0x0001
#define GL_MAP_UNSYNCHRONIZED_BIT_EXT 0x0020
#define GL_MAP_WRITE_BIT_EXT 0x0002
#define GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES 0x8B9E
#define GL_MATRIX_INDEX_ARRAY_OES 0x8844
#define GL_MATRIX_INDEX_ARRAY_POINTER_OES 0x8849
#define GL_MATRIX_INDEX_ARRAY_SIZE_OES 0x8846
#define GL_MATRIX_INDEX_ARRAY_STRIDE_OES 0x8848
#define GL_MATRIX_INDEX_ARRAY_TYPE_OES 0x8847
#define GL_MATRIX_PALETTE_OES 0x8840
#define GL_MAX_CLIP_PLANES_IMG 0x0D32
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES 0x851C
#define GL_MAX_PALETTE_MATRICES_OES 0x8842
#define GL_MAX_RENDERBUFFER_SIZE_OES 0x84E8
#define GL_MAX_SAMPLES_APPLE 0x8D57
#define GL_MAX_SAMPLES_IMG 0x9135
#define GL_MAX_SERVER_WAIT_TIMEOUT_APPLE 0x9111
#define GL_MAX_VERTEX_UNITS_OES 0x86A4
#define GL_MIRRORED_REPEAT_OES 0x8370
#define GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES 0x898D
#define GL_MODULATE_COLOR_IMG 0x8C04
#define GL_MULTISAMPLE_BUFFER_BIT0_QCOM 0x01000000
#define GL_MULTISAMPLE_BUFFER_BIT1_QCOM 0x02000000
#define GL_MULTISAMPLE_BUFFER_BIT2_QCOM 0x04000000
#define GL_MULTISAMPLE_BUFFER_BIT3_QCOM 0x08000000
#define GL_MULTISAMPLE_BUFFER_BIT4_QCOM 0x10000000
#define GL_MULTISAMPLE_BUFFER_BIT5_QCOM 0x20000000
#define GL_MULTISAMPLE_BUFFER_BIT6_QCOM 0x40000000
#define GL_MULTISAMPLE_BUFFER_BIT7_QCOM 0x80000000
#define GL_NONE_OES 0
#define GL_NORMAL_MAP_OES 0x8511
#define GL_NO_RESET_NOTIFICATION_EXT 0x8261
#define GL_OBJECT_TYPE_APPLE 0x9112
#define GL_PERFMON_GLOBAL_MODE_QCOM 0x8FA0
#define GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES 0x8B9F
#define GL_POINT_SIZE_ARRAY_OES 0x8B9C
#define GL_POINT_SIZE_ARRAY_POINTER_OES 0x898C
#define GL_POINT_SIZE_ARRAY_STRIDE_OES 0x898B
#define GL_POINT_SIZE_ARRAY_TYPE_OES 0x898A
#define GL_POINT_SPRITE_OES 0x8861
#define GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES 0x898E
#define GL_READ_FRAMEBUFFER_APPLE 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING_APPLE 0x8CAA
#define GL_RECIP_ADD_SIGNED_ALPHA_IMG 0x8C05
#define GL_REFLECTION_MAP_OES 0x8512
#define GL_RENDERBUFFER_ALPHA_SIZE_OES 0x8D53
#define GL_RENDERBUFFER_BINDING_OES 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE_OES 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE_OES 0x8D54
#define GL_RENDERBUFFER_GREEN_SIZE_OES 0x8D51
#define GL_RENDERBUFFER_HEIGHT_OES 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT_OES 0x8D44
#define GL_RENDERBUFFER_OES 0x8D41
#define GL_RENDERBUFFER_RED_SIZE_OES 0x8D50
#define GL_RENDERBUFFER_SAMPLES_APPLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_IMG 0x9133
#define GL_RENDERBUFFER_STENCIL_SIZE_OES 0x8D55
#define GL_RENDERBUFFER_WIDTH_OES 0x8D42
#define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES 0x8D68
#define GL_RESET_NOTIFICATION_STRATEGY_EXT 0x8256
#define GL_RGB565_OES 0x8D62
#define GL_RGB5_A1_OES 0x8057
#define GL_RGB8_OES 0x8051
#define GL_RGBA4_OES 0x8056
#define GL_RGBA8_OES 0x8058
#define GL_SIGNALED_APPLE 0x9119
#define GL_STATE_RESTORE 0x8BDC
#define GL_STENCIL_ATTACHMENT_OES 0x8D20
#define GL_STENCIL_BUFFER_BIT0_QCOM 0x00010000
#define GL_STENCIL_BUFFER_BIT1_QCOM 0x00020000
#define GL_STENCIL_BUFFER_BIT2_QCOM 0x00040000
#define GL_STENCIL_BUFFER_BIT3_QCOM 0x00080000
#define GL_STENCIL_BUFFER_BIT4_QCOM 0x00100000
#define GL_STENCIL_BUFFER_BIT5_QCOM 0x00200000
#define GL_STENCIL_BUFFER_BIT6_QCOM 0x00400000
#define GL_STENCIL_BUFFER_BIT7_QCOM 0x00800000
#define GL_STENCIL_EXT 0x1802
#define GL_STENCIL_INDEX1_OES 0x8D46
#define GL_STENCIL_INDEX4_OES 0x8D47
#define GL_STENCIL_INDEX8_OES 0x8D48
#define GL_SYNC_CONDITION_APPLE 0x9113
#define GL_SYNC_FENCE_APPLE 0x9116
#define GL_SYNC_FLAGS_APPLE 0x9115
#define GL_SYNC_FLUSH_COMMANDS_BIT_APPLE 0x00000001
#define GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE 0x9117
#define GL_SYNC_OBJECT_APPLE 0x8A53
#define GL_SYNC_STATUS_APPLE 0x9114
#define GL_TEXTURE_ALPHA_MODULATE_IMG 0x8C06
#define GL_TEXTURE_BINDING_CUBE_MAP_OES 0x8514
#define GL_TEXTURE_BINDING_EXTERNAL_OES 0x8D67
#define GL_TEXTURE_CROP_RECT_OES 0x8B9D
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES 0x851A
#define GL_TEXTURE_CUBE_MAP_OES 0x8513
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES 0x8519
#define GL_TEXTURE_DEPTH_QCOM 0x8BD4
#define GL_TEXTURE_EXTERNAL_OES 0x8D65
#define GL_TEXTURE_FORMAT_QCOM 0x8BD6
#define GL_TEXTURE_GEN_MODE_OES 0x2500
#define GL_TEXTURE_GEN_STR_OES 0x8D60
#define GL_TEXTURE_HEIGHT_QCOM 0x8BD3
#define GL_TEXTURE_IMAGE_VALID_QCOM 0x8BD8
#define GL_TEXTURE_INTERNAL_FORMAT_QCOM 0x8BD5
#define GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES 0x898F
#define GL_TEXTURE_MAX_LEVEL_APPLE 0x813D
#define GL_TEXTURE_NUM_LEVELS_QCOM 0x8BD9
#define GL_TEXTURE_OBJECT_VALID_QCOM 0x8BDB
#define GL_TEXTURE_SAMPLES_IMG 0x9136
#define GL_TEXTURE_TARGET_QCOM 0x8BDA
#define GL_TEXTURE_TYPE_QCOM 0x8BD7
#define GL_TEXTURE_WIDTH_QCOM 0x8BD2
#define GL_TIMEOUT_EXPIRED_APPLE 0x911B
#define GL_TIMEOUT_IGNORED_APPLE 0xFFFFFFFFFFFFFFFF
#define GL_UNKNOWN_CONTEXT_RESET_EXT 0x8255
#define GL_UNSIGNALED_APPLE 0x9118
#define GL_UNSIGNED_INT_24_8_OES 0x84FA
#define GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT 0x8366
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG 0x8365
#define GL_VERSION_ES_CL_1_0 1
#define GL_VERSION_ES_CL_1_1 1
#define GL_VERSION_ES_CM_1_1 1
#define GL_VERTEX_ARRAY_BINDING_OES 0x85B5
#define GL_WAIT_FAILED_APPLE 0x911D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_OES 0x889E
#define GL_WEIGHT_ARRAY_OES 0x86AD
#define GL_WEIGHT_ARRAY_POINTER_OES 0x86AC
#define GL_WEIGHT_ARRAY_SIZE_OES 0x86AB
#define GL_WEIGHT_ARRAY_STRIDE_OES 0x86AA
#define GL_WEIGHT_ARRAY_TYPE_OES 0x86A9
#define GL_WRITEONLY_RENDERING_QCOM 0x8823
#define GL_WRITE_ONLY_OES 0x88B9


#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_GLAD_API_PTR
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_GLAD_API_PTR funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

#if defined(__SCITECH_SNAP__) && !defined(KHRONOS_STATIC)
#   define KHRONOS_STATIC 1
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(KHRONOS_STATIC)
    /* If the preprocessor constant KHRONOS_STATIC is defined, make the
     * header compatible with static linking. */
#   define KHRONOS_APICALL
#elif defined(_WIN32)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_GLAD_API_PTR
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_GLAD_API_PTR __stdcall
#else
#   define KHRONOS_GLAD_API_PTR
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1
/*
 * To support platform where unsigned long cannot be used interchangeably with
 * inptr_t (e.g. CHERI-extended ISAs), we can use the stdint.h intptr_t.
 * Ideally, we could just use (u)intptr_t everywhere, but this could result in
 * ABI breakage if khronos_uintptr_t is changed from unsigned long to
 * unsigned long long or similar (this results in different C++ name mangling).
 * To avoid changes for existing platforms, we restrict usage of intptr_t to
 * platforms where the size of a pointer is larger than the size of long.
 */
#if defined(__SIZEOF_LONG__) && defined(__SIZEOF_POINTER__)
#if __SIZEOF_POINTER__ > __SIZEOF_LONG__
#define KHRONOS_USE_INTPTR_T
#endif
#endif

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef KHRONOS_USE_INTPTR_T
typedef intptr_t               khronos_intptr_t;
typedef uintptr_t              khronos_uintptr_t;
#elif defined(_WIN64)
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
#endif

#if defined(_WIN64)
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef khronos_int32_t GLclampx;
typedef int GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_int32_t GLfixed;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptr;
#else
typedef khronos_intptr_t GLintptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptrARB;
#else
typedef khronos_intptr_t GLintptrARB;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptr;
#else
typedef khronos_ssize_t GLsizeiptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptrARB;
#else
typedef khronos_ssize_t GLsizeiptrARB;
#endif
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (GLAD_API_PTR *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (GLAD_API_PTR *GLVULKANPROCNV)(void);


#define GL_VERSION_1_0 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_0;
#define GL_VERSION_1_1 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_1;
#define GL_VERSION_1_2 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_2;
#define GL_VERSION_1_3 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_3;
#define GL_VERSION_1_4 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_4;
#define GL_VERSION_1_5 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_1_5;
#define GL_VERSION_2_0 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_2_0;
#define GL_VERSION_2_1 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_2_1;
#define GL_VERSION_3_0 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_3_0;
#define GL_VERSION_3_1 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_3_1;
#define GL_VERSION_3_2 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_3_2;
#define GL_VERSION_3_3 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_3_3;
#define GL_VERSION_4_0 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_4_0;
#define GL_VERSION_4_1 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_4_1;
#define GL_VERSION_4_2 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_4_2;
#define GL_VERSION_4_3 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_4_3;
#define GL_VERSION_4_4 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_4_4;
#define GL_VERSION_4_5 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_4_5;
#define GL_VERSION_4_6 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_4_6;
#define GL_VERSION_ES_CM_1_0 1
GLAD_API_CALL int SF_GLAD_GL_VERSION_ES_CM_1_0;
#define GL_3DFX_multisample 1
GLAD_API_CALL int SF_GLAD_GL_3DFX_multisample;
#define GL_3DFX_tbuffer 1
GLAD_API_CALL int SF_GLAD_GL_3DFX_tbuffer;
#define GL_3DFX_texture_compression_FXT1 1
GLAD_API_CALL int SF_GLAD_GL_3DFX_texture_compression_FXT1;
#define GL_AMD_blend_minmax_factor 1
GLAD_API_CALL int SF_GLAD_GL_AMD_blend_minmax_factor;
#define GL_AMD_conservative_depth 1
GLAD_API_CALL int SF_GLAD_GL_AMD_conservative_depth;
#define GL_AMD_debug_output 1
GLAD_API_CALL int SF_GLAD_GL_AMD_debug_output;
#define GL_AMD_depth_clamp_separate 1
GLAD_API_CALL int SF_GLAD_GL_AMD_depth_clamp_separate;
#define GL_AMD_draw_buffers_blend 1
GLAD_API_CALL int SF_GLAD_GL_AMD_draw_buffers_blend;
#define GL_AMD_framebuffer_multisample_advanced 1
GLAD_API_CALL int SF_GLAD_GL_AMD_framebuffer_multisample_advanced;
#define GL_AMD_framebuffer_sample_positions 1
GLAD_API_CALL int SF_GLAD_GL_AMD_framebuffer_sample_positions;
#define GL_AMD_gcn_shader 1
GLAD_API_CALL int SF_GLAD_GL_AMD_gcn_shader;
#define GL_AMD_gpu_shader_half_float 1
GLAD_API_CALL int SF_GLAD_GL_AMD_gpu_shader_half_float;
#define GL_AMD_gpu_shader_int16 1
GLAD_API_CALL int SF_GLAD_GL_AMD_gpu_shader_int16;
#define GL_AMD_gpu_shader_int64 1
GLAD_API_CALL int SF_GLAD_GL_AMD_gpu_shader_int64;
#define GL_AMD_interleaved_elements 1
GLAD_API_CALL int SF_GLAD_GL_AMD_interleaved_elements;
#define GL_AMD_multi_draw_indirect 1
GLAD_API_CALL int SF_GLAD_GL_AMD_multi_draw_indirect;
#define GL_AMD_name_gen_delete 1
GLAD_API_CALL int SF_GLAD_GL_AMD_name_gen_delete;
#define GL_AMD_occlusion_query_event 1
GLAD_API_CALL int SF_GLAD_GL_AMD_occlusion_query_event;
#define GL_AMD_performance_monitor 1
GLAD_API_CALL int SF_GLAD_GL_AMD_performance_monitor;
#define GL_AMD_pinned_memory 1
GLAD_API_CALL int SF_GLAD_GL_AMD_pinned_memory;
#define GL_AMD_query_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_AMD_query_buffer_object;
#define GL_AMD_sample_positions 1
GLAD_API_CALL int SF_GLAD_GL_AMD_sample_positions;
#define GL_AMD_seamless_cubemap_per_texture 1
GLAD_API_CALL int SF_GLAD_GL_AMD_seamless_cubemap_per_texture;
#define GL_AMD_shader_atomic_counter_ops 1
GLAD_API_CALL int SF_GLAD_GL_AMD_shader_atomic_counter_ops;
#define GL_AMD_shader_ballot 1
GLAD_API_CALL int SF_GLAD_GL_AMD_shader_ballot;
#define GL_AMD_shader_explicit_vertex_parameter 1
GLAD_API_CALL int SF_GLAD_GL_AMD_shader_explicit_vertex_parameter;
#define GL_AMD_shader_gpu_shader_half_float_fetch 1
GLAD_API_CALL int SF_GLAD_GL_AMD_shader_gpu_shader_half_float_fetch;
#define GL_AMD_shader_image_load_store_lod 1
GLAD_API_CALL int SF_GLAD_GL_AMD_shader_image_load_store_lod;
#define GL_AMD_shader_stencil_export 1
GLAD_API_CALL int SF_GLAD_GL_AMD_shader_stencil_export;
#define GL_AMD_shader_trinary_minmax 1
GLAD_API_CALL int SF_GLAD_GL_AMD_shader_trinary_minmax;
#define GL_AMD_sparse_texture 1
GLAD_API_CALL int SF_GLAD_GL_AMD_sparse_texture;
#define GL_AMD_stencil_operation_extended 1
GLAD_API_CALL int SF_GLAD_GL_AMD_stencil_operation_extended;
#define GL_AMD_texture_gather_bias_lod 1
GLAD_API_CALL int SF_GLAD_GL_AMD_texture_gather_bias_lod;
#define GL_AMD_texture_texture4 1
GLAD_API_CALL int SF_GLAD_GL_AMD_texture_texture4;
#define GL_AMD_transform_feedback3_lines_triangles 1
GLAD_API_CALL int SF_GLAD_GL_AMD_transform_feedback3_lines_triangles;
#define GL_AMD_transform_feedback4 1
GLAD_API_CALL int SF_GLAD_GL_AMD_transform_feedback4;
#define GL_AMD_vertex_shader_layer 1
GLAD_API_CALL int SF_GLAD_GL_AMD_vertex_shader_layer;
#define GL_AMD_vertex_shader_tessellator 1
GLAD_API_CALL int SF_GLAD_GL_AMD_vertex_shader_tessellator;
#define GL_AMD_vertex_shader_viewport_index 1
GLAD_API_CALL int SF_GLAD_GL_AMD_vertex_shader_viewport_index;
#define GL_APPLE_aux_depth_stencil 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_aux_depth_stencil;
#define GL_APPLE_client_storage 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_client_storage;
#define GL_APPLE_element_array 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_element_array;
#define GL_APPLE_fence 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_fence;
#define GL_APPLE_float_pixels 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_float_pixels;
#define GL_APPLE_flush_buffer_range 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_flush_buffer_range;
#define GL_APPLE_object_purgeable 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_object_purgeable;
#define GL_APPLE_rgb_422 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_rgb_422;
#define GL_APPLE_row_bytes 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_row_bytes;
#define GL_APPLE_specular_vector 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_specular_vector;
#define GL_APPLE_texture_range 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_texture_range;
#define GL_APPLE_transform_hint 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_transform_hint;
#define GL_APPLE_vertex_array_object 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_vertex_array_object;
#define GL_APPLE_vertex_array_range 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_vertex_array_range;
#define GL_APPLE_vertex_program_evaluators 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_vertex_program_evaluators;
#define GL_APPLE_ycbcr_422 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_ycbcr_422;
#define GL_ARB_ES2_compatibility 1
GLAD_API_CALL int SF_GLAD_GL_ARB_ES2_compatibility;
#define GL_ARB_ES3_1_compatibility 1
GLAD_API_CALL int SF_GLAD_GL_ARB_ES3_1_compatibility;
#define GL_ARB_ES3_2_compatibility 1
GLAD_API_CALL int SF_GLAD_GL_ARB_ES3_2_compatibility;
#define GL_ARB_ES3_compatibility 1
GLAD_API_CALL int SF_GLAD_GL_ARB_ES3_compatibility;
#define GL_ARB_arrays_of_arrays 1
GLAD_API_CALL int SF_GLAD_GL_ARB_arrays_of_arrays;
#define GL_ARB_base_instance 1
GLAD_API_CALL int SF_GLAD_GL_ARB_base_instance;
#define GL_ARB_bindless_texture 1
GLAD_API_CALL int SF_GLAD_GL_ARB_bindless_texture;
#define GL_ARB_blend_func_extended 1
GLAD_API_CALL int SF_GLAD_GL_ARB_blend_func_extended;
#define GL_ARB_buffer_storage 1
GLAD_API_CALL int SF_GLAD_GL_ARB_buffer_storage;
#define GL_ARB_cl_event 1
GLAD_API_CALL int SF_GLAD_GL_ARB_cl_event;
#define GL_ARB_clear_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_clear_buffer_object;
#define GL_ARB_clear_texture 1
GLAD_API_CALL int SF_GLAD_GL_ARB_clear_texture;
#define GL_ARB_clip_control 1
GLAD_API_CALL int SF_GLAD_GL_ARB_clip_control;
#define GL_ARB_color_buffer_float 1
GLAD_API_CALL int SF_GLAD_GL_ARB_color_buffer_float;
#define GL_ARB_compatibility 1
GLAD_API_CALL int SF_GLAD_GL_ARB_compatibility;
#define GL_ARB_compressed_texture_pixel_storage 1
GLAD_API_CALL int SF_GLAD_GL_ARB_compressed_texture_pixel_storage;
#define GL_ARB_compute_shader 1
GLAD_API_CALL int SF_GLAD_GL_ARB_compute_shader;
#define GL_ARB_compute_variable_group_size 1
GLAD_API_CALL int SF_GLAD_GL_ARB_compute_variable_group_size;
#define GL_ARB_conditional_render_inverted 1
GLAD_API_CALL int SF_GLAD_GL_ARB_conditional_render_inverted;
#define GL_ARB_conservative_depth 1
GLAD_API_CALL int SF_GLAD_GL_ARB_conservative_depth;
#define GL_ARB_copy_buffer 1
GLAD_API_CALL int SF_GLAD_GL_ARB_copy_buffer;
#define GL_ARB_copy_image 1
GLAD_API_CALL int SF_GLAD_GL_ARB_copy_image;
#define GL_ARB_cull_distance 1
GLAD_API_CALL int SF_GLAD_GL_ARB_cull_distance;
#define GL_ARB_debug_output 1
GLAD_API_CALL int SF_GLAD_GL_ARB_debug_output;
#define GL_ARB_depth_buffer_float 1
GLAD_API_CALL int SF_GLAD_GL_ARB_depth_buffer_float;
#define GL_ARB_depth_clamp 1
GLAD_API_CALL int SF_GLAD_GL_ARB_depth_clamp;
#define GL_ARB_depth_texture 1
GLAD_API_CALL int SF_GLAD_GL_ARB_depth_texture;
#define GL_ARB_derivative_control 1
GLAD_API_CALL int SF_GLAD_GL_ARB_derivative_control;
#define GL_ARB_direct_state_access 1
GLAD_API_CALL int SF_GLAD_GL_ARB_direct_state_access;
#define GL_ARB_draw_buffers 1
GLAD_API_CALL int SF_GLAD_GL_ARB_draw_buffers;
#define GL_ARB_draw_buffers_blend 1
GLAD_API_CALL int SF_GLAD_GL_ARB_draw_buffers_blend;
#define GL_ARB_draw_elements_base_vertex 1
GLAD_API_CALL int SF_GLAD_GL_ARB_draw_elements_base_vertex;
#define GL_ARB_draw_indirect 1
GLAD_API_CALL int SF_GLAD_GL_ARB_draw_indirect;
#define GL_ARB_draw_instanced 1
GLAD_API_CALL int SF_GLAD_GL_ARB_draw_instanced;
#define GL_ARB_enhanced_layouts 1
GLAD_API_CALL int SF_GLAD_GL_ARB_enhanced_layouts;
#define GL_ARB_explicit_attrib_location 1
GLAD_API_CALL int SF_GLAD_GL_ARB_explicit_attrib_location;
#define GL_ARB_explicit_uniform_location 1
GLAD_API_CALL int SF_GLAD_GL_ARB_explicit_uniform_location;
#define GL_ARB_fragment_coord_conventions 1
GLAD_API_CALL int SF_GLAD_GL_ARB_fragment_coord_conventions;
#define GL_ARB_fragment_layer_viewport 1
GLAD_API_CALL int SF_GLAD_GL_ARB_fragment_layer_viewport;
#define GL_ARB_fragment_program 1
GLAD_API_CALL int SF_GLAD_GL_ARB_fragment_program;
#define GL_ARB_fragment_program_shadow 1
GLAD_API_CALL int SF_GLAD_GL_ARB_fragment_program_shadow;
#define GL_ARB_fragment_shader 1
GLAD_API_CALL int SF_GLAD_GL_ARB_fragment_shader;
#define GL_ARB_fragment_shader_interlock 1
GLAD_API_CALL int SF_GLAD_GL_ARB_fragment_shader_interlock;
#define GL_ARB_framebuffer_no_attachments 1
GLAD_API_CALL int SF_GLAD_GL_ARB_framebuffer_no_attachments;
#define GL_ARB_framebuffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_framebuffer_object;
#define GL_ARB_framebuffer_sRGB 1
GLAD_API_CALL int SF_GLAD_GL_ARB_framebuffer_sRGB;
#define GL_ARB_geometry_shader4 1
GLAD_API_CALL int SF_GLAD_GL_ARB_geometry_shader4;
#define GL_ARB_get_program_binary 1
GLAD_API_CALL int SF_GLAD_GL_ARB_get_program_binary;
#define GL_ARB_get_texture_sub_image 1
GLAD_API_CALL int SF_GLAD_GL_ARB_get_texture_sub_image;
#define GL_ARB_gl_spirv 1
GLAD_API_CALL int SF_GLAD_GL_ARB_gl_spirv;
#define GL_ARB_gpu_shader5 1
GLAD_API_CALL int SF_GLAD_GL_ARB_gpu_shader5;
#define GL_ARB_gpu_shader_fp64 1
GLAD_API_CALL int SF_GLAD_GL_ARB_gpu_shader_fp64;
#define GL_ARB_gpu_shader_int64 1
GLAD_API_CALL int SF_GLAD_GL_ARB_gpu_shader_int64;
#define GL_ARB_half_float_pixel 1
GLAD_API_CALL int SF_GLAD_GL_ARB_half_float_pixel;
#define GL_ARB_half_float_vertex 1
GLAD_API_CALL int SF_GLAD_GL_ARB_half_float_vertex;
#define GL_ARB_imaging 1
GLAD_API_CALL int SF_GLAD_GL_ARB_imaging;
#define GL_ARB_indirect_parameters 1
GLAD_API_CALL int SF_GLAD_GL_ARB_indirect_parameters;
#define GL_ARB_instanced_arrays 1
GLAD_API_CALL int SF_GLAD_GL_ARB_instanced_arrays;
#define GL_ARB_internalformat_query 1
GLAD_API_CALL int SF_GLAD_GL_ARB_internalformat_query;
#define GL_ARB_internalformat_query2 1
GLAD_API_CALL int SF_GLAD_GL_ARB_internalformat_query2;
#define GL_ARB_invalidate_subdata 1
GLAD_API_CALL int SF_GLAD_GL_ARB_invalidate_subdata;
#define GL_ARB_map_buffer_alignment 1
GLAD_API_CALL int SF_GLAD_GL_ARB_map_buffer_alignment;
#define GL_ARB_map_buffer_range 1
GLAD_API_CALL int SF_GLAD_GL_ARB_map_buffer_range;
#define GL_ARB_matrix_palette 1
GLAD_API_CALL int SF_GLAD_GL_ARB_matrix_palette;
#define GL_ARB_multi_bind 1
GLAD_API_CALL int SF_GLAD_GL_ARB_multi_bind;
#define GL_ARB_multi_draw_indirect 1
GLAD_API_CALL int SF_GLAD_GL_ARB_multi_draw_indirect;
#define GL_ARB_multisample 1
GLAD_API_CALL int SF_GLAD_GL_ARB_multisample;
#define GL_ARB_multitexture 1
GLAD_API_CALL int SF_GLAD_GL_ARB_multitexture;
#define GL_ARB_occlusion_query 1
GLAD_API_CALL int SF_GLAD_GL_ARB_occlusion_query;
#define GL_ARB_occlusion_query2 1
GLAD_API_CALL int SF_GLAD_GL_ARB_occlusion_query2;
#define GL_ARB_parallel_shader_compile 1
GLAD_API_CALL int SF_GLAD_GL_ARB_parallel_shader_compile;
#define GL_ARB_pipeline_statistics_query 1
GLAD_API_CALL int SF_GLAD_GL_ARB_pipeline_statistics_query;
#define GL_ARB_pixel_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_pixel_buffer_object;
#define GL_ARB_point_parameters 1
GLAD_API_CALL int SF_GLAD_GL_ARB_point_parameters;
#define GL_ARB_point_sprite 1
GLAD_API_CALL int SF_GLAD_GL_ARB_point_sprite;
#define GL_ARB_polygon_offset_clamp 1
GLAD_API_CALL int SF_GLAD_GL_ARB_polygon_offset_clamp;
#define GL_ARB_post_depth_coverage 1
GLAD_API_CALL int SF_GLAD_GL_ARB_post_depth_coverage;
#define GL_ARB_program_interface_query 1
GLAD_API_CALL int SF_GLAD_GL_ARB_program_interface_query;
#define GL_ARB_provoking_vertex 1
GLAD_API_CALL int SF_GLAD_GL_ARB_provoking_vertex;
#define GL_ARB_query_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_query_buffer_object;
#define GL_ARB_robust_buffer_access_behavior 1
GLAD_API_CALL int SF_GLAD_GL_ARB_robust_buffer_access_behavior;
#define GL_ARB_robustness 1
GLAD_API_CALL int SF_GLAD_GL_ARB_robustness;
#define GL_ARB_robustness_isolation 1
GLAD_API_CALL int SF_GLAD_GL_ARB_robustness_isolation;
#define GL_ARB_sample_locations 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sample_locations;
#define GL_ARB_sample_shading 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sample_shading;
#define GL_ARB_sampler_objects 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sampler_objects;
#define GL_ARB_seamless_cube_map 1
GLAD_API_CALL int SF_GLAD_GL_ARB_seamless_cube_map;
#define GL_ARB_seamless_cubemap_per_texture 1
GLAD_API_CALL int SF_GLAD_GL_ARB_seamless_cubemap_per_texture;
#define GL_ARB_separate_shader_objects 1
GLAD_API_CALL int SF_GLAD_GL_ARB_separate_shader_objects;
#define GL_ARB_shader_atomic_counter_ops 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_atomic_counter_ops;
#define GL_ARB_shader_atomic_counters 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_atomic_counters;
#define GL_ARB_shader_ballot 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_ballot;
#define GL_ARB_shader_bit_encoding 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_bit_encoding;
#define GL_ARB_shader_clock 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_clock;
#define GL_ARB_shader_draw_parameters 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_draw_parameters;
#define GL_ARB_shader_group_vote 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_group_vote;
#define GL_ARB_shader_image_load_store 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_image_load_store;
#define GL_ARB_shader_image_size 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_image_size;
#define GL_ARB_shader_objects 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_objects;
#define GL_ARB_shader_precision 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_precision;
#define GL_ARB_shader_stencil_export 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_stencil_export;
#define GL_ARB_shader_storage_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_storage_buffer_object;
#define GL_ARB_shader_subroutine 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_subroutine;
#define GL_ARB_shader_texture_image_samples 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_texture_image_samples;
#define GL_ARB_shader_texture_lod 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_texture_lod;
#define GL_ARB_shader_viewport_layer_array 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shader_viewport_layer_array;
#define GL_ARB_shading_language_100 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shading_language_100;
#define GL_ARB_shading_language_420pack 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shading_language_420pack;
#define GL_ARB_shading_language_include 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shading_language_include;
#define GL_ARB_shading_language_packing 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shading_language_packing;
#define GL_ARB_shadow 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shadow;
#define GL_ARB_shadow_ambient 1
GLAD_API_CALL int SF_GLAD_GL_ARB_shadow_ambient;
#define GL_ARB_sparse_buffer 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sparse_buffer;
#define GL_ARB_sparse_texture 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sparse_texture;
#define GL_ARB_sparse_texture2 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sparse_texture2;
#define GL_ARB_sparse_texture_clamp 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sparse_texture_clamp;
#define GL_ARB_spirv_extensions 1
GLAD_API_CALL int SF_GLAD_GL_ARB_spirv_extensions;
#define GL_ARB_stencil_texturing 1
GLAD_API_CALL int SF_GLAD_GL_ARB_stencil_texturing;
#define GL_ARB_sync 1
GLAD_API_CALL int SF_GLAD_GL_ARB_sync;
#define GL_ARB_tessellation_shader 1
GLAD_API_CALL int SF_GLAD_GL_ARB_tessellation_shader;
#define GL_ARB_texture_barrier 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_barrier;
#define GL_ARB_texture_border_clamp 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_border_clamp;
#define GL_ARB_texture_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_buffer_object;
#define GL_ARB_texture_buffer_object_rgb32 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_buffer_object_rgb32;
#define GL_ARB_texture_buffer_range 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_buffer_range;
#define GL_ARB_texture_compression 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_compression;
#define GL_ARB_texture_compression_bptc 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_compression_bptc;
#define GL_ARB_texture_compression_rgtc 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_compression_rgtc;
#define GL_ARB_texture_cube_map 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_cube_map;
#define GL_ARB_texture_cube_map_array 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_cube_map_array;
#define GL_ARB_texture_env_add 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_env_add;
#define GL_ARB_texture_env_combine 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_env_combine;
#define GL_ARB_texture_env_crossbar 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_env_crossbar;
#define GL_ARB_texture_env_dot3 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_env_dot3;
#define GL_ARB_texture_filter_anisotropic 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_filter_anisotropic;
#define GL_ARB_texture_filter_minmax 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_filter_minmax;
#define GL_ARB_texture_float 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_float;
#define GL_ARB_texture_gather 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_gather;
#define GL_ARB_texture_mirror_clamp_to_edge 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_mirror_clamp_to_edge;
#define GL_ARB_texture_mirrored_repeat 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_mirrored_repeat;
#define GL_ARB_texture_multisample 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_multisample;
#define GL_ARB_texture_non_power_of_two 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_non_power_of_two;
#define GL_ARB_texture_query_levels 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_query_levels;
#define GL_ARB_texture_query_lod 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_query_lod;
#define GL_ARB_texture_rectangle 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_rectangle;
#define GL_ARB_texture_rg 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_rg;
#define GL_ARB_texture_rgb10_a2ui 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_rgb10_a2ui;
#define GL_ARB_texture_stencil8 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_stencil8;
#define GL_ARB_texture_storage 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_storage;
#define GL_ARB_texture_storage_multisample 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_storage_multisample;
#define GL_ARB_texture_swizzle 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_swizzle;
#define GL_ARB_texture_view 1
GLAD_API_CALL int SF_GLAD_GL_ARB_texture_view;
#define GL_ARB_timer_query 1
GLAD_API_CALL int SF_GLAD_GL_ARB_timer_query;
#define GL_ARB_transform_feedback2 1
GLAD_API_CALL int SF_GLAD_GL_ARB_transform_feedback2;
#define GL_ARB_transform_feedback3 1
GLAD_API_CALL int SF_GLAD_GL_ARB_transform_feedback3;
#define GL_ARB_transform_feedback_instanced 1
GLAD_API_CALL int SF_GLAD_GL_ARB_transform_feedback_instanced;
#define GL_ARB_transform_feedback_overflow_query 1
GLAD_API_CALL int SF_GLAD_GL_ARB_transform_feedback_overflow_query;
#define GL_ARB_transpose_matrix 1
GLAD_API_CALL int SF_GLAD_GL_ARB_transpose_matrix;
#define GL_ARB_uniform_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_uniform_buffer_object;
#define GL_ARB_vertex_array_bgra 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_array_bgra;
#define GL_ARB_vertex_array_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_array_object;
#define GL_ARB_vertex_attrib_64bit 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_attrib_64bit;
#define GL_ARB_vertex_attrib_binding 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_attrib_binding;
#define GL_ARB_vertex_blend 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_blend;
#define GL_ARB_vertex_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_buffer_object;
#define GL_ARB_vertex_program 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_program;
#define GL_ARB_vertex_shader 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_shader;
#define GL_ARB_vertex_type_10f_11f_11f_rev 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_type_10f_11f_11f_rev;
#define GL_ARB_vertex_type_2_10_10_10_rev 1
GLAD_API_CALL int SF_GLAD_GL_ARB_vertex_type_2_10_10_10_rev;
#define GL_ARB_viewport_array 1
GLAD_API_CALL int SF_GLAD_GL_ARB_viewport_array;
#define GL_ARB_window_pos 1
GLAD_API_CALL int SF_GLAD_GL_ARB_window_pos;
#define GL_ATI_draw_buffers 1
GLAD_API_CALL int SF_GLAD_GL_ATI_draw_buffers;
#define GL_ATI_element_array 1
GLAD_API_CALL int SF_GLAD_GL_ATI_element_array;
#define GL_ATI_envmap_bumpmap 1
GLAD_API_CALL int SF_GLAD_GL_ATI_envmap_bumpmap;
#define GL_ATI_fragment_shader 1
GLAD_API_CALL int SF_GLAD_GL_ATI_fragment_shader;
#define GL_ATI_map_object_buffer 1
GLAD_API_CALL int SF_GLAD_GL_ATI_map_object_buffer;
#define GL_ATI_meminfo 1
GLAD_API_CALL int SF_GLAD_GL_ATI_meminfo;
#define GL_ATI_pixel_format_float 1
GLAD_API_CALL int SF_GLAD_GL_ATI_pixel_format_float;
#define GL_ATI_pn_triangles 1
GLAD_API_CALL int SF_GLAD_GL_ATI_pn_triangles;
#define GL_ATI_separate_stencil 1
GLAD_API_CALL int SF_GLAD_GL_ATI_separate_stencil;
#define GL_ATI_text_fragment_shader 1
GLAD_API_CALL int SF_GLAD_GL_ATI_text_fragment_shader;
#define GL_ATI_texture_env_combine3 1
GLAD_API_CALL int SF_GLAD_GL_ATI_texture_env_combine3;
#define GL_ATI_texture_float 1
GLAD_API_CALL int SF_GLAD_GL_ATI_texture_float;
#define GL_ATI_texture_mirror_once 1
GLAD_API_CALL int SF_GLAD_GL_ATI_texture_mirror_once;
#define GL_ATI_vertex_array_object 1
GLAD_API_CALL int SF_GLAD_GL_ATI_vertex_array_object;
#define GL_ATI_vertex_attrib_array_object 1
GLAD_API_CALL int SF_GLAD_GL_ATI_vertex_attrib_array_object;
#define GL_ATI_vertex_streams 1
GLAD_API_CALL int SF_GLAD_GL_ATI_vertex_streams;
#define GL_EXT_422_pixels 1
GLAD_API_CALL int SF_GLAD_GL_EXT_422_pixels;
#define GL_EXT_EGL_image_storage 1
GLAD_API_CALL int SF_GLAD_GL_EXT_EGL_image_storage;
#define GL_EXT_EGL_sync 1
GLAD_API_CALL int SF_GLAD_GL_EXT_EGL_sync;
#define GL_EXT_abgr 1
GLAD_API_CALL int SF_GLAD_GL_EXT_abgr;
#define GL_EXT_bgra 1
GLAD_API_CALL int SF_GLAD_GL_EXT_bgra;
#define GL_EXT_bindable_uniform 1
GLAD_API_CALL int SF_GLAD_GL_EXT_bindable_uniform;
#define GL_EXT_blend_color 1
GLAD_API_CALL int SF_GLAD_GL_EXT_blend_color;
#define GL_EXT_blend_equation_separate 1
GLAD_API_CALL int SF_GLAD_GL_EXT_blend_equation_separate;
#define GL_EXT_blend_func_separate 1
GLAD_API_CALL int SF_GLAD_GL_EXT_blend_func_separate;
#define GL_EXT_blend_logic_op 1
GLAD_API_CALL int SF_GLAD_GL_EXT_blend_logic_op;
#define GL_EXT_blend_minmax 1
GLAD_API_CALL int SF_GLAD_GL_EXT_blend_minmax;
#define GL_EXT_blend_subtract 1
GLAD_API_CALL int SF_GLAD_GL_EXT_blend_subtract;
#define GL_EXT_clip_volume_hint 1
GLAD_API_CALL int SF_GLAD_GL_EXT_clip_volume_hint;
#define GL_EXT_cmyka 1
GLAD_API_CALL int SF_GLAD_GL_EXT_cmyka;
#define GL_EXT_color_subtable 1
GLAD_API_CALL int SF_GLAD_GL_EXT_color_subtable;
#define GL_EXT_compiled_vertex_array 1
GLAD_API_CALL int SF_GLAD_GL_EXT_compiled_vertex_array;
#define GL_EXT_convolution 1
GLAD_API_CALL int SF_GLAD_GL_EXT_convolution;
#define GL_EXT_coordinate_frame 1
GLAD_API_CALL int SF_GLAD_GL_EXT_coordinate_frame;
#define GL_EXT_copy_texture 1
GLAD_API_CALL int SF_GLAD_GL_EXT_copy_texture;
#define GL_EXT_cull_vertex 1
GLAD_API_CALL int SF_GLAD_GL_EXT_cull_vertex;
#define GL_EXT_debug_label 1
GLAD_API_CALL int SF_GLAD_GL_EXT_debug_label;
#define GL_EXT_debug_marker 1
GLAD_API_CALL int SF_GLAD_GL_EXT_debug_marker;
#define GL_EXT_depth_bounds_test 1
GLAD_API_CALL int SF_GLAD_GL_EXT_depth_bounds_test;
#define GL_EXT_direct_state_access 1
GLAD_API_CALL int SF_GLAD_GL_EXT_direct_state_access;
#define GL_EXT_draw_buffers2 1
GLAD_API_CALL int SF_GLAD_GL_EXT_draw_buffers2;
#define GL_EXT_draw_instanced 1
GLAD_API_CALL int SF_GLAD_GL_EXT_draw_instanced;
#define GL_EXT_draw_range_elements 1
GLAD_API_CALL int SF_GLAD_GL_EXT_draw_range_elements;
#define GL_EXT_external_buffer 1
GLAD_API_CALL int SF_GLAD_GL_EXT_external_buffer;
#define GL_EXT_fog_coord 1
GLAD_API_CALL int SF_GLAD_GL_EXT_fog_coord;
#define GL_EXT_framebuffer_blit 1
GLAD_API_CALL int SF_GLAD_GL_EXT_framebuffer_blit;
#define GL_EXT_framebuffer_blit_layers 1
GLAD_API_CALL int SF_GLAD_GL_EXT_framebuffer_blit_layers;
#define GL_EXT_framebuffer_multisample 1
GLAD_API_CALL int SF_GLAD_GL_EXT_framebuffer_multisample;
#define GL_EXT_framebuffer_multisample_blit_scaled 1
GLAD_API_CALL int SF_GLAD_GL_EXT_framebuffer_multisample_blit_scaled;
#define GL_EXT_framebuffer_object 1
GLAD_API_CALL int SF_GLAD_GL_EXT_framebuffer_object;
#define GL_EXT_framebuffer_sRGB 1
GLAD_API_CALL int SF_GLAD_GL_EXT_framebuffer_sRGB;
#define GL_EXT_geometry_shader4 1
GLAD_API_CALL int SF_GLAD_GL_EXT_geometry_shader4;
#define GL_EXT_gpu_program_parameters 1
GLAD_API_CALL int SF_GLAD_GL_EXT_gpu_program_parameters;
#define GL_EXT_gpu_shader4 1
GLAD_API_CALL int SF_GLAD_GL_EXT_gpu_shader4;
#define GL_EXT_histogram 1
GLAD_API_CALL int SF_GLAD_GL_EXT_histogram;
#define GL_EXT_index_array_formats 1
GLAD_API_CALL int SF_GLAD_GL_EXT_index_array_formats;
#define GL_EXT_index_func 1
GLAD_API_CALL int SF_GLAD_GL_EXT_index_func;
#define GL_EXT_index_material 1
GLAD_API_CALL int SF_GLAD_GL_EXT_index_material;
#define GL_EXT_index_texture 1
GLAD_API_CALL int SF_GLAD_GL_EXT_index_texture;
#define GL_EXT_light_texture 1
GLAD_API_CALL int SF_GLAD_GL_EXT_light_texture;
#define GL_EXT_memory_object 1
GLAD_API_CALL int SF_GLAD_GL_EXT_memory_object;
#define GL_EXT_memory_object_fd 1
GLAD_API_CALL int SF_GLAD_GL_EXT_memory_object_fd;
#define GL_EXT_memory_object_win32 1
GLAD_API_CALL int SF_GLAD_GL_EXT_memory_object_win32;
#define GL_EXT_misc_attribute 1
GLAD_API_CALL int SF_GLAD_GL_EXT_misc_attribute;
#define GL_EXT_multi_draw_arrays 1
GLAD_API_CALL int SF_GLAD_GL_EXT_multi_draw_arrays;
#define GL_EXT_multisample 1
GLAD_API_CALL int SF_GLAD_GL_EXT_multisample;
#define GL_EXT_multiview_tessellation_geometry_shader 1
GLAD_API_CALL int SF_GLAD_GL_EXT_multiview_tessellation_geometry_shader;
#define GL_EXT_multiview_texture_multisample 1
GLAD_API_CALL int SF_GLAD_GL_EXT_multiview_texture_multisample;
#define GL_EXT_multiview_timer_query 1
GLAD_API_CALL int SF_GLAD_GL_EXT_multiview_timer_query;
#define GL_EXT_packed_depth_stencil 1
GLAD_API_CALL int SF_GLAD_GL_EXT_packed_depth_stencil;
#define GL_EXT_packed_float 1
GLAD_API_CALL int SF_GLAD_GL_EXT_packed_float;
#define GL_EXT_packed_pixels 1
GLAD_API_CALL int SF_GLAD_GL_EXT_packed_pixels;
#define GL_EXT_paletted_texture 1
GLAD_API_CALL int SF_GLAD_GL_EXT_paletted_texture;
#define GL_EXT_pixel_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_EXT_pixel_buffer_object;
#define GL_EXT_pixel_transform 1
GLAD_API_CALL int SF_GLAD_GL_EXT_pixel_transform;
#define GL_EXT_pixel_transform_color_table 1
GLAD_API_CALL int SF_GLAD_GL_EXT_pixel_transform_color_table;
#define GL_EXT_point_parameters 1
GLAD_API_CALL int SF_GLAD_GL_EXT_point_parameters;
#define GL_EXT_polygon_offset 1
GLAD_API_CALL int SF_GLAD_GL_EXT_polygon_offset;
#define GL_EXT_polygon_offset_clamp 1
GLAD_API_CALL int SF_GLAD_GL_EXT_polygon_offset_clamp;
#define GL_EXT_post_depth_coverage 1
GLAD_API_CALL int SF_GLAD_GL_EXT_post_depth_coverage;
#define GL_EXT_provoking_vertex 1
GLAD_API_CALL int SF_GLAD_GL_EXT_provoking_vertex;
#define GL_EXT_raster_multisample 1
GLAD_API_CALL int SF_GLAD_GL_EXT_raster_multisample;
#define GL_EXT_rescale_normal 1
GLAD_API_CALL int SF_GLAD_GL_EXT_rescale_normal;
#define GL_EXT_secondary_color 1
GLAD_API_CALL int SF_GLAD_GL_EXT_secondary_color;
#define GL_EXT_semaphore 1
GLAD_API_CALL int SF_GLAD_GL_EXT_semaphore;
#define GL_EXT_semaphore_fd 1
GLAD_API_CALL int SF_GLAD_GL_EXT_semaphore_fd;
#define GL_EXT_semaphore_win32 1
GLAD_API_CALL int SF_GLAD_GL_EXT_semaphore_win32;
#define GL_EXT_separate_shader_objects 1
GLAD_API_CALL int SF_GLAD_GL_EXT_separate_shader_objects;
#define GL_EXT_separate_specular_color 1
GLAD_API_CALL int SF_GLAD_GL_EXT_separate_specular_color;
#define GL_EXT_shader_framebuffer_fetch 1
GLAD_API_CALL int SF_GLAD_GL_EXT_shader_framebuffer_fetch;
#define GL_EXT_shader_framebuffer_fetch_non_coherent 1
GLAD_API_CALL int SF_GLAD_GL_EXT_shader_framebuffer_fetch_non_coherent;
#define GL_EXT_shader_image_load_formatted 1
GLAD_API_CALL int SF_GLAD_GL_EXT_shader_image_load_formatted;
#define GL_EXT_shader_image_load_store 1
GLAD_API_CALL int SF_GLAD_GL_EXT_shader_image_load_store;
#define GL_EXT_shader_integer_mix 1
GLAD_API_CALL int SF_GLAD_GL_EXT_shader_integer_mix;
#define GL_EXT_shader_samples_identical 1
GLAD_API_CALL int SF_GLAD_GL_EXT_shader_samples_identical;
#define GL_EXT_shadow_funcs 1
GLAD_API_CALL int SF_GLAD_GL_EXT_shadow_funcs;
#define GL_EXT_shared_texture_palette 1
GLAD_API_CALL int SF_GLAD_GL_EXT_shared_texture_palette;
#define GL_EXT_sparse_texture2 1
GLAD_API_CALL int SF_GLAD_GL_EXT_sparse_texture2;
#define GL_EXT_stencil_clear_tag 1
GLAD_API_CALL int SF_GLAD_GL_EXT_stencil_clear_tag;
#define GL_EXT_stencil_two_side 1
GLAD_API_CALL int SF_GLAD_GL_EXT_stencil_two_side;
#define GL_EXT_stencil_wrap 1
GLAD_API_CALL int SF_GLAD_GL_EXT_stencil_wrap;
#define GL_EXT_subtexture 1
GLAD_API_CALL int SF_GLAD_GL_EXT_subtexture;
#define GL_EXT_texture 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture;
#define GL_EXT_texture3D 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture3D;
#define GL_EXT_texture_array 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_array;
#define GL_EXT_texture_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_buffer_object;
#define GL_EXT_texture_compression_latc 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_compression_latc;
#define GL_EXT_texture_compression_rgtc 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_compression_rgtc;
#define GL_EXT_texture_compression_s3tc 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_compression_s3tc;
#define GL_EXT_texture_cube_map 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_cube_map;
#define GL_EXT_texture_env_add 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_env_add;
#define GL_EXT_texture_env_combine 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_env_combine;
#define GL_EXT_texture_env_dot3 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_env_dot3;
#define GL_EXT_texture_filter_anisotropic 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_filter_anisotropic;
#define GL_EXT_texture_filter_minmax 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_filter_minmax;
#define GL_EXT_texture_integer 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_integer;
#define GL_EXT_texture_lod_bias 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_lod_bias;
#define GL_EXT_texture_mirror_clamp 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_mirror_clamp;
#define GL_EXT_texture_object 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_object;
#define GL_EXT_texture_perturb_normal 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_perturb_normal;
#define GL_EXT_texture_sRGB 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_sRGB;
#define GL_EXT_texture_sRGB_R8 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_sRGB_R8;
#define GL_EXT_texture_sRGB_RG8 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_sRGB_RG8;
#define GL_EXT_texture_sRGB_decode 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_sRGB_decode;
#define GL_EXT_texture_shadow_lod 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_shadow_lod;
#define GL_EXT_texture_shared_exponent 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_shared_exponent;
#define GL_EXT_texture_snorm 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_snorm;
#define GL_EXT_texture_storage 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_storage;
#define GL_EXT_texture_swizzle 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_swizzle;
#define GL_EXT_timer_query 1
GLAD_API_CALL int SF_GLAD_GL_EXT_timer_query;
#define GL_EXT_transform_feedback 1
GLAD_API_CALL int SF_GLAD_GL_EXT_transform_feedback;
#define GL_EXT_vertex_array 1
GLAD_API_CALL int SF_GLAD_GL_EXT_vertex_array;
#define GL_EXT_vertex_array_bgra 1
GLAD_API_CALL int SF_GLAD_GL_EXT_vertex_array_bgra;
#define GL_EXT_vertex_attrib_64bit 1
GLAD_API_CALL int SF_GLAD_GL_EXT_vertex_attrib_64bit;
#define GL_EXT_vertex_shader 1
GLAD_API_CALL int SF_GLAD_GL_EXT_vertex_shader;
#define GL_EXT_vertex_weighting 1
GLAD_API_CALL int SF_GLAD_GL_EXT_vertex_weighting;
#define GL_EXT_win32_keyed_mutex 1
GLAD_API_CALL int SF_GLAD_GL_EXT_win32_keyed_mutex;
#define GL_EXT_window_rectangles 1
GLAD_API_CALL int SF_GLAD_GL_EXT_window_rectangles;
#define GL_EXT_x11_sync_object 1
GLAD_API_CALL int SF_GLAD_GL_EXT_x11_sync_object;
#define GL_GREMEDY_frame_terminator 1
GLAD_API_CALL int SF_GLAD_GL_GREMEDY_frame_terminator;
#define GL_GREMEDY_string_marker 1
GLAD_API_CALL int SF_GLAD_GL_GREMEDY_string_marker;
#define GL_HP_convolution_border_modes 1
GLAD_API_CALL int SF_GLAD_GL_HP_convolution_border_modes;
#define GL_HP_image_transform 1
GLAD_API_CALL int SF_GLAD_GL_HP_image_transform;
#define GL_HP_occlusion_test 1
GLAD_API_CALL int SF_GLAD_GL_HP_occlusion_test;
#define GL_HP_texture_lighting 1
GLAD_API_CALL int SF_GLAD_GL_HP_texture_lighting;
#define GL_IBM_cull_vertex 1
GLAD_API_CALL int SF_GLAD_GL_IBM_cull_vertex;
#define GL_IBM_multimode_draw_arrays 1
GLAD_API_CALL int SF_GLAD_GL_IBM_multimode_draw_arrays;
#define GL_IBM_rasterpos_clip 1
GLAD_API_CALL int SF_GLAD_GL_IBM_rasterpos_clip;
#define GL_IBM_static_data 1
GLAD_API_CALL int SF_GLAD_GL_IBM_static_data;
#define GL_IBM_texture_mirrored_repeat 1
GLAD_API_CALL int SF_GLAD_GL_IBM_texture_mirrored_repeat;
#define GL_IBM_vertex_array_lists 1
GLAD_API_CALL int SF_GLAD_GL_IBM_vertex_array_lists;
#define GL_INGR_blend_func_separate 1
GLAD_API_CALL int SF_GLAD_GL_INGR_blend_func_separate;
#define GL_INGR_color_clamp 1
GLAD_API_CALL int SF_GLAD_GL_INGR_color_clamp;
#define GL_INGR_interlace_read 1
GLAD_API_CALL int SF_GLAD_GL_INGR_interlace_read;
#define GL_INTEL_blackhole_render 1
GLAD_API_CALL int SF_GLAD_GL_INTEL_blackhole_render;
#define GL_INTEL_conservative_rasterization 1
GLAD_API_CALL int SF_GLAD_GL_INTEL_conservative_rasterization;
#define GL_INTEL_fragment_shader_ordering 1
GLAD_API_CALL int SF_GLAD_GL_INTEL_fragment_shader_ordering;
#define GL_INTEL_framebuffer_CMAA 1
GLAD_API_CALL int SF_GLAD_GL_INTEL_framebuffer_CMAA;
#define GL_INTEL_map_texture 1
GLAD_API_CALL int SF_GLAD_GL_INTEL_map_texture;
#define GL_INTEL_parallel_arrays 1
GLAD_API_CALL int SF_GLAD_GL_INTEL_parallel_arrays;
#define GL_INTEL_performance_query 1
GLAD_API_CALL int SF_GLAD_GL_INTEL_performance_query;
#define GL_KHR_blend_equation_advanced 1
GLAD_API_CALL int SF_GLAD_GL_KHR_blend_equation_advanced;
#define GL_KHR_blend_equation_advanced_coherent 1
GLAD_API_CALL int SF_GLAD_GL_KHR_blend_equation_advanced_coherent;
#define GL_KHR_context_flush_control 1
GLAD_API_CALL int SF_GLAD_GL_KHR_context_flush_control;
#define GL_KHR_debug 1
GLAD_API_CALL int SF_GLAD_GL_KHR_debug;
#define GL_KHR_no_error 1
GLAD_API_CALL int SF_GLAD_GL_KHR_no_error;
#define GL_KHR_parallel_shader_compile 1
GLAD_API_CALL int SF_GLAD_GL_KHR_parallel_shader_compile;
#define GL_KHR_robust_buffer_access_behavior 1
GLAD_API_CALL int SF_GLAD_GL_KHR_robust_buffer_access_behavior;
#define GL_KHR_robustness 1
GLAD_API_CALL int SF_GLAD_GL_KHR_robustness;
#define GL_KHR_shader_subgroup 1
GLAD_API_CALL int SF_GLAD_GL_KHR_shader_subgroup;
#define GL_KHR_texture_compression_astc_hdr 1
GLAD_API_CALL int SF_GLAD_GL_KHR_texture_compression_astc_hdr;
#define GL_KHR_texture_compression_astc_ldr 1
GLAD_API_CALL int SF_GLAD_GL_KHR_texture_compression_astc_ldr;
#define GL_KHR_texture_compression_astc_sliced_3d 1
GLAD_API_CALL int SF_GLAD_GL_KHR_texture_compression_astc_sliced_3d;
#define GL_MESAX_texture_stack 1
GLAD_API_CALL int SF_GLAD_GL_MESAX_texture_stack;
#define GL_MESA_framebuffer_flip_x 1
GLAD_API_CALL int SF_GLAD_GL_MESA_framebuffer_flip_x;
#define GL_MESA_framebuffer_flip_y 1
GLAD_API_CALL int SF_GLAD_GL_MESA_framebuffer_flip_y;
#define GL_MESA_framebuffer_swap_xy 1
GLAD_API_CALL int SF_GLAD_GL_MESA_framebuffer_swap_xy;
#define GL_MESA_pack_invert 1
GLAD_API_CALL int SF_GLAD_GL_MESA_pack_invert;
#define GL_MESA_program_binary_formats 1
GLAD_API_CALL int SF_GLAD_GL_MESA_program_binary_formats;
#define GL_MESA_resize_buffers 1
GLAD_API_CALL int SF_GLAD_GL_MESA_resize_buffers;
#define GL_MESA_shader_integer_functions 1
GLAD_API_CALL int SF_GLAD_GL_MESA_shader_integer_functions;
#define GL_MESA_texture_const_bandwidth 1
GLAD_API_CALL int SF_GLAD_GL_MESA_texture_const_bandwidth;
#define GL_MESA_tile_raster_order 1
GLAD_API_CALL int SF_GLAD_GL_MESA_tile_raster_order;
#define GL_MESA_window_pos 1
GLAD_API_CALL int SF_GLAD_GL_MESA_window_pos;
#define GL_MESA_ycbcr_texture 1
GLAD_API_CALL int SF_GLAD_GL_MESA_ycbcr_texture;
#define GL_NVX_blend_equation_advanced_multi_draw_buffers 1
GLAD_API_CALL int SF_GLAD_GL_NVX_blend_equation_advanced_multi_draw_buffers;
#define GL_NVX_conditional_render 1
GLAD_API_CALL int SF_GLAD_GL_NVX_conditional_render;
#define GL_NVX_gpu_memory_info 1
GLAD_API_CALL int SF_GLAD_GL_NVX_gpu_memory_info;
#define GL_NVX_gpu_multicast2 1
GLAD_API_CALL int SF_GLAD_GL_NVX_gpu_multicast2;
#define GL_NVX_linked_gpu_multicast 1
GLAD_API_CALL int SF_GLAD_GL_NVX_linked_gpu_multicast;
#define GL_NVX_progress_fence 1
GLAD_API_CALL int SF_GLAD_GL_NVX_progress_fence;
#define GL_NV_alpha_to_coverage_dither_control 1
GLAD_API_CALL int SF_GLAD_GL_NV_alpha_to_coverage_dither_control;
#define GL_NV_bindless_multi_draw_indirect 1
GLAD_API_CALL int SF_GLAD_GL_NV_bindless_multi_draw_indirect;
#define GL_NV_bindless_multi_draw_indirect_count 1
GLAD_API_CALL int SF_GLAD_GL_NV_bindless_multi_draw_indirect_count;
#define GL_NV_bindless_texture 1
GLAD_API_CALL int SF_GLAD_GL_NV_bindless_texture;
#define GL_NV_blend_equation_advanced 1
GLAD_API_CALL int SF_GLAD_GL_NV_blend_equation_advanced;
#define GL_NV_blend_equation_advanced_coherent 1
GLAD_API_CALL int SF_GLAD_GL_NV_blend_equation_advanced_coherent;
#define GL_NV_blend_minmax_factor 1
GLAD_API_CALL int SF_GLAD_GL_NV_blend_minmax_factor;
#define GL_NV_blend_square 1
GLAD_API_CALL int SF_GLAD_GL_NV_blend_square;
#define GL_NV_clip_space_w_scaling 1
GLAD_API_CALL int SF_GLAD_GL_NV_clip_space_w_scaling;
#define GL_NV_command_list 1
GLAD_API_CALL int SF_GLAD_GL_NV_command_list;
#define GL_NV_compute_program5 1
GLAD_API_CALL int SF_GLAD_GL_NV_compute_program5;
#define GL_NV_compute_shader_derivatives 1
GLAD_API_CALL int SF_GLAD_GL_NV_compute_shader_derivatives;
#define GL_NV_conditional_render 1
GLAD_API_CALL int SF_GLAD_GL_NV_conditional_render;
#define GL_NV_conservative_raster 1
GLAD_API_CALL int SF_GLAD_GL_NV_conservative_raster;
#define GL_NV_conservative_raster_dilate 1
GLAD_API_CALL int SF_GLAD_GL_NV_conservative_raster_dilate;
#define GL_NV_conservative_raster_pre_snap 1
GLAD_API_CALL int SF_GLAD_GL_NV_conservative_raster_pre_snap;
#define GL_NV_conservative_raster_pre_snap_triangles 1
GLAD_API_CALL int SF_GLAD_GL_NV_conservative_raster_pre_snap_triangles;
#define GL_NV_conservative_raster_underestimation 1
GLAD_API_CALL int SF_GLAD_GL_NV_conservative_raster_underestimation;
#define GL_NV_copy_depth_to_color 1
GLAD_API_CALL int SF_GLAD_GL_NV_copy_depth_to_color;
#define GL_NV_copy_image 1
GLAD_API_CALL int SF_GLAD_GL_NV_copy_image;
#define GL_NV_deep_texture3D 1
GLAD_API_CALL int SF_GLAD_GL_NV_deep_texture3D;
#define GL_NV_depth_buffer_float 1
GLAD_API_CALL int SF_GLAD_GL_NV_depth_buffer_float;
#define GL_NV_depth_clamp 1
GLAD_API_CALL int SF_GLAD_GL_NV_depth_clamp;
#define GL_NV_draw_texture 1
GLAD_API_CALL int SF_GLAD_GL_NV_draw_texture;
#define GL_NV_draw_vulkan_image 1
GLAD_API_CALL int SF_GLAD_GL_NV_draw_vulkan_image;
#define GL_NV_evaluators 1
GLAD_API_CALL int SF_GLAD_GL_NV_evaluators;
#define GL_NV_explicit_multisample 1
GLAD_API_CALL int SF_GLAD_GL_NV_explicit_multisample;
#define GL_NV_fence 1
GLAD_API_CALL int SF_GLAD_GL_NV_fence;
#define GL_NV_fill_rectangle 1
GLAD_API_CALL int SF_GLAD_GL_NV_fill_rectangle;
#define GL_NV_float_buffer 1
GLAD_API_CALL int SF_GLAD_GL_NV_float_buffer;
#define GL_NV_fog_distance 1
GLAD_API_CALL int SF_GLAD_GL_NV_fog_distance;
#define GL_NV_fragment_coverage_to_color 1
GLAD_API_CALL int SF_GLAD_GL_NV_fragment_coverage_to_color;
#define GL_NV_fragment_program 1
GLAD_API_CALL int SF_GLAD_GL_NV_fragment_program;
#define GL_NV_fragment_program2 1
GLAD_API_CALL int SF_GLAD_GL_NV_fragment_program2;
#define GL_NV_fragment_program4 1
GLAD_API_CALL int SF_GLAD_GL_NV_fragment_program4;
#define GL_NV_fragment_program_option 1
GLAD_API_CALL int SF_GLAD_GL_NV_fragment_program_option;
#define GL_NV_fragment_shader_barycentric 1
GLAD_API_CALL int SF_GLAD_GL_NV_fragment_shader_barycentric;
#define GL_NV_fragment_shader_interlock 1
GLAD_API_CALL int SF_GLAD_GL_NV_fragment_shader_interlock;
#define GL_NV_framebuffer_mixed_samples 1
GLAD_API_CALL int SF_GLAD_GL_NV_framebuffer_mixed_samples;
#define GL_NV_framebuffer_multisample_coverage 1
GLAD_API_CALL int SF_GLAD_GL_NV_framebuffer_multisample_coverage;
#define GL_NV_geometry_program4 1
GLAD_API_CALL int SF_GLAD_GL_NV_geometry_program4;
#define GL_NV_geometry_shader4 1
GLAD_API_CALL int SF_GLAD_GL_NV_geometry_shader4;
#define GL_NV_geometry_shader_passthrough 1
GLAD_API_CALL int SF_GLAD_GL_NV_geometry_shader_passthrough;
#define GL_NV_gpu_multicast 1
GLAD_API_CALL int SF_GLAD_GL_NV_gpu_multicast;
#define GL_NV_gpu_program4 1
GLAD_API_CALL int SF_GLAD_GL_NV_gpu_program4;
#define GL_NV_gpu_program5 1
GLAD_API_CALL int SF_GLAD_GL_NV_gpu_program5;
#define GL_NV_gpu_program5_mem_extended 1
GLAD_API_CALL int SF_GLAD_GL_NV_gpu_program5_mem_extended;
#define GL_NV_gpu_shader5 1
GLAD_API_CALL int SF_GLAD_GL_NV_gpu_shader5;
#define GL_NV_half_float 1
GLAD_API_CALL int SF_GLAD_GL_NV_half_float;
#define GL_NV_internalformat_sample_query 1
GLAD_API_CALL int SF_GLAD_GL_NV_internalformat_sample_query;
#define GL_NV_light_max_exponent 1
GLAD_API_CALL int SF_GLAD_GL_NV_light_max_exponent;
#define GL_NV_memory_attachment 1
GLAD_API_CALL int SF_GLAD_GL_NV_memory_attachment;
#define GL_NV_memory_object_sparse 1
GLAD_API_CALL int SF_GLAD_GL_NV_memory_object_sparse;
#define GL_NV_mesh_shader 1
GLAD_API_CALL int SF_GLAD_GL_NV_mesh_shader;
#define GL_NV_multisample_coverage 1
GLAD_API_CALL int SF_GLAD_GL_NV_multisample_coverage;
#define GL_NV_multisample_filter_hint 1
GLAD_API_CALL int SF_GLAD_GL_NV_multisample_filter_hint;
#define GL_NV_occlusion_query 1
GLAD_API_CALL int SF_GLAD_GL_NV_occlusion_query;
#define GL_NV_packed_depth_stencil 1
GLAD_API_CALL int SF_GLAD_GL_NV_packed_depth_stencil;
#define GL_NV_parameter_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_NV_parameter_buffer_object;
#define GL_NV_parameter_buffer_object2 1
GLAD_API_CALL int SF_GLAD_GL_NV_parameter_buffer_object2;
#define GL_NV_path_rendering 1
GLAD_API_CALL int SF_GLAD_GL_NV_path_rendering;
#define GL_NV_path_rendering_shared_edge 1
GLAD_API_CALL int SF_GLAD_GL_NV_path_rendering_shared_edge;
#define GL_NV_pixel_data_range 1
GLAD_API_CALL int SF_GLAD_GL_NV_pixel_data_range;
#define GL_NV_point_sprite 1
GLAD_API_CALL int SF_GLAD_GL_NV_point_sprite;
#define GL_NV_present_video 1
GLAD_API_CALL int SF_GLAD_GL_NV_present_video;
#define GL_NV_primitive_restart 1
GLAD_API_CALL int SF_GLAD_GL_NV_primitive_restart;
#define GL_NV_primitive_shading_rate 1
GLAD_API_CALL int SF_GLAD_GL_NV_primitive_shading_rate;
#define GL_NV_query_resource 1
GLAD_API_CALL int SF_GLAD_GL_NV_query_resource;
#define GL_NV_query_resource_tag 1
GLAD_API_CALL int SF_GLAD_GL_NV_query_resource_tag;
#define GL_NV_register_combiners 1
GLAD_API_CALL int SF_GLAD_GL_NV_register_combiners;
#define GL_NV_register_combiners2 1
GLAD_API_CALL int SF_GLAD_GL_NV_register_combiners2;
#define GL_NV_representative_fragment_test 1
GLAD_API_CALL int SF_GLAD_GL_NV_representative_fragment_test;
#define GL_NV_robustness_video_memory_purge 1
GLAD_API_CALL int SF_GLAD_GL_NV_robustness_video_memory_purge;
#define GL_NV_sample_locations 1
GLAD_API_CALL int SF_GLAD_GL_NV_sample_locations;
#define GL_NV_sample_mask_override_coverage 1
GLAD_API_CALL int SF_GLAD_GL_NV_sample_mask_override_coverage;
#define GL_NV_scissor_exclusive 1
GLAD_API_CALL int SF_GLAD_GL_NV_scissor_exclusive;
#define GL_NV_shader_atomic_counters 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_atomic_counters;
#define GL_NV_shader_atomic_float 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_atomic_float;
#define GL_NV_shader_atomic_float64 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_atomic_float64;
#define GL_NV_shader_atomic_fp16_vector 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_atomic_fp16_vector;
#define GL_NV_shader_atomic_int64 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_atomic_int64;
#define GL_NV_shader_buffer_load 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_buffer_load;
#define GL_NV_shader_buffer_store 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_buffer_store;
#define GL_NV_shader_storage_buffer_object 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_storage_buffer_object;
#define GL_NV_shader_subgroup_partitioned 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_subgroup_partitioned;
#define GL_NV_shader_texture_footprint 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_texture_footprint;
#define GL_NV_shader_thread_group 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_thread_group;
#define GL_NV_shader_thread_shuffle 1
GLAD_API_CALL int SF_GLAD_GL_NV_shader_thread_shuffle;
#define GL_NV_shading_rate_image 1
GLAD_API_CALL int SF_GLAD_GL_NV_shading_rate_image;
#define GL_NV_stereo_view_rendering 1
GLAD_API_CALL int SF_GLAD_GL_NV_stereo_view_rendering;
#define GL_NV_tessellation_program5 1
GLAD_API_CALL int SF_GLAD_GL_NV_tessellation_program5;
#define GL_NV_texgen_emboss 1
GLAD_API_CALL int SF_GLAD_GL_NV_texgen_emboss;
#define GL_NV_texgen_reflection 1
GLAD_API_CALL int SF_GLAD_GL_NV_texgen_reflection;
#define GL_NV_texture_barrier 1
GLAD_API_CALL int SF_GLAD_GL_NV_texture_barrier;
#define GL_NV_texture_compression_vtc 1
GLAD_API_CALL int SF_GLAD_GL_NV_texture_compression_vtc;
#define GL_NV_texture_env_combine4 1
GLAD_API_CALL int SF_GLAD_GL_NV_texture_env_combine4;
#define GL_NV_texture_expand_normal 1
GLAD_API_CALL int SF_GLAD_GL_NV_texture_expand_normal;
#define GL_NV_texture_multisample 1
GLAD_API_CALL int SF_GLAD_GL_NV_texture_multisample;
#define GL_NV_texture_rectangle 1
GLAD_API_CALL int SF_GLAD_GL_NV_texture_rectangle;
#define GL_NV_texture_rectangle_compressed 1
GLAD_API_CALL int SF_GLAD_GL_NV_texture_rectangle_compressed;
#define GL_NV_texture_shader 1
GLAD_API_CALL int SF_GLAD_GL_NV_texture_shader;
#define GL_NV_texture_shader2 1
GLAD_API_CALL int SF_GLAD_GL_NV_texture_shader2;
#define GL_NV_texture_shader3 1
GLAD_API_CALL int SF_GLAD_GL_NV_texture_shader3;
#define GL_NV_timeline_semaphore 1
GLAD_API_CALL int SF_GLAD_GL_NV_timeline_semaphore;
#define GL_NV_transform_feedback 1
GLAD_API_CALL int SF_GLAD_GL_NV_transform_feedback;
#define GL_NV_transform_feedback2 1
GLAD_API_CALL int SF_GLAD_GL_NV_transform_feedback2;
#define GL_NV_uniform_buffer_std430_layout 1
GLAD_API_CALL int SF_GLAD_GL_NV_uniform_buffer_std430_layout;
#define GL_NV_uniform_buffer_unified_memory 1
GLAD_API_CALL int SF_GLAD_GL_NV_uniform_buffer_unified_memory;
#define GL_NV_vdpau_interop 1
GLAD_API_CALL int SF_GLAD_GL_NV_vdpau_interop;
#define GL_NV_vdpau_interop2 1
GLAD_API_CALL int SF_GLAD_GL_NV_vdpau_interop2;
#define GL_NV_vertex_array_range 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_array_range;
#define GL_NV_vertex_array_range2 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_array_range2;
#define GL_NV_vertex_attrib_integer_64bit 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_attrib_integer_64bit;
#define GL_NV_vertex_buffer_unified_memory 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_buffer_unified_memory;
#define GL_NV_vertex_program 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_program;
#define GL_NV_vertex_program1_1 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_program1_1;
#define GL_NV_vertex_program2 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_program2;
#define GL_NV_vertex_program2_option 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_program2_option;
#define GL_NV_vertex_program3 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_program3;
#define GL_NV_vertex_program4 1
GLAD_API_CALL int SF_GLAD_GL_NV_vertex_program4;
#define GL_NV_video_capture 1
GLAD_API_CALL int SF_GLAD_GL_NV_video_capture;
#define GL_NV_viewport_array2 1
GLAD_API_CALL int SF_GLAD_GL_NV_viewport_array2;
#define GL_NV_viewport_swizzle 1
GLAD_API_CALL int SF_GLAD_GL_NV_viewport_swizzle;
#define GL_OES_byte_coordinates 1
GLAD_API_CALL int SF_GLAD_GL_OES_byte_coordinates;
#define GL_OES_compressed_paletted_texture 1
GLAD_API_CALL int SF_GLAD_GL_OES_compressed_paletted_texture;
#define GL_OES_fixed_point 1
GLAD_API_CALL int SF_GLAD_GL_OES_fixed_point;
#define GL_OES_query_matrix 1
GLAD_API_CALL int SF_GLAD_GL_OES_query_matrix;
#define GL_OES_read_format 1
GLAD_API_CALL int SF_GLAD_GL_OES_read_format;
#define GL_OES_single_precision 1
GLAD_API_CALL int SF_GLAD_GL_OES_single_precision;
#define GL_OML_interlace 1
GLAD_API_CALL int SF_GLAD_GL_OML_interlace;
#define GL_OML_resample 1
GLAD_API_CALL int SF_GLAD_GL_OML_resample;
#define GL_OML_subsample 1
GLAD_API_CALL int SF_GLAD_GL_OML_subsample;
#define GL_OVR_multiview 1
GLAD_API_CALL int SF_GLAD_GL_OVR_multiview;
#define GL_OVR_multiview2 1
GLAD_API_CALL int SF_GLAD_GL_OVR_multiview2;
#define GL_PGI_misc_hints 1
GLAD_API_CALL int SF_GLAD_GL_PGI_misc_hints;
#define GL_PGI_vertex_hints 1
GLAD_API_CALL int SF_GLAD_GL_PGI_vertex_hints;
#define GL_REND_screen_coordinates 1
GLAD_API_CALL int SF_GLAD_GL_REND_screen_coordinates;
#define GL_S3_s3tc 1
GLAD_API_CALL int SF_GLAD_GL_S3_s3tc;
#define GL_SGIS_detail_texture 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_detail_texture;
#define GL_SGIS_fog_function 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_fog_function;
#define GL_SGIS_generate_mipmap 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_generate_mipmap;
#define GL_SGIS_multisample 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_multisample;
#define GL_SGIS_pixel_texture 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_pixel_texture;
#define GL_SGIS_point_line_texgen 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_point_line_texgen;
#define GL_SGIS_point_parameters 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_point_parameters;
#define GL_SGIS_sharpen_texture 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_sharpen_texture;
#define GL_SGIS_texture4D 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_texture4D;
#define GL_SGIS_texture_border_clamp 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_texture_border_clamp;
#define GL_SGIS_texture_color_mask 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_texture_color_mask;
#define GL_SGIS_texture_edge_clamp 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_texture_edge_clamp;
#define GL_SGIS_texture_filter4 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_texture_filter4;
#define GL_SGIS_texture_lod 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_texture_lod;
#define GL_SGIS_texture_select 1
GLAD_API_CALL int SF_GLAD_GL_SGIS_texture_select;
#define GL_SGIX_async 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_async;
#define GL_SGIX_async_histogram 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_async_histogram;
#define GL_SGIX_async_pixel 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_async_pixel;
#define GL_SGIX_blend_alpha_minmax 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_blend_alpha_minmax;
#define GL_SGIX_calligraphic_fragment 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_calligraphic_fragment;
#define GL_SGIX_clipmap 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_clipmap;
#define GL_SGIX_convolution_accuracy 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_convolution_accuracy;
#define GL_SGIX_depth_pass_instrument 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_depth_pass_instrument;
#define GL_SGIX_depth_texture 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_depth_texture;
#define GL_SGIX_flush_raster 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_flush_raster;
#define GL_SGIX_fog_offset 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_fog_offset;
#define GL_SGIX_fragment_lighting 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_fragment_lighting;
#define GL_SGIX_framezoom 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_framezoom;
#define GL_SGIX_igloo_interface 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_igloo_interface;
#define GL_SGIX_instruments 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_instruments;
#define GL_SGIX_interlace 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_interlace;
#define GL_SGIX_ir_instrument1 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_ir_instrument1;
#define GL_SGIX_list_priority 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_list_priority;
#define GL_SGIX_pixel_texture 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_pixel_texture;
#define GL_SGIX_pixel_tiles 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_pixel_tiles;
#define GL_SGIX_polynomial_ffd 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_polynomial_ffd;
#define GL_SGIX_reference_plane 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_reference_plane;
#define GL_SGIX_resample 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_resample;
#define GL_SGIX_scalebias_hint 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_scalebias_hint;
#define GL_SGIX_shadow 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_shadow;
#define GL_SGIX_shadow_ambient 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_shadow_ambient;
#define GL_SGIX_sprite 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_sprite;
#define GL_SGIX_subsample 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_subsample;
#define GL_SGIX_tag_sample_buffer 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_tag_sample_buffer;
#define GL_SGIX_texture_add_env 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_texture_add_env;
#define GL_SGIX_texture_coordinate_clamp 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_texture_coordinate_clamp;
#define GL_SGIX_texture_lod_bias 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_texture_lod_bias;
#define GL_SGIX_texture_multi_buffer 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_texture_multi_buffer;
#define GL_SGIX_texture_scale_bias 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_texture_scale_bias;
#define GL_SGIX_vertex_preclip 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_vertex_preclip;
#define GL_SGIX_ycrcb 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_ycrcb;
#define GL_SGIX_ycrcb_subsample 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_ycrcb_subsample;
#define GL_SGIX_ycrcba 1
GLAD_API_CALL int SF_GLAD_GL_SGIX_ycrcba;
#define GL_SGI_color_matrix 1
GLAD_API_CALL int SF_GLAD_GL_SGI_color_matrix;
#define GL_SGI_color_table 1
GLAD_API_CALL int SF_GLAD_GL_SGI_color_table;
#define GL_SGI_texture_color_table 1
GLAD_API_CALL int SF_GLAD_GL_SGI_texture_color_table;
#define GL_SUNX_constant_data 1
GLAD_API_CALL int SF_GLAD_GL_SUNX_constant_data;
#define GL_SUN_convolution_border_modes 1
GLAD_API_CALL int SF_GLAD_GL_SUN_convolution_border_modes;
#define GL_SUN_global_alpha 1
GLAD_API_CALL int SF_GLAD_GL_SUN_global_alpha;
#define GL_SUN_mesh_array 1
GLAD_API_CALL int SF_GLAD_GL_SUN_mesh_array;
#define GL_SUN_slice_accum 1
GLAD_API_CALL int SF_GLAD_GL_SUN_slice_accum;
#define GL_SUN_triangle_list 1
GLAD_API_CALL int SF_GLAD_GL_SUN_triangle_list;
#define GL_SUN_vertex 1
GLAD_API_CALL int SF_GLAD_GL_SUN_vertex;
#define GL_WIN_phong_shading 1
GLAD_API_CALL int SF_GLAD_GL_WIN_phong_shading;
#define GL_WIN_specular_fog 1
GLAD_API_CALL int SF_GLAD_GL_WIN_specular_fog;
#define GL_AMD_compressed_3DC_texture 1
GLAD_API_CALL int SF_GLAD_GL_AMD_compressed_3DC_texture;
#define GL_AMD_compressed_ATC_texture 1
GLAD_API_CALL int SF_GLAD_GL_AMD_compressed_ATC_texture;
#define GL_APPLE_copy_texture_levels 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_copy_texture_levels;
#define GL_APPLE_framebuffer_multisample 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_framebuffer_multisample;
#define GL_APPLE_sync 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_sync;
#define GL_APPLE_texture_2D_limited_npot 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_texture_2D_limited_npot;
#define GL_APPLE_texture_format_BGRA8888 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_texture_format_BGRA8888;
#define GL_APPLE_texture_max_level 1
GLAD_API_CALL int SF_GLAD_GL_APPLE_texture_max_level;
#define GL_ARM_rgba8 1
GLAD_API_CALL int SF_GLAD_GL_ARM_rgba8;
#define GL_EXT_discard_framebuffer 1
GLAD_API_CALL int SF_GLAD_GL_EXT_discard_framebuffer;
#define GL_EXT_map_buffer_range 1
GLAD_API_CALL int SF_GLAD_GL_EXT_map_buffer_range;
#define GL_EXT_multisampled_render_to_texture 1
GLAD_API_CALL int SF_GLAD_GL_EXT_multisampled_render_to_texture;
#define GL_EXT_read_format_bgra 1
GLAD_API_CALL int SF_GLAD_GL_EXT_read_format_bgra;
#define GL_EXT_robustness 1
GLAD_API_CALL int SF_GLAD_GL_EXT_robustness;
#define GL_EXT_sRGB 1
GLAD_API_CALL int SF_GLAD_GL_EXT_sRGB;
#define GL_EXT_texture_compression_dxt1 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_compression_dxt1;
#define GL_EXT_texture_format_BGRA8888 1
GLAD_API_CALL int SF_GLAD_GL_EXT_texture_format_BGRA8888;
#define GL_IMG_multisampled_render_to_texture 1
GLAD_API_CALL int SF_GLAD_GL_IMG_multisampled_render_to_texture;
#define GL_IMG_read_format 1
GLAD_API_CALL int SF_GLAD_GL_IMG_read_format;
#define GL_IMG_texture_compression_pvrtc 1
GLAD_API_CALL int SF_GLAD_GL_IMG_texture_compression_pvrtc;
#define GL_IMG_texture_env_enhanced_fixed_function 1
GLAD_API_CALL int SF_GLAD_GL_IMG_texture_env_enhanced_fixed_function;
#define GL_IMG_user_clip_plane 1
GLAD_API_CALL int SF_GLAD_GL_IMG_user_clip_plane;
#define GL_OES_EGL_image 1
GLAD_API_CALL int SF_GLAD_GL_OES_EGL_image;
#define GL_OES_EGL_image_external 1
GLAD_API_CALL int SF_GLAD_GL_OES_EGL_image_external;
#define GL_OES_blend_equation_separate 1
GLAD_API_CALL int SF_GLAD_GL_OES_blend_equation_separate;
#define GL_OES_blend_func_separate 1
GLAD_API_CALL int SF_GLAD_GL_OES_blend_func_separate;
#define GL_OES_blend_subtract 1
GLAD_API_CALL int SF_GLAD_GL_OES_blend_subtract;
#define GL_OES_compressed_ETC1_RGB8_sub_texture 1
GLAD_API_CALL int SF_GLAD_GL_OES_compressed_ETC1_RGB8_sub_texture;
#define GL_OES_compressed_ETC1_RGB8_texture 1
GLAD_API_CALL int SF_GLAD_GL_OES_compressed_ETC1_RGB8_texture;
#define GL_OES_depth24 1
GLAD_API_CALL int SF_GLAD_GL_OES_depth24;
#define GL_OES_depth32 1
GLAD_API_CALL int SF_GLAD_GL_OES_depth32;
#define GL_OES_draw_texture 1
GLAD_API_CALL int SF_GLAD_GL_OES_draw_texture;
#define GL_OES_element_index_uint 1
GLAD_API_CALL int SF_GLAD_GL_OES_element_index_uint;
#define GL_OES_extended_matrix_palette 1
GLAD_API_CALL int SF_GLAD_GL_OES_extended_matrix_palette;
#define GL_OES_fbo_render_mipmap 1
GLAD_API_CALL int SF_GLAD_GL_OES_fbo_render_mipmap;
#define GL_OES_framebuffer_object 1
GLAD_API_CALL int SF_GLAD_GL_OES_framebuffer_object;
#define GL_OES_mapbuffer 1
GLAD_API_CALL int SF_GLAD_GL_OES_mapbuffer;
#define GL_OES_matrix_get 1
GLAD_API_CALL int SF_GLAD_GL_OES_matrix_get;
#define GL_OES_matrix_palette 1
GLAD_API_CALL int SF_GLAD_GL_OES_matrix_palette;
#define GL_OES_packed_depth_stencil 1
GLAD_API_CALL int SF_GLAD_GL_OES_packed_depth_stencil;
#define GL_OES_point_size_array 1
GLAD_API_CALL int SF_GLAD_GL_OES_point_size_array;
#define GL_OES_point_sprite 1
GLAD_API_CALL int SF_GLAD_GL_OES_point_sprite;
#define GL_OES_required_internalformat 1
GLAD_API_CALL int SF_GLAD_GL_OES_required_internalformat;
#define GL_OES_rgb8_rgba8 1
GLAD_API_CALL int SF_GLAD_GL_OES_rgb8_rgba8;
#define GL_OES_stencil1 1
GLAD_API_CALL int SF_GLAD_GL_OES_stencil1;
#define GL_OES_stencil4 1
GLAD_API_CALL int SF_GLAD_GL_OES_stencil4;
#define GL_OES_stencil8 1
GLAD_API_CALL int SF_GLAD_GL_OES_stencil8;
#define GL_OES_stencil_wrap 1
GLAD_API_CALL int SF_GLAD_GL_OES_stencil_wrap;
#define GL_OES_surfaceless_context 1
GLAD_API_CALL int SF_GLAD_GL_OES_surfaceless_context;
#define GL_OES_texture_cube_map 1
GLAD_API_CALL int SF_GLAD_GL_OES_texture_cube_map;
#define GL_OES_texture_env_crossbar 1
GLAD_API_CALL int SF_GLAD_GL_OES_texture_env_crossbar;
#define GL_OES_texture_mirrored_repeat 1
GLAD_API_CALL int SF_GLAD_GL_OES_texture_mirrored_repeat;
#define GL_OES_texture_npot 1
GLAD_API_CALL int SF_GLAD_GL_OES_texture_npot;
#define GL_OES_vertex_array_object 1
GLAD_API_CALL int SF_GLAD_GL_OES_vertex_array_object;
#define GL_QCOM_driver_control 1
GLAD_API_CALL int SF_GLAD_GL_QCOM_driver_control;
#define GL_QCOM_extended_get 1
GLAD_API_CALL int SF_GLAD_GL_QCOM_extended_get;
#define GL_QCOM_extended_get2 1
GLAD_API_CALL int SF_GLAD_GL_QCOM_extended_get2;
#define GL_QCOM_perfmon_global_mode 1
GLAD_API_CALL int SF_GLAD_GL_QCOM_perfmon_global_mode;
#define GL_QCOM_tiled_rendering 1
GLAD_API_CALL int SF_GLAD_GL_QCOM_tiled_rendering;
#define GL_QCOM_writeonly_rendering 1
GLAD_API_CALL int SF_GLAD_GL_QCOM_writeonly_rendering;


typedef void (GLAD_API_PTR *PFNGLACCUMPROC)(GLenum op, GLfloat value);
typedef void (GLAD_API_PTR *PFNGLACCUMXOESPROC)(GLenum op, GLfixed value);
typedef GLboolean (GLAD_API_PTR *PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC)(GLuint memory, GLuint64 key, GLuint timeout);
typedef void (GLAD_API_PTR *PFNGLACTIVEPROGRAMEXTPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef void (GLAD_API_PTR *PFNGLACTIVESTENCILFACEEXTPROC)(GLenum face);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLACTIVEVARYINGNVPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLALPHAFRAGMENTOP1ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (GLAD_API_PTR *PFNGLALPHAFRAGMENTOP2ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (GLAD_API_PTR *PFNGLALPHAFRAGMENTOP3ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (GLAD_API_PTR *PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef void (GLAD_API_PTR *PFNGLALPHAFUNCXOESPROC)(GLenum func, GLfixed ref);
typedef void (GLAD_API_PTR *PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC)(void);
typedef void (GLAD_API_PTR *PFNGLAPPLYTEXTUREEXTPROC)(GLenum mode);
typedef GLboolean (GLAD_API_PTR *PFNGLAREPROGRAMSRESIDENTNVPROC)(GLsizei n, const GLuint * programs, GLboolean * residences);
typedef GLboolean (GLAD_API_PTR *PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef GLboolean (GLAD_API_PTR *PFNGLARETEXTURESRESIDENTEXTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef void (GLAD_API_PTR *PFNGLARRAYELEMENTPROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLARRAYELEMENTEXTPROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLARRAYOBJECTATIPROC)(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef GLuint (GLAD_API_PTR *PFNGLASYNCCOPYBUFFERSUBDATANVXPROC)(GLsizei waitSemaphoreCount, const GLuint * waitSemaphoreArray, const GLuint64 * fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint * signalSemaphoreArray, const GLuint64 * signalValueArray);
typedef GLuint (GLAD_API_PTR *PFNGLASYNCCOPYIMAGESUBDATANVXPROC)(GLsizei waitSemaphoreCount, const GLuint * waitSemaphoreArray, const GLuint64 * waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint * signalSemaphoreArray, const GLuint64 * signalValueArray);
typedef void (GLAD_API_PTR *PFNGLASYNCMARKERSGIXPROC)(GLuint marker);
typedef void (GLAD_API_PTR *PFNGLATTACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB obj);
typedef void (GLAD_API_PTR *PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLBEGINPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERNVPROC)(GLuint id, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERNVXPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINFRAGMENTSHADERATIPROC)(void);
typedef void (GLAD_API_PTR *PFNGLBEGINOCCLUSIONQUERYNVPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINPERFMONITORAMDPROC)(GLuint monitor);
typedef void (GLAD_API_PTR *PFNGLBEGINPERFQUERYINTELPROC)(GLuint queryHandle);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYARBPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKNVPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBEGINVERTEXSHADEREXTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLBEGINVIDEOCAPTURENVPROC)(GLuint video_capture_slot);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEEXTPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASENVPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFEROFFSETEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFEROFFSETNVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGENVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONEXTPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGMENTSHADERATIPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFEREXTPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (GLAD_API_PTR *PFNGLBINDIMAGETEXTUREEXTPROC)(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
typedef void (GLAD_API_PTR *PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint * textures);
typedef GLuint (GLAD_API_PTR *PFNGLBINDLIGHTPARAMETEREXTPROC)(GLenum light, GLenum value);
typedef GLuint (GLAD_API_PTR *PFNGLBINDMATERIALPARAMETEREXTPROC)(GLenum face, GLenum value);
typedef void (GLAD_API_PTR *PFNGLBINDMULTITEXTUREEXTPROC)(GLenum texunit, GLenum target, GLuint texture);
typedef GLuint (GLAD_API_PTR *PFNGLBINDPARAMETEREXTPROC)(GLenum value);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMNVPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFEREXTPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void (GLAD_API_PTR *PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLBINDSHADINGRATEIMAGENVPROC)(GLuint texture);
typedef GLuint (GLAD_API_PTR *PFNGLBINDTEXGENPARAMETEREXTPROC)(GLenum unit, GLenum coord, GLenum value);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREEXTPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
typedef GLuint (GLAD_API_PTR *PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)(GLenum unit, GLenum value);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDTRANSFORMFEEDBACKNVPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYAPPLEPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXSHADEREXTPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
typedef void (GLAD_API_PTR *PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINORMAL3BEXTPROC)(GLbyte bx, GLbyte by, GLbyte bz);
typedef void (GLAD_API_PTR *PFNGLBINORMAL3BVEXTPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLBINORMAL3DEXTPROC)(GLdouble bx, GLdouble by, GLdouble bz);
typedef void (GLAD_API_PTR *PFNGLBINORMAL3DVEXTPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLBINORMAL3FEXTPROC)(GLfloat bx, GLfloat by, GLfloat bz);
typedef void (GLAD_API_PTR *PFNGLBINORMAL3FVEXTPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLBINORMAL3IEXTPROC)(GLint bx, GLint by, GLint bz);
typedef void (GLAD_API_PTR *PFNGLBINORMAL3IVEXTPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLBINORMAL3SEXTPROC)(GLshort bx, GLshort by, GLshort bz);
typedef void (GLAD_API_PTR *PFNGLBINORMAL3SVEXTPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLBINORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
typedef void (GLAD_API_PTR *PFNGLBITMAPXOESPROC)(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap);
typedef void (GLAD_API_PTR *PFNGLBLENDBARRIERKHRPROC)(void);
typedef void (GLAD_API_PTR *PFNGLBLENDBARRIERNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLOREXTPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLORXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONINDEXEDAMDPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEEXTPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIARBPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIARBPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCINDEXEDAMDPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEEXTPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEINGRPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIARBPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIARBPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLENDPARAMETERINVPROC)(GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFEREXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERLAYEREXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint srcLayer, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLint dstLayer, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERLAYERSEXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBUFFERADDRESSRANGENVPROC)(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLBUFFERATTACHMEMORYNVPROC)(GLenum target, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERPAGECOMMITMENTARBPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLBUFFERPAGECOMMITMENTMEMNVPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLBUFFERPARAMETERIAPPLEPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLBUFFERSTORAGEEXTERNALEXTPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLBUFFERSTORAGEMEMEXTPROC)(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data);
typedef void (GLAD_API_PTR *PFNGLCALLCOMMANDLISTNVPROC)(GLuint list);
typedef void (GLAD_API_PTR *PFNGLCALLLISTPROC)(GLuint list);
typedef void (GLAD_API_PTR *PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void * lists);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)(GLuint framebuffer, GLenum target);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORARBPROC)(GLenum target, GLenum clamp);
typedef void (GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARACCUMXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORIIEXTPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORIUIEXTPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHDNVPROC)(GLdouble depth);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFOESPROC)(GLclampf depth);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHXOESPROC)(GLfixed depth);
typedef void (GLAD_API_PTR *PFNGLCLEARINDEXPROC)(GLfloat c);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint s);
typedef void (GLAD_API_PTR *PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)(GLenum stream);
typedef void (GLAD_API_PTR *PFNGLCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC)(GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray);
typedef GLenum (GLAD_API_PTR *PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble * equation);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEFOESPROC)(GLenum plane, const GLfloat * equation);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEXOESPROC)(GLenum plane, const GLfixed * equation);
typedef void (GLAD_API_PTR *PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FVERTEX3FSUNPROC)(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FVERTEX3FVSUNPROC)(const GLfloat * c, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UBVPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UIVPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3USVPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3XOESPROC)(GLfixed red, GLfixed green, GLfixed blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3XVOESPROC)(const GLfixed * components);
typedef void (GLAD_API_PTR *PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBVERTEX2FSUNPROC)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBVERTEX2FVSUNPROC)(const GLubyte * c, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBVERTEX3FSUNPROC)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBVERTEX3FVSUNPROC)(const GLubyte * c, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBVPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UIVPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4USVPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4XOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4XVOESPROC)(const GLfixed * components);
typedef void (GLAD_API_PTR *PFNGLCOLORFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLCOLORFRAGMENTOP1ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (GLAD_API_PTR *PFNGLCOLORFRAGMENTOP2ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (GLAD_API_PTR *PFNGLCOLORFRAGMENTOP3ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKINDEXEDEXTPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (GLAD_API_PTR *PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint * color);
typedef void (GLAD_API_PTR *PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
typedef void (GLAD_API_PTR *PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint * color);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTERVINTELPROC)(GLint size, GLenum type, const void ** pointer);
typedef void (GLAD_API_PTR *PFNGLCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEEXTPROC)(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPARAMETERFVSGIPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPARAMETERIVSGIPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLESGIPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table);
typedef void (GLAD_API_PTR *PFNGLCOMBINERINPUTNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (GLAD_API_PTR *PFNGLCOMBINEROUTPUTNVPROC)(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
typedef void (GLAD_API_PTR *PFNGLCOMBINERPARAMETERFNVPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLCOMBINERPARAMETERFVNVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCOMBINERPARAMETERINVPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLCOMBINERPARAMETERIVNVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)(GLenum stage, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCOMMANDLISTSEGMENTSNVPROC)(GLuint list, GLuint segments);
typedef void (GLAD_API_PTR *PFNGLCOMPILECOMMANDLISTNVPROC)(GLuint list);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERARBPROC)(GLhandleARB shaderObj);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERINCLUDEARBPROC)(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCONSERVATIVERASTERPARAMETERFNVPROC)(GLenum pname, GLfloat value);
typedef void (GLAD_API_PTR *PFNGLCONSERVATIVERASTERPARAMETERINVPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONFILTER1DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERFEXTPROC)(GLenum target, GLenum pname, GLfloat params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERFVEXTPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERIPROC)(GLenum target, GLenum pname, GLint params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERIEXTPROC)(GLenum target, GLenum pname, GLint params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERIVEXTPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERXOESPROC)(GLenum target, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERXVOESPROC)(GLenum target, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLCOPYCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCOLORTABLESGIPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (GLAD_API_PTR *PFNGLCOPYIMAGESUBDATANVPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLCOPYPATHNVPROC)(GLuint resultPath, GLuint srcPath);
typedef void (GLAD_API_PTR *PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOVERFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues);
typedef void (GLAD_API_PTR *PFNGLCOVERFILLPATHNVPROC)(GLuint path, GLenum coverMode);
typedef void (GLAD_API_PTR *PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues);
typedef void (GLAD_API_PTR *PFNGLCOVERSTROKEPATHNVPROC)(GLuint path, GLenum coverMode);
typedef void (GLAD_API_PTR *PFNGLCOVERAGEMODULATIONNVPROC)(GLenum components);
typedef void (GLAD_API_PTR *PFNGLCOVERAGEMODULATIONTABLENVPROC)(GLsizei n, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLCREATECOMMANDLISTSNVPROC)(GLsizei n, GLuint * lists);
typedef void (GLAD_API_PTR *PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLCREATEMEMORYOBJECTSEXTPROC)(GLsizei n, GLuint * memoryObjects);
typedef void (GLAD_API_PTR *PFNGLCREATEPERFQUERYINTELPROC)(GLuint queryId, GLuint * queryHandle);
typedef GLuint (GLAD_API_PTR *PFNGLCREATEPROGRAMPROC)(void);
typedef GLhandleARB (GLAD_API_PTR *PFNGLCREATEPROGRAMOBJECTARBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef GLuint (GLAD_API_PTR *PFNGLCREATEPROGRESSFENCENVXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLCREATESEMAPHORESNVPROC)(GLsizei n, GLuint * semaphores);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROC)(GLenum type);
typedef GLhandleARB (GLAD_API_PTR *PFNGLCREATESHADEROBJECTARBPROC)(GLenum shaderType);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROGRAMEXTPROC)(GLenum type, const GLchar * string);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const* strings);
typedef void (GLAD_API_PTR *PFNGLCREATESTATESNVPROC)(GLsizei n, GLuint * states);
typedef GLsync (GLAD_API_PTR *PFNGLCREATESYNCFROMCLEVENTARBPROC)(struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLCULLPARAMETERDVEXTPROC)(GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLCULLPARAMETERFVEXTPROC)(GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCURRENTPALETTEMATRIXARBPROC)(GLint index);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void * userParam);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKAMDPROC)(GLDEBUGPROCAMD callback, void * userParam);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKARBPROC)(GLDEBUGPROCARB callback, const void * userParam);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECONTROLARBPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEENABLEAMDPROC)(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTAMDPROC)(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTARBPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (GLAD_API_PTR *PFNGLDEFORMSGIXPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLDEFORMATIONMAP3DSGIXPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLDEFORMATIONMAP3FSGIXPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLDELETEASYNCMARKERSSGIXPROC)(GLuint marker, GLsizei range);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETECOMMANDLISTSNVPROC)(GLsizei n, const GLuint * lists);
typedef void (GLAD_API_PTR *PFNGLDELETEFENCESAPPLEPROC)(GLsizei n, const GLuint * fences);
typedef void (GLAD_API_PTR *PFNGLDELETEFENCESNVPROC)(GLsizei n, const GLuint * fences);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAGMENTSHADERATIPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSEXTPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef void (GLAD_API_PTR *PFNGLDELETEMEMORYOBJECTSEXTPROC)(GLsizei n, const GLuint * memoryObjects);
typedef void (GLAD_API_PTR *PFNGLDELETENAMEDSTRINGARBPROC)(GLint namelen, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLDELETENAMESAMDPROC)(GLenum identifier, GLuint num, const GLuint * names);
typedef void (GLAD_API_PTR *PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
typedef void (GLAD_API_PTR *PFNGLDELETEOCCLUSIONQUERIESNVPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEPATHSNVPROC)(GLuint path, GLsizei range);
typedef void (GLAD_API_PTR *PFNGLDELETEPERFMONITORSAMDPROC)(GLsizei n, GLuint * monitors);
typedef void (GLAD_API_PTR *PFNGLDELETEPERFQUERYINTELPROC)(GLuint queryHandle);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMSARBPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMSNVPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESARBPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERYRESOURCETAGNVPROC)(GLsizei n, const GLint * tagIds);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSEXTPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLDELETESEMAPHORESEXTPROC)(GLsizei n, const GLuint * semaphores);
typedef void (GLAD_API_PTR *PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDELETESTATESNVPROC)(GLsizei n, const GLuint * states);
typedef void (GLAD_API_PTR *PFNGLDELETESYNCPROC)(GLsync sync);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESEXTPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETETRANSFORMFEEDBACKSNVPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSAPPLEPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXSHADEREXTPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLDEPTHBOUNDSEXTPROC)(GLclampd zmin, GLclampd zmax);
typedef void (GLAD_API_PTR *PFNGLDEPTHBOUNDSDNVPROC)(GLdouble zmin, GLdouble zmax);
typedef void (GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEARRAYDVNVPROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEINDEXEDDNVPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEDNVPROC)(GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFOESPROC)(GLclampf n, GLclampf f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEXOESPROC)(GLfixed n, GLfixed f);
typedef void (GLAD_API_PTR *PFNGLDETACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void (GLAD_API_PTR *PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDETAILTEXFUNCSGISPROC)(GLenum target, GLsizei n, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBAPPLEPROC)(GLuint index, GLenum pname);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (GLAD_API_PTR *PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
typedef void (GLAD_API_PTR *PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSEXTPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDARBPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDEXTPROC)(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSARBPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSATIPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWCOMMANDSADDRESSNVPROC)(GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count);
typedef void (GLAD_API_PTR *PFNGLDRAWCOMMANDSNVPROC)(GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count);
typedef void (GLAD_API_PTR *PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC)(const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count);
typedef void (GLAD_API_PTR *PFNGLDRAWCOMMANDSSTATESNVPROC)(GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTARRAYAPPLEPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTARRAYATIPROC)(GLenum mode, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDARBPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDEXTPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWMESHARRAYSSUNPROC)(GLenum mode, GLint first, GLsizei count, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLDRAWMESHTASKSINDIRECTNVPROC)(GLintptr indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWMESHTASKSNVPROC)(GLuint first, GLuint count);
typedef void (GLAD_API_PTR *PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTARRAYATIPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSEXTPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWTEXTURENVPROC)(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKNVPROC)(GLenum mode, GLuint id);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWVKIMAGENVPROC)(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
typedef void (GLAD_API_PTR *PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC)(GLenum target, GLeglImageOES image, const GLint * attrib_list);
typedef void (GLAD_API_PTR *PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC)(GLuint texture, GLeglImageOES image, const GLint * attrib_list);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGFORMATNVPROC)(GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count, const GLboolean * pointer);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTERLISTIBMPROC)(GLint stride, const GLboolean ** pointer, GLint ptrstride);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGVPROC)(const GLboolean * flag);
typedef void (GLAD_API_PTR *PFNGLELEMENTPOINTERAPPLEPROC)(GLenum type, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLELEMENTPOINTERATIPROC)(GLenum type, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLENABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBAPPLEPROC)(GLuint index, GLenum pname);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENDPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERNVXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDFRAGMENTSHADERATIPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDLISTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDOCCLUSIONQUERYNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDPERFMONITORAMDPROC)(GLuint monitor);
typedef void (GLAD_API_PTR *PFNGLENDPERFQUERYINTELPROC)(GLuint queryHandle);
typedef void (GLAD_API_PTR *PFNGLENDQUERYPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLENDQUERYARBPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKEXTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDVERTEXSHADEREXTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDVIDEOCAPTURENVPROC)(GLuint video_capture_slot);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1DPROC)(GLdouble u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1DVPROC)(const GLdouble * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1FPROC)(GLfloat u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1FVPROC)(const GLfloat * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1XOESPROC)(GLfixed u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2DVPROC)(const GLdouble * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2FVPROC)(const GLfloat * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2XOESPROC)(GLfixed u, GLfixed v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLEVALMAPSNVPROC)(GLenum target, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void (GLAD_API_PTR *PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void (GLAD_API_PTR *PFNGLEVALPOINT1PROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void (GLAD_API_PTR *PFNGLEVALUATEDEPTHVALUESARBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLEXECUTEPROGRAMNVPROC)(GLenum target, GLuint id, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLEXTRACTCOMPONENTEXTPROC)(GLuint res, GLuint src, GLuint num);
typedef void (GLAD_API_PTR *PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat * buffer);
typedef void (GLAD_API_PTR *PFNGLFEEDBACKBUFFERXOESPROC)(GLsizei n, GLenum type, const GLfixed * buffer);
typedef GLsync (GLAD_API_PTR *PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLFINALCOMBINERINPUTNVPROC)(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef GLint (GLAD_API_PTR *PFNGLFINISHASYNCSGIXPROC)(GLuint * markerp);
typedef void (GLAD_API_PTR *PFNGLFINISHFENCEAPPLEPROC)(GLuint fence);
typedef void (GLAD_API_PTR *PFNGLFINISHFENCENVPROC)(GLuint fence);
typedef void (GLAD_API_PTR *PFNGLFINISHOBJECTAPPLEPROC)(GLenum object, GLint name);
typedef void (GLAD_API_PTR *PFNGLFINISHTEXTURESUNXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)(GLenum target, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFLUSHPIXELDATARANGENVPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLFLUSHRASTERSGIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHSTATICDATAIBMPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)(GLsizei length, void * pointer);
typedef void (GLAD_API_PTR *PFNGLFLUSHVERTEXARRAYRANGENVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFORMATNVPROC)(GLenum type, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDPOINTEREXTPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDPOINTERLISTIBMPROC)(GLenum type, GLint stride, const void ** pointer, GLint ptrstride);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDDPROC)(GLdouble coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDDEXTPROC)(GLdouble coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDDVPROC)(const GLdouble * coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDDVEXTPROC)(const GLdouble * coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFPROC)(GLfloat coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFEXTPROC)(GLfloat coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFVPROC)(const GLfloat * coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFVEXTPROC)(const GLfloat * coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDHNVPROC)(GLhalfNV fog);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDHVNVPROC)(const GLhalfNV * fog);
typedef void (GLAD_API_PTR *PFNGLFOGFUNCSGISPROC)(GLsizei n, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLFOGFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLFOGIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFOGIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLFOGXOESPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLFOGXVOESPROC)(GLenum pname, const GLfixed * param);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTCOLORMATERIALSGIXPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTCOVERAGECOLORNVPROC)(GLuint color);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTLIGHTMODELFSGIXPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTLIGHTMODELISGIXPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTLIGHTFSGIXPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTLIGHTFVSGIXPROC)(GLenum light, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTLIGHTISGIXPROC)(GLenum light, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTLIGHTIVSGIXPROC)(GLenum light, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTMATERIALFSGIXPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTMATERIALFVSGIXPROC)(GLenum face, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTMATERIALISGIXPROC)(GLenum face, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFRAGMENTMATERIALIVSGIXPROC)(GLenum face, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLFRAMETERMINATORGREMEDYPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFRAMEZOOMSGIXPROC)(GLint factor);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERPARAMETERIMESAPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERREADBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLenum target, GLuint start, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)(GLenum target, GLuint start, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC)(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
typedef void (GLAD_API_PTR *PFNGLFREEOBJECTBUFFERATIPROC)(GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMXOESPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef GLuint (GLAD_API_PTR *PFNGLGENASYNCMARKERSSGIXPROC)(GLsizei range);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENFENCESAPPLEPROC)(GLsizei n, GLuint * fences);
typedef void (GLAD_API_PTR *PFNGLGENFENCESNVPROC)(GLsizei n, GLuint * fences);
typedef GLuint (GLAD_API_PTR *PFNGLGENFRAGMENTSHADERSATIPROC)(GLuint range);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSEXTPROC)(GLsizei n, GLuint * framebuffers);
typedef GLuint (GLAD_API_PTR *PFNGLGENLISTSPROC)(GLsizei range);
typedef void (GLAD_API_PTR *PFNGLGENNAMESAMDPROC)(GLenum identifier, GLuint num, GLuint * names);
typedef void (GLAD_API_PTR *PFNGLGENOCCLUSIONQUERIESNVPROC)(GLsizei n, GLuint * ids);
typedef GLuint (GLAD_API_PTR *PFNGLGENPATHSNVPROC)(GLsizei range);
typedef void (GLAD_API_PTR *PFNGLGENPERFMONITORSAMDPROC)(GLsizei n, GLuint * monitors);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMSARBPROC)(GLsizei n, GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMSNVPROC)(GLsizei n, GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESARBPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENQUERYRESOURCETAGNVPROC)(GLsizei n, GLint * tagIds);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSEXTPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLGENSEMAPHORESEXTPROC)(GLsizei n, GLuint * semaphores);
typedef GLuint (GLAD_API_PTR *PFNGLGENSYMBOLSEXTPROC)(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESEXTPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENTRANSFORMFEEDBACKSNVPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSAPPLEPROC)(GLsizei n, GLuint * arrays);
typedef GLuint (GLAD_API_PTR *PFNGLGENVERTEXSHADERSEXTPROC)(GLuint range);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPEXTPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATEMULTITEXMIPMAPEXTPROC)(GLenum texunit, GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
typedef void (GLAD_API_PTR *PFNGLGENERATETEXTUREMIPMAPEXTPROC)(GLuint texture, GLenum target);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEVARYINGNVPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETARRAYOBJECTFVATIPROC)(GLenum array, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETARRAYOBJECTIVATIPROC)(GLenum array, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANINDEXEDVEXTPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERUI64VNVPROC)(GLenum target, GLenum pname, GLuint64EXT * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble * equation);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEFOESPROC)(GLenum plane, GLfloat * equation);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEXOESPROC)(GLenum plane, GLfixed * equation);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, void * table);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEEXTPROC)(GLenum target, GLenum format, GLenum type, void * data);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLESGIPROC)(GLenum target, GLenum format, GLenum type, void * table);
typedef void (GLAD_API_PTR *PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)(GLenum stage, GLenum portion, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)(GLenum stage, GLenum portion, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)(GLenum stage, GLenum pname, GLfloat * params);
typedef GLuint (GLAD_API_PTR *PFNGLGETCOMMANDHEADERNVPROC)(GLenum tokenID, GLuint size);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint lod, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint level, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint lod, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, void * image);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONFILTEREXTPROC)(GLenum target, GLenum format, GLenum type, void * image);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETCOVERAGEMODULATIONTABLENVPROC)(GLsizei bufSize, GLfloat * v);
typedef GLuint (GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef GLuint (GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGAMDPROC)(GLuint count, GLsizei bufSize, GLenum * categories, GLenum * severities, GLuint * ids, GLsizei * lengths, GLchar * message);
typedef GLuint (GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGARBPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef void (GLAD_API_PTR *PFNGLGETDETAILTEXFUNCSGISPROC)(GLenum target, GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEINDEXEDVEXTPROC)(GLenum target, GLuint index, GLdouble * data);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble * data);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEI_VEXTPROC)(GLenum pname, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble * data);
typedef GLenum (GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETFENCEIVNVPROC)(GLuint fence, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)(GLenum variable, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)(GLenum variable, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFIRSTPERFQUERYIDINTELPROC)(GLuint * queryId);
typedef void (GLAD_API_PTR *PFNGLGETFIXEDVOESPROC)(GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETFLOATINDEXEDVEXTPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VEXTPROC)(GLenum pname, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFOGFUNCSGISPROC)(GLfloat * points);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONEXTPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETFRAGMENTLIGHTFVSGIXPROC)(GLenum light, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAGMENTLIGHTIVSGIXPROC)(GLenum light, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAGMENTMATERIALFVSGIXPROC)(GLenum face, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAGMENTMATERIALIVSGIXPROC)(GLenum face, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC)(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLenum (GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
typedef GLenum (GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSARBPROC)(void);
typedef GLhandleARB (GLAD_API_PTR *PFNGLGETHANDLEARBPROC)(GLenum pname);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed * params);
typedef GLuint64 (GLAD_API_PTR *PFNGLGETIMAGEHANDLEARBPROC)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef GLuint64 (GLAD_API_PTR *PFNGLGETIMAGEHANDLENVPROC)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (GLAD_API_PTR *PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
typedef GLint (GLAD_API_PTR *PFNGLGETINSTRUMENTSSGIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERINDEXEDVEXTPROC)(GLenum target, GLuint index, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERUI64I_VNVPROC)(GLenum value, GLuint index, GLuint64EXT * result);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERUI64VNVPROC)(GLenum value, GLuint64EXT * result);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum pname, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTERNALFORMATSAMPLEIVNVPROC)(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETINVARIANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETINVARIANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETINVARIANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTXOESPROC)(GLenum light, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETLISTPARAMETERFVSGIXPROC)(GLuint list, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETLISTPARAMETERIVSGIXPROC)(GLuint list, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETLOCALCONSTANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETMAPATTRIBPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMAPATTRIBPARAMETERIVNVPROC)(GLenum target, GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMAPCONTROLPOINTSNVPROC)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points);
typedef void (GLAD_API_PTR *PFNGLGETMAPPARAMETERFVNVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMAPPARAMETERIVNVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPXVOESPROC)(GLenum target, GLenum query, GLfixed * v);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALXOESPROC)(GLenum face, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC)(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC)(GLuint memoryObject, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVNVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)(GLuint buffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)(GLuint buffer, GLenum pname, GLuint64EXT * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)(GLuint buffer, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC)(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum pname, void * string);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMIVEXTPROC)(GLuint program, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)(GLuint renderbuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDSTRINGARBPROC)(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDSTRINGIVARBPROC)(GLint namelen, const GLchar * name, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNEXTPERFQUERYIDINTELPROC)(GLuint queryId, GLuint * nextQueryId);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTBUFFERFVATIPROC)(GLuint buffer, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTBUFFERIVATIPROC)(GLuint buffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTLABELEXTPROC)(GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERIVAPPLEPROC)(GLenum objectType, GLuint name, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPTRLABELPROC)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETOCCLUSIONQUERYIVNVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOCCLUSIONQUERYUIVNVPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETPATHCOLORGENFVNVPROC)(GLenum color, GLenum pname, GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLGETPATHCOLORGENIVNVPROC)(GLenum color, GLenum pname, GLint * value);
typedef void (GLAD_API_PTR *PFNGLGETPATHCOMMANDSNVPROC)(GLuint path, GLubyte * commands);
typedef void (GLAD_API_PTR *PFNGLGETPATHCOORDSNVPROC)(GLuint path, GLfloat * coords);
typedef void (GLAD_API_PTR *PFNGLGETPATHDASHARRAYNVPROC)(GLuint path, GLfloat * dashArray);
typedef GLfloat (GLAD_API_PTR *PFNGLGETPATHLENGTHNVPROC)(GLuint path, GLsizei startSegment, GLsizei numSegments);
typedef void (GLAD_API_PTR *PFNGLGETPATHMETRICRANGENVPROC)(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics);
typedef void (GLAD_API_PTR *PFNGLGETPATHMETRICSNVPROC)(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics);
typedef void (GLAD_API_PTR *PFNGLGETPATHPARAMETERFVNVPROC)(GLuint path, GLenum pname, GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLGETPATHPARAMETERIVNVPROC)(GLuint path, GLenum pname, GLint * value);
typedef void (GLAD_API_PTR *PFNGLGETPATHSPACINGNVPROC)(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing);
typedef void (GLAD_API_PTR *PFNGLGETPATHTEXGENFVNVPROC)(GLenum texCoordSet, GLenum pname, GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLGETPATHTEXGENIVNVPROC)(GLenum texCoordSet, GLenum pname, GLint * value);
typedef void (GLAD_API_PTR *PFNGLGETPERFCOUNTERINFOINTELPROC)(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue);
typedef void (GLAD_API_PTR *PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten);
typedef void (GLAD_API_PTR *PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)(GLuint group, GLuint counter, GLenum pname, void * data);
typedef void (GLAD_API_PTR *PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)(GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString);
typedef void (GLAD_API_PTR *PFNGLGETPERFMONITORCOUNTERSAMDPROC)(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters);
typedef void (GLAD_API_PTR *PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString);
typedef void (GLAD_API_PTR *PFNGLGETPERFMONITORGROUPSAMDPROC)(GLint * numGroups, GLsizei groupsSize, GLuint * groups);
typedef void (GLAD_API_PTR *PFNGLGETPERFQUERYDATAINTELPROC)(GLuint queryHandle, GLuint flags, GLsizei dataSize, void * data, GLuint * bytesWritten);
typedef void (GLAD_API_PTR *PFNGLGETPERFQUERYIDBYNAMEINTELPROC)(GLchar * queryName, GLuint * queryId);
typedef void (GLAD_API_PTR *PFNGLGETPERFQUERYINFOINTELPROC)(GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPXVPROC)(GLenum map, GLint size, GLfixed * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)(GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)(GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERINDEXEDVEXTPROC)(GLenum target, GLuint index, void ** data);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERI_VEXTPROC)(GLenum pname, GLuint index, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVEXTPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte * mask);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)(GLenum target, GLuint index, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)(GLenum target, GLuint index, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)(GLenum target, GLuint index, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)(GLenum target, GLuint index, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPARAMETERDVNVPROC)(GLenum target, GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint * params);
typedef GLuint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEFVNVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, void * string);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTRINGNVPROC)(GLuint id, GLenum pname, GLubyte * program);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC)(GLenum target, GLuint index, GLuint * param);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVNVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTI64VEXTPROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVARBPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUI64VEXTPROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVARBPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSEMAPHOREPARAMETERIVNVPROC)(GLuint semaphore, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC)(GLuint semaphore, GLenum pname, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span);
typedef void (GLAD_API_PTR *PFNGLGETSEPARABLEFILTEREXTPROC)(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span);
typedef void (GLAD_API_PTR *PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSHADINGRATEIMAGEPALETTENVPROC)(GLuint viewport, GLuint entry, GLenum * rate);
typedef void (GLAD_API_PTR *PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC)(GLenum rate, GLuint samples, GLuint index, GLint * location);
typedef void (GLAD_API_PTR *PFNGLGETSHARPENTEXFUNCSGISPROC)(GLenum target, GLfloat * points);
typedef GLushort (GLAD_API_PTR *PFNGLGETSTAGEINDEXNVPROC)(GLenum shadertype);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum name);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef GLuint (GLAD_API_PTR *PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETTEXBUMPPARAMETERFVATIPROC)(GLenum pname, GLfloat * param);
typedef void (GLAD_API_PTR *PFNGLGETTEXBUMPPARAMETERIVATIPROC)(GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVXVOESPROC)(GLenum target, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXFILTERFUNCSGISPROC)(GLenum target, GLenum filter, GLfloat * weights);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENXVOESPROC)(GLenum coord, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERXVOESPROC)(GLenum target, GLint level, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed * params);
typedef GLuint64 (GLAD_API_PTR *PFNGLGETTEXTUREHANDLEARBPROC)(GLuint texture);
typedef GLuint64 (GLAD_API_PTR *PFNGLGETTEXTUREHANDLENVPROC)(GLuint texture);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint * params);
typedef GLuint64 (GLAD_API_PTR *PFNGLGETTEXTURESAMPLERHANDLEARBPROC)(GLuint texture, GLuint sampler);
typedef GLuint64 (GLAD_API_PTR *PFNGLGETTEXTURESAMPLERHANDLENVPROC)(GLuint texture, GLuint sampler);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTRACKMATRIXIVNVPROC)(GLenum target, GLuint address, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)(GLuint program, GLuint index, GLint * location);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint * param);
typedef GLuint (GLAD_API_PTR *PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar * uniformBlockName);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMBUFFERSIZEEXTPROC)(GLuint program, GLint location);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef GLintptr (GLAD_API_PTR *PFNGLGETUNIFORMOFFSETEXTPROC)(GLuint program, GLint location);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVARBPROC)(GLhandleARB programObj, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMI64VARBPROC)(GLuint program, GLint location, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMI64VNVPROC)(GLuint program, GLint location, GLint64EXT * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVARBPROC)(GLhandleARB programObj, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUI64VNVPROC)(GLuint program, GLint location, GLuint64EXT * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVEXTPROC)(GLuint program, GLint location, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNSIGNEDBYTEI_VEXTPROC)(GLenum target, GLuint index, GLubyte * data);
typedef void (GLAD_API_PTR *PFNGLGETUNSIGNEDBYTEVEXTPROC)(GLenum pname, GLubyte * data);
typedef void (GLAD_API_PTR *PFNGLGETVARIANTARRAYOBJECTFVATIPROC)(GLuint id, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVARIANTARRAYOBJECTIVATIPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVARIANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETVARIANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETVARIANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETVARIANTPOINTERVEXTPROC)(GLuint id, GLenum value, void ** data);
typedef GLint (GLAD_API_PTR *PFNGLGETVARYINGLOCATIONNVPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINTEGERVEXTPROC)(GLuint vaobj, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, void ** param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYPOINTERVEXTPROC)(GLuint vaobj, GLenum pname, void ** param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVEXTPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVEXTPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLDVEXTPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLI64VNVPROC)(GLuint index, GLenum pname, GLint64EXT * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLUI64VARBPROC)(GLuint index, GLenum pname, GLuint64EXT * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLUI64VNVPROC)(GLuint index, GLenum pname, GLuint64EXT * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVARBPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVNVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVARBPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVNVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVARBPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVNVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVARBPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVNVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVIDEOCAPTURESTREAMDVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVIDEOCAPTURESTREAMFVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVIDEOCAPTURESTREAMIVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVIDEOCAPTUREIVNVPROC)(GLuint video_capture_slot, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVIDEOI64VNVPROC)(GLuint video_slot, GLenum pname, GLint64EXT * params);
typedef void (GLAD_API_PTR *PFNGLGETVIDEOIVNVPROC)(GLuint video_slot, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVIDEOUI64VNVPROC)(GLuint video_slot, GLenum pname, GLuint64EXT * params);
typedef void (GLAD_API_PTR *PFNGLGETVIDEOUIVNVPROC)(GLuint video_slot, GLenum pname, GLuint * params);
typedef GLVULKANPROCNV (GLAD_API_PTR *PFNGLGETVKPROCADDRNVPROC)(const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETNCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
typedef void (GLAD_API_PTR *PFNGLGETNCOLORTABLEARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
typedef void (GLAD_API_PTR *PFNGLGETNCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint lod, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint lod, GLsizei bufSize, void * img);
typedef void (GLAD_API_PTR *PFNGLGETNCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
typedef void (GLAD_API_PTR *PFNGLGETNCONVOLUTIONFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
typedef void (GLAD_API_PTR *PFNGLGETNHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (GLAD_API_PTR *PFNGLGETNHISTOGRAMARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (GLAD_API_PTR *PFNGLGETNMAPDVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPDVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPFVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPFVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPIVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPIVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint * v);
typedef void (GLAD_API_PTR *PFNGLGETNMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (GLAD_API_PTR *PFNGLGETNMINMAXARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPFVPROC)(GLenum map, GLsizei bufSize, GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPFVARBPROC)(GLenum map, GLsizei bufSize, GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPUIVPROC)(GLenum map, GLsizei bufSize, GLuint * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPUIVARBPROC)(GLenum map, GLsizei bufSize, GLuint * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPUSVPROC)(GLenum map, GLsizei bufSize, GLushort * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPUSVARBPROC)(GLenum map, GLsizei bufSize, GLushort * values);
typedef void (GLAD_API_PTR *PFNGLGETNPOLYGONSTIPPLEPROC)(GLsizei bufSize, GLubyte * pattern);
typedef void (GLAD_API_PTR *PFNGLGETNPOLYGONSTIPPLEARBPROC)(GLsizei bufSize, GLubyte * pattern);
typedef void (GLAD_API_PTR *PFNGLGETNSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
typedef void (GLAD_API_PTR *PFNGLGETNSEPARABLEFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
typedef void (GLAD_API_PTR *PFNGLGETNTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETNTEXIMAGEARBPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMDVPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMDVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMFVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMUIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGLOBALALPHAFACTORBSUNPROC)(GLbyte factor);
typedef void (GLAD_API_PTR *PFNGLGLOBALALPHAFACTORDSUNPROC)(GLdouble factor);
typedef void (GLAD_API_PTR *PFNGLGLOBALALPHAFACTORFSUNPROC)(GLfloat factor);
typedef void (GLAD_API_PTR *PFNGLGLOBALALPHAFACTORISUNPROC)(GLint factor);
typedef void (GLAD_API_PTR *PFNGLGLOBALALPHAFACTORSSUNPROC)(GLshort factor);
typedef void (GLAD_API_PTR *PFNGLGLOBALALPHAFACTORUBSUNPROC)(GLubyte factor);
typedef void (GLAD_API_PTR *PFNGLGLOBALALPHAFACTORUISUNPROC)(GLuint factor);
typedef void (GLAD_API_PTR *PFNGLGLOBALALPHAFACTORUSSUNPROC)(GLushort factor);
typedef void (GLAD_API_PTR *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLHINTPGIPROC)(GLenum target, GLint mode);
typedef void (GLAD_API_PTR *PFNGLHISTOGRAMPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (GLAD_API_PTR *PFNGLHISTOGRAMEXTPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (GLAD_API_PTR *PFNGLIGLOOINTERFACESGIXPROC)(GLenum pname, const void * params);
typedef void (GLAD_API_PTR *PFNGLIMAGETRANSFORMPARAMETERFHPPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLIMAGETRANSFORMPARAMETERIHPPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLIMPORTMEMORYFDEXTPROC)(GLuint memory, GLuint64 size, GLenum handleType, GLint fd);
typedef void (GLAD_API_PTR *PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC)(GLuint memory, GLuint64 size, GLenum handleType, void * handle);
typedef void (GLAD_API_PTR *PFNGLIMPORTMEMORYWIN32NAMEEXTPROC)(GLuint memory, GLuint64 size, GLenum handleType, const void * name);
typedef void (GLAD_API_PTR *PFNGLIMPORTSEMAPHOREFDEXTPROC)(GLuint semaphore, GLenum handleType, GLint fd);
typedef void (GLAD_API_PTR *PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC)(GLuint semaphore, GLenum handleType, void * handle);
typedef void (GLAD_API_PTR *PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC)(GLuint semaphore, GLenum handleType, const void * name);
typedef GLsync (GLAD_API_PTR *PFNGLIMPORTSYNCEXTPROC)(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLINDEXFORMATNVPROC)(GLenum type, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLINDEXFUNCEXTPROC)(GLenum func, GLclampf ref);
typedef void (GLAD_API_PTR *PFNGLINDEXMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLINDEXMATERIALEXTPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTERLISTIBMPROC)(GLenum type, GLint stride, const void ** pointer, GLint ptrstride);
typedef void (GLAD_API_PTR *PFNGLINDEXDPROC)(GLdouble c);
typedef void (GLAD_API_PTR *PFNGLINDEXDVPROC)(const GLdouble * c);
typedef void (GLAD_API_PTR *PFNGLINDEXFPROC)(GLfloat c);
typedef void (GLAD_API_PTR *PFNGLINDEXFVPROC)(const GLfloat * c);
typedef void (GLAD_API_PTR *PFNGLINDEXIPROC)(GLint c);
typedef void (GLAD_API_PTR *PFNGLINDEXIVPROC)(const GLint * c);
typedef void (GLAD_API_PTR *PFNGLINDEXSPROC)(GLshort c);
typedef void (GLAD_API_PTR *PFNGLINDEXSVPROC)(const GLshort * c);
typedef void (GLAD_API_PTR *PFNGLINDEXUBPROC)(GLubyte c);
typedef void (GLAD_API_PTR *PFNGLINDEXUBVPROC)(const GLubyte * c);
typedef void (GLAD_API_PTR *PFNGLINDEXXOESPROC)(GLfixed component);
typedef void (GLAD_API_PTR *PFNGLINDEXXVOESPROC)(const GLfixed * component);
typedef void (GLAD_API_PTR *PFNGLINITNAMESPROC)(void);
typedef void (GLAD_API_PTR *PFNGLINSERTCOMPONENTEXTPROC)(GLuint res, GLuint src, GLuint num);
typedef void (GLAD_API_PTR *PFNGLINSERTEVENTMARKEREXTPROC)(GLsizei length, const GLchar * marker);
typedef void (GLAD_API_PTR *PFNGLINSTRUMENTSBUFFERSGIXPROC)(GLsizei size, GLint * buffer);
typedef void (GLAD_API_PTR *PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINTERPOLATEPATHSNVPROC)(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
typedef void (GLAD_API_PTR *PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
typedef void (GLAD_API_PTR *PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);
typedef void (GLAD_API_PTR *PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef GLboolean (GLAD_API_PTR *PFNGLISASYNCMARKERSGIXPROC)(GLuint marker);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERARBPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERRESIDENTNVPROC)(GLenum target);
typedef GLboolean (GLAD_API_PTR *PFNGLISCOMMANDLISTNVPROC)(GLuint list);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISFENCEAPPLEPROC)(GLuint fence);
typedef GLboolean (GLAD_API_PTR *PFNGLISFENCENVPROC)(GLuint fence);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFEREXTPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef GLboolean (GLAD_API_PTR *PFNGLISIMAGEHANDLERESIDENTNVPROC)(GLuint64 handle);
typedef GLboolean (GLAD_API_PTR *PFNGLISLISTPROC)(GLuint list);
typedef GLboolean (GLAD_API_PTR *PFNGLISMEMORYOBJECTEXTPROC)(GLuint memoryObject);
typedef GLboolean (GLAD_API_PTR *PFNGLISNAMEAMDPROC)(GLenum identifier, GLuint name);
typedef GLboolean (GLAD_API_PTR *PFNGLISNAMEDBUFFERRESIDENTNVPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISNAMEDSTRINGARBPROC)(GLint namelen, const GLchar * name);
typedef GLboolean (GLAD_API_PTR *PFNGLISOBJECTBUFFERATIPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISOCCLUSIONQUERYNVPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISPATHNVPROC)(GLuint path);
typedef GLboolean (GLAD_API_PTR *PFNGLISPOINTINFILLPATHNVPROC)(GLuint path, GLuint mask, GLfloat x, GLfloat y);
typedef GLboolean (GLAD_API_PTR *PFNGLISPOINTINSTROKEPATHNVPROC)(GLuint path, GLfloat x, GLfloat y);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMARBPROC)(GLuint program);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMNVPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYARBPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFEREXTPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISSAMPLERPROC)(GLuint sampler);
typedef GLboolean (GLAD_API_PTR *PFNGLISSEMAPHOREEXTPROC)(GLuint semaphore);
typedef GLboolean (GLAD_API_PTR *PFNGLISSHADERPROC)(GLuint shader);
typedef GLboolean (GLAD_API_PTR *PFNGLISSTATENVPROC)(GLuint state);
typedef GLboolean (GLAD_API_PTR *PFNGLISSYNCPROC)(GLsync sync);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREEXTPROC)(GLuint texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREHANDLERESIDENTNVPROC)(GLuint64 handle);
typedef GLboolean (GLAD_API_PTR *PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISTRANSFORMFEEDBACKNVPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISVARIANTENABLEDEXTPROC)(GLuint id, GLenum cap);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYAPPLEPROC)(GLuint array);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXATTRIBENABLEDAPPLEPROC)(GLuint index, GLenum pname);
typedef void (GLAD_API_PTR *PFNGLLGPUCOPYIMAGESUBDATANVXPROC)(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLLGPUINTERLOCKNVXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC)(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLLABELOBJECTEXTPROC)(GLenum type, GLuint object, GLsizei length, const GLchar * label);
typedef void (GLAD_API_PTR *PFNGLLIGHTENVISGIXPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELXOESPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELXVOESPROC)(GLenum pname, const GLfixed * param);
typedef void (GLAD_API_PTR *PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTXOESPROC)(GLenum light, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLLIGHTXVOESPROC)(GLenum light, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHXOESPROC)(GLfixed width);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLLISTBASEPROC)(GLuint base);
typedef void (GLAD_API_PTR *PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC)(GLuint list, GLuint segment, const void ** indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count);
typedef void (GLAD_API_PTR *PFNGLLISTPARAMETERFSGIXPROC)(GLuint list, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLLISTPARAMETERFVSGIXPROC)(GLuint list, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLLISTPARAMETERISGIXPROC)(GLuint list, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLLISTPARAMETERIVSGIXPROC)(GLuint list, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLLOADIDENTITYPROC)(void);
typedef void (GLAD_API_PTR *PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXXOESPROC)(const GLfixed * m);
typedef void (GLAD_API_PTR *PFNGLLOADNAMEPROC)(GLuint name);
typedef void (GLAD_API_PTR *PFNGLLOADPROGRAMNVPROC)(GLenum target, GLuint id, GLsizei len, const GLubyte * program);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXDARBPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXFARBPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXXOESPROC)(const GLfixed * m);
typedef void (GLAD_API_PTR *PFNGLLOCKARRAYSEXTPROC)(GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLLOGICOPPROC)(GLenum opcode);
typedef void (GLAD_API_PTR *PFNGLMAKEBUFFERNONRESIDENTNVPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLMAKEBUFFERRESIDENTNVPROC)(GLenum target, GLenum access);
typedef void (GLAD_API_PTR *PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)(GLuint64 handle);
typedef void (GLAD_API_PTR *PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)(GLuint64 handle);
typedef void (GLAD_API_PTR *PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle, GLenum access);
typedef void (GLAD_API_PTR *PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)(GLuint64 handle, GLenum access);
typedef void (GLAD_API_PTR *PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)(GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)(GLuint buffer, GLenum access);
typedef void (GLAD_API_PTR *PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)(GLuint64 handle);
typedef void (GLAD_API_PTR *PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)(GLuint64 handle);
typedef void (GLAD_API_PTR *PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
typedef void (GLAD_API_PTR *PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)(GLuint64 handle);
typedef void (GLAD_API_PTR *PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLMAP1XOESPROC)(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
typedef void (GLAD_API_PTR *PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLMAP2XOESPROC)(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAD_API_PTR *PFNGLMAPCONTROLPOINTSNVPROC)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1XOESPROC)(GLint n, GLfixed u1, GLfixed u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2XOESPROC)(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFEREXTPROC)(GLuint buffer, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void * (GLAD_API_PTR *PFNGLMAPOBJECTBUFFERATIPROC)(GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLMAPPARAMETERFVNVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMAPPARAMETERIVNVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void * (GLAD_API_PTR *PFNGLMAPTEXTURE2DINTELPROC)(GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout);
typedef void (GLAD_API_PTR *PFNGLMAPVERTEXATTRIB1DAPPLEPROC)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLMAPVERTEXATTRIB1FAPPLEPROC)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLMAPVERTEXATTRIB2DAPPLEPROC)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLMAPVERTEXATTRIB2FAPPLEPROC)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMATERIALXOESPROC)(GLenum face, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLMATERIALXVOESPROC)(GLenum face, GLenum pname, const GLfixed * param);
typedef void (GLAD_API_PTR *PFNGLMATRIXFRUSTUMEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLMATRIXINDEXPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLMATRIXINDEXUBVARBPROC)(GLint size, const GLubyte * indices);
typedef void (GLAD_API_PTR *PFNGLMATRIXINDEXUIVARBPROC)(GLint size, const GLuint * indices);
typedef void (GLAD_API_PTR *PFNGLMATRIXINDEXUSVARBPROC)(GLint size, const GLushort * indices);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOAD3X2FNVPROC)(GLenum matrixMode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOAD3X3FNVPROC)(GLenum matrixMode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADIDENTITYEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC)(GLenum matrixMode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULT3X2FNVPROC)(GLenum matrixMode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULT3X3FNVPROC)(GLenum matrixMode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC)(GLenum matrixMode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXORTHOEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLMATRIXPOPEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXPUSHEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXROTATEDEXTPROC)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXROTATEFEXTPROC)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMATRIXSCALEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXSCALEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMATRIXTRANSLATEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXTRANSLATEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMAXSHADERCOMPILERTHREADSARBPROC)(GLuint count);
typedef void (GLAD_API_PTR *PFNGLMAXSHADERCOMPILERTHREADSKHRPROC)(GLuint count);
typedef void (GLAD_API_PTR *PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
typedef void (GLAD_API_PTR *PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
typedef void (GLAD_API_PTR *PFNGLMEMORYBARRIEREXTPROC)(GLbitfield barriers);
typedef void (GLAD_API_PTR *PFNGLMEMORYOBJECTPARAMETERIVEXTPROC)(GLuint memoryObject, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
typedef void (GLAD_API_PTR *PFNGLMINSAMPLESHADINGARBPROC)(GLfloat value);
typedef void (GLAD_API_PTR *PFNGLMINMAXPROC)(GLenum target, GLenum internalformat, GLboolean sink);
typedef void (GLAD_API_PTR *PFNGLMINMAXEXTPROC)(GLenum target, GLenum internalformat, GLboolean sink);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXXOESPROC)(const GLfixed * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXDARBPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXFARBPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXXOESPROC)(const GLfixed * m);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSEXTPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)(GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC)(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC)(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSEXTPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)(GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC)(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC)(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC)(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC)(GLintptr indirect, GLsizei drawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLMULTIMODEDRAWARRAYSIBMPROC)(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride);
typedef void (GLAD_API_PTR *PFNGLMULTIMODEDRAWELEMENTSIBMPROC)(const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride);
typedef void (GLAD_API_PTR *PFNGLMULTITEXBUFFEREXTPROC)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1BOESPROC)(GLenum texture, GLbyte s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1BVOESPROC)(GLenum texture, const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DARBPROC)(GLenum target, GLdouble s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FARBPROC)(GLenum target, GLfloat s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1HNVPROC)(GLenum target, GLhalfNV s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1HVNVPROC)(GLenum target, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IARBPROC)(GLenum target, GLint s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SARBPROC)(GLenum target, GLshort s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1XOESPROC)(GLenum texture, GLfixed s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1XVOESPROC)(GLenum texture, const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2BOESPROC)(GLenum texture, GLbyte s, GLbyte t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2BVOESPROC)(GLenum texture, const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DARBPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FARBPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2HVNVPROC)(GLenum target, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IARBPROC)(GLenum target, GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SARBPROC)(GLenum target, GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2XOESPROC)(GLenum texture, GLfixed s, GLfixed t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2XVOESPROC)(GLenum texture, const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3BOESPROC)(GLenum texture, GLbyte s, GLbyte t, GLbyte r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3BVOESPROC)(GLenum texture, const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3HVNVPROC)(GLenum target, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IARBPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3XOESPROC)(GLenum texture, GLfixed s, GLfixed t, GLfixed r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3XVOESPROC)(GLenum texture, const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4BOESPROC)(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4BVOESPROC)(GLenum texture, const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4HVNVPROC)(GLenum target, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IARBPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4XOESPROC)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4XVOESPROC)(GLenum texture, const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDPOINTEREXTPROC)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENDEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENFEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENIEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXRENDERBUFFEREXTPROC)(GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTICASTBARRIERNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLMULTICASTBLITFRAMEBUFFERNVPROC)(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLMULTICASTBUFFERSUBDATANVPROC)(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC)(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLMULTICASTCOPYIMAGESUBDATANVPROC)(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (GLAD_API_PTR *PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC)(GLuint gpu, GLuint id, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLMULTICASTGETQUERYOBJECTIVNVPROC)(GLuint gpu, GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC)(GLuint gpu, GLuint id, GLenum pname, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC)(GLuint gpu, GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLMULTICASTSCISSORARRAYVNVXPROC)(GLuint gpu, GLuint first, GLsizei count, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTICASTVIEWPORTARRAYVNVXPROC)(GLuint gpu, GLuint first, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC)(GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff);
typedef void (GLAD_API_PTR *PFNGLMULTICASTWAITSYNCNVPROC)(GLuint signalGpu, GLbitfield waitGpuMask);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERATTACHMEMORYNVPROC)(GLuint buffer, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSTORAGEEXTPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC)(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC)(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC)(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDSTRINGARBPROC)(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string);
typedef void (GLAD_API_PTR *PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef GLuint (GLAD_API_PTR *PFNGLNEWOBJECTBUFFERATIPROC)(GLsizei size, const void * pointer, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FVERTEX3FSUNPROC)(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FVERTEX3FVSUNPROC)(const GLfloat * n, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3HNVPROC)(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3XOESPROC)(GLfixed nx, GLfixed ny, GLfixed nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLNORMALFORMATNVPROC)(GLenum type, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTERLISTIBMPROC)(GLenum type, GLint stride, const void ** pointer, GLint ptrstride);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTERVINTELPROC)(GLenum type, const void ** pointer);
typedef void (GLAD_API_PTR *PFNGLNORMALSTREAM3BATIPROC)(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (GLAD_API_PTR *PFNGLNORMALSTREAM3BVATIPROC)(GLenum stream, const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLNORMALSTREAM3DATIPROC)(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (GLAD_API_PTR *PFNGLNORMALSTREAM3DVATIPROC)(GLenum stream, const GLdouble * coords);
typedef void (GLAD_API_PTR *PFNGLNORMALSTREAM3FATIPROC)(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (GLAD_API_PTR *PFNGLNORMALSTREAM3FVATIPROC)(GLenum stream, const GLfloat * coords);
typedef void (GLAD_API_PTR *PFNGLNORMALSTREAM3IATIPROC)(GLenum stream, GLint nx, GLint ny, GLint nz);
typedef void (GLAD_API_PTR *PFNGLNORMALSTREAM3IVATIPROC)(GLenum stream, const GLint * coords);
typedef void (GLAD_API_PTR *PFNGLNORMALSTREAM3SATIPROC)(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
typedef void (GLAD_API_PTR *PFNGLNORMALSTREAM3SVATIPROC)(GLenum stream, const GLshort * coords);
typedef void (GLAD_API_PTR *PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef void (GLAD_API_PTR *PFNGLOBJECTPTRLABELPROC)(const void * ptr, GLsizei length, const GLchar * label);
typedef GLenum (GLAD_API_PTR *PFNGLOBJECTPURGEABLEAPPLEPROC)(GLenum objectType, GLuint name, GLenum option);
typedef GLenum (GLAD_API_PTR *PFNGLOBJECTUNPURGEABLEAPPLEPROC)(GLenum objectType, GLuint name, GLenum option);
typedef void (GLAD_API_PTR *PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLORTHOFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLORTHOXOESPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (GLAD_API_PTR *PFNGLPNTRIANGLESFATIPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPNTRIANGLESIATIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPASSTEXCOORDATIPROC)(GLuint dst, GLuint coord, GLenum swizzle);
typedef void (GLAD_API_PTR *PFNGLPASSTHROUGHPROC)(GLfloat token);
typedef void (GLAD_API_PTR *PFNGLPASSTHROUGHXOESPROC)(GLfixed token);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPATHCOLORGENNVPROC)(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs);
typedef void (GLAD_API_PTR *PFNGLPATHCOMMANDSNVPROC)(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords);
typedef void (GLAD_API_PTR *PFNGLPATHCOORDSNVPROC)(GLuint path, GLsizei numCoords, GLenum coordType, const void * coords);
typedef void (GLAD_API_PTR *PFNGLPATHCOVERDEPTHFUNCNVPROC)(GLenum func);
typedef void (GLAD_API_PTR *PFNGLPATHDASHARRAYNVPROC)(GLuint path, GLsizei dashCount, const GLfloat * dashArray);
typedef void (GLAD_API_PTR *PFNGLPATHFOGGENNVPROC)(GLenum genMode);
typedef GLenum (GLAD_API_PTR *PFNGLPATHGLYPHINDEXARRAYNVPROC)(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum (GLAD_API_PTR *PFNGLPATHGLYPHINDEXRANGENVPROC)(GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint * baseAndCount);
typedef void (GLAD_API_PTR *PFNGLPATHGLYPHRANGENVPROC)(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (GLAD_API_PTR *PFNGLPATHGLYPHSNVPROC)(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum (GLAD_API_PTR *PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC)(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (GLAD_API_PTR *PFNGLPATHPARAMETERFNVPROC)(GLuint path, GLenum pname, GLfloat value);
typedef void (GLAD_API_PTR *PFNGLPATHPARAMETERFVNVPROC)(GLuint path, GLenum pname, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPATHPARAMETERINVPROC)(GLuint path, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPATHPARAMETERIVNVPROC)(GLuint path, GLenum pname, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPATHSTENCILDEPTHOFFSETNVPROC)(GLfloat factor, GLfloat units);
typedef void (GLAD_API_PTR *PFNGLPATHSTENCILFUNCNVPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLPATHSTRINGNVPROC)(GLuint path, GLenum format, GLsizei length, const void * pathString);
typedef void (GLAD_API_PTR *PFNGLPATHSUBCOMMANDSNVPROC)(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords);
typedef void (GLAD_API_PTR *PFNGLPATHSUBCOORDSNVPROC)(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords);
typedef void (GLAD_API_PTR *PFNGLPATHTEXGENNVPROC)(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs);
typedef void (GLAD_API_PTR *PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPAUSETRANSFORMFEEDBACKNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPIXELDATARANGENVPROC)(GLenum target, GLsizei length, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPXPROC)(GLenum map, GLint size, const GLfixed * values);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREXPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLPIXELTEXGENPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELTEXGENPARAMETERFVSGISPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPIXELTEXGENPARAMETERISGISPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPIXELTEXGENPARAMETERIVSGISPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPIXELTEXGENSGIXPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERXOESPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void (GLAD_API_PTR *PFNGLPIXELZOOMXOESPROC)(GLfixed xfactor, GLfixed yfactor);
typedef GLboolean (GLAD_API_PTR *PFNGLPOINTALONGPATHNVPROC)(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFARBPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFEXTPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVARBPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVEXTPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVSGISPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERINVPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVNVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERXVOESPROC)(GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEXOESPROC)(GLfixed size);
typedef GLint (GLAD_API_PTR *PFNGLPOLLASYNCSGIXPROC)(GLuint * markerp);
typedef GLint (GLAD_API_PTR *PFNGLPOLLINSTRUMENTSSGIXPROC)(GLint * marker_p);
typedef void (GLAD_API_PTR *PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETCLAMPPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETCLAMPEXTPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETEXTPROC)(GLfloat factor, GLfloat bias);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETXOESPROC)(GLfixed factor, GLfixed units);
typedef void (GLAD_API_PTR *PFNGLPOLYGONSTIPPLEPROC)(const GLubyte * mask);
typedef void (GLAD_API_PTR *PFNGLPOPATTRIBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPCLIENTATTRIBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPDEBUGGROUPPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPGROUPMARKEREXTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPMATRIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPNAMEPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPRESENTFRAMEDUALFILLNVPROC)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
typedef void (GLAD_API_PTR *PFNGLPRESENTFRAMEKEYEDNVPROC)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVEBOUNDINGBOXARBPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVERESTARTINDEXNVPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVERESTARTNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESEXTPROC)(GLsizei n, const GLuint * textures, const GLclampf * priorities);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESXOESPROC)(GLsizei n, const GLuint * textures, const GLfixed * priorities);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETERI4INVPROC)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETERI4IVNVPROC)(GLenum target, GLuint index, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETERI4UINVPROC)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)(GLenum target, GLuint index, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETERI4INVPROC)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)(GLenum target, GLuint index, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)(GLenum target, GLuint index, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4DNVPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4DVNVPROC)(GLenum target, GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4FNVPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4FVNVPROC)(GLenum target, GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIARBPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIEXTPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERS4DVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERS4FVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC)(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs);
typedef void (GLAD_API_PTR *PFNGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (GLAD_API_PTR *PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC)(GLenum target, GLsizei count, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DEXTPROC)(GLuint program, GLint location, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FEXTPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1I64ARBPROC)(GLuint program, GLint location, GLint64 x);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1I64NVPROC)(GLuint program, GLint location, GLint64EXT x);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IEXTPROC)(GLuint program, GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UI64ARBPROC)(GLuint program, GLint location, GLuint64 x);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIEXTPROC)(GLuint program, GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)(GLuint program, GLint location, GLuint64 value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)(GLuint program, GLint location, GLuint64 value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * values);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64 * values);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMUI64NVPROC)(GLuint program, GLint location, GLuint64EXT value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMUI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMVERTEXLIMITNVPROC)(GLenum target, GLint limit);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
typedef void (GLAD_API_PTR *PFNGLPUSHGROUPMARKEREXTPROC)(GLsizei length, const GLchar * marker);
typedef void (GLAD_API_PTR *PFNGLPUSHMATRIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPUSHNAMEPROC)(GLuint name);
typedef void (GLAD_API_PTR *PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
typedef GLbitfield (GLAD_API_PTR *PFNGLQUERYMATRIXXOESPROC)(GLfixed * mantissa, GLint * exponent);
typedef void (GLAD_API_PTR *PFNGLQUERYOBJECTPARAMETERUIAMDPROC)(GLenum target, GLuint id, GLenum pname, GLuint param);
typedef GLint (GLAD_API_PTR *PFNGLQUERYRESOURCENVPROC)(GLenum queryType, GLint tagId, GLuint count, GLint * buffer);
typedef void (GLAD_API_PTR *PFNGLQUERYRESOURCETAGNVPROC)(GLint tagId, const GLchar * tagString);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2XOESPROC)(GLfixed x, GLfixed y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3XOESPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4XOESPROC)(GLfixed x, GLfixed y, GLfixed z, GLfixed w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLRASTERSAMPLESEXTPROC)(GLuint samples, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLREADBUFFERPROC)(GLenum src);
typedef void (GLAD_API_PTR *PFNGLREADINSTRUMENTSSGIXPROC)(GLint marker);
typedef void (GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSARBPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void (GLAD_API_PTR *PFNGLRECTDVPROC)(const GLdouble * v1, const GLdouble * v2);
typedef void (GLAD_API_PTR *PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void (GLAD_API_PTR *PFNGLRECTFVPROC)(const GLfloat * v1, const GLfloat * v2);
typedef void (GLAD_API_PTR *PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void (GLAD_API_PTR *PFNGLRECTIVPROC)(const GLint * v1, const GLint * v2);
typedef void (GLAD_API_PTR *PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void (GLAD_API_PTR *PFNGLRECTSVPROC)(const GLshort * v1, const GLshort * v2);
typedef void (GLAD_API_PTR *PFNGLRECTXOESPROC)(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
typedef void (GLAD_API_PTR *PFNGLRECTXVOESPROC)(const GLfixed * v1, const GLfixed * v2);
typedef void (GLAD_API_PTR *PFNGLREFERENCEPLANESGIXPROC)(const GLdouble * equation);
typedef GLboolean (GLAD_API_PTR *PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC)(GLuint memory, GLuint64 key);
typedef void (GLAD_API_PTR *PFNGLRELEASESHADERCOMPILERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLRENDERGPUMASKNVPROC)(GLbitfield mask);
typedef GLint (GLAD_API_PTR *PFNGLRENDERMODEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC)(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEPOINTERSUNPROC)(GLenum type, GLsizei stride, const void ** pointer);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUBSUNPROC)(GLubyte code);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUBVSUNPROC)(const GLubyte * code);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)(const GLuint * rc, const GLfloat * c, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)(const GLuint * rc, const GLubyte * c, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)(const GLuint * rc, const GLfloat * n, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUISUNPROC)(GLuint code);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)(const GLuint * rc, const GLfloat * tc, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)(const GLuint * rc, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUIVSUNPROC)(const GLuint * code);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUSSUNPROC)(GLushort code);
typedef void (GLAD_API_PTR *PFNGLREPLACEMENTCODEUSVSUNPROC)(const GLushort * code);
typedef void (GLAD_API_PTR *PFNGLREQUESTRESIDENTPROGRAMSNVPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLRESETHISTOGRAMPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLRESETHISTOGRAMEXTPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLRESETMEMORYOBJECTPARAMETERNVPROC)(GLuint memory, GLenum pname);
typedef void (GLAD_API_PTR *PFNGLRESETMINMAXPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLRESETMINMAXEXTPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLRESIZEBUFFERSMESAPROC)(void);
typedef void (GLAD_API_PTR *PFNGLRESOLVEDEPTHVALUESNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLRESUMETRANSFORMFEEDBACKNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLROTATEXOESPROC)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEARBPROC)(GLfloat value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMAPATIPROC)(GLuint dst, GLuint interp, GLenum swizzle);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKEXTPROC)(GLclampf value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKINDEXEDNVPROC)(GLuint index, GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKSGISPROC)(GLclampf value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLSAMPLEPATTERNEXTPROC)(GLenum pattern);
typedef void (GLAD_API_PTR *PFNGLSAMPLEPATTERNSGISPROC)(GLenum pattern);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLSCALEXOESPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAD_API_PTR *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSCISSOREXCLUSIVEARRAYVNVPROC)(GLuint first, GLsizei count, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSCISSOREXCLUSIVENVPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3BEXTPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3BVEXTPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3DEXTPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3DVEXTPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3FEXTPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3FVEXTPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3IEXTPROC)(GLint red, GLint green, GLint blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3IVEXTPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3SEXTPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3SVEXTPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UBEXTPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UBVEXTPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UIEXTPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UIVEXTPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3USEXTPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3USVPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3USVEXTPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint * color);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride);
typedef void (GLAD_API_PTR *PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint * buffer);
typedef void (GLAD_API_PTR *PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList);
typedef void (GLAD_API_PTR *PFNGLSEMAPHOREPARAMETERIVNVPROC)(GLuint semaphore, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLSEMAPHOREPARAMETERUI64VEXTPROC)(GLuint semaphore, GLenum pname, const GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLSEPARABLEFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column);
typedef void (GLAD_API_PTR *PFNGLSEPARABLEFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column);
typedef void (GLAD_API_PTR *PFNGLSETFENCEAPPLEPROC)(GLuint fence);
typedef void (GLAD_API_PTR *PFNGLSETFENCENVPROC)(GLuint fence, GLenum condition);
typedef void (GLAD_API_PTR *PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)(GLuint dst, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLSETINVARIANTEXTPROC)(GLuint id, GLenum type, const void * addr);
typedef void (GLAD_API_PTR *PFNGLSETLOCALCONSTANTEXTPROC)(GLuint id, GLenum type, const void * addr);
typedef void (GLAD_API_PTR *PFNGLSETMULTISAMPLEFVAMDPROC)(GLenum pname, GLuint index, const GLfloat * val);
typedef void (GLAD_API_PTR *PFNGLSHADEMODELPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (GLAD_API_PTR *PFNGLSHADEROP1EXTPROC)(GLenum op, GLuint res, GLuint arg1);
typedef void (GLAD_API_PTR *PFNGLSHADEROP2EXTPROC)(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
typedef void (GLAD_API_PTR *PFNGLSHADEROP3EXTPROC)(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEARBPROC)(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void (GLAD_API_PTR *PFNGLSHADINGRATEIMAGEBARRIERNVPROC)(GLboolean synchronize);
typedef void (GLAD_API_PTR *PFNGLSHADINGRATEIMAGEPALETTENVPROC)(GLuint viewport, GLuint first, GLsizei count, const GLenum * rates);
typedef void (GLAD_API_PTR *PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC)(GLenum rate, GLuint samples, const GLint * locations);
typedef void (GLAD_API_PTR *PFNGLSHADINGRATESAMPLEORDERNVPROC)(GLenum order);
typedef void (GLAD_API_PTR *PFNGLSHARPENTEXFUNCSGISPROC)(GLenum target, GLsizei n, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLSIGNALSEMAPHOREEXTPROC)(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts);
typedef void (GLAD_API_PTR *PFNGLSIGNALSEMAPHOREUI64NVXPROC)(GLuint signalGpu, GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray);
typedef void (GLAD_API_PTR *PFNGLSIGNALVKFENCENVPROC)(GLuint64 vkFence);
typedef void (GLAD_API_PTR *PFNGLSIGNALVKSEMAPHORENVPROC)(GLuint64 vkSemaphore);
typedef void (GLAD_API_PTR *PFNGLSPECIALIZESHADERPROC)(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
typedef void (GLAD_API_PTR *PFNGLSPECIALIZESHADERARBPROC)(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
typedef void (GLAD_API_PTR *PFNGLSPRITEPARAMETERFSGIXPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLSPRITEPARAMETERFVSGIXPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLSPRITEPARAMETERISGIXPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLSPRITEPARAMETERIVSGIXPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLSTARTINSTRUMENTSSGIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLSTATECAPTURENVPROC)(GLuint state, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLSTENCILCLEARTAGEXTPROC)(GLsizei stencilTagBits, GLuint stencilClearTag);
typedef void (GLAD_API_PTR *PFNGLSTENCILFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues);
typedef void (GLAD_API_PTR *PFNGLSTENCILFILLPATHNVPROC)(GLuint path, GLenum fillMode, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEATIPROC)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEATIPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPVALUEAMDPROC)(GLenum face, GLuint value);
typedef void (GLAD_API_PTR *PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues);
typedef void (GLAD_API_PTR *PFNGLSTENCILSTROKEPATHNVPROC)(GLuint path, GLint reference, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues);
typedef void (GLAD_API_PTR *PFNGLSTENCILTHENCOVERFILLPATHNVPROC)(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
typedef void (GLAD_API_PTR *PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues);
typedef void (GLAD_API_PTR *PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC)(GLuint path, GLint reference, GLuint mask, GLenum coverMode);
typedef void (GLAD_API_PTR *PFNGLSTOPINSTRUMENTSSGIXPROC)(GLint marker);
typedef void (GLAD_API_PTR *PFNGLSTRINGMARKERGREMEDYPROC)(GLsizei len, const void * string);
typedef void (GLAD_API_PTR *PFNGLSUBPIXELPRECISIONBIASNVPROC)(GLuint xbits, GLuint ybits);
typedef void (GLAD_API_PTR *PFNGLSWIZZLEEXTPROC)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (GLAD_API_PTR *PFNGLSYNCTEXTUREINTELPROC)(GLuint texture);
typedef void (GLAD_API_PTR *PFNGLTAGSAMPLEBUFFERSGIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLTANGENT3BEXTPROC)(GLbyte tx, GLbyte ty, GLbyte tz);
typedef void (GLAD_API_PTR *PFNGLTANGENT3BVEXTPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLTANGENT3DEXTPROC)(GLdouble tx, GLdouble ty, GLdouble tz);
typedef void (GLAD_API_PTR *PFNGLTANGENT3DVEXTPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTANGENT3FEXTPROC)(GLfloat tx, GLfloat ty, GLfloat tz);
typedef void (GLAD_API_PTR *PFNGLTANGENT3FVEXTPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTANGENT3IEXTPROC)(GLint tx, GLint ty, GLint tz);
typedef void (GLAD_API_PTR *PFNGLTANGENT3IVEXTPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTANGENT3SEXTPROC)(GLshort tx, GLshort ty, GLshort tz);
typedef void (GLAD_API_PTR *PFNGLTANGENT3SVEXTPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTANGENTPOINTEREXTPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTBUFFERMASK3DFXPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLTESSELLATIONFACTORAMDPROC)(GLfloat factor);
typedef void (GLAD_API_PTR *PFNGLTESSELLATIONMODEAMDPROC)(GLenum mode);
typedef GLboolean (GLAD_API_PTR *PFNGLTESTFENCEAPPLEPROC)(GLuint fence);
typedef GLboolean (GLAD_API_PTR *PFNGLTESTFENCENVPROC)(GLuint fence);
typedef GLboolean (GLAD_API_PTR *PFNGLTESTOBJECTAPPLEPROC)(GLenum object, GLuint name);
typedef void (GLAD_API_PTR *PFNGLTEXATTACHMEMORYNVPROC)(GLenum target, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERARBPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFEREXTPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXBUMPPARAMETERFVATIPROC)(GLenum pname, const GLfloat * param);
typedef void (GLAD_API_PTR *PFNGLTEXBUMPPARAMETERIVATIPROC)(GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1BOESPROC)(GLbyte s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1BVOESPROC)(const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1DPROC)(GLdouble s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1FPROC)(GLfloat s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1HNVPROC)(GLhalfNV s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1IPROC)(GLint s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1SPROC)(GLshort s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1XOESPROC)(GLfixed s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2BOESPROC)(GLbyte s, GLbyte t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2BVOESPROC)(const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)(const GLfloat * tc, const GLfloat * c, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)(const GLfloat * tc, const GLubyte * c, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)(const GLfloat * tc, const GLfloat * n, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FVERTEX3FVSUNPROC)(const GLfloat * tc, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2HNVPROC)(GLhalfNV s, GLhalfNV t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2XOESPROC)(GLfixed s, GLfixed t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3BOESPROC)(GLbyte s, GLbyte t, GLbyte r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3BVOESPROC)(const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3HNVPROC)(GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3XOESPROC)(GLfixed s, GLfixed t, GLfixed r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4BOESPROC)(GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4BVOESPROC)(const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FVERTEX4FSUNPROC)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FVERTEX4FVSUNPROC)(const GLfloat * tc, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4HNVPROC)(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4XOESPROC)(GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTERVINTELPROC)(GLint size, GLenum type, const void ** pointer);
typedef void (GLAD_API_PTR *PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXENVXOESPROC)(GLenum target, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLTEXENVXVOESPROC)(GLenum target, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLTEXFILTERFUNCSGISPROC)(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights);
typedef void (GLAD_API_PTR *PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void (GLAD_API_PTR *PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENXOESPROC)(GLenum coord, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLTEXGENXVOESPROC)(GLenum coord, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE4DSGISPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXPAGECOMMITMENTARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLTEXPAGECOMMITMENTMEMNVPROC)(GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERXOESPROC)(GLenum target, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERXVOESPROC)(GLenum target, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLTEXRENDERBUFFERNVPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE1DEXTPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE2DEXTPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DEXTPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGEMEM1DEXTPROC)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGEMEM2DEXTPROC)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGEMEM3DEXTPROC)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGESPARSEAMDPROC)(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE4DSGISPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREATTACHMEMORYNVPROC)(GLuint texture, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBARRIERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBARRIERNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFEREXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFERRANGEEXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXTURECOLORMASKSGISPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURELIGHTEXTPROC)(GLenum pname);
typedef void (GLAD_API_PTR *PFNGLTEXTUREMATERIALEXTPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLTEXTURENORMALEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPAGECOMMITMENTEXTPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC)(GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat * param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTURERANGEAPPLEPROC)(GLenum target, GLsizei length, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXTURERENDERBUFFEREXTPROC)(GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE1DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGEMEM1DEXTPROC)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGEMEM2DEXTPROC)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGEMEM3DEXTPROC)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGESPARSEAMDPROC)(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void (GLAD_API_PTR *PFNGLTRACKMATRIXNVPROC)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)(GLsizei count, const GLint * attribs, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMPATHNVPROC)(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEXOESPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FARBPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1I64ARBPROC)(GLint location, GLint64 x);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1I64NVPROC)(GLint location, GLint64EXT x);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IARBPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UI64ARBPROC)(GLint location, GLuint64 x);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UI64NVPROC)(GLint location, GLuint64EXT x);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIEXTPROC)(GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FARBPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2I64ARBPROC)(GLint location, GLint64 x, GLint64 y);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IARBPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIEXTPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4I64VARBPROC)(GLint location, GLsizei count, const GLint64 * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void (GLAD_API_PTR *PFNGLUNIFORMBUFFEREXTPROC)(GLuint program, GLint location, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLUNIFORMHANDLEUI64ARBPROC)(GLint location, GLuint64 value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMHANDLEUI64NVPROC)(GLint location, GLuint64 value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMHANDLEUI64VARBPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMHANDLEUI64VNVPROC)(GLint location, GLsizei count, const GLuint64 * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint * indices);
typedef void (GLAD_API_PTR *PFNGLUNIFORMUI64NVPROC)(GLint location, GLuint64EXT value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMUI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (GLAD_API_PTR *PFNGLUNLOCKARRAYSEXTPROC)(void);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERARBPROC)(GLenum target);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPNAMEDBUFFEREXTPROC)(GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLUNMAPOBJECTBUFFERATIPROC)(GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLUNMAPTEXTURE2DINTELPROC)(GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLUPDATEOBJECTBUFFERATIPROC)(GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve);
typedef void (GLAD_API_PTR *PFNGLUPLOADGPUMASKNVXPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMOBJECTARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (GLAD_API_PTR *PFNGLUSESHADERPROGRAMEXTPROC)(GLenum type, GLuint program);
typedef void (GLAD_API_PTR *PFNGLVDPAUFININVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLVDPAUGETSURFACEIVNVPROC)(GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (GLAD_API_PTR *PFNGLVDPAUINITNVPROC)(const void * vdpDevice, const void * getProcAddress);
typedef GLboolean (GLAD_API_PTR *PFNGLVDPAUISSURFACENVPROC)(GLvdpauSurfaceNV surface);
typedef void (GLAD_API_PTR *PFNGLVDPAUMAPSURFACESNVPROC)(GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces);
typedef GLvdpauSurfaceNV (GLAD_API_PTR *PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames);
typedef GLvdpauSurfaceNV (GLAD_API_PTR *PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames);
typedef GLvdpauSurfaceNV (GLAD_API_PTR *PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC)(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames, GLboolean isFrameStructure);
typedef void (GLAD_API_PTR *PFNGLVDPAUSURFACEACCESSNVPROC)(GLvdpauSurfaceNV surface, GLenum access);
typedef void (GLAD_API_PTR *PFNGLVDPAUUNMAPSURFACESNVPROC)(GLsizei numSurface, const GLvdpauSurfaceNV * surfaces);
typedef void (GLAD_API_PTR *PFNGLVDPAUUNREGISTERSURFACENVPROC)(GLvdpauSurfaceNV surface);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLVARIANTARRAYOBJECTATIPROC)(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (GLAD_API_PTR *PFNGLVARIANTPOINTEREXTPROC)(GLuint id, GLenum type, GLuint stride, const void * addr);
typedef void (GLAD_API_PTR *PFNGLVARIANTBVEXTPROC)(GLuint id, const GLbyte * addr);
typedef void (GLAD_API_PTR *PFNGLVARIANTDVEXTPROC)(GLuint id, const GLdouble * addr);
typedef void (GLAD_API_PTR *PFNGLVARIANTFVEXTPROC)(GLuint id, const GLfloat * addr);
typedef void (GLAD_API_PTR *PFNGLVARIANTIVEXTPROC)(GLuint id, const GLint * addr);
typedef void (GLAD_API_PTR *PFNGLVARIANTSVEXTPROC)(GLuint id, const GLshort * addr);
typedef void (GLAD_API_PTR *PFNGLVARIANTUBVEXTPROC)(GLuint id, const GLubyte * addr);
typedef void (GLAD_API_PTR *PFNGLVARIANTUIVEXTPROC)(GLuint id, const GLuint * addr);
typedef void (GLAD_API_PTR *PFNGLVARIANTUSVEXTPROC)(GLuint id, const GLushort * addr);
typedef void (GLAD_API_PTR *PFNGLVERTEX2BOESPROC)(GLbyte x, GLbyte y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2BVOESPROC)(const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2HNVPROC)(GLhalfNV x, GLhalfNV y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2IPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2XOESPROC)(GLfixed x);
typedef void (GLAD_API_PTR *PFNGLVERTEX2XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEX3BOESPROC)(GLbyte x, GLbyte y, GLbyte z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3BVOESPROC)(const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3HNVPROC)(GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3XOESPROC)(GLfixed x, GLfixed y);
typedef void (GLAD_API_PTR *PFNGLVERTEX3XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEX4BOESPROC)(GLbyte x, GLbyte y, GLbyte z, GLbyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4BVOESPROC)(const GLbyte * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4HNVPROC)(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4HVNVPROC)(const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4XOESPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAD_API_PTR *PFNGLVERTEX4XVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYRANGEAPPLEPROC)(GLsizei length, void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYRANGENVPROC)(GLsizei length, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)(GLuint vaobj, GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DNVPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FARBPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FNVPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1HNVPROC)(GLuint index, GLhalfNV x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1HVNVPROC)(GLuint index, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SARBPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SNVPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DARBPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DNVPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FARBPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FNVPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2HVNVPROC)(GLuint index, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SARBPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SNVPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3HVNVPROC)(GLuint index, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVARBPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVARBPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBARBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVARBPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVARBPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVARBPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4HVNVPROC)(GLuint index, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVARBPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBNVPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVNVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVARBPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVARBPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORARBPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IEXTPROC)(GLuint index, GLint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIEXTPROC)(GLuint index, GLuint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IEXTPROC)(GLuint index, GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIEXTPROC)(GLuint index, GLuint x, GLuint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IEXTPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVEXTPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IEXTPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVEXTPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVEXTPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVEXTPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DEXTPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1I64NVPROC)(GLuint index, GLint64EXT x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1I64VNVPROC)(GLuint index, const GLint64EXT * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1UI64ARBPROC)(GLuint index, GLuint64EXT x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1UI64NVPROC)(GLuint index, GLuint64EXT x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1UI64VARBPROC)(GLuint index, const GLuint64EXT * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1UI64VNVPROC)(GLuint index, const GLuint64EXT * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DEXTPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2I64VNVPROC)(GLuint index, const GLint64EXT * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2UI64VNVPROC)(GLuint index, const GLuint64EXT * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3I64VNVPROC)(GLuint index, const GLint64EXT * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3UI64VNVPROC)(GLuint index, const GLuint64EXT * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4I64VNVPROC)(GLuint index, const GLint64EXT * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4UI64VNVPROC)(GLuint index, const GLuint64EXT * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPARAMETERIAMDPROC)(GLuint index, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERARBPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERNVPROC)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4UBVNVPROC)(GLuint index, GLsizei count, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXBLENDARBPROC)(GLint count);
typedef void (GLAD_API_PTR *PFNGLVERTEXBLENDENVFATIPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLVERTEXBLENDENVIATIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLVERTEXFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTERVINTELPROC)(GLint size, GLenum type, const void ** pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM1DATIPROC)(GLenum stream, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM1DVATIPROC)(GLenum stream, const GLdouble * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM1FATIPROC)(GLenum stream, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM1FVATIPROC)(GLenum stream, const GLfloat * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM1IATIPROC)(GLenum stream, GLint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM1IVATIPROC)(GLenum stream, const GLint * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM1SATIPROC)(GLenum stream, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM1SVATIPROC)(GLenum stream, const GLshort * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM2DATIPROC)(GLenum stream, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM2DVATIPROC)(GLenum stream, const GLdouble * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM2FATIPROC)(GLenum stream, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM2FVATIPROC)(GLenum stream, const GLfloat * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM2IATIPROC)(GLenum stream, GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM2IVATIPROC)(GLenum stream, const GLint * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM2SATIPROC)(GLenum stream, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM2SVATIPROC)(GLenum stream, const GLshort * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM3DATIPROC)(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM3DVATIPROC)(GLenum stream, const GLdouble * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM3FATIPROC)(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM3FVATIPROC)(GLenum stream, const GLfloat * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM3IATIPROC)(GLenum stream, GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM3IVATIPROC)(GLenum stream, const GLint * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM3SATIPROC)(GLenum stream, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM3SVATIPROC)(GLenum stream, const GLshort * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM4DATIPROC)(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM4DVATIPROC)(GLenum stream, const GLdouble * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM4FATIPROC)(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM4FVATIPROC)(GLenum stream, const GLfloat * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM4IATIPROC)(GLenum stream, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM4IVATIPROC)(GLenum stream, const GLint * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM4SATIPROC)(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXSTREAM4SVATIPROC)(GLenum stream, const GLshort * coords);
typedef void (GLAD_API_PTR *PFNGLVERTEXWEIGHTPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXWEIGHTFEXTPROC)(GLfloat weight);
typedef void (GLAD_API_PTR *PFNGLVERTEXWEIGHTFVEXTPROC)(const GLfloat * weight);
typedef void (GLAD_API_PTR *PFNGLVERTEXWEIGHTHNVPROC)(GLhalfNV weight);
typedef void (GLAD_API_PTR *PFNGLVERTEXWEIGHTHVNVPROC)(const GLhalfNV * weight);
typedef GLenum (GLAD_API_PTR *PFNGLVIDEOCAPTURENVPROC)(GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time);
typedef void (GLAD_API_PTR *PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTPOSITIONWSCALENVPROC)(GLuint index, GLfloat xcoeff, GLfloat ycoeff);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTSWIZZLENVPROC)(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
typedef void (GLAD_API_PTR *PFNGLWAITSEMAPHOREEXTPROC)(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts);
typedef void (GLAD_API_PTR *PFNGLWAITSEMAPHOREUI64NVXPROC)(GLuint waitGpu, GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray);
typedef void (GLAD_API_PTR *PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLWAITVKSEMAPHORENVPROC)(GLuint64 vkSemaphore);
typedef void (GLAD_API_PTR *PFNGLWEIGHTPATHSNVPROC)(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights);
typedef void (GLAD_API_PTR *PFNGLWEIGHTPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLWEIGHTBVARBPROC)(GLint size, const GLbyte * weights);
typedef void (GLAD_API_PTR *PFNGLWEIGHTDVARBPROC)(GLint size, const GLdouble * weights);
typedef void (GLAD_API_PTR *PFNGLWEIGHTFVARBPROC)(GLint size, const GLfloat * weights);
typedef void (GLAD_API_PTR *PFNGLWEIGHTIVARBPROC)(GLint size, const GLint * weights);
typedef void (GLAD_API_PTR *PFNGLWEIGHTSVARBPROC)(GLint size, const GLshort * weights);
typedef void (GLAD_API_PTR *PFNGLWEIGHTUBVARBPROC)(GLint size, const GLubyte * weights);
typedef void (GLAD_API_PTR *PFNGLWEIGHTUIVARBPROC)(GLint size, const GLuint * weights);
typedef void (GLAD_API_PTR *PFNGLWEIGHTUSVARBPROC)(GLint size, const GLushort * weights);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DARBPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DMESAPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DVARBPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DVMESAPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FARBPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FMESAPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FVARBPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FVMESAPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IARBPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IMESAPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IVARBPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IVMESAPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SARBPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SMESAPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SVARBPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SVMESAPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DARBPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DMESAPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DVARBPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DVMESAPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FARBPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FMESAPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FVARBPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FVMESAPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IARBPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IMESAPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IVARBPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IVMESAPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SARBPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SMESAPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SVARBPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SVMESAPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4DMESAPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4DVMESAPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4FMESAPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4FVMESAPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4IMESAPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4IVMESAPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4SMESAPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4SVMESAPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWRECTANGLESEXTPROC)(GLenum mode, GLsizei count, const GLint * box);
typedef void (GLAD_API_PTR *PFNGLWRITEMASKEXTPROC)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (GLAD_API_PTR *PFNGLALPHAFUNCXPROC)(GLenum func, GLfixed ref);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFEROESPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFEROESPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYOESPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONOESPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEOESPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEOESPROC)(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSOESPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORXPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHXPROC)(GLfixed depth);
typedef GLenum (GLAD_API_PTR *PFNGLCLIENTWAITSYNCAPPLEPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEFPROC)(GLenum p, const GLfloat * eqn);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEFIMGPROC)(GLenum p, const GLfloat * eqn);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEXPROC)(GLenum plane, const GLfixed * equation);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEXIMGPROC)(GLenum p, const GLfixed * eqn);
typedef void (GLAD_API_PTR *PFNGLCOLOR4XPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURELEVELSAPPLEPROC)(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount);
typedef void (GLAD_API_PTR *PFNGLCURRENTPALETTEMATRIXOESPROC)(GLuint matrixpaletteindex);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSOESPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSOESPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETESYNCAPPLEPROC)(GLsync sync);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSOESPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEXPROC)(GLfixed n, GLfixed f);
typedef void (GLAD_API_PTR *PFNGLDISABLEDRIVERCONTROLQCOMPROC)(GLuint driverControl);
typedef void (GLAD_API_PTR *PFNGLDISCARDFRAMEBUFFEREXTPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
typedef void (GLAD_API_PTR *PFNGLDRAWTEXFOESPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
typedef void (GLAD_API_PTR *PFNGLDRAWTEXFVOESPROC)(const GLfloat * coords);
typedef void (GLAD_API_PTR *PFNGLDRAWTEXIOESPROC)(GLint x, GLint y, GLint z, GLint width, GLint height);
typedef void (GLAD_API_PTR *PFNGLDRAWTEXIVOESPROC)(const GLint * coords);
typedef void (GLAD_API_PTR *PFNGLDRAWTEXSOESPROC)(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
typedef void (GLAD_API_PTR *PFNGLDRAWTEXSVOESPROC)(const GLshort * coords);
typedef void (GLAD_API_PTR *PFNGLDRAWTEXXOESPROC)(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
typedef void (GLAD_API_PTR *PFNGLDRAWTEXXVOESPROC)(const GLfixed * coords);
typedef void (GLAD_API_PTR *PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC)(GLenum target, GLeglImageOES image);
typedef void (GLAD_API_PTR *PFNGLEGLIMAGETARGETTEXTURE2DOESPROC)(GLenum target, GLeglImageOES image);
typedef void (GLAD_API_PTR *PFNGLENABLEDRIVERCONTROLQCOMPROC)(GLuint driverControl);
typedef void (GLAD_API_PTR *PFNGLENDTILINGQCOMPROC)(GLbitfield preserveMask);
typedef void (GLAD_API_PTR *PFNGLEXTGETBUFFERPOINTERVQCOMPROC)(GLenum target, void ** params);
typedef void (GLAD_API_PTR *PFNGLEXTGETBUFFERSQCOMPROC)(GLuint * buffers, GLint maxBuffers, GLint * numBuffers);
typedef void (GLAD_API_PTR *PFNGLEXTGETFRAMEBUFFERSQCOMPROC)(GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers);
typedef void (GLAD_API_PTR *PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC)(GLuint program, GLenum shadertype, GLchar * source, GLint * length);
typedef void (GLAD_API_PTR *PFNGLEXTGETPROGRAMSQCOMPROC)(GLuint * programs, GLint maxPrograms, GLint * numPrograms);
typedef void (GLAD_API_PTR *PFNGLEXTGETRENDERBUFFERSQCOMPROC)(GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers);
typedef void (GLAD_API_PTR *PFNGLEXTGETSHADERSQCOMPROC)(GLuint * shaders, GLint maxShaders, GLint * numShaders);
typedef void (GLAD_API_PTR *PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC)(GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLEXTGETTEXSUBIMAGEQCOMPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels);
typedef void (GLAD_API_PTR *PFNGLEXTGETTEXTURESQCOMPROC)(GLuint * textures, GLint maxTextures, GLint * numTextures);
typedef GLboolean (GLAD_API_PTR *PFNGLEXTISPROGRAMBINARYQCOMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC)(GLenum target, GLenum pname, GLint param);
typedef GLsync (GLAD_API_PTR *PFNGLFENCESYNCAPPLEPROC)(GLenum condition, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFOGXPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLFOGXVPROC)(GLenum pname, const GLfixed * param);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFEROESPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DOESPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMFPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMXPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSOESPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSOESPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSOESPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPOESPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVOESPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEFPROC)(GLenum plane, GLfloat * equation);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEXPROC)(GLenum plane, GLfixed * equation);
typedef void (GLAD_API_PTR *PFNGLGETDRIVERCONTROLSTRINGQCOMPROC)(GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString);
typedef void (GLAD_API_PTR *PFNGLGETDRIVERCONTROLSQCOMPROC)(GLint * num, GLsizei size, GLuint * driverControls);
typedef void (GLAD_API_PTR *PFNGLGETFIXEDVPROC)(GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef GLenum (GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSEXTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64VAPPLEPROC)(GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTXVPROC)(GLenum light, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTXVOESPROC)(GLenum light, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALXVPROC)(GLenum face, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALXVOESPROC)(GLenum face, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVOESPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSYNCIVAPPLEPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVXVPROC)(GLenum target, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENFVOESPROC)(GLenum coord, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENIVOESPROC)(GLenum coord, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERXVPROC)(GLenum target, GLenum pname, GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMFVEXTPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMIVEXTPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFEROESPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFEROESPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISSYNCAPPLEPROC)(GLsync sync);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYOESPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELXPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELXVPROC)(GLenum pname, const GLfixed * param);
typedef void (GLAD_API_PTR *PFNGLLIGHTXPROC)(GLenum light, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLLIGHTXVPROC)(GLenum light, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHXPROC)(GLfixed width);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXXPROC)(const GLfixed * m);
typedef void (GLAD_API_PTR *PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC)(void);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFEROESPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERRANGEEXTPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAD_API_PTR *PFNGLMATERIALXPROC)(GLenum face, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLMATERIALXVPROC)(GLenum face, GLenum pname, const GLfixed * param);
typedef void (GLAD_API_PTR *PFNGLMATRIXINDEXPOINTEROESPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXXPROC)(const GLfixed * m);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4XPROC)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (GLAD_API_PTR *PFNGLNORMAL3XPROC)(GLfixed nx, GLfixed ny, GLfixed nz);
typedef void (GLAD_API_PTR *PFNGLORTHOFPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLORTHOXPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERXPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERXOESPROC)(GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERXVPROC)(GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEPOINTEROESPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEXPROC)(GLfixed size);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETXPROC)(GLfixed factor, GLfixed units);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSEXTPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEOESPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC)(void);
typedef void (GLAD_API_PTR *PFNGLROTATEXPROC)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEXPROC)(GLclampx value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEXOESPROC)(GLclampx value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSCALEXPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void (GLAD_API_PTR *PFNGLSTARTTILINGQCOMPROC)(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask);
typedef void (GLAD_API_PTR *PFNGLTEXENVXPROC)(GLenum target, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLTEXENVXVPROC)(GLenum target, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENFOESPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXGENFVOESPROC)(GLenum coord, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENIOESPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXGENIVOESPROC)(GLenum coord, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERXPROC)(GLenum target, GLenum pname, GLfixed param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERXVPROC)(GLenum target, GLenum pname, const GLfixed * params);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEXPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFEROESPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLWAITSYNCAPPLEPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLWEIGHTPOINTEROESPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);

GLAD_API_CALL PFNGLACCUMPROC sf_glad_glAccum;
#define glAccum sf_glad_glAccum
GLAD_API_CALL PFNGLACCUMXOESPROC sf_glad_glAccumxOES;
#define glAccumxOES sf_glad_glAccumxOES
GLAD_API_CALL PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC sf_glad_glAcquireKeyedMutexWin32EXT;
#define glAcquireKeyedMutexWin32EXT sf_glad_glAcquireKeyedMutexWin32EXT
GLAD_API_CALL PFNGLACTIVEPROGRAMEXTPROC sf_glad_glActiveProgramEXT;
#define glActiveProgramEXT sf_glad_glActiveProgramEXT
GLAD_API_CALL PFNGLACTIVESHADERPROGRAMPROC sf_glad_glActiveShaderProgram;
#define glActiveShaderProgram sf_glad_glActiveShaderProgram
GLAD_API_CALL PFNGLACTIVESTENCILFACEEXTPROC sf_glad_glActiveStencilFaceEXT;
#define glActiveStencilFaceEXT sf_glad_glActiveStencilFaceEXT
GLAD_API_CALL PFNGLACTIVETEXTUREPROC sf_glad_glActiveTexture;
#define glActiveTexture sf_glad_glActiveTexture
GLAD_API_CALL PFNGLACTIVETEXTUREARBPROC sf_glad_glActiveTextureARB;
#define glActiveTextureARB sf_glad_glActiveTextureARB
GLAD_API_CALL PFNGLACTIVEVARYINGNVPROC sf_glad_glActiveVaryingNV;
#define glActiveVaryingNV sf_glad_glActiveVaryingNV
GLAD_API_CALL PFNGLALPHAFRAGMENTOP1ATIPROC sf_glad_glAlphaFragmentOp1ATI;
#define glAlphaFragmentOp1ATI sf_glad_glAlphaFragmentOp1ATI
GLAD_API_CALL PFNGLALPHAFRAGMENTOP2ATIPROC sf_glad_glAlphaFragmentOp2ATI;
#define glAlphaFragmentOp2ATI sf_glad_glAlphaFragmentOp2ATI
GLAD_API_CALL PFNGLALPHAFRAGMENTOP3ATIPROC sf_glad_glAlphaFragmentOp3ATI;
#define glAlphaFragmentOp3ATI sf_glad_glAlphaFragmentOp3ATI
GLAD_API_CALL PFNGLALPHAFUNCPROC sf_glad_glAlphaFunc;
#define glAlphaFunc sf_glad_glAlphaFunc
GLAD_API_CALL PFNGLALPHAFUNCXOESPROC sf_glad_glAlphaFuncxOES;
#define glAlphaFuncxOES sf_glad_glAlphaFuncxOES
GLAD_API_CALL PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC sf_glad_glAlphaToCoverageDitherControlNV;
#define glAlphaToCoverageDitherControlNV sf_glad_glAlphaToCoverageDitherControlNV
GLAD_API_CALL PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC sf_glad_glApplyFramebufferAttachmentCMAAINTEL;
#define glApplyFramebufferAttachmentCMAAINTEL sf_glad_glApplyFramebufferAttachmentCMAAINTEL
GLAD_API_CALL PFNGLAPPLYTEXTUREEXTPROC sf_glad_glApplyTextureEXT;
#define glApplyTextureEXT sf_glad_glApplyTextureEXT
GLAD_API_CALL PFNGLAREPROGRAMSRESIDENTNVPROC sf_glad_glAreProgramsResidentNV;
#define glAreProgramsResidentNV sf_glad_glAreProgramsResidentNV
GLAD_API_CALL PFNGLARETEXTURESRESIDENTPROC sf_glad_glAreTexturesResident;
#define glAreTexturesResident sf_glad_glAreTexturesResident
GLAD_API_CALL PFNGLARETEXTURESRESIDENTEXTPROC sf_glad_glAreTexturesResidentEXT;
#define glAreTexturesResidentEXT sf_glad_glAreTexturesResidentEXT
GLAD_API_CALL PFNGLARRAYELEMENTPROC sf_glad_glArrayElement;
#define glArrayElement sf_glad_glArrayElement
GLAD_API_CALL PFNGLARRAYELEMENTEXTPROC sf_glad_glArrayElementEXT;
#define glArrayElementEXT sf_glad_glArrayElementEXT
GLAD_API_CALL PFNGLARRAYOBJECTATIPROC sf_glad_glArrayObjectATI;
#define glArrayObjectATI sf_glad_glArrayObjectATI
GLAD_API_CALL PFNGLASYNCCOPYBUFFERSUBDATANVXPROC sf_glad_glAsyncCopyBufferSubDataNVX;
#define glAsyncCopyBufferSubDataNVX sf_glad_glAsyncCopyBufferSubDataNVX
GLAD_API_CALL PFNGLASYNCCOPYIMAGESUBDATANVXPROC sf_glad_glAsyncCopyImageSubDataNVX;
#define glAsyncCopyImageSubDataNVX sf_glad_glAsyncCopyImageSubDataNVX
GLAD_API_CALL PFNGLASYNCMARKERSGIXPROC sf_glad_glAsyncMarkerSGIX;
#define glAsyncMarkerSGIX sf_glad_glAsyncMarkerSGIX
GLAD_API_CALL PFNGLATTACHOBJECTARBPROC sf_glad_glAttachObjectARB;
#define glAttachObjectARB sf_glad_glAttachObjectARB
GLAD_API_CALL PFNGLATTACHSHADERPROC sf_glad_glAttachShader;
#define glAttachShader sf_glad_glAttachShader
GLAD_API_CALL PFNGLBEGINPROC sf_glad_glBegin;
#define glBegin sf_glad_glBegin
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERPROC sf_glad_glBeginConditionalRender;
#define glBeginConditionalRender sf_glad_glBeginConditionalRender
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERNVPROC sf_glad_glBeginConditionalRenderNV;
#define glBeginConditionalRenderNV sf_glad_glBeginConditionalRenderNV
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERNVXPROC sf_glad_glBeginConditionalRenderNVX;
#define glBeginConditionalRenderNVX sf_glad_glBeginConditionalRenderNVX
GLAD_API_CALL PFNGLBEGINFRAGMENTSHADERATIPROC sf_glad_glBeginFragmentShaderATI;
#define glBeginFragmentShaderATI sf_glad_glBeginFragmentShaderATI
GLAD_API_CALL PFNGLBEGINOCCLUSIONQUERYNVPROC sf_glad_glBeginOcclusionQueryNV;
#define glBeginOcclusionQueryNV sf_glad_glBeginOcclusionQueryNV
GLAD_API_CALL PFNGLBEGINPERFMONITORAMDPROC sf_glad_glBeginPerfMonitorAMD;
#define glBeginPerfMonitorAMD sf_glad_glBeginPerfMonitorAMD
GLAD_API_CALL PFNGLBEGINPERFQUERYINTELPROC sf_glad_glBeginPerfQueryINTEL;
#define glBeginPerfQueryINTEL sf_glad_glBeginPerfQueryINTEL
GLAD_API_CALL PFNGLBEGINQUERYPROC sf_glad_glBeginQuery;
#define glBeginQuery sf_glad_glBeginQuery
GLAD_API_CALL PFNGLBEGINQUERYARBPROC sf_glad_glBeginQueryARB;
#define glBeginQueryARB sf_glad_glBeginQueryARB
GLAD_API_CALL PFNGLBEGINQUERYINDEXEDPROC sf_glad_glBeginQueryIndexed;
#define glBeginQueryIndexed sf_glad_glBeginQueryIndexed
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKPROC sf_glad_glBeginTransformFeedback;
#define glBeginTransformFeedback sf_glad_glBeginTransformFeedback
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKEXTPROC sf_glad_glBeginTransformFeedbackEXT;
#define glBeginTransformFeedbackEXT sf_glad_glBeginTransformFeedbackEXT
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKNVPROC sf_glad_glBeginTransformFeedbackNV;
#define glBeginTransformFeedbackNV sf_glad_glBeginTransformFeedbackNV
GLAD_API_CALL PFNGLBEGINVERTEXSHADEREXTPROC sf_glad_glBeginVertexShaderEXT;
#define glBeginVertexShaderEXT sf_glad_glBeginVertexShaderEXT
GLAD_API_CALL PFNGLBEGINVIDEOCAPTURENVPROC sf_glad_glBeginVideoCaptureNV;
#define glBeginVideoCaptureNV sf_glad_glBeginVideoCaptureNV
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONPROC sf_glad_glBindAttribLocation;
#define glBindAttribLocation sf_glad_glBindAttribLocation
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONARBPROC sf_glad_glBindAttribLocationARB;
#define glBindAttribLocationARB sf_glad_glBindAttribLocationARB
GLAD_API_CALL PFNGLBINDBUFFERPROC sf_glad_glBindBuffer;
#define glBindBuffer sf_glad_glBindBuffer
GLAD_API_CALL PFNGLBINDBUFFERARBPROC sf_glad_glBindBufferARB;
#define glBindBufferARB sf_glad_glBindBufferARB
GLAD_API_CALL PFNGLBINDBUFFERBASEPROC sf_glad_glBindBufferBase;
#define glBindBufferBase sf_glad_glBindBufferBase
GLAD_API_CALL PFNGLBINDBUFFERBASEEXTPROC sf_glad_glBindBufferBaseEXT;
#define glBindBufferBaseEXT sf_glad_glBindBufferBaseEXT
GLAD_API_CALL PFNGLBINDBUFFERBASENVPROC sf_glad_glBindBufferBaseNV;
#define glBindBufferBaseNV sf_glad_glBindBufferBaseNV
GLAD_API_CALL PFNGLBINDBUFFEROFFSETEXTPROC sf_glad_glBindBufferOffsetEXT;
#define glBindBufferOffsetEXT sf_glad_glBindBufferOffsetEXT
GLAD_API_CALL PFNGLBINDBUFFEROFFSETNVPROC sf_glad_glBindBufferOffsetNV;
#define glBindBufferOffsetNV sf_glad_glBindBufferOffsetNV
GLAD_API_CALL PFNGLBINDBUFFERRANGEPROC sf_glad_glBindBufferRange;
#define glBindBufferRange sf_glad_glBindBufferRange
GLAD_API_CALL PFNGLBINDBUFFERRANGEEXTPROC sf_glad_glBindBufferRangeEXT;
#define glBindBufferRangeEXT sf_glad_glBindBufferRangeEXT
GLAD_API_CALL PFNGLBINDBUFFERRANGENVPROC sf_glad_glBindBufferRangeNV;
#define glBindBufferRangeNV sf_glad_glBindBufferRangeNV
GLAD_API_CALL PFNGLBINDBUFFERSBASEPROC sf_glad_glBindBuffersBase;
#define glBindBuffersBase sf_glad_glBindBuffersBase
GLAD_API_CALL PFNGLBINDBUFFERSRANGEPROC sf_glad_glBindBuffersRange;
#define glBindBuffersRange sf_glad_glBindBuffersRange
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONPROC sf_glad_glBindFragDataLocation;
#define glBindFragDataLocation sf_glad_glBindFragDataLocation
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONEXTPROC sf_glad_glBindFragDataLocationEXT;
#define glBindFragDataLocationEXT sf_glad_glBindFragDataLocationEXT
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONINDEXEDPROC sf_glad_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed sf_glad_glBindFragDataLocationIndexed
GLAD_API_CALL PFNGLBINDFRAGMENTSHADERATIPROC sf_glad_glBindFragmentShaderATI;
#define glBindFragmentShaderATI sf_glad_glBindFragmentShaderATI
GLAD_API_CALL PFNGLBINDFRAMEBUFFERPROC sf_glad_glBindFramebuffer;
#define glBindFramebuffer sf_glad_glBindFramebuffer
GLAD_API_CALL PFNGLBINDFRAMEBUFFEREXTPROC sf_glad_glBindFramebufferEXT;
#define glBindFramebufferEXT sf_glad_glBindFramebufferEXT
GLAD_API_CALL PFNGLBINDIMAGETEXTUREPROC sf_glad_glBindImageTexture;
#define glBindImageTexture sf_glad_glBindImageTexture
GLAD_API_CALL PFNGLBINDIMAGETEXTUREEXTPROC sf_glad_glBindImageTextureEXT;
#define glBindImageTextureEXT sf_glad_glBindImageTextureEXT
GLAD_API_CALL PFNGLBINDIMAGETEXTURESPROC sf_glad_glBindImageTextures;
#define glBindImageTextures sf_glad_glBindImageTextures
GLAD_API_CALL PFNGLBINDLIGHTPARAMETEREXTPROC sf_glad_glBindLightParameterEXT;
#define glBindLightParameterEXT sf_glad_glBindLightParameterEXT
GLAD_API_CALL PFNGLBINDMATERIALPARAMETEREXTPROC sf_glad_glBindMaterialParameterEXT;
#define glBindMaterialParameterEXT sf_glad_glBindMaterialParameterEXT
GLAD_API_CALL PFNGLBINDMULTITEXTUREEXTPROC sf_glad_glBindMultiTextureEXT;
#define glBindMultiTextureEXT sf_glad_glBindMultiTextureEXT
GLAD_API_CALL PFNGLBINDPARAMETEREXTPROC sf_glad_glBindParameterEXT;
#define glBindParameterEXT sf_glad_glBindParameterEXT
GLAD_API_CALL PFNGLBINDPROGRAMARBPROC sf_glad_glBindProgramARB;
#define glBindProgramARB sf_glad_glBindProgramARB
GLAD_API_CALL PFNGLBINDPROGRAMNVPROC sf_glad_glBindProgramNV;
#define glBindProgramNV sf_glad_glBindProgramNV
GLAD_API_CALL PFNGLBINDPROGRAMPIPELINEPROC sf_glad_glBindProgramPipeline;
#define glBindProgramPipeline sf_glad_glBindProgramPipeline
GLAD_API_CALL PFNGLBINDRENDERBUFFERPROC sf_glad_glBindRenderbuffer;
#define glBindRenderbuffer sf_glad_glBindRenderbuffer
GLAD_API_CALL PFNGLBINDRENDERBUFFEREXTPROC sf_glad_glBindRenderbufferEXT;
#define glBindRenderbufferEXT sf_glad_glBindRenderbufferEXT
GLAD_API_CALL PFNGLBINDSAMPLERPROC sf_glad_glBindSampler;
#define glBindSampler sf_glad_glBindSampler
GLAD_API_CALL PFNGLBINDSAMPLERSPROC sf_glad_glBindSamplers;
#define glBindSamplers sf_glad_glBindSamplers
GLAD_API_CALL PFNGLBINDSHADINGRATEIMAGENVPROC sf_glad_glBindShadingRateImageNV;
#define glBindShadingRateImageNV sf_glad_glBindShadingRateImageNV
GLAD_API_CALL PFNGLBINDTEXGENPARAMETEREXTPROC sf_glad_glBindTexGenParameterEXT;
#define glBindTexGenParameterEXT sf_glad_glBindTexGenParameterEXT
GLAD_API_CALL PFNGLBINDTEXTUREPROC sf_glad_glBindTexture;
#define glBindTexture sf_glad_glBindTexture
GLAD_API_CALL PFNGLBINDTEXTUREEXTPROC sf_glad_glBindTextureEXT;
#define glBindTextureEXT sf_glad_glBindTextureEXT
GLAD_API_CALL PFNGLBINDTEXTUREUNITPROC sf_glad_glBindTextureUnit;
#define glBindTextureUnit sf_glad_glBindTextureUnit
GLAD_API_CALL PFNGLBINDTEXTUREUNITPARAMETEREXTPROC sf_glad_glBindTextureUnitParameterEXT;
#define glBindTextureUnitParameterEXT sf_glad_glBindTextureUnitParameterEXT
GLAD_API_CALL PFNGLBINDTEXTURESPROC sf_glad_glBindTextures;
#define glBindTextures sf_glad_glBindTextures
GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKPROC sf_glad_glBindTransformFeedback;
#define glBindTransformFeedback sf_glad_glBindTransformFeedback
GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKNVPROC sf_glad_glBindTransformFeedbackNV;
#define glBindTransformFeedbackNV sf_glad_glBindTransformFeedbackNV
GLAD_API_CALL PFNGLBINDVERTEXARRAYPROC sf_glad_glBindVertexArray;
#define glBindVertexArray sf_glad_glBindVertexArray
GLAD_API_CALL PFNGLBINDVERTEXARRAYAPPLEPROC sf_glad_glBindVertexArrayAPPLE;
#define glBindVertexArrayAPPLE sf_glad_glBindVertexArrayAPPLE
GLAD_API_CALL PFNGLBINDVERTEXBUFFERPROC sf_glad_glBindVertexBuffer;
#define glBindVertexBuffer sf_glad_glBindVertexBuffer
GLAD_API_CALL PFNGLBINDVERTEXBUFFERSPROC sf_glad_glBindVertexBuffers;
#define glBindVertexBuffers sf_glad_glBindVertexBuffers
GLAD_API_CALL PFNGLBINDVERTEXSHADEREXTPROC sf_glad_glBindVertexShaderEXT;
#define glBindVertexShaderEXT sf_glad_glBindVertexShaderEXT
GLAD_API_CALL PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC sf_glad_glBindVideoCaptureStreamBufferNV;
#define glBindVideoCaptureStreamBufferNV sf_glad_glBindVideoCaptureStreamBufferNV
GLAD_API_CALL PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC sf_glad_glBindVideoCaptureStreamTextureNV;
#define glBindVideoCaptureStreamTextureNV sf_glad_glBindVideoCaptureStreamTextureNV
GLAD_API_CALL PFNGLBINORMAL3BEXTPROC sf_glad_glBinormal3bEXT;
#define glBinormal3bEXT sf_glad_glBinormal3bEXT
GLAD_API_CALL PFNGLBINORMAL3BVEXTPROC sf_glad_glBinormal3bvEXT;
#define glBinormal3bvEXT sf_glad_glBinormal3bvEXT
GLAD_API_CALL PFNGLBINORMAL3DEXTPROC sf_glad_glBinormal3dEXT;
#define glBinormal3dEXT sf_glad_glBinormal3dEXT
GLAD_API_CALL PFNGLBINORMAL3DVEXTPROC sf_glad_glBinormal3dvEXT;
#define glBinormal3dvEXT sf_glad_glBinormal3dvEXT
GLAD_API_CALL PFNGLBINORMAL3FEXTPROC sf_glad_glBinormal3fEXT;
#define glBinormal3fEXT sf_glad_glBinormal3fEXT
GLAD_API_CALL PFNGLBINORMAL3FVEXTPROC sf_glad_glBinormal3fvEXT;
#define glBinormal3fvEXT sf_glad_glBinormal3fvEXT
GLAD_API_CALL PFNGLBINORMAL3IEXTPROC sf_glad_glBinormal3iEXT;
#define glBinormal3iEXT sf_glad_glBinormal3iEXT
GLAD_API_CALL PFNGLBINORMAL3IVEXTPROC sf_glad_glBinormal3ivEXT;
#define glBinormal3ivEXT sf_glad_glBinormal3ivEXT
GLAD_API_CALL PFNGLBINORMAL3SEXTPROC sf_glad_glBinormal3sEXT;
#define glBinormal3sEXT sf_glad_glBinormal3sEXT
GLAD_API_CALL PFNGLBINORMAL3SVEXTPROC sf_glad_glBinormal3svEXT;
#define glBinormal3svEXT sf_glad_glBinormal3svEXT
GLAD_API_CALL PFNGLBINORMALPOINTEREXTPROC sf_glad_glBinormalPointerEXT;
#define glBinormalPointerEXT sf_glad_glBinormalPointerEXT
GLAD_API_CALL PFNGLBITMAPPROC sf_glad_glBitmap;
#define glBitmap sf_glad_glBitmap
GLAD_API_CALL PFNGLBITMAPXOESPROC sf_glad_glBitmapxOES;
#define glBitmapxOES sf_glad_glBitmapxOES
GLAD_API_CALL PFNGLBLENDBARRIERKHRPROC sf_glad_glBlendBarrierKHR;
#define glBlendBarrierKHR sf_glad_glBlendBarrierKHR
GLAD_API_CALL PFNGLBLENDBARRIERNVPROC sf_glad_glBlendBarrierNV;
#define glBlendBarrierNV sf_glad_glBlendBarrierNV
GLAD_API_CALL PFNGLBLENDCOLORPROC sf_glad_glBlendColor;
#define glBlendColor sf_glad_glBlendColor
GLAD_API_CALL PFNGLBLENDCOLOREXTPROC sf_glad_glBlendColorEXT;
#define glBlendColorEXT sf_glad_glBlendColorEXT
GLAD_API_CALL PFNGLBLENDCOLORXOESPROC sf_glad_glBlendColorxOES;
#define glBlendColorxOES sf_glad_glBlendColorxOES
GLAD_API_CALL PFNGLBLENDEQUATIONPROC sf_glad_glBlendEquation;
#define glBlendEquation sf_glad_glBlendEquation
GLAD_API_CALL PFNGLBLENDEQUATIONEXTPROC sf_glad_glBlendEquationEXT;
#define glBlendEquationEXT sf_glad_glBlendEquationEXT
GLAD_API_CALL PFNGLBLENDEQUATIONINDEXEDAMDPROC sf_glad_glBlendEquationIndexedAMD;
#define glBlendEquationIndexedAMD sf_glad_glBlendEquationIndexedAMD
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEPROC sf_glad_glBlendEquationSeparate;
#define glBlendEquationSeparate sf_glad_glBlendEquationSeparate
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEEXTPROC sf_glad_glBlendEquationSeparateEXT;
#define glBlendEquationSeparateEXT sf_glad_glBlendEquationSeparateEXT
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC sf_glad_glBlendEquationSeparateIndexedAMD;
#define glBlendEquationSeparateIndexedAMD sf_glad_glBlendEquationSeparateIndexedAMD
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIPROC sf_glad_glBlendEquationSeparatei;
#define glBlendEquationSeparatei sf_glad_glBlendEquationSeparatei
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIARBPROC sf_glad_glBlendEquationSeparateiARB;
#define glBlendEquationSeparateiARB sf_glad_glBlendEquationSeparateiARB
GLAD_API_CALL PFNGLBLENDEQUATIONIPROC sf_glad_glBlendEquationi;
#define glBlendEquationi sf_glad_glBlendEquationi
GLAD_API_CALL PFNGLBLENDEQUATIONIARBPROC sf_glad_glBlendEquationiARB;
#define glBlendEquationiARB sf_glad_glBlendEquationiARB
GLAD_API_CALL PFNGLBLENDFUNCPROC sf_glad_glBlendFunc;
#define glBlendFunc sf_glad_glBlendFunc
GLAD_API_CALL PFNGLBLENDFUNCINDEXEDAMDPROC sf_glad_glBlendFuncIndexedAMD;
#define glBlendFuncIndexedAMD sf_glad_glBlendFuncIndexedAMD
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEPROC sf_glad_glBlendFuncSeparate;
#define glBlendFuncSeparate sf_glad_glBlendFuncSeparate
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEEXTPROC sf_glad_glBlendFuncSeparateEXT;
#define glBlendFuncSeparateEXT sf_glad_glBlendFuncSeparateEXT
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEINGRPROC sf_glad_glBlendFuncSeparateINGR;
#define glBlendFuncSeparateINGR sf_glad_glBlendFuncSeparateINGR
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC sf_glad_glBlendFuncSeparateIndexedAMD;
#define glBlendFuncSeparateIndexedAMD sf_glad_glBlendFuncSeparateIndexedAMD
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIPROC sf_glad_glBlendFuncSeparatei;
#define glBlendFuncSeparatei sf_glad_glBlendFuncSeparatei
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIARBPROC sf_glad_glBlendFuncSeparateiARB;
#define glBlendFuncSeparateiARB sf_glad_glBlendFuncSeparateiARB
GLAD_API_CALL PFNGLBLENDFUNCIPROC sf_glad_glBlendFunci;
#define glBlendFunci sf_glad_glBlendFunci
GLAD_API_CALL PFNGLBLENDFUNCIARBPROC sf_glad_glBlendFunciARB;
#define glBlendFunciARB sf_glad_glBlendFunciARB
GLAD_API_CALL PFNGLBLENDPARAMETERINVPROC sf_glad_glBlendParameteriNV;
#define glBlendParameteriNV sf_glad_glBlendParameteriNV
GLAD_API_CALL PFNGLBLITFRAMEBUFFERPROC sf_glad_glBlitFramebuffer;
#define glBlitFramebuffer sf_glad_glBlitFramebuffer
GLAD_API_CALL PFNGLBLITFRAMEBUFFEREXTPROC sf_glad_glBlitFramebufferEXT;
#define glBlitFramebufferEXT sf_glad_glBlitFramebufferEXT
GLAD_API_CALL PFNGLBLITFRAMEBUFFERLAYEREXTPROC sf_glad_glBlitFramebufferLayerEXT;
#define glBlitFramebufferLayerEXT sf_glad_glBlitFramebufferLayerEXT
GLAD_API_CALL PFNGLBLITFRAMEBUFFERLAYERSEXTPROC sf_glad_glBlitFramebufferLayersEXT;
#define glBlitFramebufferLayersEXT sf_glad_glBlitFramebufferLayersEXT
GLAD_API_CALL PFNGLBLITNAMEDFRAMEBUFFERPROC sf_glad_glBlitNamedFramebuffer;
#define glBlitNamedFramebuffer sf_glad_glBlitNamedFramebuffer
GLAD_API_CALL PFNGLBUFFERADDRESSRANGENVPROC sf_glad_glBufferAddressRangeNV;
#define glBufferAddressRangeNV sf_glad_glBufferAddressRangeNV
GLAD_API_CALL PFNGLBUFFERATTACHMEMORYNVPROC sf_glad_glBufferAttachMemoryNV;
#define glBufferAttachMemoryNV sf_glad_glBufferAttachMemoryNV
GLAD_API_CALL PFNGLBUFFERDATAPROC sf_glad_glBufferData;
#define glBufferData sf_glad_glBufferData
GLAD_API_CALL PFNGLBUFFERDATAARBPROC sf_glad_glBufferDataARB;
#define glBufferDataARB sf_glad_glBufferDataARB
GLAD_API_CALL PFNGLBUFFERPAGECOMMITMENTARBPROC sf_glad_glBufferPageCommitmentARB;
#define glBufferPageCommitmentARB sf_glad_glBufferPageCommitmentARB
GLAD_API_CALL PFNGLBUFFERPAGECOMMITMENTMEMNVPROC sf_glad_glBufferPageCommitmentMemNV;
#define glBufferPageCommitmentMemNV sf_glad_glBufferPageCommitmentMemNV
GLAD_API_CALL PFNGLBUFFERPARAMETERIAPPLEPROC sf_glad_glBufferParameteriAPPLE;
#define glBufferParameteriAPPLE sf_glad_glBufferParameteriAPPLE
GLAD_API_CALL PFNGLBUFFERSTORAGEPROC sf_glad_glBufferStorage;
#define glBufferStorage sf_glad_glBufferStorage
GLAD_API_CALL PFNGLBUFFERSTORAGEEXTERNALEXTPROC sf_glad_glBufferStorageExternalEXT;
#define glBufferStorageExternalEXT sf_glad_glBufferStorageExternalEXT
GLAD_API_CALL PFNGLBUFFERSTORAGEMEMEXTPROC sf_glad_glBufferStorageMemEXT;
#define glBufferStorageMemEXT sf_glad_glBufferStorageMemEXT
GLAD_API_CALL PFNGLBUFFERSUBDATAPROC sf_glad_glBufferSubData;
#define glBufferSubData sf_glad_glBufferSubData
GLAD_API_CALL PFNGLBUFFERSUBDATAARBPROC sf_glad_glBufferSubDataARB;
#define glBufferSubDataARB sf_glad_glBufferSubDataARB
GLAD_API_CALL PFNGLCALLCOMMANDLISTNVPROC sf_glad_glCallCommandListNV;
#define glCallCommandListNV sf_glad_glCallCommandListNV
GLAD_API_CALL PFNGLCALLLISTPROC sf_glad_glCallList;
#define glCallList sf_glad_glCallList
GLAD_API_CALL PFNGLCALLLISTSPROC sf_glad_glCallLists;
#define glCallLists sf_glad_glCallLists
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSPROC sf_glad_glCheckFramebufferStatus;
#define glCheckFramebufferStatus sf_glad_glCheckFramebufferStatus
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC sf_glad_glCheckFramebufferStatusEXT;
#define glCheckFramebufferStatusEXT sf_glad_glCheckFramebufferStatusEXT
GLAD_API_CALL PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC sf_glad_glCheckNamedFramebufferStatus;
#define glCheckNamedFramebufferStatus sf_glad_glCheckNamedFramebufferStatus
GLAD_API_CALL PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC sf_glad_glCheckNamedFramebufferStatusEXT;
#define glCheckNamedFramebufferStatusEXT sf_glad_glCheckNamedFramebufferStatusEXT
GLAD_API_CALL PFNGLCLAMPCOLORPROC sf_glad_glClampColor;
#define glClampColor sf_glad_glClampColor
GLAD_API_CALL PFNGLCLAMPCOLORARBPROC sf_glad_glClampColorARB;
#define glClampColorARB sf_glad_glClampColorARB
GLAD_API_CALL PFNGLCLEARPROC sf_glad_glClear;
#define glClear sf_glad_glClear
GLAD_API_CALL PFNGLCLEARACCUMPROC sf_glad_glClearAccum;
#define glClearAccum sf_glad_glClearAccum
GLAD_API_CALL PFNGLCLEARACCUMXOESPROC sf_glad_glClearAccumxOES;
#define glClearAccumxOES sf_glad_glClearAccumxOES
GLAD_API_CALL PFNGLCLEARBUFFERDATAPROC sf_glad_glClearBufferData;
#define glClearBufferData sf_glad_glClearBufferData
GLAD_API_CALL PFNGLCLEARBUFFERSUBDATAPROC sf_glad_glClearBufferSubData;
#define glClearBufferSubData sf_glad_glClearBufferSubData
GLAD_API_CALL PFNGLCLEARBUFFERFIPROC sf_glad_glClearBufferfi;
#define glClearBufferfi sf_glad_glClearBufferfi
GLAD_API_CALL PFNGLCLEARBUFFERFVPROC sf_glad_glClearBufferfv;
#define glClearBufferfv sf_glad_glClearBufferfv
GLAD_API_CALL PFNGLCLEARBUFFERIVPROC sf_glad_glClearBufferiv;
#define glClearBufferiv sf_glad_glClearBufferiv
GLAD_API_CALL PFNGLCLEARBUFFERUIVPROC sf_glad_glClearBufferuiv;
#define glClearBufferuiv sf_glad_glClearBufferuiv
GLAD_API_CALL PFNGLCLEARCOLORPROC sf_glad_glClearColor;
#define glClearColor sf_glad_glClearColor
GLAD_API_CALL PFNGLCLEARCOLORIIEXTPROC sf_glad_glClearColorIiEXT;
#define glClearColorIiEXT sf_glad_glClearColorIiEXT
GLAD_API_CALL PFNGLCLEARCOLORIUIEXTPROC sf_glad_glClearColorIuiEXT;
#define glClearColorIuiEXT sf_glad_glClearColorIuiEXT
GLAD_API_CALL PFNGLCLEARCOLORXOESPROC sf_glad_glClearColorxOES;
#define glClearColorxOES sf_glad_glClearColorxOES
GLAD_API_CALL PFNGLCLEARDEPTHPROC sf_glad_glClearDepth;
#define glClearDepth sf_glad_glClearDepth
GLAD_API_CALL PFNGLCLEARDEPTHDNVPROC sf_glad_glClearDepthdNV;
#define glClearDepthdNV sf_glad_glClearDepthdNV
GLAD_API_CALL PFNGLCLEARDEPTHFPROC sf_glad_glClearDepthf;
#define glClearDepthf sf_glad_glClearDepthf
GLAD_API_CALL PFNGLCLEARDEPTHFOESPROC sf_glad_glClearDepthfOES;
#define glClearDepthfOES sf_glad_glClearDepthfOES
GLAD_API_CALL PFNGLCLEARDEPTHXOESPROC sf_glad_glClearDepthxOES;
#define glClearDepthxOES sf_glad_glClearDepthxOES
GLAD_API_CALL PFNGLCLEARINDEXPROC sf_glad_glClearIndex;
#define glClearIndex sf_glad_glClearIndex
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERDATAPROC sf_glad_glClearNamedBufferData;
#define glClearNamedBufferData sf_glad_glClearNamedBufferData
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERDATAEXTPROC sf_glad_glClearNamedBufferDataEXT;
#define glClearNamedBufferDataEXT sf_glad_glClearNamedBufferDataEXT
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERSUBDATAPROC sf_glad_glClearNamedBufferSubData;
#define glClearNamedBufferSubData sf_glad_glClearNamedBufferSubData
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC sf_glad_glClearNamedBufferSubDataEXT;
#define glClearNamedBufferSubDataEXT sf_glad_glClearNamedBufferSubDataEXT
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERFIPROC sf_glad_glClearNamedFramebufferfi;
#define glClearNamedFramebufferfi sf_glad_glClearNamedFramebufferfi
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERFVPROC sf_glad_glClearNamedFramebufferfv;
#define glClearNamedFramebufferfv sf_glad_glClearNamedFramebufferfv
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERIVPROC sf_glad_glClearNamedFramebufferiv;
#define glClearNamedFramebufferiv sf_glad_glClearNamedFramebufferiv
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC sf_glad_glClearNamedFramebufferuiv;
#define glClearNamedFramebufferuiv sf_glad_glClearNamedFramebufferuiv
GLAD_API_CALL PFNGLCLEARSTENCILPROC sf_glad_glClearStencil;
#define glClearStencil sf_glad_glClearStencil
GLAD_API_CALL PFNGLCLEARTEXIMAGEPROC sf_glad_glClearTexImage;
#define glClearTexImage sf_glad_glClearTexImage
GLAD_API_CALL PFNGLCLEARTEXSUBIMAGEPROC sf_glad_glClearTexSubImage;
#define glClearTexSubImage sf_glad_glClearTexSubImage
GLAD_API_CALL PFNGLCLIENTACTIVETEXTUREPROC sf_glad_glClientActiveTexture;
#define glClientActiveTexture sf_glad_glClientActiveTexture
GLAD_API_CALL PFNGLCLIENTACTIVETEXTUREARBPROC sf_glad_glClientActiveTextureARB;
#define glClientActiveTextureARB sf_glad_glClientActiveTextureARB
GLAD_API_CALL PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC sf_glad_glClientActiveVertexStreamATI;
#define glClientActiveVertexStreamATI sf_glad_glClientActiveVertexStreamATI
GLAD_API_CALL PFNGLCLIENTATTRIBDEFAULTEXTPROC sf_glad_glClientAttribDefaultEXT;
#define glClientAttribDefaultEXT sf_glad_glClientAttribDefaultEXT
GLAD_API_CALL PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC sf_glad_glClientWaitSemaphoreui64NVX;
#define glClientWaitSemaphoreui64NVX sf_glad_glClientWaitSemaphoreui64NVX
GLAD_API_CALL PFNGLCLIENTWAITSYNCPROC sf_glad_glClientWaitSync;
#define glClientWaitSync sf_glad_glClientWaitSync
GLAD_API_CALL PFNGLCLIPCONTROLPROC sf_glad_glClipControl;
#define glClipControl sf_glad_glClipControl
GLAD_API_CALL PFNGLCLIPPLANEPROC sf_glad_glClipPlane;
#define glClipPlane sf_glad_glClipPlane
GLAD_API_CALL PFNGLCLIPPLANEFOESPROC sf_glad_glClipPlanefOES;
#define glClipPlanefOES sf_glad_glClipPlanefOES
GLAD_API_CALL PFNGLCLIPPLANEXOESPROC sf_glad_glClipPlanexOES;
#define glClipPlanexOES sf_glad_glClipPlanexOES
GLAD_API_CALL PFNGLCOLOR3BPROC sf_glad_glColor3b;
#define glColor3b sf_glad_glColor3b
GLAD_API_CALL PFNGLCOLOR3BVPROC sf_glad_glColor3bv;
#define glColor3bv sf_glad_glColor3bv
GLAD_API_CALL PFNGLCOLOR3DPROC sf_glad_glColor3d;
#define glColor3d sf_glad_glColor3d
GLAD_API_CALL PFNGLCOLOR3DVPROC sf_glad_glColor3dv;
#define glColor3dv sf_glad_glColor3dv
GLAD_API_CALL PFNGLCOLOR3FPROC sf_glad_glColor3f;
#define glColor3f sf_glad_glColor3f
GLAD_API_CALL PFNGLCOLOR3FVERTEX3FSUNPROC sf_glad_glColor3fVertex3fSUN;
#define glColor3fVertex3fSUN sf_glad_glColor3fVertex3fSUN
GLAD_API_CALL PFNGLCOLOR3FVERTEX3FVSUNPROC sf_glad_glColor3fVertex3fvSUN;
#define glColor3fVertex3fvSUN sf_glad_glColor3fVertex3fvSUN
GLAD_API_CALL PFNGLCOLOR3FVPROC sf_glad_glColor3fv;
#define glColor3fv sf_glad_glColor3fv
GLAD_API_CALL PFNGLCOLOR3HNVPROC sf_glad_glColor3hNV;
#define glColor3hNV sf_glad_glColor3hNV
GLAD_API_CALL PFNGLCOLOR3HVNVPROC sf_glad_glColor3hvNV;
#define glColor3hvNV sf_glad_glColor3hvNV
GLAD_API_CALL PFNGLCOLOR3IPROC sf_glad_glColor3i;
#define glColor3i sf_glad_glColor3i
GLAD_API_CALL PFNGLCOLOR3IVPROC sf_glad_glColor3iv;
#define glColor3iv sf_glad_glColor3iv
GLAD_API_CALL PFNGLCOLOR3SPROC sf_glad_glColor3s;
#define glColor3s sf_glad_glColor3s
GLAD_API_CALL PFNGLCOLOR3SVPROC sf_glad_glColor3sv;
#define glColor3sv sf_glad_glColor3sv
GLAD_API_CALL PFNGLCOLOR3UBPROC sf_glad_glColor3ub;
#define glColor3ub sf_glad_glColor3ub
GLAD_API_CALL PFNGLCOLOR3UBVPROC sf_glad_glColor3ubv;
#define glColor3ubv sf_glad_glColor3ubv
GLAD_API_CALL PFNGLCOLOR3UIPROC sf_glad_glColor3ui;
#define glColor3ui sf_glad_glColor3ui
GLAD_API_CALL PFNGLCOLOR3UIVPROC sf_glad_glColor3uiv;
#define glColor3uiv sf_glad_glColor3uiv
GLAD_API_CALL PFNGLCOLOR3USPROC sf_glad_glColor3us;
#define glColor3us sf_glad_glColor3us
GLAD_API_CALL PFNGLCOLOR3USVPROC sf_glad_glColor3usv;
#define glColor3usv sf_glad_glColor3usv
GLAD_API_CALL PFNGLCOLOR3XOESPROC sf_glad_glColor3xOES;
#define glColor3xOES sf_glad_glColor3xOES
GLAD_API_CALL PFNGLCOLOR3XVOESPROC sf_glad_glColor3xvOES;
#define glColor3xvOES sf_glad_glColor3xvOES
GLAD_API_CALL PFNGLCOLOR4BPROC sf_glad_glColor4b;
#define glColor4b sf_glad_glColor4b
GLAD_API_CALL PFNGLCOLOR4BVPROC sf_glad_glColor4bv;
#define glColor4bv sf_glad_glColor4bv
GLAD_API_CALL PFNGLCOLOR4DPROC sf_glad_glColor4d;
#define glColor4d sf_glad_glColor4d
GLAD_API_CALL PFNGLCOLOR4DVPROC sf_glad_glColor4dv;
#define glColor4dv sf_glad_glColor4dv
GLAD_API_CALL PFNGLCOLOR4FPROC sf_glad_glColor4f;
#define glColor4f sf_glad_glColor4f
GLAD_API_CALL PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC sf_glad_glColor4fNormal3fVertex3fSUN;
#define glColor4fNormal3fVertex3fSUN sf_glad_glColor4fNormal3fVertex3fSUN
GLAD_API_CALL PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC sf_glad_glColor4fNormal3fVertex3fvSUN;
#define glColor4fNormal3fVertex3fvSUN sf_glad_glColor4fNormal3fVertex3fvSUN
GLAD_API_CALL PFNGLCOLOR4FVPROC sf_glad_glColor4fv;
#define glColor4fv sf_glad_glColor4fv
GLAD_API_CALL PFNGLCOLOR4HNVPROC sf_glad_glColor4hNV;
#define glColor4hNV sf_glad_glColor4hNV
GLAD_API_CALL PFNGLCOLOR4HVNVPROC sf_glad_glColor4hvNV;
#define glColor4hvNV sf_glad_glColor4hvNV
GLAD_API_CALL PFNGLCOLOR4IPROC sf_glad_glColor4i;
#define glColor4i sf_glad_glColor4i
GLAD_API_CALL PFNGLCOLOR4IVPROC sf_glad_glColor4iv;
#define glColor4iv sf_glad_glColor4iv
GLAD_API_CALL PFNGLCOLOR4SPROC sf_glad_glColor4s;
#define glColor4s sf_glad_glColor4s
GLAD_API_CALL PFNGLCOLOR4SVPROC sf_glad_glColor4sv;
#define glColor4sv sf_glad_glColor4sv
GLAD_API_CALL PFNGLCOLOR4UBPROC sf_glad_glColor4ub;
#define glColor4ub sf_glad_glColor4ub
GLAD_API_CALL PFNGLCOLOR4UBVERTEX2FSUNPROC sf_glad_glColor4ubVertex2fSUN;
#define glColor4ubVertex2fSUN sf_glad_glColor4ubVertex2fSUN
GLAD_API_CALL PFNGLCOLOR4UBVERTEX2FVSUNPROC sf_glad_glColor4ubVertex2fvSUN;
#define glColor4ubVertex2fvSUN sf_glad_glColor4ubVertex2fvSUN
GLAD_API_CALL PFNGLCOLOR4UBVERTEX3FSUNPROC sf_glad_glColor4ubVertex3fSUN;
#define glColor4ubVertex3fSUN sf_glad_glColor4ubVertex3fSUN
GLAD_API_CALL PFNGLCOLOR4UBVERTEX3FVSUNPROC sf_glad_glColor4ubVertex3fvSUN;
#define glColor4ubVertex3fvSUN sf_glad_glColor4ubVertex3fvSUN
GLAD_API_CALL PFNGLCOLOR4UBVPROC sf_glad_glColor4ubv;
#define glColor4ubv sf_glad_glColor4ubv
GLAD_API_CALL PFNGLCOLOR4UIPROC sf_glad_glColor4ui;
#define glColor4ui sf_glad_glColor4ui
GLAD_API_CALL PFNGLCOLOR4UIVPROC sf_glad_glColor4uiv;
#define glColor4uiv sf_glad_glColor4uiv
GLAD_API_CALL PFNGLCOLOR4USPROC sf_glad_glColor4us;
#define glColor4us sf_glad_glColor4us
GLAD_API_CALL PFNGLCOLOR4USVPROC sf_glad_glColor4usv;
#define glColor4usv sf_glad_glColor4usv
GLAD_API_CALL PFNGLCOLOR4XOESPROC sf_glad_glColor4xOES;
#define glColor4xOES sf_glad_glColor4xOES
GLAD_API_CALL PFNGLCOLOR4XVOESPROC sf_glad_glColor4xvOES;
#define glColor4xvOES sf_glad_glColor4xvOES
GLAD_API_CALL PFNGLCOLORFORMATNVPROC sf_glad_glColorFormatNV;
#define glColorFormatNV sf_glad_glColorFormatNV
GLAD_API_CALL PFNGLCOLORFRAGMENTOP1ATIPROC sf_glad_glColorFragmentOp1ATI;
#define glColorFragmentOp1ATI sf_glad_glColorFragmentOp1ATI
GLAD_API_CALL PFNGLCOLORFRAGMENTOP2ATIPROC sf_glad_glColorFragmentOp2ATI;
#define glColorFragmentOp2ATI sf_glad_glColorFragmentOp2ATI
GLAD_API_CALL PFNGLCOLORFRAGMENTOP3ATIPROC sf_glad_glColorFragmentOp3ATI;
#define glColorFragmentOp3ATI sf_glad_glColorFragmentOp3ATI
GLAD_API_CALL PFNGLCOLORMASKPROC sf_glad_glColorMask;
#define glColorMask sf_glad_glColorMask
GLAD_API_CALL PFNGLCOLORMASKINDEXEDEXTPROC sf_glad_glColorMaskIndexedEXT;
#define glColorMaskIndexedEXT sf_glad_glColorMaskIndexedEXT
GLAD_API_CALL PFNGLCOLORMASKIPROC sf_glad_glColorMaski;
#define glColorMaski sf_glad_glColorMaski
GLAD_API_CALL PFNGLCOLORMATERIALPROC sf_glad_glColorMaterial;
#define glColorMaterial sf_glad_glColorMaterial
GLAD_API_CALL PFNGLCOLORP3UIPROC sf_glad_glColorP3ui;
#define glColorP3ui sf_glad_glColorP3ui
GLAD_API_CALL PFNGLCOLORP3UIVPROC sf_glad_glColorP3uiv;
#define glColorP3uiv sf_glad_glColorP3uiv
GLAD_API_CALL PFNGLCOLORP4UIPROC sf_glad_glColorP4ui;
#define glColorP4ui sf_glad_glColorP4ui
GLAD_API_CALL PFNGLCOLORP4UIVPROC sf_glad_glColorP4uiv;
#define glColorP4uiv sf_glad_glColorP4uiv
GLAD_API_CALL PFNGLCOLORPOINTERPROC sf_glad_glColorPointer;
#define glColorPointer sf_glad_glColorPointer
GLAD_API_CALL PFNGLCOLORPOINTEREXTPROC sf_glad_glColorPointerEXT;
#define glColorPointerEXT sf_glad_glColorPointerEXT
GLAD_API_CALL PFNGLCOLORPOINTERLISTIBMPROC sf_glad_glColorPointerListIBM;
#define glColorPointerListIBM sf_glad_glColorPointerListIBM
GLAD_API_CALL PFNGLCOLORPOINTERVINTELPROC sf_glad_glColorPointervINTEL;
#define glColorPointervINTEL sf_glad_glColorPointervINTEL
GLAD_API_CALL PFNGLCOLORSUBTABLEPROC sf_glad_glColorSubTable;
#define glColorSubTable sf_glad_glColorSubTable
GLAD_API_CALL PFNGLCOLORSUBTABLEEXTPROC sf_glad_glColorSubTableEXT;
#define glColorSubTableEXT sf_glad_glColorSubTableEXT
GLAD_API_CALL PFNGLCOLORTABLEPROC sf_glad_glColorTable;
#define glColorTable sf_glad_glColorTable
GLAD_API_CALL PFNGLCOLORTABLEEXTPROC sf_glad_glColorTableEXT;
#define glColorTableEXT sf_glad_glColorTableEXT
GLAD_API_CALL PFNGLCOLORTABLEPARAMETERFVPROC sf_glad_glColorTableParameterfv;
#define glColorTableParameterfv sf_glad_glColorTableParameterfv
GLAD_API_CALL PFNGLCOLORTABLEPARAMETERFVSGIPROC sf_glad_glColorTableParameterfvSGI;
#define glColorTableParameterfvSGI sf_glad_glColorTableParameterfvSGI
GLAD_API_CALL PFNGLCOLORTABLEPARAMETERIVPROC sf_glad_glColorTableParameteriv;
#define glColorTableParameteriv sf_glad_glColorTableParameteriv
GLAD_API_CALL PFNGLCOLORTABLEPARAMETERIVSGIPROC sf_glad_glColorTableParameterivSGI;
#define glColorTableParameterivSGI sf_glad_glColorTableParameterivSGI
GLAD_API_CALL PFNGLCOLORTABLESGIPROC sf_glad_glColorTableSGI;
#define glColorTableSGI sf_glad_glColorTableSGI
GLAD_API_CALL PFNGLCOMBINERINPUTNVPROC sf_glad_glCombinerInputNV;
#define glCombinerInputNV sf_glad_glCombinerInputNV
GLAD_API_CALL PFNGLCOMBINEROUTPUTNVPROC sf_glad_glCombinerOutputNV;
#define glCombinerOutputNV sf_glad_glCombinerOutputNV
GLAD_API_CALL PFNGLCOMBINERPARAMETERFNVPROC sf_glad_glCombinerParameterfNV;
#define glCombinerParameterfNV sf_glad_glCombinerParameterfNV
GLAD_API_CALL PFNGLCOMBINERPARAMETERFVNVPROC sf_glad_glCombinerParameterfvNV;
#define glCombinerParameterfvNV sf_glad_glCombinerParameterfvNV
GLAD_API_CALL PFNGLCOMBINERPARAMETERINVPROC sf_glad_glCombinerParameteriNV;
#define glCombinerParameteriNV sf_glad_glCombinerParameteriNV
GLAD_API_CALL PFNGLCOMBINERPARAMETERIVNVPROC sf_glad_glCombinerParameterivNV;
#define glCombinerParameterivNV sf_glad_glCombinerParameterivNV
GLAD_API_CALL PFNGLCOMBINERSTAGEPARAMETERFVNVPROC sf_glad_glCombinerStageParameterfvNV;
#define glCombinerStageParameterfvNV sf_glad_glCombinerStageParameterfvNV
GLAD_API_CALL PFNGLCOMMANDLISTSEGMENTSNVPROC sf_glad_glCommandListSegmentsNV;
#define glCommandListSegmentsNV sf_glad_glCommandListSegmentsNV
GLAD_API_CALL PFNGLCOMPILECOMMANDLISTNVPROC sf_glad_glCompileCommandListNV;
#define glCompileCommandListNV sf_glad_glCompileCommandListNV
GLAD_API_CALL PFNGLCOMPILESHADERPROC sf_glad_glCompileShader;
#define glCompileShader sf_glad_glCompileShader
GLAD_API_CALL PFNGLCOMPILESHADERARBPROC sf_glad_glCompileShaderARB;
#define glCompileShaderARB sf_glad_glCompileShaderARB
GLAD_API_CALL PFNGLCOMPILESHADERINCLUDEARBPROC sf_glad_glCompileShaderIncludeARB;
#define glCompileShaderIncludeARB sf_glad_glCompileShaderIncludeARB
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC sf_glad_glCompressedMultiTexImage1DEXT;
#define glCompressedMultiTexImage1DEXT sf_glad_glCompressedMultiTexImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC sf_glad_glCompressedMultiTexImage2DEXT;
#define glCompressedMultiTexImage2DEXT sf_glad_glCompressedMultiTexImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC sf_glad_glCompressedMultiTexImage3DEXT;
#define glCompressedMultiTexImage3DEXT sf_glad_glCompressedMultiTexImage3DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC sf_glad_glCompressedMultiTexSubImage1DEXT;
#define glCompressedMultiTexSubImage1DEXT sf_glad_glCompressedMultiTexSubImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC sf_glad_glCompressedMultiTexSubImage2DEXT;
#define glCompressedMultiTexSubImage2DEXT sf_glad_glCompressedMultiTexSubImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC sf_glad_glCompressedMultiTexSubImage3DEXT;
#define glCompressedMultiTexSubImage3DEXT sf_glad_glCompressedMultiTexSubImage3DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DPROC sf_glad_glCompressedTexImage1D;
#define glCompressedTexImage1D sf_glad_glCompressedTexImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DARBPROC sf_glad_glCompressedTexImage1DARB;
#define glCompressedTexImage1DARB sf_glad_glCompressedTexImage1DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DPROC sf_glad_glCompressedTexImage2D;
#define glCompressedTexImage2D sf_glad_glCompressedTexImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DARBPROC sf_glad_glCompressedTexImage2DARB;
#define glCompressedTexImage2DARB sf_glad_glCompressedTexImage2DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DPROC sf_glad_glCompressedTexImage3D;
#define glCompressedTexImage3D sf_glad_glCompressedTexImage3D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DARBPROC sf_glad_glCompressedTexImage3DARB;
#define glCompressedTexImage3DARB sf_glad_glCompressedTexImage3DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC sf_glad_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D sf_glad_glCompressedTexSubImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC sf_glad_glCompressedTexSubImage1DARB;
#define glCompressedTexSubImage1DARB sf_glad_glCompressedTexSubImage1DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC sf_glad_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D sf_glad_glCompressedTexSubImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC sf_glad_glCompressedTexSubImage2DARB;
#define glCompressedTexSubImage2DARB sf_glad_glCompressedTexSubImage2DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC sf_glad_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D sf_glad_glCompressedTexSubImage3D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC sf_glad_glCompressedTexSubImage3DARB;
#define glCompressedTexSubImage3DARB sf_glad_glCompressedTexSubImage3DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC sf_glad_glCompressedTextureImage1DEXT;
#define glCompressedTextureImage1DEXT sf_glad_glCompressedTextureImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC sf_glad_glCompressedTextureImage2DEXT;
#define glCompressedTextureImage2DEXT sf_glad_glCompressedTextureImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC sf_glad_glCompressedTextureImage3DEXT;
#define glCompressedTextureImage3DEXT sf_glad_glCompressedTextureImage3DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC sf_glad_glCompressedTextureSubImage1D;
#define glCompressedTextureSubImage1D sf_glad_glCompressedTextureSubImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC sf_glad_glCompressedTextureSubImage1DEXT;
#define glCompressedTextureSubImage1DEXT sf_glad_glCompressedTextureSubImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC sf_glad_glCompressedTextureSubImage2D;
#define glCompressedTextureSubImage2D sf_glad_glCompressedTextureSubImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC sf_glad_glCompressedTextureSubImage2DEXT;
#define glCompressedTextureSubImage2DEXT sf_glad_glCompressedTextureSubImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC sf_glad_glCompressedTextureSubImage3D;
#define glCompressedTextureSubImage3D sf_glad_glCompressedTextureSubImage3D
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC sf_glad_glCompressedTextureSubImage3DEXT;
#define glCompressedTextureSubImage3DEXT sf_glad_glCompressedTextureSubImage3DEXT
GLAD_API_CALL PFNGLCONSERVATIVERASTERPARAMETERFNVPROC sf_glad_glConservativeRasterParameterfNV;
#define glConservativeRasterParameterfNV sf_glad_glConservativeRasterParameterfNV
GLAD_API_CALL PFNGLCONSERVATIVERASTERPARAMETERINVPROC sf_glad_glConservativeRasterParameteriNV;
#define glConservativeRasterParameteriNV sf_glad_glConservativeRasterParameteriNV
GLAD_API_CALL PFNGLCONVOLUTIONFILTER1DPROC sf_glad_glConvolutionFilter1D;
#define glConvolutionFilter1D sf_glad_glConvolutionFilter1D
GLAD_API_CALL PFNGLCONVOLUTIONFILTER1DEXTPROC sf_glad_glConvolutionFilter1DEXT;
#define glConvolutionFilter1DEXT sf_glad_glConvolutionFilter1DEXT
GLAD_API_CALL PFNGLCONVOLUTIONFILTER2DPROC sf_glad_glConvolutionFilter2D;
#define glConvolutionFilter2D sf_glad_glConvolutionFilter2D
GLAD_API_CALL PFNGLCONVOLUTIONFILTER2DEXTPROC sf_glad_glConvolutionFilter2DEXT;
#define glConvolutionFilter2DEXT sf_glad_glConvolutionFilter2DEXT
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERFPROC sf_glad_glConvolutionParameterf;
#define glConvolutionParameterf sf_glad_glConvolutionParameterf
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERFEXTPROC sf_glad_glConvolutionParameterfEXT;
#define glConvolutionParameterfEXT sf_glad_glConvolutionParameterfEXT
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERFVPROC sf_glad_glConvolutionParameterfv;
#define glConvolutionParameterfv sf_glad_glConvolutionParameterfv
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERFVEXTPROC sf_glad_glConvolutionParameterfvEXT;
#define glConvolutionParameterfvEXT sf_glad_glConvolutionParameterfvEXT
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERIPROC sf_glad_glConvolutionParameteri;
#define glConvolutionParameteri sf_glad_glConvolutionParameteri
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERIEXTPROC sf_glad_glConvolutionParameteriEXT;
#define glConvolutionParameteriEXT sf_glad_glConvolutionParameteriEXT
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERIVPROC sf_glad_glConvolutionParameteriv;
#define glConvolutionParameteriv sf_glad_glConvolutionParameteriv
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERIVEXTPROC sf_glad_glConvolutionParameterivEXT;
#define glConvolutionParameterivEXT sf_glad_glConvolutionParameterivEXT
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERXOESPROC sf_glad_glConvolutionParameterxOES;
#define glConvolutionParameterxOES sf_glad_glConvolutionParameterxOES
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERXVOESPROC sf_glad_glConvolutionParameterxvOES;
#define glConvolutionParameterxvOES sf_glad_glConvolutionParameterxvOES
GLAD_API_CALL PFNGLCOPYBUFFERSUBDATAPROC sf_glad_glCopyBufferSubData;
#define glCopyBufferSubData sf_glad_glCopyBufferSubData
GLAD_API_CALL PFNGLCOPYCOLORSUBTABLEPROC sf_glad_glCopyColorSubTable;
#define glCopyColorSubTable sf_glad_glCopyColorSubTable
GLAD_API_CALL PFNGLCOPYCOLORSUBTABLEEXTPROC sf_glad_glCopyColorSubTableEXT;
#define glCopyColorSubTableEXT sf_glad_glCopyColorSubTableEXT
GLAD_API_CALL PFNGLCOPYCOLORTABLEPROC sf_glad_glCopyColorTable;
#define glCopyColorTable sf_glad_glCopyColorTable
GLAD_API_CALL PFNGLCOPYCOLORTABLESGIPROC sf_glad_glCopyColorTableSGI;
#define glCopyColorTableSGI sf_glad_glCopyColorTableSGI
GLAD_API_CALL PFNGLCOPYCONVOLUTIONFILTER1DPROC sf_glad_glCopyConvolutionFilter1D;
#define glCopyConvolutionFilter1D sf_glad_glCopyConvolutionFilter1D
GLAD_API_CALL PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC sf_glad_glCopyConvolutionFilter1DEXT;
#define glCopyConvolutionFilter1DEXT sf_glad_glCopyConvolutionFilter1DEXT
GLAD_API_CALL PFNGLCOPYCONVOLUTIONFILTER2DPROC sf_glad_glCopyConvolutionFilter2D;
#define glCopyConvolutionFilter2D sf_glad_glCopyConvolutionFilter2D
GLAD_API_CALL PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC sf_glad_glCopyConvolutionFilter2DEXT;
#define glCopyConvolutionFilter2DEXT sf_glad_glCopyConvolutionFilter2DEXT
GLAD_API_CALL PFNGLCOPYIMAGESUBDATAPROC sf_glad_glCopyImageSubData;
#define glCopyImageSubData sf_glad_glCopyImageSubData
GLAD_API_CALL PFNGLCOPYIMAGESUBDATANVPROC sf_glad_glCopyImageSubDataNV;
#define glCopyImageSubDataNV sf_glad_glCopyImageSubDataNV
GLAD_API_CALL PFNGLCOPYMULTITEXIMAGE1DEXTPROC sf_glad_glCopyMultiTexImage1DEXT;
#define glCopyMultiTexImage1DEXT sf_glad_glCopyMultiTexImage1DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXIMAGE2DEXTPROC sf_glad_glCopyMultiTexImage2DEXT;
#define glCopyMultiTexImage2DEXT sf_glad_glCopyMultiTexImage2DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC sf_glad_glCopyMultiTexSubImage1DEXT;
#define glCopyMultiTexSubImage1DEXT sf_glad_glCopyMultiTexSubImage1DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC sf_glad_glCopyMultiTexSubImage2DEXT;
#define glCopyMultiTexSubImage2DEXT sf_glad_glCopyMultiTexSubImage2DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC sf_glad_glCopyMultiTexSubImage3DEXT;
#define glCopyMultiTexSubImage3DEXT sf_glad_glCopyMultiTexSubImage3DEXT
GLAD_API_CALL PFNGLCOPYNAMEDBUFFERSUBDATAPROC sf_glad_glCopyNamedBufferSubData;
#define glCopyNamedBufferSubData sf_glad_glCopyNamedBufferSubData
GLAD_API_CALL PFNGLCOPYPATHNVPROC sf_glad_glCopyPathNV;
#define glCopyPathNV sf_glad_glCopyPathNV
GLAD_API_CALL PFNGLCOPYPIXELSPROC sf_glad_glCopyPixels;
#define glCopyPixels sf_glad_glCopyPixels
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DPROC sf_glad_glCopyTexImage1D;
#define glCopyTexImage1D sf_glad_glCopyTexImage1D
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DEXTPROC sf_glad_glCopyTexImage1DEXT;
#define glCopyTexImage1DEXT sf_glad_glCopyTexImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DPROC sf_glad_glCopyTexImage2D;
#define glCopyTexImage2D sf_glad_glCopyTexImage2D
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DEXTPROC sf_glad_glCopyTexImage2DEXT;
#define glCopyTexImage2DEXT sf_glad_glCopyTexImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DPROC sf_glad_glCopyTexSubImage1D;
#define glCopyTexSubImage1D sf_glad_glCopyTexSubImage1D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DEXTPROC sf_glad_glCopyTexSubImage1DEXT;
#define glCopyTexSubImage1DEXT sf_glad_glCopyTexSubImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC sf_glad_glCopyTexSubImage2D;
#define glCopyTexSubImage2D sf_glad_glCopyTexSubImage2D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DEXTPROC sf_glad_glCopyTexSubImage2DEXT;
#define glCopyTexSubImage2DEXT sf_glad_glCopyTexSubImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DPROC sf_glad_glCopyTexSubImage3D;
#define glCopyTexSubImage3D sf_glad_glCopyTexSubImage3D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DEXTPROC sf_glad_glCopyTexSubImage3DEXT;
#define glCopyTexSubImage3DEXT sf_glad_glCopyTexSubImage3DEXT
GLAD_API_CALL PFNGLCOPYTEXTUREIMAGE1DEXTPROC sf_glad_glCopyTextureImage1DEXT;
#define glCopyTextureImage1DEXT sf_glad_glCopyTextureImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXTUREIMAGE2DEXTPROC sf_glad_glCopyTextureImage2DEXT;
#define glCopyTextureImage2DEXT sf_glad_glCopyTextureImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE1DPROC sf_glad_glCopyTextureSubImage1D;
#define glCopyTextureSubImage1D sf_glad_glCopyTextureSubImage1D
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC sf_glad_glCopyTextureSubImage1DEXT;
#define glCopyTextureSubImage1DEXT sf_glad_glCopyTextureSubImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE2DPROC sf_glad_glCopyTextureSubImage2D;
#define glCopyTextureSubImage2D sf_glad_glCopyTextureSubImage2D
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC sf_glad_glCopyTextureSubImage2DEXT;
#define glCopyTextureSubImage2DEXT sf_glad_glCopyTextureSubImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE3DPROC sf_glad_glCopyTextureSubImage3D;
#define glCopyTextureSubImage3D sf_glad_glCopyTextureSubImage3D
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC sf_glad_glCopyTextureSubImage3DEXT;
#define glCopyTextureSubImage3DEXT sf_glad_glCopyTextureSubImage3DEXT
GLAD_API_CALL PFNGLCOVERFILLPATHINSTANCEDNVPROC sf_glad_glCoverFillPathInstancedNV;
#define glCoverFillPathInstancedNV sf_glad_glCoverFillPathInstancedNV
GLAD_API_CALL PFNGLCOVERFILLPATHNVPROC sf_glad_glCoverFillPathNV;
#define glCoverFillPathNV sf_glad_glCoverFillPathNV
GLAD_API_CALL PFNGLCOVERSTROKEPATHINSTANCEDNVPROC sf_glad_glCoverStrokePathInstancedNV;
#define glCoverStrokePathInstancedNV sf_glad_glCoverStrokePathInstancedNV
GLAD_API_CALL PFNGLCOVERSTROKEPATHNVPROC sf_glad_glCoverStrokePathNV;
#define glCoverStrokePathNV sf_glad_glCoverStrokePathNV
GLAD_API_CALL PFNGLCOVERAGEMODULATIONNVPROC sf_glad_glCoverageModulationNV;
#define glCoverageModulationNV sf_glad_glCoverageModulationNV
GLAD_API_CALL PFNGLCOVERAGEMODULATIONTABLENVPROC sf_glad_glCoverageModulationTableNV;
#define glCoverageModulationTableNV sf_glad_glCoverageModulationTableNV
GLAD_API_CALL PFNGLCREATEBUFFERSPROC sf_glad_glCreateBuffers;
#define glCreateBuffers sf_glad_glCreateBuffers
GLAD_API_CALL PFNGLCREATECOMMANDLISTSNVPROC sf_glad_glCreateCommandListsNV;
#define glCreateCommandListsNV sf_glad_glCreateCommandListsNV
GLAD_API_CALL PFNGLCREATEFRAMEBUFFERSPROC sf_glad_glCreateFramebuffers;
#define glCreateFramebuffers sf_glad_glCreateFramebuffers
GLAD_API_CALL PFNGLCREATEMEMORYOBJECTSEXTPROC sf_glad_glCreateMemoryObjectsEXT;
#define glCreateMemoryObjectsEXT sf_glad_glCreateMemoryObjectsEXT
GLAD_API_CALL PFNGLCREATEPERFQUERYINTELPROC sf_glad_glCreatePerfQueryINTEL;
#define glCreatePerfQueryINTEL sf_glad_glCreatePerfQueryINTEL
GLAD_API_CALL PFNGLCREATEPROGRAMPROC sf_glad_glCreateProgram;
#define glCreateProgram sf_glad_glCreateProgram
GLAD_API_CALL PFNGLCREATEPROGRAMOBJECTARBPROC sf_glad_glCreateProgramObjectARB;
#define glCreateProgramObjectARB sf_glad_glCreateProgramObjectARB
GLAD_API_CALL PFNGLCREATEPROGRAMPIPELINESPROC sf_glad_glCreateProgramPipelines;
#define glCreateProgramPipelines sf_glad_glCreateProgramPipelines
GLAD_API_CALL PFNGLCREATEPROGRESSFENCENVXPROC sf_glad_glCreateProgressFenceNVX;
#define glCreateProgressFenceNVX sf_glad_glCreateProgressFenceNVX
GLAD_API_CALL PFNGLCREATEQUERIESPROC sf_glad_glCreateQueries;
#define glCreateQueries sf_glad_glCreateQueries
GLAD_API_CALL PFNGLCREATERENDERBUFFERSPROC sf_glad_glCreateRenderbuffers;
#define glCreateRenderbuffers sf_glad_glCreateRenderbuffers
GLAD_API_CALL PFNGLCREATESAMPLERSPROC sf_glad_glCreateSamplers;
#define glCreateSamplers sf_glad_glCreateSamplers
GLAD_API_CALL PFNGLCREATESEMAPHORESNVPROC sf_glad_glCreateSemaphoresNV;
#define glCreateSemaphoresNV sf_glad_glCreateSemaphoresNV
GLAD_API_CALL PFNGLCREATESHADERPROC sf_glad_glCreateShader;
#define glCreateShader sf_glad_glCreateShader
GLAD_API_CALL PFNGLCREATESHADEROBJECTARBPROC sf_glad_glCreateShaderObjectARB;
#define glCreateShaderObjectARB sf_glad_glCreateShaderObjectARB
GLAD_API_CALL PFNGLCREATESHADERPROGRAMEXTPROC sf_glad_glCreateShaderProgramEXT;
#define glCreateShaderProgramEXT sf_glad_glCreateShaderProgramEXT
GLAD_API_CALL PFNGLCREATESHADERPROGRAMVPROC sf_glad_glCreateShaderProgramv;
#define glCreateShaderProgramv sf_glad_glCreateShaderProgramv
GLAD_API_CALL PFNGLCREATESTATESNVPROC sf_glad_glCreateStatesNV;
#define glCreateStatesNV sf_glad_glCreateStatesNV
GLAD_API_CALL PFNGLCREATESYNCFROMCLEVENTARBPROC sf_glad_glCreateSyncFromCLeventARB;
#define glCreateSyncFromCLeventARB sf_glad_glCreateSyncFromCLeventARB
GLAD_API_CALL PFNGLCREATETEXTURESPROC sf_glad_glCreateTextures;
#define glCreateTextures sf_glad_glCreateTextures
GLAD_API_CALL PFNGLCREATETRANSFORMFEEDBACKSPROC sf_glad_glCreateTransformFeedbacks;
#define glCreateTransformFeedbacks sf_glad_glCreateTransformFeedbacks
GLAD_API_CALL PFNGLCREATEVERTEXARRAYSPROC sf_glad_glCreateVertexArrays;
#define glCreateVertexArrays sf_glad_glCreateVertexArrays
GLAD_API_CALL PFNGLCULLFACEPROC sf_glad_glCullFace;
#define glCullFace sf_glad_glCullFace
GLAD_API_CALL PFNGLCULLPARAMETERDVEXTPROC sf_glad_glCullParameterdvEXT;
#define glCullParameterdvEXT sf_glad_glCullParameterdvEXT
GLAD_API_CALL PFNGLCULLPARAMETERFVEXTPROC sf_glad_glCullParameterfvEXT;
#define glCullParameterfvEXT sf_glad_glCullParameterfvEXT
GLAD_API_CALL PFNGLCURRENTPALETTEMATRIXARBPROC sf_glad_glCurrentPaletteMatrixARB;
#define glCurrentPaletteMatrixARB sf_glad_glCurrentPaletteMatrixARB
GLAD_API_CALL PFNGLDEBUGMESSAGECALLBACKPROC sf_glad_glDebugMessageCallback;
#define glDebugMessageCallback sf_glad_glDebugMessageCallback
GLAD_API_CALL PFNGLDEBUGMESSAGECALLBACKAMDPROC sf_glad_glDebugMessageCallbackAMD;
#define glDebugMessageCallbackAMD sf_glad_glDebugMessageCallbackAMD
GLAD_API_CALL PFNGLDEBUGMESSAGECALLBACKARBPROC sf_glad_glDebugMessageCallbackARB;
#define glDebugMessageCallbackARB sf_glad_glDebugMessageCallbackARB
GLAD_API_CALL PFNGLDEBUGMESSAGECONTROLPROC sf_glad_glDebugMessageControl;
#define glDebugMessageControl sf_glad_glDebugMessageControl
GLAD_API_CALL PFNGLDEBUGMESSAGECONTROLARBPROC sf_glad_glDebugMessageControlARB;
#define glDebugMessageControlARB sf_glad_glDebugMessageControlARB
GLAD_API_CALL PFNGLDEBUGMESSAGEENABLEAMDPROC sf_glad_glDebugMessageEnableAMD;
#define glDebugMessageEnableAMD sf_glad_glDebugMessageEnableAMD
GLAD_API_CALL PFNGLDEBUGMESSAGEINSERTPROC sf_glad_glDebugMessageInsert;
#define glDebugMessageInsert sf_glad_glDebugMessageInsert
GLAD_API_CALL PFNGLDEBUGMESSAGEINSERTAMDPROC sf_glad_glDebugMessageInsertAMD;
#define glDebugMessageInsertAMD sf_glad_glDebugMessageInsertAMD
GLAD_API_CALL PFNGLDEBUGMESSAGEINSERTARBPROC sf_glad_glDebugMessageInsertARB;
#define glDebugMessageInsertARB sf_glad_glDebugMessageInsertARB
GLAD_API_CALL PFNGLDEFORMSGIXPROC sf_glad_glDeformSGIX;
#define glDeformSGIX sf_glad_glDeformSGIX
GLAD_API_CALL PFNGLDEFORMATIONMAP3DSGIXPROC sf_glad_glDeformationMap3dSGIX;
#define glDeformationMap3dSGIX sf_glad_glDeformationMap3dSGIX
GLAD_API_CALL PFNGLDEFORMATIONMAP3FSGIXPROC sf_glad_glDeformationMap3fSGIX;
#define glDeformationMap3fSGIX sf_glad_glDeformationMap3fSGIX
GLAD_API_CALL PFNGLDELETEASYNCMARKERSSGIXPROC sf_glad_glDeleteAsyncMarkersSGIX;
#define glDeleteAsyncMarkersSGIX sf_glad_glDeleteAsyncMarkersSGIX
GLAD_API_CALL PFNGLDELETEBUFFERSPROC sf_glad_glDeleteBuffers;
#define glDeleteBuffers sf_glad_glDeleteBuffers
GLAD_API_CALL PFNGLDELETEBUFFERSARBPROC sf_glad_glDeleteBuffersARB;
#define glDeleteBuffersARB sf_glad_glDeleteBuffersARB
GLAD_API_CALL PFNGLDELETECOMMANDLISTSNVPROC sf_glad_glDeleteCommandListsNV;
#define glDeleteCommandListsNV sf_glad_glDeleteCommandListsNV
GLAD_API_CALL PFNGLDELETEFENCESAPPLEPROC sf_glad_glDeleteFencesAPPLE;
#define glDeleteFencesAPPLE sf_glad_glDeleteFencesAPPLE
GLAD_API_CALL PFNGLDELETEFENCESNVPROC sf_glad_glDeleteFencesNV;
#define glDeleteFencesNV sf_glad_glDeleteFencesNV
GLAD_API_CALL PFNGLDELETEFRAGMENTSHADERATIPROC sf_glad_glDeleteFragmentShaderATI;
#define glDeleteFragmentShaderATI sf_glad_glDeleteFragmentShaderATI
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSPROC sf_glad_glDeleteFramebuffers;
#define glDeleteFramebuffers sf_glad_glDeleteFramebuffers
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSEXTPROC sf_glad_glDeleteFramebuffersEXT;
#define glDeleteFramebuffersEXT sf_glad_glDeleteFramebuffersEXT
GLAD_API_CALL PFNGLDELETELISTSPROC sf_glad_glDeleteLists;
#define glDeleteLists sf_glad_glDeleteLists
GLAD_API_CALL PFNGLDELETEMEMORYOBJECTSEXTPROC sf_glad_glDeleteMemoryObjectsEXT;
#define glDeleteMemoryObjectsEXT sf_glad_glDeleteMemoryObjectsEXT
GLAD_API_CALL PFNGLDELETENAMEDSTRINGARBPROC sf_glad_glDeleteNamedStringARB;
#define glDeleteNamedStringARB sf_glad_glDeleteNamedStringARB
GLAD_API_CALL PFNGLDELETENAMESAMDPROC sf_glad_glDeleteNamesAMD;
#define glDeleteNamesAMD sf_glad_glDeleteNamesAMD
GLAD_API_CALL PFNGLDELETEOBJECTARBPROC sf_glad_glDeleteObjectARB;
#define glDeleteObjectARB sf_glad_glDeleteObjectARB
GLAD_API_CALL PFNGLDELETEOCCLUSIONQUERIESNVPROC sf_glad_glDeleteOcclusionQueriesNV;
#define glDeleteOcclusionQueriesNV sf_glad_glDeleteOcclusionQueriesNV
GLAD_API_CALL PFNGLDELETEPATHSNVPROC sf_glad_glDeletePathsNV;
#define glDeletePathsNV sf_glad_glDeletePathsNV
GLAD_API_CALL PFNGLDELETEPERFMONITORSAMDPROC sf_glad_glDeletePerfMonitorsAMD;
#define glDeletePerfMonitorsAMD sf_glad_glDeletePerfMonitorsAMD
GLAD_API_CALL PFNGLDELETEPERFQUERYINTELPROC sf_glad_glDeletePerfQueryINTEL;
#define glDeletePerfQueryINTEL sf_glad_glDeletePerfQueryINTEL
GLAD_API_CALL PFNGLDELETEPROGRAMPROC sf_glad_glDeleteProgram;
#define glDeleteProgram sf_glad_glDeleteProgram
GLAD_API_CALL PFNGLDELETEPROGRAMPIPELINESPROC sf_glad_glDeleteProgramPipelines;
#define glDeleteProgramPipelines sf_glad_glDeleteProgramPipelines
GLAD_API_CALL PFNGLDELETEPROGRAMSARBPROC sf_glad_glDeleteProgramsARB;
#define glDeleteProgramsARB sf_glad_glDeleteProgramsARB
GLAD_API_CALL PFNGLDELETEPROGRAMSNVPROC sf_glad_glDeleteProgramsNV;
#define glDeleteProgramsNV sf_glad_glDeleteProgramsNV
GLAD_API_CALL PFNGLDELETEQUERIESPROC sf_glad_glDeleteQueries;
#define glDeleteQueries sf_glad_glDeleteQueries
GLAD_API_CALL PFNGLDELETEQUERIESARBPROC sf_glad_glDeleteQueriesARB;
#define glDeleteQueriesARB sf_glad_glDeleteQueriesARB
GLAD_API_CALL PFNGLDELETEQUERYRESOURCETAGNVPROC sf_glad_glDeleteQueryResourceTagNV;
#define glDeleteQueryResourceTagNV sf_glad_glDeleteQueryResourceTagNV
GLAD_API_CALL PFNGLDELETERENDERBUFFERSPROC sf_glad_glDeleteRenderbuffers;
#define glDeleteRenderbuffers sf_glad_glDeleteRenderbuffers
GLAD_API_CALL PFNGLDELETERENDERBUFFERSEXTPROC sf_glad_glDeleteRenderbuffersEXT;
#define glDeleteRenderbuffersEXT sf_glad_glDeleteRenderbuffersEXT
GLAD_API_CALL PFNGLDELETESAMPLERSPROC sf_glad_glDeleteSamplers;
#define glDeleteSamplers sf_glad_glDeleteSamplers
GLAD_API_CALL PFNGLDELETESEMAPHORESEXTPROC sf_glad_glDeleteSemaphoresEXT;
#define glDeleteSemaphoresEXT sf_glad_glDeleteSemaphoresEXT
GLAD_API_CALL PFNGLDELETESHADERPROC sf_glad_glDeleteShader;
#define glDeleteShader sf_glad_glDeleteShader
GLAD_API_CALL PFNGLDELETESTATESNVPROC sf_glad_glDeleteStatesNV;
#define glDeleteStatesNV sf_glad_glDeleteStatesNV
GLAD_API_CALL PFNGLDELETESYNCPROC sf_glad_glDeleteSync;
#define glDeleteSync sf_glad_glDeleteSync
GLAD_API_CALL PFNGLDELETETEXTURESPROC sf_glad_glDeleteTextures;
#define glDeleteTextures sf_glad_glDeleteTextures
GLAD_API_CALL PFNGLDELETETEXTURESEXTPROC sf_glad_glDeleteTexturesEXT;
#define glDeleteTexturesEXT sf_glad_glDeleteTexturesEXT
GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSPROC sf_glad_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks sf_glad_glDeleteTransformFeedbacks
GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSNVPROC sf_glad_glDeleteTransformFeedbacksNV;
#define glDeleteTransformFeedbacksNV sf_glad_glDeleteTransformFeedbacksNV
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSPROC sf_glad_glDeleteVertexArrays;
#define glDeleteVertexArrays sf_glad_glDeleteVertexArrays
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSAPPLEPROC sf_glad_glDeleteVertexArraysAPPLE;
#define glDeleteVertexArraysAPPLE sf_glad_glDeleteVertexArraysAPPLE
GLAD_API_CALL PFNGLDELETEVERTEXSHADEREXTPROC sf_glad_glDeleteVertexShaderEXT;
#define glDeleteVertexShaderEXT sf_glad_glDeleteVertexShaderEXT
GLAD_API_CALL PFNGLDEPTHBOUNDSEXTPROC sf_glad_glDepthBoundsEXT;
#define glDepthBoundsEXT sf_glad_glDepthBoundsEXT
GLAD_API_CALL PFNGLDEPTHBOUNDSDNVPROC sf_glad_glDepthBoundsdNV;
#define glDepthBoundsdNV sf_glad_glDepthBoundsdNV
GLAD_API_CALL PFNGLDEPTHFUNCPROC sf_glad_glDepthFunc;
#define glDepthFunc sf_glad_glDepthFunc
GLAD_API_CALL PFNGLDEPTHMASKPROC sf_glad_glDepthMask;
#define glDepthMask sf_glad_glDepthMask
GLAD_API_CALL PFNGLDEPTHRANGEPROC sf_glad_glDepthRange;
#define glDepthRange sf_glad_glDepthRange
GLAD_API_CALL PFNGLDEPTHRANGEARRAYDVNVPROC sf_glad_glDepthRangeArraydvNV;
#define glDepthRangeArraydvNV sf_glad_glDepthRangeArraydvNV
GLAD_API_CALL PFNGLDEPTHRANGEARRAYVPROC sf_glad_glDepthRangeArrayv;
#define glDepthRangeArrayv sf_glad_glDepthRangeArrayv
GLAD_API_CALL PFNGLDEPTHRANGEINDEXEDPROC sf_glad_glDepthRangeIndexed;
#define glDepthRangeIndexed sf_glad_glDepthRangeIndexed
GLAD_API_CALL PFNGLDEPTHRANGEINDEXEDDNVPROC sf_glad_glDepthRangeIndexeddNV;
#define glDepthRangeIndexeddNV sf_glad_glDepthRangeIndexeddNV
GLAD_API_CALL PFNGLDEPTHRANGEDNVPROC sf_glad_glDepthRangedNV;
#define glDepthRangedNV sf_glad_glDepthRangedNV
GLAD_API_CALL PFNGLDEPTHRANGEFPROC sf_glad_glDepthRangef;
#define glDepthRangef sf_glad_glDepthRangef
GLAD_API_CALL PFNGLDEPTHRANGEFOESPROC sf_glad_glDepthRangefOES;
#define glDepthRangefOES sf_glad_glDepthRangefOES
GLAD_API_CALL PFNGLDEPTHRANGEXOESPROC sf_glad_glDepthRangexOES;
#define glDepthRangexOES sf_glad_glDepthRangexOES
GLAD_API_CALL PFNGLDETACHOBJECTARBPROC sf_glad_glDetachObjectARB;
#define glDetachObjectARB sf_glad_glDetachObjectARB
GLAD_API_CALL PFNGLDETACHSHADERPROC sf_glad_glDetachShader;
#define glDetachShader sf_glad_glDetachShader
GLAD_API_CALL PFNGLDETAILTEXFUNCSGISPROC sf_glad_glDetailTexFuncSGIS;
#define glDetailTexFuncSGIS sf_glad_glDetailTexFuncSGIS
GLAD_API_CALL PFNGLDISABLEPROC sf_glad_glDisable;
#define glDisable sf_glad_glDisable
GLAD_API_CALL PFNGLDISABLECLIENTSTATEPROC sf_glad_glDisableClientState;
#define glDisableClientState sf_glad_glDisableClientState
GLAD_API_CALL PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC sf_glad_glDisableClientStateIndexedEXT;
#define glDisableClientStateIndexedEXT sf_glad_glDisableClientStateIndexedEXT
GLAD_API_CALL PFNGLDISABLECLIENTSTATEIEXTPROC sf_glad_glDisableClientStateiEXT;
#define glDisableClientStateiEXT sf_glad_glDisableClientStateiEXT
GLAD_API_CALL PFNGLDISABLEINDEXEDEXTPROC sf_glad_glDisableIndexedEXT;
#define glDisableIndexedEXT sf_glad_glDisableIndexedEXT
GLAD_API_CALL PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC sf_glad_glDisableVariantClientStateEXT;
#define glDisableVariantClientStateEXT sf_glad_glDisableVariantClientStateEXT
GLAD_API_CALL PFNGLDISABLEVERTEXARRAYATTRIBPROC sf_glad_glDisableVertexArrayAttrib;
#define glDisableVertexArrayAttrib sf_glad_glDisableVertexArrayAttrib
GLAD_API_CALL PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC sf_glad_glDisableVertexArrayAttribEXT;
#define glDisableVertexArrayAttribEXT sf_glad_glDisableVertexArrayAttribEXT
GLAD_API_CALL PFNGLDISABLEVERTEXARRAYEXTPROC sf_glad_glDisableVertexArrayEXT;
#define glDisableVertexArrayEXT sf_glad_glDisableVertexArrayEXT
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBAPPLEPROC sf_glad_glDisableVertexAttribAPPLE;
#define glDisableVertexAttribAPPLE sf_glad_glDisableVertexAttribAPPLE
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYPROC sf_glad_glDisableVertexAttribArray;
#define glDisableVertexAttribArray sf_glad_glDisableVertexAttribArray
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYARBPROC sf_glad_glDisableVertexAttribArrayARB;
#define glDisableVertexAttribArrayARB sf_glad_glDisableVertexAttribArrayARB
GLAD_API_CALL PFNGLDISABLEIPROC sf_glad_glDisablei;
#define glDisablei sf_glad_glDisablei
GLAD_API_CALL PFNGLDISPATCHCOMPUTEPROC sf_glad_glDispatchCompute;
#define glDispatchCompute sf_glad_glDispatchCompute
GLAD_API_CALL PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC sf_glad_glDispatchComputeGroupSizeARB;
#define glDispatchComputeGroupSizeARB sf_glad_glDispatchComputeGroupSizeARB
GLAD_API_CALL PFNGLDISPATCHCOMPUTEINDIRECTPROC sf_glad_glDispatchComputeIndirect;
#define glDispatchComputeIndirect sf_glad_glDispatchComputeIndirect
GLAD_API_CALL PFNGLDRAWARRAYSPROC sf_glad_glDrawArrays;
#define glDrawArrays sf_glad_glDrawArrays
GLAD_API_CALL PFNGLDRAWARRAYSEXTPROC sf_glad_glDrawArraysEXT;
#define glDrawArraysEXT sf_glad_glDrawArraysEXT
GLAD_API_CALL PFNGLDRAWARRAYSINDIRECTPROC sf_glad_glDrawArraysIndirect;
#define glDrawArraysIndirect sf_glad_glDrawArraysIndirect
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDPROC sf_glad_glDrawArraysInstanced;
#define glDrawArraysInstanced sf_glad_glDrawArraysInstanced
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDARBPROC sf_glad_glDrawArraysInstancedARB;
#define glDrawArraysInstancedARB sf_glad_glDrawArraysInstancedARB
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC sf_glad_glDrawArraysInstancedBaseInstance;
#define glDrawArraysInstancedBaseInstance sf_glad_glDrawArraysInstancedBaseInstance
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDEXTPROC sf_glad_glDrawArraysInstancedEXT;
#define glDrawArraysInstancedEXT sf_glad_glDrawArraysInstancedEXT
GLAD_API_CALL PFNGLDRAWBUFFERPROC sf_glad_glDrawBuffer;
#define glDrawBuffer sf_glad_glDrawBuffer
GLAD_API_CALL PFNGLDRAWBUFFERSPROC sf_glad_glDrawBuffers;
#define glDrawBuffers sf_glad_glDrawBuffers
GLAD_API_CALL PFNGLDRAWBUFFERSARBPROC sf_glad_glDrawBuffersARB;
#define glDrawBuffersARB sf_glad_glDrawBuffersARB
GLAD_API_CALL PFNGLDRAWBUFFERSATIPROC sf_glad_glDrawBuffersATI;
#define glDrawBuffersATI sf_glad_glDrawBuffersATI
GLAD_API_CALL PFNGLDRAWCOMMANDSADDRESSNVPROC sf_glad_glDrawCommandsAddressNV;
#define glDrawCommandsAddressNV sf_glad_glDrawCommandsAddressNV
GLAD_API_CALL PFNGLDRAWCOMMANDSNVPROC sf_glad_glDrawCommandsNV;
#define glDrawCommandsNV sf_glad_glDrawCommandsNV
GLAD_API_CALL PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC sf_glad_glDrawCommandsStatesAddressNV;
#define glDrawCommandsStatesAddressNV sf_glad_glDrawCommandsStatesAddressNV
GLAD_API_CALL PFNGLDRAWCOMMANDSSTATESNVPROC sf_glad_glDrawCommandsStatesNV;
#define glDrawCommandsStatesNV sf_glad_glDrawCommandsStatesNV
GLAD_API_CALL PFNGLDRAWELEMENTARRAYAPPLEPROC sf_glad_glDrawElementArrayAPPLE;
#define glDrawElementArrayAPPLE sf_glad_glDrawElementArrayAPPLE
GLAD_API_CALL PFNGLDRAWELEMENTARRAYATIPROC sf_glad_glDrawElementArrayATI;
#define glDrawElementArrayATI sf_glad_glDrawElementArrayATI
GLAD_API_CALL PFNGLDRAWELEMENTSPROC sf_glad_glDrawElements;
#define glDrawElements sf_glad_glDrawElements
GLAD_API_CALL PFNGLDRAWELEMENTSBASEVERTEXPROC sf_glad_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex sf_glad_glDrawElementsBaseVertex
GLAD_API_CALL PFNGLDRAWELEMENTSINDIRECTPROC sf_glad_glDrawElementsIndirect;
#define glDrawElementsIndirect sf_glad_glDrawElementsIndirect
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDPROC sf_glad_glDrawElementsInstanced;
#define glDrawElementsInstanced sf_glad_glDrawElementsInstanced
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDARBPROC sf_glad_glDrawElementsInstancedARB;
#define glDrawElementsInstancedARB sf_glad_glDrawElementsInstancedARB
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC sf_glad_glDrawElementsInstancedBaseInstance;
#define glDrawElementsInstancedBaseInstance sf_glad_glDrawElementsInstancedBaseInstance
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC sf_glad_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex sf_glad_glDrawElementsInstancedBaseVertex
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC sf_glad_glDrawElementsInstancedBaseVertexBaseInstance;
#define glDrawElementsInstancedBaseVertexBaseInstance sf_glad_glDrawElementsInstancedBaseVertexBaseInstance
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDEXTPROC sf_glad_glDrawElementsInstancedEXT;
#define glDrawElementsInstancedEXT sf_glad_glDrawElementsInstancedEXT
GLAD_API_CALL PFNGLDRAWMESHARRAYSSUNPROC sf_glad_glDrawMeshArraysSUN;
#define glDrawMeshArraysSUN sf_glad_glDrawMeshArraysSUN
GLAD_API_CALL PFNGLDRAWMESHTASKSINDIRECTNVPROC sf_glad_glDrawMeshTasksIndirectNV;
#define glDrawMeshTasksIndirectNV sf_glad_glDrawMeshTasksIndirectNV
GLAD_API_CALL PFNGLDRAWMESHTASKSNVPROC sf_glad_glDrawMeshTasksNV;
#define glDrawMeshTasksNV sf_glad_glDrawMeshTasksNV
GLAD_API_CALL PFNGLDRAWPIXELSPROC sf_glad_glDrawPixels;
#define glDrawPixels sf_glad_glDrawPixels
GLAD_API_CALL PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC sf_glad_glDrawRangeElementArrayAPPLE;
#define glDrawRangeElementArrayAPPLE sf_glad_glDrawRangeElementArrayAPPLE
GLAD_API_CALL PFNGLDRAWRANGEELEMENTARRAYATIPROC sf_glad_glDrawRangeElementArrayATI;
#define glDrawRangeElementArrayATI sf_glad_glDrawRangeElementArrayATI
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSPROC sf_glad_glDrawRangeElements;
#define glDrawRangeElements sf_glad_glDrawRangeElements
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC sf_glad_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex sf_glad_glDrawRangeElementsBaseVertex
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSEXTPROC sf_glad_glDrawRangeElementsEXT;
#define glDrawRangeElementsEXT sf_glad_glDrawRangeElementsEXT
GLAD_API_CALL PFNGLDRAWTEXTURENVPROC sf_glad_glDrawTextureNV;
#define glDrawTextureNV sf_glad_glDrawTextureNV
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKPROC sf_glad_glDrawTransformFeedback;
#define glDrawTransformFeedback sf_glad_glDrawTransformFeedback
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC sf_glad_glDrawTransformFeedbackInstanced;
#define glDrawTransformFeedbackInstanced sf_glad_glDrawTransformFeedbackInstanced
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKNVPROC sf_glad_glDrawTransformFeedbackNV;
#define glDrawTransformFeedbackNV sf_glad_glDrawTransformFeedbackNV
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC sf_glad_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream sf_glad_glDrawTransformFeedbackStream
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC sf_glad_glDrawTransformFeedbackStreamInstanced;
#define glDrawTransformFeedbackStreamInstanced sf_glad_glDrawTransformFeedbackStreamInstanced
GLAD_API_CALL PFNGLDRAWVKIMAGENVPROC sf_glad_glDrawVkImageNV;
#define glDrawVkImageNV sf_glad_glDrawVkImageNV
GLAD_API_CALL PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC sf_glad_glEGLImageTargetTexStorageEXT;
#define glEGLImageTargetTexStorageEXT sf_glad_glEGLImageTargetTexStorageEXT
GLAD_API_CALL PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC sf_glad_glEGLImageTargetTextureStorageEXT;
#define glEGLImageTargetTextureStorageEXT sf_glad_glEGLImageTargetTextureStorageEXT
GLAD_API_CALL PFNGLEDGEFLAGPROC sf_glad_glEdgeFlag;
#define glEdgeFlag sf_glad_glEdgeFlag
GLAD_API_CALL PFNGLEDGEFLAGFORMATNVPROC sf_glad_glEdgeFlagFormatNV;
#define glEdgeFlagFormatNV sf_glad_glEdgeFlagFormatNV
GLAD_API_CALL PFNGLEDGEFLAGPOINTERPROC sf_glad_glEdgeFlagPointer;
#define glEdgeFlagPointer sf_glad_glEdgeFlagPointer
GLAD_API_CALL PFNGLEDGEFLAGPOINTEREXTPROC sf_glad_glEdgeFlagPointerEXT;
#define glEdgeFlagPointerEXT sf_glad_glEdgeFlagPointerEXT
GLAD_API_CALL PFNGLEDGEFLAGPOINTERLISTIBMPROC sf_glad_glEdgeFlagPointerListIBM;
#define glEdgeFlagPointerListIBM sf_glad_glEdgeFlagPointerListIBM
GLAD_API_CALL PFNGLEDGEFLAGVPROC sf_glad_glEdgeFlagv;
#define glEdgeFlagv sf_glad_glEdgeFlagv
GLAD_API_CALL PFNGLELEMENTPOINTERAPPLEPROC sf_glad_glElementPointerAPPLE;
#define glElementPointerAPPLE sf_glad_glElementPointerAPPLE
GLAD_API_CALL PFNGLELEMENTPOINTERATIPROC sf_glad_glElementPointerATI;
#define glElementPointerATI sf_glad_glElementPointerATI
GLAD_API_CALL PFNGLENABLEPROC sf_glad_glEnable;
#define glEnable sf_glad_glEnable
GLAD_API_CALL PFNGLENABLECLIENTSTATEPROC sf_glad_glEnableClientState;
#define glEnableClientState sf_glad_glEnableClientState
GLAD_API_CALL PFNGLENABLECLIENTSTATEINDEXEDEXTPROC sf_glad_glEnableClientStateIndexedEXT;
#define glEnableClientStateIndexedEXT sf_glad_glEnableClientStateIndexedEXT
GLAD_API_CALL PFNGLENABLECLIENTSTATEIEXTPROC sf_glad_glEnableClientStateiEXT;
#define glEnableClientStateiEXT sf_glad_glEnableClientStateiEXT
GLAD_API_CALL PFNGLENABLEINDEXEDEXTPROC sf_glad_glEnableIndexedEXT;
#define glEnableIndexedEXT sf_glad_glEnableIndexedEXT
GLAD_API_CALL PFNGLENABLEVARIANTCLIENTSTATEEXTPROC sf_glad_glEnableVariantClientStateEXT;
#define glEnableVariantClientStateEXT sf_glad_glEnableVariantClientStateEXT
GLAD_API_CALL PFNGLENABLEVERTEXARRAYATTRIBPROC sf_glad_glEnableVertexArrayAttrib;
#define glEnableVertexArrayAttrib sf_glad_glEnableVertexArrayAttrib
GLAD_API_CALL PFNGLENABLEVERTEXARRAYATTRIBEXTPROC sf_glad_glEnableVertexArrayAttribEXT;
#define glEnableVertexArrayAttribEXT sf_glad_glEnableVertexArrayAttribEXT
GLAD_API_CALL PFNGLENABLEVERTEXARRAYEXTPROC sf_glad_glEnableVertexArrayEXT;
#define glEnableVertexArrayEXT sf_glad_glEnableVertexArrayEXT
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBAPPLEPROC sf_glad_glEnableVertexAttribAPPLE;
#define glEnableVertexAttribAPPLE sf_glad_glEnableVertexAttribAPPLE
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYPROC sf_glad_glEnableVertexAttribArray;
#define glEnableVertexAttribArray sf_glad_glEnableVertexAttribArray
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYARBPROC sf_glad_glEnableVertexAttribArrayARB;
#define glEnableVertexAttribArrayARB sf_glad_glEnableVertexAttribArrayARB
GLAD_API_CALL PFNGLENABLEIPROC sf_glad_glEnablei;
#define glEnablei sf_glad_glEnablei
GLAD_API_CALL PFNGLENDPROC sf_glad_glEnd;
#define glEnd sf_glad_glEnd
GLAD_API_CALL PFNGLENDCONDITIONALRENDERPROC sf_glad_glEndConditionalRender;
#define glEndConditionalRender sf_glad_glEndConditionalRender
GLAD_API_CALL PFNGLENDCONDITIONALRENDERNVPROC sf_glad_glEndConditionalRenderNV;
#define glEndConditionalRenderNV sf_glad_glEndConditionalRenderNV
GLAD_API_CALL PFNGLENDCONDITIONALRENDERNVXPROC sf_glad_glEndConditionalRenderNVX;
#define glEndConditionalRenderNVX sf_glad_glEndConditionalRenderNVX
GLAD_API_CALL PFNGLENDFRAGMENTSHADERATIPROC sf_glad_glEndFragmentShaderATI;
#define glEndFragmentShaderATI sf_glad_glEndFragmentShaderATI
GLAD_API_CALL PFNGLENDLISTPROC sf_glad_glEndList;
#define glEndList sf_glad_glEndList
GLAD_API_CALL PFNGLENDOCCLUSIONQUERYNVPROC sf_glad_glEndOcclusionQueryNV;
#define glEndOcclusionQueryNV sf_glad_glEndOcclusionQueryNV
GLAD_API_CALL PFNGLENDPERFMONITORAMDPROC sf_glad_glEndPerfMonitorAMD;
#define glEndPerfMonitorAMD sf_glad_glEndPerfMonitorAMD
GLAD_API_CALL PFNGLENDPERFQUERYINTELPROC sf_glad_glEndPerfQueryINTEL;
#define glEndPerfQueryINTEL sf_glad_glEndPerfQueryINTEL
GLAD_API_CALL PFNGLENDQUERYPROC sf_glad_glEndQuery;
#define glEndQuery sf_glad_glEndQuery
GLAD_API_CALL PFNGLENDQUERYARBPROC sf_glad_glEndQueryARB;
#define glEndQueryARB sf_glad_glEndQueryARB
GLAD_API_CALL PFNGLENDQUERYINDEXEDPROC sf_glad_glEndQueryIndexed;
#define glEndQueryIndexed sf_glad_glEndQueryIndexed
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKPROC sf_glad_glEndTransformFeedback;
#define glEndTransformFeedback sf_glad_glEndTransformFeedback
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKEXTPROC sf_glad_glEndTransformFeedbackEXT;
#define glEndTransformFeedbackEXT sf_glad_glEndTransformFeedbackEXT
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKNVPROC sf_glad_glEndTransformFeedbackNV;
#define glEndTransformFeedbackNV sf_glad_glEndTransformFeedbackNV
GLAD_API_CALL PFNGLENDVERTEXSHADEREXTPROC sf_glad_glEndVertexShaderEXT;
#define glEndVertexShaderEXT sf_glad_glEndVertexShaderEXT
GLAD_API_CALL PFNGLENDVIDEOCAPTURENVPROC sf_glad_glEndVideoCaptureNV;
#define glEndVideoCaptureNV sf_glad_glEndVideoCaptureNV
GLAD_API_CALL PFNGLEVALCOORD1DPROC sf_glad_glEvalCoord1d;
#define glEvalCoord1d sf_glad_glEvalCoord1d
GLAD_API_CALL PFNGLEVALCOORD1DVPROC sf_glad_glEvalCoord1dv;
#define glEvalCoord1dv sf_glad_glEvalCoord1dv
GLAD_API_CALL PFNGLEVALCOORD1FPROC sf_glad_glEvalCoord1f;
#define glEvalCoord1f sf_glad_glEvalCoord1f
GLAD_API_CALL PFNGLEVALCOORD1FVPROC sf_glad_glEvalCoord1fv;
#define glEvalCoord1fv sf_glad_glEvalCoord1fv
GLAD_API_CALL PFNGLEVALCOORD1XOESPROC sf_glad_glEvalCoord1xOES;
#define glEvalCoord1xOES sf_glad_glEvalCoord1xOES
GLAD_API_CALL PFNGLEVALCOORD1XVOESPROC sf_glad_glEvalCoord1xvOES;
#define glEvalCoord1xvOES sf_glad_glEvalCoord1xvOES
GLAD_API_CALL PFNGLEVALCOORD2DPROC sf_glad_glEvalCoord2d;
#define glEvalCoord2d sf_glad_glEvalCoord2d
GLAD_API_CALL PFNGLEVALCOORD2DVPROC sf_glad_glEvalCoord2dv;
#define glEvalCoord2dv sf_glad_glEvalCoord2dv
GLAD_API_CALL PFNGLEVALCOORD2FPROC sf_glad_glEvalCoord2f;
#define glEvalCoord2f sf_glad_glEvalCoord2f
GLAD_API_CALL PFNGLEVALCOORD2FVPROC sf_glad_glEvalCoord2fv;
#define glEvalCoord2fv sf_glad_glEvalCoord2fv
GLAD_API_CALL PFNGLEVALCOORD2XOESPROC sf_glad_glEvalCoord2xOES;
#define glEvalCoord2xOES sf_glad_glEvalCoord2xOES
GLAD_API_CALL PFNGLEVALCOORD2XVOESPROC sf_glad_glEvalCoord2xvOES;
#define glEvalCoord2xvOES sf_glad_glEvalCoord2xvOES
GLAD_API_CALL PFNGLEVALMAPSNVPROC sf_glad_glEvalMapsNV;
#define glEvalMapsNV sf_glad_glEvalMapsNV
GLAD_API_CALL PFNGLEVALMESH1PROC sf_glad_glEvalMesh1;
#define glEvalMesh1 sf_glad_glEvalMesh1
GLAD_API_CALL PFNGLEVALMESH2PROC sf_glad_glEvalMesh2;
#define glEvalMesh2 sf_glad_glEvalMesh2
GLAD_API_CALL PFNGLEVALPOINT1PROC sf_glad_glEvalPoint1;
#define glEvalPoint1 sf_glad_glEvalPoint1
GLAD_API_CALL PFNGLEVALPOINT2PROC sf_glad_glEvalPoint2;
#define glEvalPoint2 sf_glad_glEvalPoint2
GLAD_API_CALL PFNGLEVALUATEDEPTHVALUESARBPROC sf_glad_glEvaluateDepthValuesARB;
#define glEvaluateDepthValuesARB sf_glad_glEvaluateDepthValuesARB
GLAD_API_CALL PFNGLEXECUTEPROGRAMNVPROC sf_glad_glExecuteProgramNV;
#define glExecuteProgramNV sf_glad_glExecuteProgramNV
GLAD_API_CALL PFNGLEXTRACTCOMPONENTEXTPROC sf_glad_glExtractComponentEXT;
#define glExtractComponentEXT sf_glad_glExtractComponentEXT
GLAD_API_CALL PFNGLFEEDBACKBUFFERPROC sf_glad_glFeedbackBuffer;
#define glFeedbackBuffer sf_glad_glFeedbackBuffer
GLAD_API_CALL PFNGLFEEDBACKBUFFERXOESPROC sf_glad_glFeedbackBufferxOES;
#define glFeedbackBufferxOES sf_glad_glFeedbackBufferxOES
GLAD_API_CALL PFNGLFENCESYNCPROC sf_glad_glFenceSync;
#define glFenceSync sf_glad_glFenceSync
GLAD_API_CALL PFNGLFINALCOMBINERINPUTNVPROC sf_glad_glFinalCombinerInputNV;
#define glFinalCombinerInputNV sf_glad_glFinalCombinerInputNV
GLAD_API_CALL PFNGLFINISHPROC sf_glad_glFinish;
#define glFinish sf_glad_glFinish
GLAD_API_CALL PFNGLFINISHASYNCSGIXPROC sf_glad_glFinishAsyncSGIX;
#define glFinishAsyncSGIX sf_glad_glFinishAsyncSGIX
GLAD_API_CALL PFNGLFINISHFENCEAPPLEPROC sf_glad_glFinishFenceAPPLE;
#define glFinishFenceAPPLE sf_glad_glFinishFenceAPPLE
GLAD_API_CALL PFNGLFINISHFENCENVPROC sf_glad_glFinishFenceNV;
#define glFinishFenceNV sf_glad_glFinishFenceNV
GLAD_API_CALL PFNGLFINISHOBJECTAPPLEPROC sf_glad_glFinishObjectAPPLE;
#define glFinishObjectAPPLE sf_glad_glFinishObjectAPPLE
GLAD_API_CALL PFNGLFINISHTEXTURESUNXPROC sf_glad_glFinishTextureSUNX;
#define glFinishTextureSUNX sf_glad_glFinishTextureSUNX
GLAD_API_CALL PFNGLFLUSHPROC sf_glad_glFlush;
#define glFlush sf_glad_glFlush
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEPROC sf_glad_glFlushMappedBufferRange;
#define glFlushMappedBufferRange sf_glad_glFlushMappedBufferRange
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC sf_glad_glFlushMappedBufferRangeAPPLE;
#define glFlushMappedBufferRangeAPPLE sf_glad_glFlushMappedBufferRangeAPPLE
GLAD_API_CALL PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC sf_glad_glFlushMappedNamedBufferRange;
#define glFlushMappedNamedBufferRange sf_glad_glFlushMappedNamedBufferRange
GLAD_API_CALL PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC sf_glad_glFlushMappedNamedBufferRangeEXT;
#define glFlushMappedNamedBufferRangeEXT sf_glad_glFlushMappedNamedBufferRangeEXT
GLAD_API_CALL PFNGLFLUSHPIXELDATARANGENVPROC sf_glad_glFlushPixelDataRangeNV;
#define glFlushPixelDataRangeNV sf_glad_glFlushPixelDataRangeNV
GLAD_API_CALL PFNGLFLUSHRASTERSGIXPROC sf_glad_glFlushRasterSGIX;
#define glFlushRasterSGIX sf_glad_glFlushRasterSGIX
GLAD_API_CALL PFNGLFLUSHSTATICDATAIBMPROC sf_glad_glFlushStaticDataIBM;
#define glFlushStaticDataIBM sf_glad_glFlushStaticDataIBM
GLAD_API_CALL PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC sf_glad_glFlushVertexArrayRangeAPPLE;
#define glFlushVertexArrayRangeAPPLE sf_glad_glFlushVertexArrayRangeAPPLE
GLAD_API_CALL PFNGLFLUSHVERTEXARRAYRANGENVPROC sf_glad_glFlushVertexArrayRangeNV;
#define glFlushVertexArrayRangeNV sf_glad_glFlushVertexArrayRangeNV
GLAD_API_CALL PFNGLFOGCOORDFORMATNVPROC sf_glad_glFogCoordFormatNV;
#define glFogCoordFormatNV sf_glad_glFogCoordFormatNV
GLAD_API_CALL PFNGLFOGCOORDPOINTERPROC sf_glad_glFogCoordPointer;
#define glFogCoordPointer sf_glad_glFogCoordPointer
GLAD_API_CALL PFNGLFOGCOORDPOINTEREXTPROC sf_glad_glFogCoordPointerEXT;
#define glFogCoordPointerEXT sf_glad_glFogCoordPointerEXT
GLAD_API_CALL PFNGLFOGCOORDPOINTERLISTIBMPROC sf_glad_glFogCoordPointerListIBM;
#define glFogCoordPointerListIBM sf_glad_glFogCoordPointerListIBM
GLAD_API_CALL PFNGLFOGCOORDDPROC sf_glad_glFogCoordd;
#define glFogCoordd sf_glad_glFogCoordd
GLAD_API_CALL PFNGLFOGCOORDDEXTPROC sf_glad_glFogCoorddEXT;
#define glFogCoorddEXT sf_glad_glFogCoorddEXT
GLAD_API_CALL PFNGLFOGCOORDDVPROC sf_glad_glFogCoorddv;
#define glFogCoorddv sf_glad_glFogCoorddv
GLAD_API_CALL PFNGLFOGCOORDDVEXTPROC sf_glad_glFogCoorddvEXT;
#define glFogCoorddvEXT sf_glad_glFogCoorddvEXT
GLAD_API_CALL PFNGLFOGCOORDFPROC sf_glad_glFogCoordf;
#define glFogCoordf sf_glad_glFogCoordf
GLAD_API_CALL PFNGLFOGCOORDFEXTPROC sf_glad_glFogCoordfEXT;
#define glFogCoordfEXT sf_glad_glFogCoordfEXT
GLAD_API_CALL PFNGLFOGCOORDFVPROC sf_glad_glFogCoordfv;
#define glFogCoordfv sf_glad_glFogCoordfv
GLAD_API_CALL PFNGLFOGCOORDFVEXTPROC sf_glad_glFogCoordfvEXT;
#define glFogCoordfvEXT sf_glad_glFogCoordfvEXT
GLAD_API_CALL PFNGLFOGCOORDHNVPROC sf_glad_glFogCoordhNV;
#define glFogCoordhNV sf_glad_glFogCoordhNV
GLAD_API_CALL PFNGLFOGCOORDHVNVPROC sf_glad_glFogCoordhvNV;
#define glFogCoordhvNV sf_glad_glFogCoordhvNV
GLAD_API_CALL PFNGLFOGFUNCSGISPROC sf_glad_glFogFuncSGIS;
#define glFogFuncSGIS sf_glad_glFogFuncSGIS
GLAD_API_CALL PFNGLFOGFPROC sf_glad_glFogf;
#define glFogf sf_glad_glFogf
GLAD_API_CALL PFNGLFOGFVPROC sf_glad_glFogfv;
#define glFogfv sf_glad_glFogfv
GLAD_API_CALL PFNGLFOGIPROC sf_glad_glFogi;
#define glFogi sf_glad_glFogi
GLAD_API_CALL PFNGLFOGIVPROC sf_glad_glFogiv;
#define glFogiv sf_glad_glFogiv
GLAD_API_CALL PFNGLFOGXOESPROC sf_glad_glFogxOES;
#define glFogxOES sf_glad_glFogxOES
GLAD_API_CALL PFNGLFOGXVOESPROC sf_glad_glFogxvOES;
#define glFogxvOES sf_glad_glFogxvOES
GLAD_API_CALL PFNGLFRAGMENTCOLORMATERIALSGIXPROC sf_glad_glFragmentColorMaterialSGIX;
#define glFragmentColorMaterialSGIX sf_glad_glFragmentColorMaterialSGIX
GLAD_API_CALL PFNGLFRAGMENTCOVERAGECOLORNVPROC sf_glad_glFragmentCoverageColorNV;
#define glFragmentCoverageColorNV sf_glad_glFragmentCoverageColorNV
GLAD_API_CALL PFNGLFRAGMENTLIGHTMODELFSGIXPROC sf_glad_glFragmentLightModelfSGIX;
#define glFragmentLightModelfSGIX sf_glad_glFragmentLightModelfSGIX
GLAD_API_CALL PFNGLFRAGMENTLIGHTMODELFVSGIXPROC sf_glad_glFragmentLightModelfvSGIX;
#define glFragmentLightModelfvSGIX sf_glad_glFragmentLightModelfvSGIX
GLAD_API_CALL PFNGLFRAGMENTLIGHTMODELISGIXPROC sf_glad_glFragmentLightModeliSGIX;
#define glFragmentLightModeliSGIX sf_glad_glFragmentLightModeliSGIX
GLAD_API_CALL PFNGLFRAGMENTLIGHTMODELIVSGIXPROC sf_glad_glFragmentLightModelivSGIX;
#define glFragmentLightModelivSGIX sf_glad_glFragmentLightModelivSGIX
GLAD_API_CALL PFNGLFRAGMENTLIGHTFSGIXPROC sf_glad_glFragmentLightfSGIX;
#define glFragmentLightfSGIX sf_glad_glFragmentLightfSGIX
GLAD_API_CALL PFNGLFRAGMENTLIGHTFVSGIXPROC sf_glad_glFragmentLightfvSGIX;
#define glFragmentLightfvSGIX sf_glad_glFragmentLightfvSGIX
GLAD_API_CALL PFNGLFRAGMENTLIGHTISGIXPROC sf_glad_glFragmentLightiSGIX;
#define glFragmentLightiSGIX sf_glad_glFragmentLightiSGIX
GLAD_API_CALL PFNGLFRAGMENTLIGHTIVSGIXPROC sf_glad_glFragmentLightivSGIX;
#define glFragmentLightivSGIX sf_glad_glFragmentLightivSGIX
GLAD_API_CALL PFNGLFRAGMENTMATERIALFSGIXPROC sf_glad_glFragmentMaterialfSGIX;
#define glFragmentMaterialfSGIX sf_glad_glFragmentMaterialfSGIX
GLAD_API_CALL PFNGLFRAGMENTMATERIALFVSGIXPROC sf_glad_glFragmentMaterialfvSGIX;
#define glFragmentMaterialfvSGIX sf_glad_glFragmentMaterialfvSGIX
GLAD_API_CALL PFNGLFRAGMENTMATERIALISGIXPROC sf_glad_glFragmentMaterialiSGIX;
#define glFragmentMaterialiSGIX sf_glad_glFragmentMaterialiSGIX
GLAD_API_CALL PFNGLFRAGMENTMATERIALIVSGIXPROC sf_glad_glFragmentMaterialivSGIX;
#define glFragmentMaterialivSGIX sf_glad_glFragmentMaterialivSGIX
GLAD_API_CALL PFNGLFRAMETERMINATORGREMEDYPROC sf_glad_glFrameTerminatorGREMEDY;
#define glFrameTerminatorGREMEDY sf_glad_glFrameTerminatorGREMEDY
GLAD_API_CALL PFNGLFRAMEZOOMSGIXPROC sf_glad_glFrameZoomSGIX;
#define glFrameZoomSGIX sf_glad_glFrameZoomSGIX
GLAD_API_CALL PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC sf_glad_glFramebufferDrawBufferEXT;
#define glFramebufferDrawBufferEXT sf_glad_glFramebufferDrawBufferEXT
GLAD_API_CALL PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC sf_glad_glFramebufferDrawBuffersEXT;
#define glFramebufferDrawBuffersEXT sf_glad_glFramebufferDrawBuffersEXT
GLAD_API_CALL PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC sf_glad_glFramebufferFetchBarrierEXT;
#define glFramebufferFetchBarrierEXT sf_glad_glFramebufferFetchBarrierEXT
GLAD_API_CALL PFNGLFRAMEBUFFERPARAMETERIPROC sf_glad_glFramebufferParameteri;
#define glFramebufferParameteri sf_glad_glFramebufferParameteri
GLAD_API_CALL PFNGLFRAMEBUFFERPARAMETERIMESAPROC sf_glad_glFramebufferParameteriMESA;
#define glFramebufferParameteriMESA sf_glad_glFramebufferParameteriMESA
GLAD_API_CALL PFNGLFRAMEBUFFERREADBUFFEREXTPROC sf_glad_glFramebufferReadBufferEXT;
#define glFramebufferReadBufferEXT sf_glad_glFramebufferReadBufferEXT
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFERPROC sf_glad_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer sf_glad_glFramebufferRenderbuffer
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC sf_glad_glFramebufferRenderbufferEXT;
#define glFramebufferRenderbufferEXT sf_glad_glFramebufferRenderbufferEXT
GLAD_API_CALL PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC sf_glad_glFramebufferSampleLocationsfvARB;
#define glFramebufferSampleLocationsfvARB sf_glad_glFramebufferSampleLocationsfvARB
GLAD_API_CALL PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC sf_glad_glFramebufferSampleLocationsfvNV;
#define glFramebufferSampleLocationsfvNV sf_glad_glFramebufferSampleLocationsfvNV
GLAD_API_CALL PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC sf_glad_glFramebufferSamplePositionsfvAMD;
#define glFramebufferSamplePositionsfvAMD sf_glad_glFramebufferSamplePositionsfvAMD
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREPROC sf_glad_glFramebufferTexture;
#define glFramebufferTexture sf_glad_glFramebufferTexture
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DPROC sf_glad_glFramebufferTexture1D;
#define glFramebufferTexture1D sf_glad_glFramebufferTexture1D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DEXTPROC sf_glad_glFramebufferTexture1DEXT;
#define glFramebufferTexture1DEXT sf_glad_glFramebufferTexture1DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DPROC sf_glad_glFramebufferTexture2D;
#define glFramebufferTexture2D sf_glad_glFramebufferTexture2D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DEXTPROC sf_glad_glFramebufferTexture2DEXT;
#define glFramebufferTexture2DEXT sf_glad_glFramebufferTexture2DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DPROC sf_glad_glFramebufferTexture3D;
#define glFramebufferTexture3D sf_glad_glFramebufferTexture3D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DEXTPROC sf_glad_glFramebufferTexture3DEXT;
#define glFramebufferTexture3DEXT sf_glad_glFramebufferTexture3DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREARBPROC sf_glad_glFramebufferTextureARB;
#define glFramebufferTextureARB sf_glad_glFramebufferTextureARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREEXTPROC sf_glad_glFramebufferTextureEXT;
#define glFramebufferTextureEXT sf_glad_glFramebufferTextureEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREFACEARBPROC sf_glad_glFramebufferTextureFaceARB;
#define glFramebufferTextureFaceARB sf_glad_glFramebufferTextureFaceARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC sf_glad_glFramebufferTextureFaceEXT;
#define glFramebufferTextureFaceEXT sf_glad_glFramebufferTextureFaceEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERPROC sf_glad_glFramebufferTextureLayer;
#define glFramebufferTextureLayer sf_glad_glFramebufferTextureLayer
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERARBPROC sf_glad_glFramebufferTextureLayerARB;
#define glFramebufferTextureLayerARB sf_glad_glFramebufferTextureLayerARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC sf_glad_glFramebufferTextureLayerEXT;
#define glFramebufferTextureLayerEXT sf_glad_glFramebufferTextureLayerEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC sf_glad_glFramebufferTextureMultiviewOVR;
#define glFramebufferTextureMultiviewOVR sf_glad_glFramebufferTextureMultiviewOVR
GLAD_API_CALL PFNGLFREEOBJECTBUFFERATIPROC sf_glad_glFreeObjectBufferATI;
#define glFreeObjectBufferATI sf_glad_glFreeObjectBufferATI
GLAD_API_CALL PFNGLFRONTFACEPROC sf_glad_glFrontFace;
#define glFrontFace sf_glad_glFrontFace
GLAD_API_CALL PFNGLFRUSTUMPROC sf_glad_glFrustum;
#define glFrustum sf_glad_glFrustum
GLAD_API_CALL PFNGLFRUSTUMFOESPROC sf_glad_glFrustumfOES;
#define glFrustumfOES sf_glad_glFrustumfOES
GLAD_API_CALL PFNGLFRUSTUMXOESPROC sf_glad_glFrustumxOES;
#define glFrustumxOES sf_glad_glFrustumxOES
GLAD_API_CALL PFNGLGENASYNCMARKERSSGIXPROC sf_glad_glGenAsyncMarkersSGIX;
#define glGenAsyncMarkersSGIX sf_glad_glGenAsyncMarkersSGIX
GLAD_API_CALL PFNGLGENBUFFERSPROC sf_glad_glGenBuffers;
#define glGenBuffers sf_glad_glGenBuffers
GLAD_API_CALL PFNGLGENBUFFERSARBPROC sf_glad_glGenBuffersARB;
#define glGenBuffersARB sf_glad_glGenBuffersARB
GLAD_API_CALL PFNGLGENFENCESAPPLEPROC sf_glad_glGenFencesAPPLE;
#define glGenFencesAPPLE sf_glad_glGenFencesAPPLE
GLAD_API_CALL PFNGLGENFENCESNVPROC sf_glad_glGenFencesNV;
#define glGenFencesNV sf_glad_glGenFencesNV
GLAD_API_CALL PFNGLGENFRAGMENTSHADERSATIPROC sf_glad_glGenFragmentShadersATI;
#define glGenFragmentShadersATI sf_glad_glGenFragmentShadersATI
GLAD_API_CALL PFNGLGENFRAMEBUFFERSPROC sf_glad_glGenFramebuffers;
#define glGenFramebuffers sf_glad_glGenFramebuffers
GLAD_API_CALL PFNGLGENFRAMEBUFFERSEXTPROC sf_glad_glGenFramebuffersEXT;
#define glGenFramebuffersEXT sf_glad_glGenFramebuffersEXT
GLAD_API_CALL PFNGLGENLISTSPROC sf_glad_glGenLists;
#define glGenLists sf_glad_glGenLists
GLAD_API_CALL PFNGLGENNAMESAMDPROC sf_glad_glGenNamesAMD;
#define glGenNamesAMD sf_glad_glGenNamesAMD
GLAD_API_CALL PFNGLGENOCCLUSIONQUERIESNVPROC sf_glad_glGenOcclusionQueriesNV;
#define glGenOcclusionQueriesNV sf_glad_glGenOcclusionQueriesNV
GLAD_API_CALL PFNGLGENPATHSNVPROC sf_glad_glGenPathsNV;
#define glGenPathsNV sf_glad_glGenPathsNV
GLAD_API_CALL PFNGLGENPERFMONITORSAMDPROC sf_glad_glGenPerfMonitorsAMD;
#define glGenPerfMonitorsAMD sf_glad_glGenPerfMonitorsAMD
GLAD_API_CALL PFNGLGENPROGRAMPIPELINESPROC sf_glad_glGenProgramPipelines;
#define glGenProgramPipelines sf_glad_glGenProgramPipelines
GLAD_API_CALL PFNGLGENPROGRAMSARBPROC sf_glad_glGenProgramsARB;
#define glGenProgramsARB sf_glad_glGenProgramsARB
GLAD_API_CALL PFNGLGENPROGRAMSNVPROC sf_glad_glGenProgramsNV;
#define glGenProgramsNV sf_glad_glGenProgramsNV
GLAD_API_CALL PFNGLGENQUERIESPROC sf_glad_glGenQueries;
#define glGenQueries sf_glad_glGenQueries
GLAD_API_CALL PFNGLGENQUERIESARBPROC sf_glad_glGenQueriesARB;
#define glGenQueriesARB sf_glad_glGenQueriesARB
GLAD_API_CALL PFNGLGENQUERYRESOURCETAGNVPROC sf_glad_glGenQueryResourceTagNV;
#define glGenQueryResourceTagNV sf_glad_glGenQueryResourceTagNV
GLAD_API_CALL PFNGLGENRENDERBUFFERSPROC sf_glad_glGenRenderbuffers;
#define glGenRenderbuffers sf_glad_glGenRenderbuffers
GLAD_API_CALL PFNGLGENRENDERBUFFERSEXTPROC sf_glad_glGenRenderbuffersEXT;
#define glGenRenderbuffersEXT sf_glad_glGenRenderbuffersEXT
GLAD_API_CALL PFNGLGENSAMPLERSPROC sf_glad_glGenSamplers;
#define glGenSamplers sf_glad_glGenSamplers
GLAD_API_CALL PFNGLGENSEMAPHORESEXTPROC sf_glad_glGenSemaphoresEXT;
#define glGenSemaphoresEXT sf_glad_glGenSemaphoresEXT
GLAD_API_CALL PFNGLGENSYMBOLSEXTPROC sf_glad_glGenSymbolsEXT;
#define glGenSymbolsEXT sf_glad_glGenSymbolsEXT
GLAD_API_CALL PFNGLGENTEXTURESPROC sf_glad_glGenTextures;
#define glGenTextures sf_glad_glGenTextures
GLAD_API_CALL PFNGLGENTEXTURESEXTPROC sf_glad_glGenTexturesEXT;
#define glGenTexturesEXT sf_glad_glGenTexturesEXT
GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSPROC sf_glad_glGenTransformFeedbacks;
#define glGenTransformFeedbacks sf_glad_glGenTransformFeedbacks
GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSNVPROC sf_glad_glGenTransformFeedbacksNV;
#define glGenTransformFeedbacksNV sf_glad_glGenTransformFeedbacksNV
GLAD_API_CALL PFNGLGENVERTEXARRAYSPROC sf_glad_glGenVertexArrays;
#define glGenVertexArrays sf_glad_glGenVertexArrays
GLAD_API_CALL PFNGLGENVERTEXARRAYSAPPLEPROC sf_glad_glGenVertexArraysAPPLE;
#define glGenVertexArraysAPPLE sf_glad_glGenVertexArraysAPPLE
GLAD_API_CALL PFNGLGENVERTEXSHADERSEXTPROC sf_glad_glGenVertexShadersEXT;
#define glGenVertexShadersEXT sf_glad_glGenVertexShadersEXT
GLAD_API_CALL PFNGLGENERATEMIPMAPPROC sf_glad_glGenerateMipmap;
#define glGenerateMipmap sf_glad_glGenerateMipmap
GLAD_API_CALL PFNGLGENERATEMIPMAPEXTPROC sf_glad_glGenerateMipmapEXT;
#define glGenerateMipmapEXT sf_glad_glGenerateMipmapEXT
GLAD_API_CALL PFNGLGENERATEMULTITEXMIPMAPEXTPROC sf_glad_glGenerateMultiTexMipmapEXT;
#define glGenerateMultiTexMipmapEXT sf_glad_glGenerateMultiTexMipmapEXT
GLAD_API_CALL PFNGLGENERATETEXTUREMIPMAPPROC sf_glad_glGenerateTextureMipmap;
#define glGenerateTextureMipmap sf_glad_glGenerateTextureMipmap
GLAD_API_CALL PFNGLGENERATETEXTUREMIPMAPEXTPROC sf_glad_glGenerateTextureMipmapEXT;
#define glGenerateTextureMipmapEXT sf_glad_glGenerateTextureMipmapEXT
GLAD_API_CALL PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC sf_glad_glGetActiveAtomicCounterBufferiv;
#define glGetActiveAtomicCounterBufferiv sf_glad_glGetActiveAtomicCounterBufferiv
GLAD_API_CALL PFNGLGETACTIVEATTRIBPROC sf_glad_glGetActiveAttrib;
#define glGetActiveAttrib sf_glad_glGetActiveAttrib
GLAD_API_CALL PFNGLGETACTIVEATTRIBARBPROC sf_glad_glGetActiveAttribARB;
#define glGetActiveAttribARB sf_glad_glGetActiveAttribARB
GLAD_API_CALL PFNGLGETACTIVESUBROUTINENAMEPROC sf_glad_glGetActiveSubroutineName;
#define glGetActiveSubroutineName sf_glad_glGetActiveSubroutineName
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC sf_glad_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName sf_glad_glGetActiveSubroutineUniformName
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC sf_glad_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv sf_glad_glGetActiveSubroutineUniformiv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMPROC sf_glad_glGetActiveUniform;
#define glGetActiveUniform sf_glad_glGetActiveUniform
GLAD_API_CALL PFNGLGETACTIVEUNIFORMARBPROC sf_glad_glGetActiveUniformARB;
#define glGetActiveUniformARB sf_glad_glGetActiveUniformARB
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC sf_glad_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName sf_glad_glGetActiveUniformBlockName
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKIVPROC sf_glad_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv sf_glad_glGetActiveUniformBlockiv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMNAMEPROC sf_glad_glGetActiveUniformName;
#define glGetActiveUniformName sf_glad_glGetActiveUniformName
GLAD_API_CALL PFNGLGETACTIVEUNIFORMSIVPROC sf_glad_glGetActiveUniformsiv;
#define glGetActiveUniformsiv sf_glad_glGetActiveUniformsiv
GLAD_API_CALL PFNGLGETACTIVEVARYINGNVPROC sf_glad_glGetActiveVaryingNV;
#define glGetActiveVaryingNV sf_glad_glGetActiveVaryingNV
GLAD_API_CALL PFNGLGETARRAYOBJECTFVATIPROC sf_glad_glGetArrayObjectfvATI;
#define glGetArrayObjectfvATI sf_glad_glGetArrayObjectfvATI
GLAD_API_CALL PFNGLGETARRAYOBJECTIVATIPROC sf_glad_glGetArrayObjectivATI;
#define glGetArrayObjectivATI sf_glad_glGetArrayObjectivATI
GLAD_API_CALL PFNGLGETATTACHEDOBJECTSARBPROC sf_glad_glGetAttachedObjectsARB;
#define glGetAttachedObjectsARB sf_glad_glGetAttachedObjectsARB
GLAD_API_CALL PFNGLGETATTACHEDSHADERSPROC sf_glad_glGetAttachedShaders;
#define glGetAttachedShaders sf_glad_glGetAttachedShaders
GLAD_API_CALL PFNGLGETATTRIBLOCATIONPROC sf_glad_glGetAttribLocation;
#define glGetAttribLocation sf_glad_glGetAttribLocation
GLAD_API_CALL PFNGLGETATTRIBLOCATIONARBPROC sf_glad_glGetAttribLocationARB;
#define glGetAttribLocationARB sf_glad_glGetAttribLocationARB
GLAD_API_CALL PFNGLGETBOOLEANINDEXEDVEXTPROC sf_glad_glGetBooleanIndexedvEXT;
#define glGetBooleanIndexedvEXT sf_glad_glGetBooleanIndexedvEXT
GLAD_API_CALL PFNGLGETBOOLEANI_VPROC sf_glad_glGetBooleani_v;
#define glGetBooleani_v sf_glad_glGetBooleani_v
GLAD_API_CALL PFNGLGETBOOLEANVPROC sf_glad_glGetBooleanv;
#define glGetBooleanv sf_glad_glGetBooleanv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERI64VPROC sf_glad_glGetBufferParameteri64v;
#define glGetBufferParameteri64v sf_glad_glGetBufferParameteri64v
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVPROC sf_glad_glGetBufferParameteriv;
#define glGetBufferParameteriv sf_glad_glGetBufferParameteriv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVARBPROC sf_glad_glGetBufferParameterivARB;
#define glGetBufferParameterivARB sf_glad_glGetBufferParameterivARB
GLAD_API_CALL PFNGLGETBUFFERPARAMETERUI64VNVPROC sf_glad_glGetBufferParameterui64vNV;
#define glGetBufferParameterui64vNV sf_glad_glGetBufferParameterui64vNV
GLAD_API_CALL PFNGLGETBUFFERPOINTERVPROC sf_glad_glGetBufferPointerv;
#define glGetBufferPointerv sf_glad_glGetBufferPointerv
GLAD_API_CALL PFNGLGETBUFFERPOINTERVARBPROC sf_glad_glGetBufferPointervARB;
#define glGetBufferPointervARB sf_glad_glGetBufferPointervARB
GLAD_API_CALL PFNGLGETBUFFERSUBDATAPROC sf_glad_glGetBufferSubData;
#define glGetBufferSubData sf_glad_glGetBufferSubData
GLAD_API_CALL PFNGLGETBUFFERSUBDATAARBPROC sf_glad_glGetBufferSubDataARB;
#define glGetBufferSubDataARB sf_glad_glGetBufferSubDataARB
GLAD_API_CALL PFNGLGETCLIPPLANEPROC sf_glad_glGetClipPlane;
#define glGetClipPlane sf_glad_glGetClipPlane
GLAD_API_CALL PFNGLGETCLIPPLANEFOESPROC sf_glad_glGetClipPlanefOES;
#define glGetClipPlanefOES sf_glad_glGetClipPlanefOES
GLAD_API_CALL PFNGLGETCLIPPLANEXOESPROC sf_glad_glGetClipPlanexOES;
#define glGetClipPlanexOES sf_glad_glGetClipPlanexOES
GLAD_API_CALL PFNGLGETCOLORTABLEPROC sf_glad_glGetColorTable;
#define glGetColorTable sf_glad_glGetColorTable
GLAD_API_CALL PFNGLGETCOLORTABLEEXTPROC sf_glad_glGetColorTableEXT;
#define glGetColorTableEXT sf_glad_glGetColorTableEXT
GLAD_API_CALL PFNGLGETCOLORTABLEPARAMETERFVPROC sf_glad_glGetColorTableParameterfv;
#define glGetColorTableParameterfv sf_glad_glGetColorTableParameterfv
GLAD_API_CALL PFNGLGETCOLORTABLEPARAMETERFVEXTPROC sf_glad_glGetColorTableParameterfvEXT;
#define glGetColorTableParameterfvEXT sf_glad_glGetColorTableParameterfvEXT
GLAD_API_CALL PFNGLGETCOLORTABLEPARAMETERFVSGIPROC sf_glad_glGetColorTableParameterfvSGI;
#define glGetColorTableParameterfvSGI sf_glad_glGetColorTableParameterfvSGI
GLAD_API_CALL PFNGLGETCOLORTABLEPARAMETERIVPROC sf_glad_glGetColorTableParameteriv;
#define glGetColorTableParameteriv sf_glad_glGetColorTableParameteriv
GLAD_API_CALL PFNGLGETCOLORTABLEPARAMETERIVEXTPROC sf_glad_glGetColorTableParameterivEXT;
#define glGetColorTableParameterivEXT sf_glad_glGetColorTableParameterivEXT
GLAD_API_CALL PFNGLGETCOLORTABLEPARAMETERIVSGIPROC sf_glad_glGetColorTableParameterivSGI;
#define glGetColorTableParameterivSGI sf_glad_glGetColorTableParameterivSGI
GLAD_API_CALL PFNGLGETCOLORTABLESGIPROC sf_glad_glGetColorTableSGI;
#define glGetColorTableSGI sf_glad_glGetColorTableSGI
GLAD_API_CALL PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC sf_glad_glGetCombinerInputParameterfvNV;
#define glGetCombinerInputParameterfvNV sf_glad_glGetCombinerInputParameterfvNV
GLAD_API_CALL PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC sf_glad_glGetCombinerInputParameterivNV;
#define glGetCombinerInputParameterivNV sf_glad_glGetCombinerInputParameterivNV
GLAD_API_CALL PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC sf_glad_glGetCombinerOutputParameterfvNV;
#define glGetCombinerOutputParameterfvNV sf_glad_glGetCombinerOutputParameterfvNV
GLAD_API_CALL PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC sf_glad_glGetCombinerOutputParameterivNV;
#define glGetCombinerOutputParameterivNV sf_glad_glGetCombinerOutputParameterivNV
GLAD_API_CALL PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC sf_glad_glGetCombinerStageParameterfvNV;
#define glGetCombinerStageParameterfvNV sf_glad_glGetCombinerStageParameterfvNV
GLAD_API_CALL PFNGLGETCOMMANDHEADERNVPROC sf_glad_glGetCommandHeaderNV;
#define glGetCommandHeaderNV sf_glad_glGetCommandHeaderNV
GLAD_API_CALL PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC sf_glad_glGetCompressedMultiTexImageEXT;
#define glGetCompressedMultiTexImageEXT sf_glad_glGetCompressedMultiTexImageEXT
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEPROC sf_glad_glGetCompressedTexImage;
#define glGetCompressedTexImage sf_glad_glGetCompressedTexImage
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEARBPROC sf_glad_glGetCompressedTexImageARB;
#define glGetCompressedTexImageARB sf_glad_glGetCompressedTexImageARB
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC sf_glad_glGetCompressedTextureImage;
#define glGetCompressedTextureImage sf_glad_glGetCompressedTextureImage
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC sf_glad_glGetCompressedTextureImageEXT;
#define glGetCompressedTextureImageEXT sf_glad_glGetCompressedTextureImageEXT
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC sf_glad_glGetCompressedTextureSubImage;
#define glGetCompressedTextureSubImage sf_glad_glGetCompressedTextureSubImage
GLAD_API_CALL PFNGLGETCONVOLUTIONFILTERPROC sf_glad_glGetConvolutionFilter;
#define glGetConvolutionFilter sf_glad_glGetConvolutionFilter
GLAD_API_CALL PFNGLGETCONVOLUTIONFILTEREXTPROC sf_glad_glGetConvolutionFilterEXT;
#define glGetConvolutionFilterEXT sf_glad_glGetConvolutionFilterEXT
GLAD_API_CALL PFNGLGETCONVOLUTIONPARAMETERFVPROC sf_glad_glGetConvolutionParameterfv;
#define glGetConvolutionParameterfv sf_glad_glGetConvolutionParameterfv
GLAD_API_CALL PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC sf_glad_glGetConvolutionParameterfvEXT;
#define glGetConvolutionParameterfvEXT sf_glad_glGetConvolutionParameterfvEXT
GLAD_API_CALL PFNGLGETCONVOLUTIONPARAMETERIVPROC sf_glad_glGetConvolutionParameteriv;
#define glGetConvolutionParameteriv sf_glad_glGetConvolutionParameteriv
GLAD_API_CALL PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC sf_glad_glGetConvolutionParameterivEXT;
#define glGetConvolutionParameterivEXT sf_glad_glGetConvolutionParameterivEXT
GLAD_API_CALL PFNGLGETCONVOLUTIONPARAMETERXVOESPROC sf_glad_glGetConvolutionParameterxvOES;
#define glGetConvolutionParameterxvOES sf_glad_glGetConvolutionParameterxvOES
GLAD_API_CALL PFNGLGETCOVERAGEMODULATIONTABLENVPROC sf_glad_glGetCoverageModulationTableNV;
#define glGetCoverageModulationTableNV sf_glad_glGetCoverageModulationTableNV
GLAD_API_CALL PFNGLGETDEBUGMESSAGELOGPROC sf_glad_glGetDebugMessageLog;
#define glGetDebugMessageLog sf_glad_glGetDebugMessageLog
GLAD_API_CALL PFNGLGETDEBUGMESSAGELOGAMDPROC sf_glad_glGetDebugMessageLogAMD;
#define glGetDebugMessageLogAMD sf_glad_glGetDebugMessageLogAMD
GLAD_API_CALL PFNGLGETDEBUGMESSAGELOGARBPROC sf_glad_glGetDebugMessageLogARB;
#define glGetDebugMessageLogARB sf_glad_glGetDebugMessageLogARB
GLAD_API_CALL PFNGLGETDETAILTEXFUNCSGISPROC sf_glad_glGetDetailTexFuncSGIS;
#define glGetDetailTexFuncSGIS sf_glad_glGetDetailTexFuncSGIS
GLAD_API_CALL PFNGLGETDOUBLEINDEXEDVEXTPROC sf_glad_glGetDoubleIndexedvEXT;
#define glGetDoubleIndexedvEXT sf_glad_glGetDoubleIndexedvEXT
GLAD_API_CALL PFNGLGETDOUBLEI_VPROC sf_glad_glGetDoublei_v;
#define glGetDoublei_v sf_glad_glGetDoublei_v
GLAD_API_CALL PFNGLGETDOUBLEI_VEXTPROC sf_glad_glGetDoublei_vEXT;
#define glGetDoublei_vEXT sf_glad_glGetDoublei_vEXT
GLAD_API_CALL PFNGLGETDOUBLEVPROC sf_glad_glGetDoublev;
#define glGetDoublev sf_glad_glGetDoublev
GLAD_API_CALL PFNGLGETERRORPROC sf_glad_glGetError;
#define glGetError sf_glad_glGetError
GLAD_API_CALL PFNGLGETFENCEIVNVPROC sf_glad_glGetFenceivNV;
#define glGetFenceivNV sf_glad_glGetFenceivNV
GLAD_API_CALL PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC sf_glad_glGetFinalCombinerInputParameterfvNV;
#define glGetFinalCombinerInputParameterfvNV sf_glad_glGetFinalCombinerInputParameterfvNV
GLAD_API_CALL PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC sf_glad_glGetFinalCombinerInputParameterivNV;
#define glGetFinalCombinerInputParameterivNV sf_glad_glGetFinalCombinerInputParameterivNV
GLAD_API_CALL PFNGLGETFIRSTPERFQUERYIDINTELPROC sf_glad_glGetFirstPerfQueryIdINTEL;
#define glGetFirstPerfQueryIdINTEL sf_glad_glGetFirstPerfQueryIdINTEL
GLAD_API_CALL PFNGLGETFIXEDVOESPROC sf_glad_glGetFixedvOES;
#define glGetFixedvOES sf_glad_glGetFixedvOES
GLAD_API_CALL PFNGLGETFLOATINDEXEDVEXTPROC sf_glad_glGetFloatIndexedvEXT;
#define glGetFloatIndexedvEXT sf_glad_glGetFloatIndexedvEXT
GLAD_API_CALL PFNGLGETFLOATI_VPROC sf_glad_glGetFloati_v;
#define glGetFloati_v sf_glad_glGetFloati_v
GLAD_API_CALL PFNGLGETFLOATI_VEXTPROC sf_glad_glGetFloati_vEXT;
#define glGetFloati_vEXT sf_glad_glGetFloati_vEXT
GLAD_API_CALL PFNGLGETFLOATVPROC sf_glad_glGetFloatv;
#define glGetFloatv sf_glad_glGetFloatv
GLAD_API_CALL PFNGLGETFOGFUNCSGISPROC sf_glad_glGetFogFuncSGIS;
#define glGetFogFuncSGIS sf_glad_glGetFogFuncSGIS
GLAD_API_CALL PFNGLGETFRAGDATAINDEXPROC sf_glad_glGetFragDataIndex;
#define glGetFragDataIndex sf_glad_glGetFragDataIndex
GLAD_API_CALL PFNGLGETFRAGDATALOCATIONPROC sf_glad_glGetFragDataLocation;
#define glGetFragDataLocation sf_glad_glGetFragDataLocation
GLAD_API_CALL PFNGLGETFRAGDATALOCATIONEXTPROC sf_glad_glGetFragDataLocationEXT;
#define glGetFragDataLocationEXT sf_glad_glGetFragDataLocationEXT
GLAD_API_CALL PFNGLGETFRAGMENTLIGHTFVSGIXPROC sf_glad_glGetFragmentLightfvSGIX;
#define glGetFragmentLightfvSGIX sf_glad_glGetFragmentLightfvSGIX
GLAD_API_CALL PFNGLGETFRAGMENTLIGHTIVSGIXPROC sf_glad_glGetFragmentLightivSGIX;
#define glGetFragmentLightivSGIX sf_glad_glGetFragmentLightivSGIX
GLAD_API_CALL PFNGLGETFRAGMENTMATERIALFVSGIXPROC sf_glad_glGetFragmentMaterialfvSGIX;
#define glGetFragmentMaterialfvSGIX sf_glad_glGetFragmentMaterialfvSGIX
GLAD_API_CALL PFNGLGETFRAGMENTMATERIALIVSGIXPROC sf_glad_glGetFragmentMaterialivSGIX;
#define glGetFragmentMaterialivSGIX sf_glad_glGetFragmentMaterialivSGIX
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC sf_glad_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv sf_glad_glGetFramebufferAttachmentParameteriv
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC sf_glad_glGetFramebufferAttachmentParameterivEXT;
#define glGetFramebufferAttachmentParameterivEXT sf_glad_glGetFramebufferAttachmentParameterivEXT
GLAD_API_CALL PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC sf_glad_glGetFramebufferParameterfvAMD;
#define glGetFramebufferParameterfvAMD sf_glad_glGetFramebufferParameterfvAMD
GLAD_API_CALL PFNGLGETFRAMEBUFFERPARAMETERIVPROC sf_glad_glGetFramebufferParameteriv;
#define glGetFramebufferParameteriv sf_glad_glGetFramebufferParameteriv
GLAD_API_CALL PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC sf_glad_glGetFramebufferParameterivEXT;
#define glGetFramebufferParameterivEXT sf_glad_glGetFramebufferParameterivEXT
GLAD_API_CALL PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC sf_glad_glGetFramebufferParameterivMESA;
#define glGetFramebufferParameterivMESA sf_glad_glGetFramebufferParameterivMESA
GLAD_API_CALL PFNGLGETGRAPHICSRESETSTATUSPROC sf_glad_glGetGraphicsResetStatus;
#define glGetGraphicsResetStatus sf_glad_glGetGraphicsResetStatus
GLAD_API_CALL PFNGLGETGRAPHICSRESETSTATUSARBPROC sf_glad_glGetGraphicsResetStatusARB;
#define glGetGraphicsResetStatusARB sf_glad_glGetGraphicsResetStatusARB
GLAD_API_CALL PFNGLGETHANDLEARBPROC sf_glad_glGetHandleARB;
#define glGetHandleARB sf_glad_glGetHandleARB
GLAD_API_CALL PFNGLGETHISTOGRAMPROC sf_glad_glGetHistogram;
#define glGetHistogram sf_glad_glGetHistogram
GLAD_API_CALL PFNGLGETHISTOGRAMEXTPROC sf_glad_glGetHistogramEXT;
#define glGetHistogramEXT sf_glad_glGetHistogramEXT
GLAD_API_CALL PFNGLGETHISTOGRAMPARAMETERFVPROC sf_glad_glGetHistogramParameterfv;
#define glGetHistogramParameterfv sf_glad_glGetHistogramParameterfv
GLAD_API_CALL PFNGLGETHISTOGRAMPARAMETERFVEXTPROC sf_glad_glGetHistogramParameterfvEXT;
#define glGetHistogramParameterfvEXT sf_glad_glGetHistogramParameterfvEXT
GLAD_API_CALL PFNGLGETHISTOGRAMPARAMETERIVPROC sf_glad_glGetHistogramParameteriv;
#define glGetHistogramParameteriv sf_glad_glGetHistogramParameteriv
GLAD_API_CALL PFNGLGETHISTOGRAMPARAMETERIVEXTPROC sf_glad_glGetHistogramParameterivEXT;
#define glGetHistogramParameterivEXT sf_glad_glGetHistogramParameterivEXT
GLAD_API_CALL PFNGLGETHISTOGRAMPARAMETERXVOESPROC sf_glad_glGetHistogramParameterxvOES;
#define glGetHistogramParameterxvOES sf_glad_glGetHistogramParameterxvOES
GLAD_API_CALL PFNGLGETIMAGEHANDLEARBPROC sf_glad_glGetImageHandleARB;
#define glGetImageHandleARB sf_glad_glGetImageHandleARB
GLAD_API_CALL PFNGLGETIMAGEHANDLENVPROC sf_glad_glGetImageHandleNV;
#define glGetImageHandleNV sf_glad_glGetImageHandleNV
GLAD_API_CALL PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC sf_glad_glGetImageTransformParameterfvHP;
#define glGetImageTransformParameterfvHP sf_glad_glGetImageTransformParameterfvHP
GLAD_API_CALL PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC sf_glad_glGetImageTransformParameterivHP;
#define glGetImageTransformParameterivHP sf_glad_glGetImageTransformParameterivHP
GLAD_API_CALL PFNGLGETINFOLOGARBPROC sf_glad_glGetInfoLogARB;
#define glGetInfoLogARB sf_glad_glGetInfoLogARB
GLAD_API_CALL PFNGLGETINSTRUMENTSSGIXPROC sf_glad_glGetInstrumentsSGIX;
#define glGetInstrumentsSGIX sf_glad_glGetInstrumentsSGIX
GLAD_API_CALL PFNGLGETINTEGER64I_VPROC sf_glad_glGetInteger64i_v;
#define glGetInteger64i_v sf_glad_glGetInteger64i_v
GLAD_API_CALL PFNGLGETINTEGER64VPROC sf_glad_glGetInteger64v;
#define glGetInteger64v sf_glad_glGetInteger64v
GLAD_API_CALL PFNGLGETINTEGERINDEXEDVEXTPROC sf_glad_glGetIntegerIndexedvEXT;
#define glGetIntegerIndexedvEXT sf_glad_glGetIntegerIndexedvEXT
GLAD_API_CALL PFNGLGETINTEGERI_VPROC sf_glad_glGetIntegeri_v;
#define glGetIntegeri_v sf_glad_glGetIntegeri_v
GLAD_API_CALL PFNGLGETINTEGERUI64I_VNVPROC sf_glad_glGetIntegerui64i_vNV;
#define glGetIntegerui64i_vNV sf_glad_glGetIntegerui64i_vNV
GLAD_API_CALL PFNGLGETINTEGERUI64VNVPROC sf_glad_glGetIntegerui64vNV;
#define glGetIntegerui64vNV sf_glad_glGetIntegerui64vNV
GLAD_API_CALL PFNGLGETINTEGERVPROC sf_glad_glGetIntegerv;
#define glGetIntegerv sf_glad_glGetIntegerv
GLAD_API_CALL PFNGLGETINTERNALFORMATSAMPLEIVNVPROC sf_glad_glGetInternalformatSampleivNV;
#define glGetInternalformatSampleivNV sf_glad_glGetInternalformatSampleivNV
GLAD_API_CALL PFNGLGETINTERNALFORMATI64VPROC sf_glad_glGetInternalformati64v;
#define glGetInternalformati64v sf_glad_glGetInternalformati64v
GLAD_API_CALL PFNGLGETINTERNALFORMATIVPROC sf_glad_glGetInternalformativ;
#define glGetInternalformativ sf_glad_glGetInternalformativ
GLAD_API_CALL PFNGLGETINVARIANTBOOLEANVEXTPROC sf_glad_glGetInvariantBooleanvEXT;
#define glGetInvariantBooleanvEXT sf_glad_glGetInvariantBooleanvEXT
GLAD_API_CALL PFNGLGETINVARIANTFLOATVEXTPROC sf_glad_glGetInvariantFloatvEXT;
#define glGetInvariantFloatvEXT sf_glad_glGetInvariantFloatvEXT
GLAD_API_CALL PFNGLGETINVARIANTINTEGERVEXTPROC sf_glad_glGetInvariantIntegervEXT;
#define glGetInvariantIntegervEXT sf_glad_glGetInvariantIntegervEXT
GLAD_API_CALL PFNGLGETLIGHTFVPROC sf_glad_glGetLightfv;
#define glGetLightfv sf_glad_glGetLightfv
GLAD_API_CALL PFNGLGETLIGHTIVPROC sf_glad_glGetLightiv;
#define glGetLightiv sf_glad_glGetLightiv
GLAD_API_CALL PFNGLGETLIGHTXOESPROC sf_glad_glGetLightxOES;
#define glGetLightxOES sf_glad_glGetLightxOES
GLAD_API_CALL PFNGLGETLISTPARAMETERFVSGIXPROC sf_glad_glGetListParameterfvSGIX;
#define glGetListParameterfvSGIX sf_glad_glGetListParameterfvSGIX
GLAD_API_CALL PFNGLGETLISTPARAMETERIVSGIXPROC sf_glad_glGetListParameterivSGIX;
#define glGetListParameterivSGIX sf_glad_glGetListParameterivSGIX
GLAD_API_CALL PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC sf_glad_glGetLocalConstantBooleanvEXT;
#define glGetLocalConstantBooleanvEXT sf_glad_glGetLocalConstantBooleanvEXT
GLAD_API_CALL PFNGLGETLOCALCONSTANTFLOATVEXTPROC sf_glad_glGetLocalConstantFloatvEXT;
#define glGetLocalConstantFloatvEXT sf_glad_glGetLocalConstantFloatvEXT
GLAD_API_CALL PFNGLGETLOCALCONSTANTINTEGERVEXTPROC sf_glad_glGetLocalConstantIntegervEXT;
#define glGetLocalConstantIntegervEXT sf_glad_glGetLocalConstantIntegervEXT
GLAD_API_CALL PFNGLGETMAPATTRIBPARAMETERFVNVPROC sf_glad_glGetMapAttribParameterfvNV;
#define glGetMapAttribParameterfvNV sf_glad_glGetMapAttribParameterfvNV
GLAD_API_CALL PFNGLGETMAPATTRIBPARAMETERIVNVPROC sf_glad_glGetMapAttribParameterivNV;
#define glGetMapAttribParameterivNV sf_glad_glGetMapAttribParameterivNV
GLAD_API_CALL PFNGLGETMAPCONTROLPOINTSNVPROC sf_glad_glGetMapControlPointsNV;
#define glGetMapControlPointsNV sf_glad_glGetMapControlPointsNV
GLAD_API_CALL PFNGLGETMAPPARAMETERFVNVPROC sf_glad_glGetMapParameterfvNV;
#define glGetMapParameterfvNV sf_glad_glGetMapParameterfvNV
GLAD_API_CALL PFNGLGETMAPPARAMETERIVNVPROC sf_glad_glGetMapParameterivNV;
#define glGetMapParameterivNV sf_glad_glGetMapParameterivNV
GLAD_API_CALL PFNGLGETMAPDVPROC sf_glad_glGetMapdv;
#define glGetMapdv sf_glad_glGetMapdv
GLAD_API_CALL PFNGLGETMAPFVPROC sf_glad_glGetMapfv;
#define glGetMapfv sf_glad_glGetMapfv
GLAD_API_CALL PFNGLGETMAPIVPROC sf_glad_glGetMapiv;
#define glGetMapiv sf_glad_glGetMapiv
GLAD_API_CALL PFNGLGETMAPXVOESPROC sf_glad_glGetMapxvOES;
#define glGetMapxvOES sf_glad_glGetMapxvOES
GLAD_API_CALL PFNGLGETMATERIALFVPROC sf_glad_glGetMaterialfv;
#define glGetMaterialfv sf_glad_glGetMaterialfv
GLAD_API_CALL PFNGLGETMATERIALIVPROC sf_glad_glGetMaterialiv;
#define glGetMaterialiv sf_glad_glGetMaterialiv
GLAD_API_CALL PFNGLGETMATERIALXOESPROC sf_glad_glGetMaterialxOES;
#define glGetMaterialxOES sf_glad_glGetMaterialxOES
GLAD_API_CALL PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC sf_glad_glGetMemoryObjectDetachedResourcesuivNV;
#define glGetMemoryObjectDetachedResourcesuivNV sf_glad_glGetMemoryObjectDetachedResourcesuivNV
GLAD_API_CALL PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC sf_glad_glGetMemoryObjectParameterivEXT;
#define glGetMemoryObjectParameterivEXT sf_glad_glGetMemoryObjectParameterivEXT
GLAD_API_CALL PFNGLGETMINMAXPROC sf_glad_glGetMinmax;
#define glGetMinmax sf_glad_glGetMinmax
GLAD_API_CALL PFNGLGETMINMAXEXTPROC sf_glad_glGetMinmaxEXT;
#define glGetMinmaxEXT sf_glad_glGetMinmaxEXT
GLAD_API_CALL PFNGLGETMINMAXPARAMETERFVPROC sf_glad_glGetMinmaxParameterfv;
#define glGetMinmaxParameterfv sf_glad_glGetMinmaxParameterfv
GLAD_API_CALL PFNGLGETMINMAXPARAMETERFVEXTPROC sf_glad_glGetMinmaxParameterfvEXT;
#define glGetMinmaxParameterfvEXT sf_glad_glGetMinmaxParameterfvEXT
GLAD_API_CALL PFNGLGETMINMAXPARAMETERIVPROC sf_glad_glGetMinmaxParameteriv;
#define glGetMinmaxParameteriv sf_glad_glGetMinmaxParameteriv
GLAD_API_CALL PFNGLGETMINMAXPARAMETERIVEXTPROC sf_glad_glGetMinmaxParameterivEXT;
#define glGetMinmaxParameterivEXT sf_glad_glGetMinmaxParameterivEXT
GLAD_API_CALL PFNGLGETMULTITEXENVFVEXTPROC sf_glad_glGetMultiTexEnvfvEXT;
#define glGetMultiTexEnvfvEXT sf_glad_glGetMultiTexEnvfvEXT
GLAD_API_CALL PFNGLGETMULTITEXENVIVEXTPROC sf_glad_glGetMultiTexEnvivEXT;
#define glGetMultiTexEnvivEXT sf_glad_glGetMultiTexEnvivEXT
GLAD_API_CALL PFNGLGETMULTITEXGENDVEXTPROC sf_glad_glGetMultiTexGendvEXT;
#define glGetMultiTexGendvEXT sf_glad_glGetMultiTexGendvEXT
GLAD_API_CALL PFNGLGETMULTITEXGENFVEXTPROC sf_glad_glGetMultiTexGenfvEXT;
#define glGetMultiTexGenfvEXT sf_glad_glGetMultiTexGenfvEXT
GLAD_API_CALL PFNGLGETMULTITEXGENIVEXTPROC sf_glad_glGetMultiTexGenivEXT;
#define glGetMultiTexGenivEXT sf_glad_glGetMultiTexGenivEXT
GLAD_API_CALL PFNGLGETMULTITEXIMAGEEXTPROC sf_glad_glGetMultiTexImageEXT;
#define glGetMultiTexImageEXT sf_glad_glGetMultiTexImageEXT
GLAD_API_CALL PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC sf_glad_glGetMultiTexLevelParameterfvEXT;
#define glGetMultiTexLevelParameterfvEXT sf_glad_glGetMultiTexLevelParameterfvEXT
GLAD_API_CALL PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC sf_glad_glGetMultiTexLevelParameterivEXT;
#define glGetMultiTexLevelParameterivEXT sf_glad_glGetMultiTexLevelParameterivEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERIIVEXTPROC sf_glad_glGetMultiTexParameterIivEXT;
#define glGetMultiTexParameterIivEXT sf_glad_glGetMultiTexParameterIivEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERIUIVEXTPROC sf_glad_glGetMultiTexParameterIuivEXT;
#define glGetMultiTexParameterIuivEXT sf_glad_glGetMultiTexParameterIuivEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERFVEXTPROC sf_glad_glGetMultiTexParameterfvEXT;
#define glGetMultiTexParameterfvEXT sf_glad_glGetMultiTexParameterfvEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERIVEXTPROC sf_glad_glGetMultiTexParameterivEXT;
#define glGetMultiTexParameterivEXT sf_glad_glGetMultiTexParameterivEXT
GLAD_API_CALL PFNGLGETMULTISAMPLEFVPROC sf_glad_glGetMultisamplefv;
#define glGetMultisamplefv sf_glad_glGetMultisamplefv
GLAD_API_CALL PFNGLGETMULTISAMPLEFVNVPROC sf_glad_glGetMultisamplefvNV;
#define glGetMultisamplefvNV sf_glad_glGetMultisamplefvNV
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERI64VPROC sf_glad_glGetNamedBufferParameteri64v;
#define glGetNamedBufferParameteri64v sf_glad_glGetNamedBufferParameteri64v
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERIVPROC sf_glad_glGetNamedBufferParameteriv;
#define glGetNamedBufferParameteriv sf_glad_glGetNamedBufferParameteriv
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedBufferParameterivEXT;
#define glGetNamedBufferParameterivEXT sf_glad_glGetNamedBufferParameterivEXT
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC sf_glad_glGetNamedBufferParameterui64vNV;
#define glGetNamedBufferParameterui64vNV sf_glad_glGetNamedBufferParameterui64vNV
GLAD_API_CALL PFNGLGETNAMEDBUFFERPOINTERVPROC sf_glad_glGetNamedBufferPointerv;
#define glGetNamedBufferPointerv sf_glad_glGetNamedBufferPointerv
GLAD_API_CALL PFNGLGETNAMEDBUFFERPOINTERVEXTPROC sf_glad_glGetNamedBufferPointervEXT;
#define glGetNamedBufferPointervEXT sf_glad_glGetNamedBufferPointervEXT
GLAD_API_CALL PFNGLGETNAMEDBUFFERSUBDATAPROC sf_glad_glGetNamedBufferSubData;
#define glGetNamedBufferSubData sf_glad_glGetNamedBufferSubData
GLAD_API_CALL PFNGLGETNAMEDBUFFERSUBDATAEXTPROC sf_glad_glGetNamedBufferSubDataEXT;
#define glGetNamedBufferSubDataEXT sf_glad_glGetNamedBufferSubDataEXT
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC sf_glad_glGetNamedFramebufferAttachmentParameteriv;
#define glGetNamedFramebufferAttachmentParameteriv sf_glad_glGetNamedFramebufferAttachmentParameteriv
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC sf_glad_glGetNamedFramebufferAttachmentParameterivEXT;
#define glGetNamedFramebufferAttachmentParameterivEXT sf_glad_glGetNamedFramebufferAttachmentParameterivEXT
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC sf_glad_glGetNamedFramebufferParameterfvAMD;
#define glGetNamedFramebufferParameterfvAMD sf_glad_glGetNamedFramebufferParameterfvAMD
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC sf_glad_glGetNamedFramebufferParameteriv;
#define glGetNamedFramebufferParameteriv sf_glad_glGetNamedFramebufferParameteriv
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedFramebufferParameterivEXT;
#define glGetNamedFramebufferParameterivEXT sf_glad_glGetNamedFramebufferParameterivEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC sf_glad_glGetNamedProgramLocalParameterIivEXT;
#define glGetNamedProgramLocalParameterIivEXT sf_glad_glGetNamedProgramLocalParameterIivEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC sf_glad_glGetNamedProgramLocalParameterIuivEXT;
#define glGetNamedProgramLocalParameterIuivEXT sf_glad_glGetNamedProgramLocalParameterIuivEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC sf_glad_glGetNamedProgramLocalParameterdvEXT;
#define glGetNamedProgramLocalParameterdvEXT sf_glad_glGetNamedProgramLocalParameterdvEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC sf_glad_glGetNamedProgramLocalParameterfvEXT;
#define glGetNamedProgramLocalParameterfvEXT sf_glad_glGetNamedProgramLocalParameterfvEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMSTRINGEXTPROC sf_glad_glGetNamedProgramStringEXT;
#define glGetNamedProgramStringEXT sf_glad_glGetNamedProgramStringEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMIVEXTPROC sf_glad_glGetNamedProgramivEXT;
#define glGetNamedProgramivEXT sf_glad_glGetNamedProgramivEXT
GLAD_API_CALL PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC sf_glad_glGetNamedRenderbufferParameteriv;
#define glGetNamedRenderbufferParameteriv sf_glad_glGetNamedRenderbufferParameteriv
GLAD_API_CALL PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedRenderbufferParameterivEXT;
#define glGetNamedRenderbufferParameterivEXT sf_glad_glGetNamedRenderbufferParameterivEXT
GLAD_API_CALL PFNGLGETNAMEDSTRINGARBPROC sf_glad_glGetNamedStringARB;
#define glGetNamedStringARB sf_glad_glGetNamedStringARB
GLAD_API_CALL PFNGLGETNAMEDSTRINGIVARBPROC sf_glad_glGetNamedStringivARB;
#define glGetNamedStringivARB sf_glad_glGetNamedStringivARB
GLAD_API_CALL PFNGLGETNEXTPERFQUERYIDINTELPROC sf_glad_glGetNextPerfQueryIdINTEL;
#define glGetNextPerfQueryIdINTEL sf_glad_glGetNextPerfQueryIdINTEL
GLAD_API_CALL PFNGLGETOBJECTBUFFERFVATIPROC sf_glad_glGetObjectBufferfvATI;
#define glGetObjectBufferfvATI sf_glad_glGetObjectBufferfvATI
GLAD_API_CALL PFNGLGETOBJECTBUFFERIVATIPROC sf_glad_glGetObjectBufferivATI;
#define glGetObjectBufferivATI sf_glad_glGetObjectBufferivATI
GLAD_API_CALL PFNGLGETOBJECTLABELPROC sf_glad_glGetObjectLabel;
#define glGetObjectLabel sf_glad_glGetObjectLabel
GLAD_API_CALL PFNGLGETOBJECTLABELEXTPROC sf_glad_glGetObjectLabelEXT;
#define glGetObjectLabelEXT sf_glad_glGetObjectLabelEXT
GLAD_API_CALL PFNGLGETOBJECTPARAMETERFVARBPROC sf_glad_glGetObjectParameterfvARB;
#define glGetObjectParameterfvARB sf_glad_glGetObjectParameterfvARB
GLAD_API_CALL PFNGLGETOBJECTPARAMETERIVAPPLEPROC sf_glad_glGetObjectParameterivAPPLE;
#define glGetObjectParameterivAPPLE sf_glad_glGetObjectParameterivAPPLE
GLAD_API_CALL PFNGLGETOBJECTPARAMETERIVARBPROC sf_glad_glGetObjectParameterivARB;
#define glGetObjectParameterivARB sf_glad_glGetObjectParameterivARB
GLAD_API_CALL PFNGLGETOBJECTPTRLABELPROC sf_glad_glGetObjectPtrLabel;
#define glGetObjectPtrLabel sf_glad_glGetObjectPtrLabel
GLAD_API_CALL PFNGLGETOCCLUSIONQUERYIVNVPROC sf_glad_glGetOcclusionQueryivNV;
#define glGetOcclusionQueryivNV sf_glad_glGetOcclusionQueryivNV
GLAD_API_CALL PFNGLGETOCCLUSIONQUERYUIVNVPROC sf_glad_glGetOcclusionQueryuivNV;
#define glGetOcclusionQueryuivNV sf_glad_glGetOcclusionQueryuivNV
GLAD_API_CALL PFNGLGETPATHCOLORGENFVNVPROC sf_glad_glGetPathColorGenfvNV;
#define glGetPathColorGenfvNV sf_glad_glGetPathColorGenfvNV
GLAD_API_CALL PFNGLGETPATHCOLORGENIVNVPROC sf_glad_glGetPathColorGenivNV;
#define glGetPathColorGenivNV sf_glad_glGetPathColorGenivNV
GLAD_API_CALL PFNGLGETPATHCOMMANDSNVPROC sf_glad_glGetPathCommandsNV;
#define glGetPathCommandsNV sf_glad_glGetPathCommandsNV
GLAD_API_CALL PFNGLGETPATHCOORDSNVPROC sf_glad_glGetPathCoordsNV;
#define glGetPathCoordsNV sf_glad_glGetPathCoordsNV
GLAD_API_CALL PFNGLGETPATHDASHARRAYNVPROC sf_glad_glGetPathDashArrayNV;
#define glGetPathDashArrayNV sf_glad_glGetPathDashArrayNV
GLAD_API_CALL PFNGLGETPATHLENGTHNVPROC sf_glad_glGetPathLengthNV;
#define glGetPathLengthNV sf_glad_glGetPathLengthNV
GLAD_API_CALL PFNGLGETPATHMETRICRANGENVPROC sf_glad_glGetPathMetricRangeNV;
#define glGetPathMetricRangeNV sf_glad_glGetPathMetricRangeNV
GLAD_API_CALL PFNGLGETPATHMETRICSNVPROC sf_glad_glGetPathMetricsNV;
#define glGetPathMetricsNV sf_glad_glGetPathMetricsNV
GLAD_API_CALL PFNGLGETPATHPARAMETERFVNVPROC sf_glad_glGetPathParameterfvNV;
#define glGetPathParameterfvNV sf_glad_glGetPathParameterfvNV
GLAD_API_CALL PFNGLGETPATHPARAMETERIVNVPROC sf_glad_glGetPathParameterivNV;
#define glGetPathParameterivNV sf_glad_glGetPathParameterivNV
GLAD_API_CALL PFNGLGETPATHSPACINGNVPROC sf_glad_glGetPathSpacingNV;
#define glGetPathSpacingNV sf_glad_glGetPathSpacingNV
GLAD_API_CALL PFNGLGETPATHTEXGENFVNVPROC sf_glad_glGetPathTexGenfvNV;
#define glGetPathTexGenfvNV sf_glad_glGetPathTexGenfvNV
GLAD_API_CALL PFNGLGETPATHTEXGENIVNVPROC sf_glad_glGetPathTexGenivNV;
#define glGetPathTexGenivNV sf_glad_glGetPathTexGenivNV
GLAD_API_CALL PFNGLGETPERFCOUNTERINFOINTELPROC sf_glad_glGetPerfCounterInfoINTEL;
#define glGetPerfCounterInfoINTEL sf_glad_glGetPerfCounterInfoINTEL
GLAD_API_CALL PFNGLGETPERFMONITORCOUNTERDATAAMDPROC sf_glad_glGetPerfMonitorCounterDataAMD;
#define glGetPerfMonitorCounterDataAMD sf_glad_glGetPerfMonitorCounterDataAMD
GLAD_API_CALL PFNGLGETPERFMONITORCOUNTERINFOAMDPROC sf_glad_glGetPerfMonitorCounterInfoAMD;
#define glGetPerfMonitorCounterInfoAMD sf_glad_glGetPerfMonitorCounterInfoAMD
GLAD_API_CALL PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC sf_glad_glGetPerfMonitorCounterStringAMD;
#define glGetPerfMonitorCounterStringAMD sf_glad_glGetPerfMonitorCounterStringAMD
GLAD_API_CALL PFNGLGETPERFMONITORCOUNTERSAMDPROC sf_glad_glGetPerfMonitorCountersAMD;
#define glGetPerfMonitorCountersAMD sf_glad_glGetPerfMonitorCountersAMD
GLAD_API_CALL PFNGLGETPERFMONITORGROUPSTRINGAMDPROC sf_glad_glGetPerfMonitorGroupStringAMD;
#define glGetPerfMonitorGroupStringAMD sf_glad_glGetPerfMonitorGroupStringAMD
GLAD_API_CALL PFNGLGETPERFMONITORGROUPSAMDPROC sf_glad_glGetPerfMonitorGroupsAMD;
#define glGetPerfMonitorGroupsAMD sf_glad_glGetPerfMonitorGroupsAMD
GLAD_API_CALL PFNGLGETPERFQUERYDATAINTELPROC sf_glad_glGetPerfQueryDataINTEL;
#define glGetPerfQueryDataINTEL sf_glad_glGetPerfQueryDataINTEL
GLAD_API_CALL PFNGLGETPERFQUERYIDBYNAMEINTELPROC sf_glad_glGetPerfQueryIdByNameINTEL;
#define glGetPerfQueryIdByNameINTEL sf_glad_glGetPerfQueryIdByNameINTEL
GLAD_API_CALL PFNGLGETPERFQUERYINFOINTELPROC sf_glad_glGetPerfQueryInfoINTEL;
#define glGetPerfQueryInfoINTEL sf_glad_glGetPerfQueryInfoINTEL
GLAD_API_CALL PFNGLGETPIXELMAPFVPROC sf_glad_glGetPixelMapfv;
#define glGetPixelMapfv sf_glad_glGetPixelMapfv
GLAD_API_CALL PFNGLGETPIXELMAPUIVPROC sf_glad_glGetPixelMapuiv;
#define glGetPixelMapuiv sf_glad_glGetPixelMapuiv
GLAD_API_CALL PFNGLGETPIXELMAPUSVPROC sf_glad_glGetPixelMapusv;
#define glGetPixelMapusv sf_glad_glGetPixelMapusv
GLAD_API_CALL PFNGLGETPIXELMAPXVPROC sf_glad_glGetPixelMapxv;
#define glGetPixelMapxv sf_glad_glGetPixelMapxv
GLAD_API_CALL PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC sf_glad_glGetPixelTexGenParameterfvSGIS;
#define glGetPixelTexGenParameterfvSGIS sf_glad_glGetPixelTexGenParameterfvSGIS
GLAD_API_CALL PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC sf_glad_glGetPixelTexGenParameterivSGIS;
#define glGetPixelTexGenParameterivSGIS sf_glad_glGetPixelTexGenParameterivSGIS
GLAD_API_CALL PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC sf_glad_glGetPixelTransformParameterfvEXT;
#define glGetPixelTransformParameterfvEXT sf_glad_glGetPixelTransformParameterfvEXT
GLAD_API_CALL PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC sf_glad_glGetPixelTransformParameterivEXT;
#define glGetPixelTransformParameterivEXT sf_glad_glGetPixelTransformParameterivEXT
GLAD_API_CALL PFNGLGETPOINTERINDEXEDVEXTPROC sf_glad_glGetPointerIndexedvEXT;
#define glGetPointerIndexedvEXT sf_glad_glGetPointerIndexedvEXT
GLAD_API_CALL PFNGLGETPOINTERI_VEXTPROC sf_glad_glGetPointeri_vEXT;
#define glGetPointeri_vEXT sf_glad_glGetPointeri_vEXT
GLAD_API_CALL PFNGLGETPOINTERVPROC sf_glad_glGetPointerv;
#define glGetPointerv sf_glad_glGetPointerv
GLAD_API_CALL PFNGLGETPOINTERVEXTPROC sf_glad_glGetPointervEXT;
#define glGetPointervEXT sf_glad_glGetPointervEXT
GLAD_API_CALL PFNGLGETPOLYGONSTIPPLEPROC sf_glad_glGetPolygonStipple;
#define glGetPolygonStipple sf_glad_glGetPolygonStipple
GLAD_API_CALL PFNGLGETPROGRAMBINARYPROC sf_glad_glGetProgramBinary;
#define glGetProgramBinary sf_glad_glGetProgramBinary
GLAD_API_CALL PFNGLGETPROGRAMENVPARAMETERIIVNVPROC sf_glad_glGetProgramEnvParameterIivNV;
#define glGetProgramEnvParameterIivNV sf_glad_glGetProgramEnvParameterIivNV
GLAD_API_CALL PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC sf_glad_glGetProgramEnvParameterIuivNV;
#define glGetProgramEnvParameterIuivNV sf_glad_glGetProgramEnvParameterIuivNV
GLAD_API_CALL PFNGLGETPROGRAMENVPARAMETERDVARBPROC sf_glad_glGetProgramEnvParameterdvARB;
#define glGetProgramEnvParameterdvARB sf_glad_glGetProgramEnvParameterdvARB
GLAD_API_CALL PFNGLGETPROGRAMENVPARAMETERFVARBPROC sf_glad_glGetProgramEnvParameterfvARB;
#define glGetProgramEnvParameterfvARB sf_glad_glGetProgramEnvParameterfvARB
GLAD_API_CALL PFNGLGETPROGRAMINFOLOGPROC sf_glad_glGetProgramInfoLog;
#define glGetProgramInfoLog sf_glad_glGetProgramInfoLog
GLAD_API_CALL PFNGLGETPROGRAMINTERFACEIVPROC sf_glad_glGetProgramInterfaceiv;
#define glGetProgramInterfaceiv sf_glad_glGetProgramInterfaceiv
GLAD_API_CALL PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC sf_glad_glGetProgramLocalParameterIivNV;
#define glGetProgramLocalParameterIivNV sf_glad_glGetProgramLocalParameterIivNV
GLAD_API_CALL PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC sf_glad_glGetProgramLocalParameterIuivNV;
#define glGetProgramLocalParameterIuivNV sf_glad_glGetProgramLocalParameterIuivNV
GLAD_API_CALL PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC sf_glad_glGetProgramLocalParameterdvARB;
#define glGetProgramLocalParameterdvARB sf_glad_glGetProgramLocalParameterdvARB
GLAD_API_CALL PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC sf_glad_glGetProgramLocalParameterfvARB;
#define glGetProgramLocalParameterfvARB sf_glad_glGetProgramLocalParameterfvARB
GLAD_API_CALL PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC sf_glad_glGetProgramNamedParameterdvNV;
#define glGetProgramNamedParameterdvNV sf_glad_glGetProgramNamedParameterdvNV
GLAD_API_CALL PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC sf_glad_glGetProgramNamedParameterfvNV;
#define glGetProgramNamedParameterfvNV sf_glad_glGetProgramNamedParameterfvNV
GLAD_API_CALL PFNGLGETPROGRAMPARAMETERDVNVPROC sf_glad_glGetProgramParameterdvNV;
#define glGetProgramParameterdvNV sf_glad_glGetProgramParameterdvNV
GLAD_API_CALL PFNGLGETPROGRAMPARAMETERFVNVPROC sf_glad_glGetProgramParameterfvNV;
#define glGetProgramParameterfvNV sf_glad_glGetProgramParameterfvNV
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEINFOLOGPROC sf_glad_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog sf_glad_glGetProgramPipelineInfoLog
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEIVPROC sf_glad_glGetProgramPipelineiv;
#define glGetProgramPipelineiv sf_glad_glGetProgramPipelineiv
GLAD_API_CALL PFNGLGETPROGRAMRESOURCEINDEXPROC sf_glad_glGetProgramResourceIndex;
#define glGetProgramResourceIndex sf_glad_glGetProgramResourceIndex
GLAD_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONPROC sf_glad_glGetProgramResourceLocation;
#define glGetProgramResourceLocation sf_glad_glGetProgramResourceLocation
GLAD_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC sf_glad_glGetProgramResourceLocationIndex;
#define glGetProgramResourceLocationIndex sf_glad_glGetProgramResourceLocationIndex
GLAD_API_CALL PFNGLGETPROGRAMRESOURCENAMEPROC sf_glad_glGetProgramResourceName;
#define glGetProgramResourceName sf_glad_glGetProgramResourceName
GLAD_API_CALL PFNGLGETPROGRAMRESOURCEFVNVPROC sf_glad_glGetProgramResourcefvNV;
#define glGetProgramResourcefvNV sf_glad_glGetProgramResourcefvNV
GLAD_API_CALL PFNGLGETPROGRAMRESOURCEIVPROC sf_glad_glGetProgramResourceiv;
#define glGetProgramResourceiv sf_glad_glGetProgramResourceiv
GLAD_API_CALL PFNGLGETPROGRAMSTAGEIVPROC sf_glad_glGetProgramStageiv;
#define glGetProgramStageiv sf_glad_glGetProgramStageiv
GLAD_API_CALL PFNGLGETPROGRAMSTRINGARBPROC sf_glad_glGetProgramStringARB;
#define glGetProgramStringARB sf_glad_glGetProgramStringARB
GLAD_API_CALL PFNGLGETPROGRAMSTRINGNVPROC sf_glad_glGetProgramStringNV;
#define glGetProgramStringNV sf_glad_glGetProgramStringNV
GLAD_API_CALL PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC sf_glad_glGetProgramSubroutineParameteruivNV;
#define glGetProgramSubroutineParameteruivNV sf_glad_glGetProgramSubroutineParameteruivNV
GLAD_API_CALL PFNGLGETPROGRAMIVPROC sf_glad_glGetProgramiv;
#define glGetProgramiv sf_glad_glGetProgramiv
GLAD_API_CALL PFNGLGETPROGRAMIVARBPROC sf_glad_glGetProgramivARB;
#define glGetProgramivARB sf_glad_glGetProgramivARB
GLAD_API_CALL PFNGLGETPROGRAMIVNVPROC sf_glad_glGetProgramivNV;
#define glGetProgramivNV sf_glad_glGetProgramivNV
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTI64VPROC sf_glad_glGetQueryBufferObjecti64v;
#define glGetQueryBufferObjecti64v sf_glad_glGetQueryBufferObjecti64v
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTIVPROC sf_glad_glGetQueryBufferObjectiv;
#define glGetQueryBufferObjectiv sf_glad_glGetQueryBufferObjectiv
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTUI64VPROC sf_glad_glGetQueryBufferObjectui64v;
#define glGetQueryBufferObjectui64v sf_glad_glGetQueryBufferObjectui64v
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTUIVPROC sf_glad_glGetQueryBufferObjectuiv;
#define glGetQueryBufferObjectuiv sf_glad_glGetQueryBufferObjectuiv
GLAD_API_CALL PFNGLGETQUERYINDEXEDIVPROC sf_glad_glGetQueryIndexediv;
#define glGetQueryIndexediv sf_glad_glGetQueryIndexediv
GLAD_API_CALL PFNGLGETQUERYOBJECTI64VPROC sf_glad_glGetQueryObjecti64v;
#define glGetQueryObjecti64v sf_glad_glGetQueryObjecti64v
GLAD_API_CALL PFNGLGETQUERYOBJECTI64VEXTPROC sf_glad_glGetQueryObjecti64vEXT;
#define glGetQueryObjecti64vEXT sf_glad_glGetQueryObjecti64vEXT
GLAD_API_CALL PFNGLGETQUERYOBJECTIVPROC sf_glad_glGetQueryObjectiv;
#define glGetQueryObjectiv sf_glad_glGetQueryObjectiv
GLAD_API_CALL PFNGLGETQUERYOBJECTIVARBPROC sf_glad_glGetQueryObjectivARB;
#define glGetQueryObjectivARB sf_glad_glGetQueryObjectivARB
GLAD_API_CALL PFNGLGETQUERYOBJECTUI64VPROC sf_glad_glGetQueryObjectui64v;
#define glGetQueryObjectui64v sf_glad_glGetQueryObjectui64v
GLAD_API_CALL PFNGLGETQUERYOBJECTUI64VEXTPROC sf_glad_glGetQueryObjectui64vEXT;
#define glGetQueryObjectui64vEXT sf_glad_glGetQueryObjectui64vEXT
GLAD_API_CALL PFNGLGETQUERYOBJECTUIVPROC sf_glad_glGetQueryObjectuiv;
#define glGetQueryObjectuiv sf_glad_glGetQueryObjectuiv
GLAD_API_CALL PFNGLGETQUERYOBJECTUIVARBPROC sf_glad_glGetQueryObjectuivARB;
#define glGetQueryObjectuivARB sf_glad_glGetQueryObjectuivARB
GLAD_API_CALL PFNGLGETQUERYIVPROC sf_glad_glGetQueryiv;
#define glGetQueryiv sf_glad_glGetQueryiv
GLAD_API_CALL PFNGLGETQUERYIVARBPROC sf_glad_glGetQueryivARB;
#define glGetQueryivARB sf_glad_glGetQueryivARB
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVPROC sf_glad_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv sf_glad_glGetRenderbufferParameteriv
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC sf_glad_glGetRenderbufferParameterivEXT;
#define glGetRenderbufferParameterivEXT sf_glad_glGetRenderbufferParameterivEXT
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIIVPROC sf_glad_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv sf_glad_glGetSamplerParameterIiv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIUIVPROC sf_glad_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv sf_glad_glGetSamplerParameterIuiv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERFVPROC sf_glad_glGetSamplerParameterfv;
#define glGetSamplerParameterfv sf_glad_glGetSamplerParameterfv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIVPROC sf_glad_glGetSamplerParameteriv;
#define glGetSamplerParameteriv sf_glad_glGetSamplerParameteriv
GLAD_API_CALL PFNGLGETSEMAPHOREPARAMETERIVNVPROC sf_glad_glGetSemaphoreParameterivNV;
#define glGetSemaphoreParameterivNV sf_glad_glGetSemaphoreParameterivNV
GLAD_API_CALL PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC sf_glad_glGetSemaphoreParameterui64vEXT;
#define glGetSemaphoreParameterui64vEXT sf_glad_glGetSemaphoreParameterui64vEXT
GLAD_API_CALL PFNGLGETSEPARABLEFILTERPROC sf_glad_glGetSeparableFilter;
#define glGetSeparableFilter sf_glad_glGetSeparableFilter
GLAD_API_CALL PFNGLGETSEPARABLEFILTEREXTPROC sf_glad_glGetSeparableFilterEXT;
#define glGetSeparableFilterEXT sf_glad_glGetSeparableFilterEXT
GLAD_API_CALL PFNGLGETSHADERINFOLOGPROC sf_glad_glGetShaderInfoLog;
#define glGetShaderInfoLog sf_glad_glGetShaderInfoLog
GLAD_API_CALL PFNGLGETSHADERPRECISIONFORMATPROC sf_glad_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat sf_glad_glGetShaderPrecisionFormat
GLAD_API_CALL PFNGLGETSHADERSOURCEPROC sf_glad_glGetShaderSource;
#define glGetShaderSource sf_glad_glGetShaderSource
GLAD_API_CALL PFNGLGETSHADERSOURCEARBPROC sf_glad_glGetShaderSourceARB;
#define glGetShaderSourceARB sf_glad_glGetShaderSourceARB
GLAD_API_CALL PFNGLGETSHADERIVPROC sf_glad_glGetShaderiv;
#define glGetShaderiv sf_glad_glGetShaderiv
GLAD_API_CALL PFNGLGETSHADINGRATEIMAGEPALETTENVPROC sf_glad_glGetShadingRateImagePaletteNV;
#define glGetShadingRateImagePaletteNV sf_glad_glGetShadingRateImagePaletteNV
GLAD_API_CALL PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC sf_glad_glGetShadingRateSampleLocationivNV;
#define glGetShadingRateSampleLocationivNV sf_glad_glGetShadingRateSampleLocationivNV
GLAD_API_CALL PFNGLGETSHARPENTEXFUNCSGISPROC sf_glad_glGetSharpenTexFuncSGIS;
#define glGetSharpenTexFuncSGIS sf_glad_glGetSharpenTexFuncSGIS
GLAD_API_CALL PFNGLGETSTAGEINDEXNVPROC sf_glad_glGetStageIndexNV;
#define glGetStageIndexNV sf_glad_glGetStageIndexNV
GLAD_API_CALL PFNGLGETSTRINGPROC sf_glad_glGetString;
#define glGetString sf_glad_glGetString
GLAD_API_CALL PFNGLGETSTRINGIPROC sf_glad_glGetStringi;
#define glGetStringi sf_glad_glGetStringi
GLAD_API_CALL PFNGLGETSUBROUTINEINDEXPROC sf_glad_glGetSubroutineIndex;
#define glGetSubroutineIndex sf_glad_glGetSubroutineIndex
GLAD_API_CALL PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC sf_glad_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation sf_glad_glGetSubroutineUniformLocation
GLAD_API_CALL PFNGLGETSYNCIVPROC sf_glad_glGetSynciv;
#define glGetSynciv sf_glad_glGetSynciv
GLAD_API_CALL PFNGLGETTEXBUMPPARAMETERFVATIPROC sf_glad_glGetTexBumpParameterfvATI;
#define glGetTexBumpParameterfvATI sf_glad_glGetTexBumpParameterfvATI
GLAD_API_CALL PFNGLGETTEXBUMPPARAMETERIVATIPROC sf_glad_glGetTexBumpParameterivATI;
#define glGetTexBumpParameterivATI sf_glad_glGetTexBumpParameterivATI
GLAD_API_CALL PFNGLGETTEXENVFVPROC sf_glad_glGetTexEnvfv;
#define glGetTexEnvfv sf_glad_glGetTexEnvfv
GLAD_API_CALL PFNGLGETTEXENVIVPROC sf_glad_glGetTexEnviv;
#define glGetTexEnviv sf_glad_glGetTexEnviv
GLAD_API_CALL PFNGLGETTEXENVXVOESPROC sf_glad_glGetTexEnvxvOES;
#define glGetTexEnvxvOES sf_glad_glGetTexEnvxvOES
GLAD_API_CALL PFNGLGETTEXFILTERFUNCSGISPROC sf_glad_glGetTexFilterFuncSGIS;
#define glGetTexFilterFuncSGIS sf_glad_glGetTexFilterFuncSGIS
GLAD_API_CALL PFNGLGETTEXGENDVPROC sf_glad_glGetTexGendv;
#define glGetTexGendv sf_glad_glGetTexGendv
GLAD_API_CALL PFNGLGETTEXGENFVPROC sf_glad_glGetTexGenfv;
#define glGetTexGenfv sf_glad_glGetTexGenfv
GLAD_API_CALL PFNGLGETTEXGENIVPROC sf_glad_glGetTexGeniv;
#define glGetTexGeniv sf_glad_glGetTexGeniv
GLAD_API_CALL PFNGLGETTEXGENXVOESPROC sf_glad_glGetTexGenxvOES;
#define glGetTexGenxvOES sf_glad_glGetTexGenxvOES
GLAD_API_CALL PFNGLGETTEXIMAGEPROC sf_glad_glGetTexImage;
#define glGetTexImage sf_glad_glGetTexImage
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC sf_glad_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv sf_glad_glGetTexLevelParameterfv
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC sf_glad_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv sf_glad_glGetTexLevelParameteriv
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERXVOESPROC sf_glad_glGetTexLevelParameterxvOES;
#define glGetTexLevelParameterxvOES sf_glad_glGetTexLevelParameterxvOES
GLAD_API_CALL PFNGLGETTEXPARAMETERIIVPROC sf_glad_glGetTexParameterIiv;
#define glGetTexParameterIiv sf_glad_glGetTexParameterIiv
GLAD_API_CALL PFNGLGETTEXPARAMETERIIVEXTPROC sf_glad_glGetTexParameterIivEXT;
#define glGetTexParameterIivEXT sf_glad_glGetTexParameterIivEXT
GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVPROC sf_glad_glGetTexParameterIuiv;
#define glGetTexParameterIuiv sf_glad_glGetTexParameterIuiv
GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVEXTPROC sf_glad_glGetTexParameterIuivEXT;
#define glGetTexParameterIuivEXT sf_glad_glGetTexParameterIuivEXT
GLAD_API_CALL PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC sf_glad_glGetTexParameterPointervAPPLE;
#define glGetTexParameterPointervAPPLE sf_glad_glGetTexParameterPointervAPPLE
GLAD_API_CALL PFNGLGETTEXPARAMETERFVPROC sf_glad_glGetTexParameterfv;
#define glGetTexParameterfv sf_glad_glGetTexParameterfv
GLAD_API_CALL PFNGLGETTEXPARAMETERIVPROC sf_glad_glGetTexParameteriv;
#define glGetTexParameteriv sf_glad_glGetTexParameteriv
GLAD_API_CALL PFNGLGETTEXPARAMETERXVOESPROC sf_glad_glGetTexParameterxvOES;
#define glGetTexParameterxvOES sf_glad_glGetTexParameterxvOES
GLAD_API_CALL PFNGLGETTEXTUREHANDLEARBPROC sf_glad_glGetTextureHandleARB;
#define glGetTextureHandleARB sf_glad_glGetTextureHandleARB
GLAD_API_CALL PFNGLGETTEXTUREHANDLENVPROC sf_glad_glGetTextureHandleNV;
#define glGetTextureHandleNV sf_glad_glGetTextureHandleNV
GLAD_API_CALL PFNGLGETTEXTUREIMAGEPROC sf_glad_glGetTextureImage;
#define glGetTextureImage sf_glad_glGetTextureImage
GLAD_API_CALL PFNGLGETTEXTUREIMAGEEXTPROC sf_glad_glGetTextureImageEXT;
#define glGetTextureImageEXT sf_glad_glGetTextureImageEXT
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERFVPROC sf_glad_glGetTextureLevelParameterfv;
#define glGetTextureLevelParameterfv sf_glad_glGetTextureLevelParameterfv
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC sf_glad_glGetTextureLevelParameterfvEXT;
#define glGetTextureLevelParameterfvEXT sf_glad_glGetTextureLevelParameterfvEXT
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERIVPROC sf_glad_glGetTextureLevelParameteriv;
#define glGetTextureLevelParameteriv sf_glad_glGetTextureLevelParameteriv
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC sf_glad_glGetTextureLevelParameterivEXT;
#define glGetTextureLevelParameterivEXT sf_glad_glGetTextureLevelParameterivEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIIVPROC sf_glad_glGetTextureParameterIiv;
#define glGetTextureParameterIiv sf_glad_glGetTextureParameterIiv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIIVEXTPROC sf_glad_glGetTextureParameterIivEXT;
#define glGetTextureParameterIivEXT sf_glad_glGetTextureParameterIivEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIUIVPROC sf_glad_glGetTextureParameterIuiv;
#define glGetTextureParameterIuiv sf_glad_glGetTextureParameterIuiv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIUIVEXTPROC sf_glad_glGetTextureParameterIuivEXT;
#define glGetTextureParameterIuivEXT sf_glad_glGetTextureParameterIuivEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERFVPROC sf_glad_glGetTextureParameterfv;
#define glGetTextureParameterfv sf_glad_glGetTextureParameterfv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERFVEXTPROC sf_glad_glGetTextureParameterfvEXT;
#define glGetTextureParameterfvEXT sf_glad_glGetTextureParameterfvEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIVPROC sf_glad_glGetTextureParameteriv;
#define glGetTextureParameteriv sf_glad_glGetTextureParameteriv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIVEXTPROC sf_glad_glGetTextureParameterivEXT;
#define glGetTextureParameterivEXT sf_glad_glGetTextureParameterivEXT
GLAD_API_CALL PFNGLGETTEXTURESAMPLERHANDLEARBPROC sf_glad_glGetTextureSamplerHandleARB;
#define glGetTextureSamplerHandleARB sf_glad_glGetTextureSamplerHandleARB
GLAD_API_CALL PFNGLGETTEXTURESAMPLERHANDLENVPROC sf_glad_glGetTextureSamplerHandleNV;
#define glGetTextureSamplerHandleNV sf_glad_glGetTextureSamplerHandleNV
GLAD_API_CALL PFNGLGETTEXTURESUBIMAGEPROC sf_glad_glGetTextureSubImage;
#define glGetTextureSubImage sf_glad_glGetTextureSubImage
GLAD_API_CALL PFNGLGETTRACKMATRIXIVNVPROC sf_glad_glGetTrackMatrixivNV;
#define glGetTrackMatrixivNV sf_glad_glGetTrackMatrixivNV
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGPROC sf_glad_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying sf_glad_glGetTransformFeedbackVarying
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC sf_glad_glGetTransformFeedbackVaryingEXT;
#define glGetTransformFeedbackVaryingEXT sf_glad_glGetTransformFeedbackVaryingEXT
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC sf_glad_glGetTransformFeedbackVaryingNV;
#define glGetTransformFeedbackVaryingNV sf_glad_glGetTransformFeedbackVaryingNV
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKI64_VPROC sf_glad_glGetTransformFeedbacki64_v;
#define glGetTransformFeedbacki64_v sf_glad_glGetTransformFeedbacki64_v
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKI_VPROC sf_glad_glGetTransformFeedbacki_v;
#define glGetTransformFeedbacki_v sf_glad_glGetTransformFeedbacki_v
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKIVPROC sf_glad_glGetTransformFeedbackiv;
#define glGetTransformFeedbackiv sf_glad_glGetTransformFeedbackiv
GLAD_API_CALL PFNGLGETUNIFORMBLOCKINDEXPROC sf_glad_glGetUniformBlockIndex;
#define glGetUniformBlockIndex sf_glad_glGetUniformBlockIndex
GLAD_API_CALL PFNGLGETUNIFORMBUFFERSIZEEXTPROC sf_glad_glGetUniformBufferSizeEXT;
#define glGetUniformBufferSizeEXT sf_glad_glGetUniformBufferSizeEXT
GLAD_API_CALL PFNGLGETUNIFORMINDICESPROC sf_glad_glGetUniformIndices;
#define glGetUniformIndices sf_glad_glGetUniformIndices
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONPROC sf_glad_glGetUniformLocation;
#define glGetUniformLocation sf_glad_glGetUniformLocation
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONARBPROC sf_glad_glGetUniformLocationARB;
#define glGetUniformLocationARB sf_glad_glGetUniformLocationARB
GLAD_API_CALL PFNGLGETUNIFORMOFFSETEXTPROC sf_glad_glGetUniformOffsetEXT;
#define glGetUniformOffsetEXT sf_glad_glGetUniformOffsetEXT
GLAD_API_CALL PFNGLGETUNIFORMSUBROUTINEUIVPROC sf_glad_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv sf_glad_glGetUniformSubroutineuiv
GLAD_API_CALL PFNGLGETUNIFORMDVPROC sf_glad_glGetUniformdv;
#define glGetUniformdv sf_glad_glGetUniformdv
GLAD_API_CALL PFNGLGETUNIFORMFVPROC sf_glad_glGetUniformfv;
#define glGetUniformfv sf_glad_glGetUniformfv
GLAD_API_CALL PFNGLGETUNIFORMFVARBPROC sf_glad_glGetUniformfvARB;
#define glGetUniformfvARB sf_glad_glGetUniformfvARB
GLAD_API_CALL PFNGLGETUNIFORMI64VARBPROC sf_glad_glGetUniformi64vARB;
#define glGetUniformi64vARB sf_glad_glGetUniformi64vARB
GLAD_API_CALL PFNGLGETUNIFORMI64VNVPROC sf_glad_glGetUniformi64vNV;
#define glGetUniformi64vNV sf_glad_glGetUniformi64vNV
GLAD_API_CALL PFNGLGETUNIFORMIVPROC sf_glad_glGetUniformiv;
#define glGetUniformiv sf_glad_glGetUniformiv
GLAD_API_CALL PFNGLGETUNIFORMIVARBPROC sf_glad_glGetUniformivARB;
#define glGetUniformivARB sf_glad_glGetUniformivARB
GLAD_API_CALL PFNGLGETUNIFORMUI64VARBPROC sf_glad_glGetUniformui64vARB;
#define glGetUniformui64vARB sf_glad_glGetUniformui64vARB
GLAD_API_CALL PFNGLGETUNIFORMUI64VNVPROC sf_glad_glGetUniformui64vNV;
#define glGetUniformui64vNV sf_glad_glGetUniformui64vNV
GLAD_API_CALL PFNGLGETUNIFORMUIVPROC sf_glad_glGetUniformuiv;
#define glGetUniformuiv sf_glad_glGetUniformuiv
GLAD_API_CALL PFNGLGETUNIFORMUIVEXTPROC sf_glad_glGetUniformuivEXT;
#define glGetUniformuivEXT sf_glad_glGetUniformuivEXT
GLAD_API_CALL PFNGLGETUNSIGNEDBYTEI_VEXTPROC sf_glad_glGetUnsignedBytei_vEXT;
#define glGetUnsignedBytei_vEXT sf_glad_glGetUnsignedBytei_vEXT
GLAD_API_CALL PFNGLGETUNSIGNEDBYTEVEXTPROC sf_glad_glGetUnsignedBytevEXT;
#define glGetUnsignedBytevEXT sf_glad_glGetUnsignedBytevEXT
GLAD_API_CALL PFNGLGETVARIANTARRAYOBJECTFVATIPROC sf_glad_glGetVariantArrayObjectfvATI;
#define glGetVariantArrayObjectfvATI sf_glad_glGetVariantArrayObjectfvATI
GLAD_API_CALL PFNGLGETVARIANTARRAYOBJECTIVATIPROC sf_glad_glGetVariantArrayObjectivATI;
#define glGetVariantArrayObjectivATI sf_glad_glGetVariantArrayObjectivATI
GLAD_API_CALL PFNGLGETVARIANTBOOLEANVEXTPROC sf_glad_glGetVariantBooleanvEXT;
#define glGetVariantBooleanvEXT sf_glad_glGetVariantBooleanvEXT
GLAD_API_CALL PFNGLGETVARIANTFLOATVEXTPROC sf_glad_glGetVariantFloatvEXT;
#define glGetVariantFloatvEXT sf_glad_glGetVariantFloatvEXT
GLAD_API_CALL PFNGLGETVARIANTINTEGERVEXTPROC sf_glad_glGetVariantIntegervEXT;
#define glGetVariantIntegervEXT sf_glad_glGetVariantIntegervEXT
GLAD_API_CALL PFNGLGETVARIANTPOINTERVEXTPROC sf_glad_glGetVariantPointervEXT;
#define glGetVariantPointervEXT sf_glad_glGetVariantPointervEXT
GLAD_API_CALL PFNGLGETVARYINGLOCATIONNVPROC sf_glad_glGetVaryingLocationNV;
#define glGetVaryingLocationNV sf_glad_glGetVaryingLocationNV
GLAD_API_CALL PFNGLGETVERTEXARRAYINDEXED64IVPROC sf_glad_glGetVertexArrayIndexed64iv;
#define glGetVertexArrayIndexed64iv sf_glad_glGetVertexArrayIndexed64iv
GLAD_API_CALL PFNGLGETVERTEXARRAYINDEXEDIVPROC sf_glad_glGetVertexArrayIndexediv;
#define glGetVertexArrayIndexediv sf_glad_glGetVertexArrayIndexediv
GLAD_API_CALL PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC sf_glad_glGetVertexArrayIntegeri_vEXT;
#define glGetVertexArrayIntegeri_vEXT sf_glad_glGetVertexArrayIntegeri_vEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYINTEGERVEXTPROC sf_glad_glGetVertexArrayIntegervEXT;
#define glGetVertexArrayIntegervEXT sf_glad_glGetVertexArrayIntegervEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC sf_glad_glGetVertexArrayPointeri_vEXT;
#define glGetVertexArrayPointeri_vEXT sf_glad_glGetVertexArrayPointeri_vEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYPOINTERVEXTPROC sf_glad_glGetVertexArrayPointervEXT;
#define glGetVertexArrayPointervEXT sf_glad_glGetVertexArrayPointervEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYIVPROC sf_glad_glGetVertexArrayiv;
#define glGetVertexArrayiv sf_glad_glGetVertexArrayiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC sf_glad_glGetVertexAttribArrayObjectfvATI;
#define glGetVertexAttribArrayObjectfvATI sf_glad_glGetVertexAttribArrayObjectfvATI
GLAD_API_CALL PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC sf_glad_glGetVertexAttribArrayObjectivATI;
#define glGetVertexAttribArrayObjectivATI sf_glad_glGetVertexAttribArrayObjectivATI
GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVPROC sf_glad_glGetVertexAttribIiv;
#define glGetVertexAttribIiv sf_glad_glGetVertexAttribIiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVEXTPROC sf_glad_glGetVertexAttribIivEXT;
#define glGetVertexAttribIivEXT sf_glad_glGetVertexAttribIivEXT
GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVPROC sf_glad_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv sf_glad_glGetVertexAttribIuiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVEXTPROC sf_glad_glGetVertexAttribIuivEXT;
#define glGetVertexAttribIuivEXT sf_glad_glGetVertexAttribIuivEXT
GLAD_API_CALL PFNGLGETVERTEXATTRIBLDVPROC sf_glad_glGetVertexAttribLdv;
#define glGetVertexAttribLdv sf_glad_glGetVertexAttribLdv
GLAD_API_CALL PFNGLGETVERTEXATTRIBLDVEXTPROC sf_glad_glGetVertexAttribLdvEXT;
#define glGetVertexAttribLdvEXT sf_glad_glGetVertexAttribLdvEXT
GLAD_API_CALL PFNGLGETVERTEXATTRIBLI64VNVPROC sf_glad_glGetVertexAttribLi64vNV;
#define glGetVertexAttribLi64vNV sf_glad_glGetVertexAttribLi64vNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBLUI64VARBPROC sf_glad_glGetVertexAttribLui64vARB;
#define glGetVertexAttribLui64vARB sf_glad_glGetVertexAttribLui64vARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBLUI64VNVPROC sf_glad_glGetVertexAttribLui64vNV;
#define glGetVertexAttribLui64vNV sf_glad_glGetVertexAttribLui64vNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVPROC sf_glad_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv sf_glad_glGetVertexAttribPointerv
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVARBPROC sf_glad_glGetVertexAttribPointervARB;
#define glGetVertexAttribPointervARB sf_glad_glGetVertexAttribPointervARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVNVPROC sf_glad_glGetVertexAttribPointervNV;
#define glGetVertexAttribPointervNV sf_glad_glGetVertexAttribPointervNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVPROC sf_glad_glGetVertexAttribdv;
#define glGetVertexAttribdv sf_glad_glGetVertexAttribdv
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVARBPROC sf_glad_glGetVertexAttribdvARB;
#define glGetVertexAttribdvARB sf_glad_glGetVertexAttribdvARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVNVPROC sf_glad_glGetVertexAttribdvNV;
#define glGetVertexAttribdvNV sf_glad_glGetVertexAttribdvNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVPROC sf_glad_glGetVertexAttribfv;
#define glGetVertexAttribfv sf_glad_glGetVertexAttribfv
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVARBPROC sf_glad_glGetVertexAttribfvARB;
#define glGetVertexAttribfvARB sf_glad_glGetVertexAttribfvARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVNVPROC sf_glad_glGetVertexAttribfvNV;
#define glGetVertexAttribfvNV sf_glad_glGetVertexAttribfvNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVPROC sf_glad_glGetVertexAttribiv;
#define glGetVertexAttribiv sf_glad_glGetVertexAttribiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVARBPROC sf_glad_glGetVertexAttribivARB;
#define glGetVertexAttribivARB sf_glad_glGetVertexAttribivARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVNVPROC sf_glad_glGetVertexAttribivNV;
#define glGetVertexAttribivNV sf_glad_glGetVertexAttribivNV
GLAD_API_CALL PFNGLGETVIDEOCAPTURESTREAMDVNVPROC sf_glad_glGetVideoCaptureStreamdvNV;
#define glGetVideoCaptureStreamdvNV sf_glad_glGetVideoCaptureStreamdvNV
GLAD_API_CALL PFNGLGETVIDEOCAPTURESTREAMFVNVPROC sf_glad_glGetVideoCaptureStreamfvNV;
#define glGetVideoCaptureStreamfvNV sf_glad_glGetVideoCaptureStreamfvNV
GLAD_API_CALL PFNGLGETVIDEOCAPTURESTREAMIVNVPROC sf_glad_glGetVideoCaptureStreamivNV;
#define glGetVideoCaptureStreamivNV sf_glad_glGetVideoCaptureStreamivNV
GLAD_API_CALL PFNGLGETVIDEOCAPTUREIVNVPROC sf_glad_glGetVideoCaptureivNV;
#define glGetVideoCaptureivNV sf_glad_glGetVideoCaptureivNV
GLAD_API_CALL PFNGLGETVIDEOI64VNVPROC sf_glad_glGetVideoi64vNV;
#define glGetVideoi64vNV sf_glad_glGetVideoi64vNV
GLAD_API_CALL PFNGLGETVIDEOIVNVPROC sf_glad_glGetVideoivNV;
#define glGetVideoivNV sf_glad_glGetVideoivNV
GLAD_API_CALL PFNGLGETVIDEOUI64VNVPROC sf_glad_glGetVideoui64vNV;
#define glGetVideoui64vNV sf_glad_glGetVideoui64vNV
GLAD_API_CALL PFNGLGETVIDEOUIVNVPROC sf_glad_glGetVideouivNV;
#define glGetVideouivNV sf_glad_glGetVideouivNV
GLAD_API_CALL PFNGLGETVKPROCADDRNVPROC sf_glad_glGetVkProcAddrNV;
#define glGetVkProcAddrNV sf_glad_glGetVkProcAddrNV
GLAD_API_CALL PFNGLGETNCOLORTABLEPROC sf_glad_glGetnColorTable;
#define glGetnColorTable sf_glad_glGetnColorTable
GLAD_API_CALL PFNGLGETNCOLORTABLEARBPROC sf_glad_glGetnColorTableARB;
#define glGetnColorTableARB sf_glad_glGetnColorTableARB
GLAD_API_CALL PFNGLGETNCOMPRESSEDTEXIMAGEPROC sf_glad_glGetnCompressedTexImage;
#define glGetnCompressedTexImage sf_glad_glGetnCompressedTexImage
GLAD_API_CALL PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC sf_glad_glGetnCompressedTexImageARB;
#define glGetnCompressedTexImageARB sf_glad_glGetnCompressedTexImageARB
GLAD_API_CALL PFNGLGETNCONVOLUTIONFILTERPROC sf_glad_glGetnConvolutionFilter;
#define glGetnConvolutionFilter sf_glad_glGetnConvolutionFilter
GLAD_API_CALL PFNGLGETNCONVOLUTIONFILTERARBPROC sf_glad_glGetnConvolutionFilterARB;
#define glGetnConvolutionFilterARB sf_glad_glGetnConvolutionFilterARB
GLAD_API_CALL PFNGLGETNHISTOGRAMPROC sf_glad_glGetnHistogram;
#define glGetnHistogram sf_glad_glGetnHistogram
GLAD_API_CALL PFNGLGETNHISTOGRAMARBPROC sf_glad_glGetnHistogramARB;
#define glGetnHistogramARB sf_glad_glGetnHistogramARB
GLAD_API_CALL PFNGLGETNMAPDVPROC sf_glad_glGetnMapdv;
#define glGetnMapdv sf_glad_glGetnMapdv
GLAD_API_CALL PFNGLGETNMAPDVARBPROC sf_glad_glGetnMapdvARB;
#define glGetnMapdvARB sf_glad_glGetnMapdvARB
GLAD_API_CALL PFNGLGETNMAPFVPROC sf_glad_glGetnMapfv;
#define glGetnMapfv sf_glad_glGetnMapfv
GLAD_API_CALL PFNGLGETNMAPFVARBPROC sf_glad_glGetnMapfvARB;
#define glGetnMapfvARB sf_glad_glGetnMapfvARB
GLAD_API_CALL PFNGLGETNMAPIVPROC sf_glad_glGetnMapiv;
#define glGetnMapiv sf_glad_glGetnMapiv
GLAD_API_CALL PFNGLGETNMAPIVARBPROC sf_glad_glGetnMapivARB;
#define glGetnMapivARB sf_glad_glGetnMapivARB
GLAD_API_CALL PFNGLGETNMINMAXPROC sf_glad_glGetnMinmax;
#define glGetnMinmax sf_glad_glGetnMinmax
GLAD_API_CALL PFNGLGETNMINMAXARBPROC sf_glad_glGetnMinmaxARB;
#define glGetnMinmaxARB sf_glad_glGetnMinmaxARB
GLAD_API_CALL PFNGLGETNPIXELMAPFVPROC sf_glad_glGetnPixelMapfv;
#define glGetnPixelMapfv sf_glad_glGetnPixelMapfv
GLAD_API_CALL PFNGLGETNPIXELMAPFVARBPROC sf_glad_glGetnPixelMapfvARB;
#define glGetnPixelMapfvARB sf_glad_glGetnPixelMapfvARB
GLAD_API_CALL PFNGLGETNPIXELMAPUIVPROC sf_glad_glGetnPixelMapuiv;
#define glGetnPixelMapuiv sf_glad_glGetnPixelMapuiv
GLAD_API_CALL PFNGLGETNPIXELMAPUIVARBPROC sf_glad_glGetnPixelMapuivARB;
#define glGetnPixelMapuivARB sf_glad_glGetnPixelMapuivARB
GLAD_API_CALL PFNGLGETNPIXELMAPUSVPROC sf_glad_glGetnPixelMapusv;
#define glGetnPixelMapusv sf_glad_glGetnPixelMapusv
GLAD_API_CALL PFNGLGETNPIXELMAPUSVARBPROC sf_glad_glGetnPixelMapusvARB;
#define glGetnPixelMapusvARB sf_glad_glGetnPixelMapusvARB
GLAD_API_CALL PFNGLGETNPOLYGONSTIPPLEPROC sf_glad_glGetnPolygonStipple;
#define glGetnPolygonStipple sf_glad_glGetnPolygonStipple
GLAD_API_CALL PFNGLGETNPOLYGONSTIPPLEARBPROC sf_glad_glGetnPolygonStippleARB;
#define glGetnPolygonStippleARB sf_glad_glGetnPolygonStippleARB
GLAD_API_CALL PFNGLGETNSEPARABLEFILTERPROC sf_glad_glGetnSeparableFilter;
#define glGetnSeparableFilter sf_glad_glGetnSeparableFilter
GLAD_API_CALL PFNGLGETNSEPARABLEFILTERARBPROC sf_glad_glGetnSeparableFilterARB;
#define glGetnSeparableFilterARB sf_glad_glGetnSeparableFilterARB
GLAD_API_CALL PFNGLGETNTEXIMAGEPROC sf_glad_glGetnTexImage;
#define glGetnTexImage sf_glad_glGetnTexImage
GLAD_API_CALL PFNGLGETNTEXIMAGEARBPROC sf_glad_glGetnTexImageARB;
#define glGetnTexImageARB sf_glad_glGetnTexImageARB
GLAD_API_CALL PFNGLGETNUNIFORMDVPROC sf_glad_glGetnUniformdv;
#define glGetnUniformdv sf_glad_glGetnUniformdv
GLAD_API_CALL PFNGLGETNUNIFORMDVARBPROC sf_glad_glGetnUniformdvARB;
#define glGetnUniformdvARB sf_glad_glGetnUniformdvARB
GLAD_API_CALL PFNGLGETNUNIFORMFVPROC sf_glad_glGetnUniformfv;
#define glGetnUniformfv sf_glad_glGetnUniformfv
GLAD_API_CALL PFNGLGETNUNIFORMFVARBPROC sf_glad_glGetnUniformfvARB;
#define glGetnUniformfvARB sf_glad_glGetnUniformfvARB
GLAD_API_CALL PFNGLGETNUNIFORMI64VARBPROC sf_glad_glGetnUniformi64vARB;
#define glGetnUniformi64vARB sf_glad_glGetnUniformi64vARB
GLAD_API_CALL PFNGLGETNUNIFORMIVPROC sf_glad_glGetnUniformiv;
#define glGetnUniformiv sf_glad_glGetnUniformiv
GLAD_API_CALL PFNGLGETNUNIFORMIVARBPROC sf_glad_glGetnUniformivARB;
#define glGetnUniformivARB sf_glad_glGetnUniformivARB
GLAD_API_CALL PFNGLGETNUNIFORMUI64VARBPROC sf_glad_glGetnUniformui64vARB;
#define glGetnUniformui64vARB sf_glad_glGetnUniformui64vARB
GLAD_API_CALL PFNGLGETNUNIFORMUIVPROC sf_glad_glGetnUniformuiv;
#define glGetnUniformuiv sf_glad_glGetnUniformuiv
GLAD_API_CALL PFNGLGETNUNIFORMUIVARBPROC sf_glad_glGetnUniformuivARB;
#define glGetnUniformuivARB sf_glad_glGetnUniformuivARB
GLAD_API_CALL PFNGLGLOBALALPHAFACTORBSUNPROC sf_glad_glGlobalAlphaFactorbSUN;
#define glGlobalAlphaFactorbSUN sf_glad_glGlobalAlphaFactorbSUN
GLAD_API_CALL PFNGLGLOBALALPHAFACTORDSUNPROC sf_glad_glGlobalAlphaFactordSUN;
#define glGlobalAlphaFactordSUN sf_glad_glGlobalAlphaFactordSUN
GLAD_API_CALL PFNGLGLOBALALPHAFACTORFSUNPROC sf_glad_glGlobalAlphaFactorfSUN;
#define glGlobalAlphaFactorfSUN sf_glad_glGlobalAlphaFactorfSUN
GLAD_API_CALL PFNGLGLOBALALPHAFACTORISUNPROC sf_glad_glGlobalAlphaFactoriSUN;
#define glGlobalAlphaFactoriSUN sf_glad_glGlobalAlphaFactoriSUN
GLAD_API_CALL PFNGLGLOBALALPHAFACTORSSUNPROC sf_glad_glGlobalAlphaFactorsSUN;
#define glGlobalAlphaFactorsSUN sf_glad_glGlobalAlphaFactorsSUN
GLAD_API_CALL PFNGLGLOBALALPHAFACTORUBSUNPROC sf_glad_glGlobalAlphaFactorubSUN;
#define glGlobalAlphaFactorubSUN sf_glad_glGlobalAlphaFactorubSUN
GLAD_API_CALL PFNGLGLOBALALPHAFACTORUISUNPROC sf_glad_glGlobalAlphaFactoruiSUN;
#define glGlobalAlphaFactoruiSUN sf_glad_glGlobalAlphaFactoruiSUN
GLAD_API_CALL PFNGLGLOBALALPHAFACTORUSSUNPROC sf_glad_glGlobalAlphaFactorusSUN;
#define glGlobalAlphaFactorusSUN sf_glad_glGlobalAlphaFactorusSUN
GLAD_API_CALL PFNGLHINTPROC sf_glad_glHint;
#define glHint sf_glad_glHint
GLAD_API_CALL PFNGLHINTPGIPROC sf_glad_glHintPGI;
#define glHintPGI sf_glad_glHintPGI
GLAD_API_CALL PFNGLHISTOGRAMPROC sf_glad_glHistogram;
#define glHistogram sf_glad_glHistogram
GLAD_API_CALL PFNGLHISTOGRAMEXTPROC sf_glad_glHistogramEXT;
#define glHistogramEXT sf_glad_glHistogramEXT
GLAD_API_CALL PFNGLIGLOOINTERFACESGIXPROC sf_glad_glIglooInterfaceSGIX;
#define glIglooInterfaceSGIX sf_glad_glIglooInterfaceSGIX
GLAD_API_CALL PFNGLIMAGETRANSFORMPARAMETERFHPPROC sf_glad_glImageTransformParameterfHP;
#define glImageTransformParameterfHP sf_glad_glImageTransformParameterfHP
GLAD_API_CALL PFNGLIMAGETRANSFORMPARAMETERFVHPPROC sf_glad_glImageTransformParameterfvHP;
#define glImageTransformParameterfvHP sf_glad_glImageTransformParameterfvHP
GLAD_API_CALL PFNGLIMAGETRANSFORMPARAMETERIHPPROC sf_glad_glImageTransformParameteriHP;
#define glImageTransformParameteriHP sf_glad_glImageTransformParameteriHP
GLAD_API_CALL PFNGLIMAGETRANSFORMPARAMETERIVHPPROC sf_glad_glImageTransformParameterivHP;
#define glImageTransformParameterivHP sf_glad_glImageTransformParameterivHP
GLAD_API_CALL PFNGLIMPORTMEMORYFDEXTPROC sf_glad_glImportMemoryFdEXT;
#define glImportMemoryFdEXT sf_glad_glImportMemoryFdEXT
GLAD_API_CALL PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC sf_glad_glImportMemoryWin32HandleEXT;
#define glImportMemoryWin32HandleEXT sf_glad_glImportMemoryWin32HandleEXT
GLAD_API_CALL PFNGLIMPORTMEMORYWIN32NAMEEXTPROC sf_glad_glImportMemoryWin32NameEXT;
#define glImportMemoryWin32NameEXT sf_glad_glImportMemoryWin32NameEXT
GLAD_API_CALL PFNGLIMPORTSEMAPHOREFDEXTPROC sf_glad_glImportSemaphoreFdEXT;
#define glImportSemaphoreFdEXT sf_glad_glImportSemaphoreFdEXT
GLAD_API_CALL PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC sf_glad_glImportSemaphoreWin32HandleEXT;
#define glImportSemaphoreWin32HandleEXT sf_glad_glImportSemaphoreWin32HandleEXT
GLAD_API_CALL PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC sf_glad_glImportSemaphoreWin32NameEXT;
#define glImportSemaphoreWin32NameEXT sf_glad_glImportSemaphoreWin32NameEXT
GLAD_API_CALL PFNGLIMPORTSYNCEXTPROC sf_glad_glImportSyncEXT;
#define glImportSyncEXT sf_glad_glImportSyncEXT
GLAD_API_CALL PFNGLINDEXFORMATNVPROC sf_glad_glIndexFormatNV;
#define glIndexFormatNV sf_glad_glIndexFormatNV
GLAD_API_CALL PFNGLINDEXFUNCEXTPROC sf_glad_glIndexFuncEXT;
#define glIndexFuncEXT sf_glad_glIndexFuncEXT
GLAD_API_CALL PFNGLINDEXMASKPROC sf_glad_glIndexMask;
#define glIndexMask sf_glad_glIndexMask
GLAD_API_CALL PFNGLINDEXMATERIALEXTPROC sf_glad_glIndexMaterialEXT;
#define glIndexMaterialEXT sf_glad_glIndexMaterialEXT
GLAD_API_CALL PFNGLINDEXPOINTERPROC sf_glad_glIndexPointer;
#define glIndexPointer sf_glad_glIndexPointer
GLAD_API_CALL PFNGLINDEXPOINTEREXTPROC sf_glad_glIndexPointerEXT;
#define glIndexPointerEXT sf_glad_glIndexPointerEXT
GLAD_API_CALL PFNGLINDEXPOINTERLISTIBMPROC sf_glad_glIndexPointerListIBM;
#define glIndexPointerListIBM sf_glad_glIndexPointerListIBM
GLAD_API_CALL PFNGLINDEXDPROC sf_glad_glIndexd;
#define glIndexd sf_glad_glIndexd
GLAD_API_CALL PFNGLINDEXDVPROC sf_glad_glIndexdv;
#define glIndexdv sf_glad_glIndexdv
GLAD_API_CALL PFNGLINDEXFPROC sf_glad_glIndexf;
#define glIndexf sf_glad_glIndexf
GLAD_API_CALL PFNGLINDEXFVPROC sf_glad_glIndexfv;
#define glIndexfv sf_glad_glIndexfv
GLAD_API_CALL PFNGLINDEXIPROC sf_glad_glIndexi;
#define glIndexi sf_glad_glIndexi
GLAD_API_CALL PFNGLINDEXIVPROC sf_glad_glIndexiv;
#define glIndexiv sf_glad_glIndexiv
GLAD_API_CALL PFNGLINDEXSPROC sf_glad_glIndexs;
#define glIndexs sf_glad_glIndexs
GLAD_API_CALL PFNGLINDEXSVPROC sf_glad_glIndexsv;
#define glIndexsv sf_glad_glIndexsv
GLAD_API_CALL PFNGLINDEXUBPROC sf_glad_glIndexub;
#define glIndexub sf_glad_glIndexub
GLAD_API_CALL PFNGLINDEXUBVPROC sf_glad_glIndexubv;
#define glIndexubv sf_glad_glIndexubv
GLAD_API_CALL PFNGLINDEXXOESPROC sf_glad_glIndexxOES;
#define glIndexxOES sf_glad_glIndexxOES
GLAD_API_CALL PFNGLINDEXXVOESPROC sf_glad_glIndexxvOES;
#define glIndexxvOES sf_glad_glIndexxvOES
GLAD_API_CALL PFNGLINITNAMESPROC sf_glad_glInitNames;
#define glInitNames sf_glad_glInitNames
GLAD_API_CALL PFNGLINSERTCOMPONENTEXTPROC sf_glad_glInsertComponentEXT;
#define glInsertComponentEXT sf_glad_glInsertComponentEXT
GLAD_API_CALL PFNGLINSERTEVENTMARKEREXTPROC sf_glad_glInsertEventMarkerEXT;
#define glInsertEventMarkerEXT sf_glad_glInsertEventMarkerEXT
GLAD_API_CALL PFNGLINSTRUMENTSBUFFERSGIXPROC sf_glad_glInstrumentsBufferSGIX;
#define glInstrumentsBufferSGIX sf_glad_glInstrumentsBufferSGIX
GLAD_API_CALL PFNGLINTERLEAVEDARRAYSPROC sf_glad_glInterleavedArrays;
#define glInterleavedArrays sf_glad_glInterleavedArrays
GLAD_API_CALL PFNGLINTERPOLATEPATHSNVPROC sf_glad_glInterpolatePathsNV;
#define glInterpolatePathsNV sf_glad_glInterpolatePathsNV
GLAD_API_CALL PFNGLINVALIDATEBUFFERDATAPROC sf_glad_glInvalidateBufferData;
#define glInvalidateBufferData sf_glad_glInvalidateBufferData
GLAD_API_CALL PFNGLINVALIDATEBUFFERSUBDATAPROC sf_glad_glInvalidateBufferSubData;
#define glInvalidateBufferSubData sf_glad_glInvalidateBufferSubData
GLAD_API_CALL PFNGLINVALIDATEFRAMEBUFFERPROC sf_glad_glInvalidateFramebuffer;
#define glInvalidateFramebuffer sf_glad_glInvalidateFramebuffer
GLAD_API_CALL PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC sf_glad_glInvalidateNamedFramebufferData;
#define glInvalidateNamedFramebufferData sf_glad_glInvalidateNamedFramebufferData
GLAD_API_CALL PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC sf_glad_glInvalidateNamedFramebufferSubData;
#define glInvalidateNamedFramebufferSubData sf_glad_glInvalidateNamedFramebufferSubData
GLAD_API_CALL PFNGLINVALIDATESUBFRAMEBUFFERPROC sf_glad_glInvalidateSubFramebuffer;
#define glInvalidateSubFramebuffer sf_glad_glInvalidateSubFramebuffer
GLAD_API_CALL PFNGLINVALIDATETEXIMAGEPROC sf_glad_glInvalidateTexImage;
#define glInvalidateTexImage sf_glad_glInvalidateTexImage
GLAD_API_CALL PFNGLINVALIDATETEXSUBIMAGEPROC sf_glad_glInvalidateTexSubImage;
#define glInvalidateTexSubImage sf_glad_glInvalidateTexSubImage
GLAD_API_CALL PFNGLISASYNCMARKERSGIXPROC sf_glad_glIsAsyncMarkerSGIX;
#define glIsAsyncMarkerSGIX sf_glad_glIsAsyncMarkerSGIX
GLAD_API_CALL PFNGLISBUFFERPROC sf_glad_glIsBuffer;
#define glIsBuffer sf_glad_glIsBuffer
GLAD_API_CALL PFNGLISBUFFERARBPROC sf_glad_glIsBufferARB;
#define glIsBufferARB sf_glad_glIsBufferARB
GLAD_API_CALL PFNGLISBUFFERRESIDENTNVPROC sf_glad_glIsBufferResidentNV;
#define glIsBufferResidentNV sf_glad_glIsBufferResidentNV
GLAD_API_CALL PFNGLISCOMMANDLISTNVPROC sf_glad_glIsCommandListNV;
#define glIsCommandListNV sf_glad_glIsCommandListNV
GLAD_API_CALL PFNGLISENABLEDPROC sf_glad_glIsEnabled;
#define glIsEnabled sf_glad_glIsEnabled
GLAD_API_CALL PFNGLISENABLEDINDEXEDEXTPROC sf_glad_glIsEnabledIndexedEXT;
#define glIsEnabledIndexedEXT sf_glad_glIsEnabledIndexedEXT
GLAD_API_CALL PFNGLISENABLEDIPROC sf_glad_glIsEnabledi;
#define glIsEnabledi sf_glad_glIsEnabledi
GLAD_API_CALL PFNGLISFENCEAPPLEPROC sf_glad_glIsFenceAPPLE;
#define glIsFenceAPPLE sf_glad_glIsFenceAPPLE
GLAD_API_CALL PFNGLISFENCENVPROC sf_glad_glIsFenceNV;
#define glIsFenceNV sf_glad_glIsFenceNV
GLAD_API_CALL PFNGLISFRAMEBUFFERPROC sf_glad_glIsFramebuffer;
#define glIsFramebuffer sf_glad_glIsFramebuffer
GLAD_API_CALL PFNGLISFRAMEBUFFEREXTPROC sf_glad_glIsFramebufferEXT;
#define glIsFramebufferEXT sf_glad_glIsFramebufferEXT
GLAD_API_CALL PFNGLISIMAGEHANDLERESIDENTARBPROC sf_glad_glIsImageHandleResidentARB;
#define glIsImageHandleResidentARB sf_glad_glIsImageHandleResidentARB
GLAD_API_CALL PFNGLISIMAGEHANDLERESIDENTNVPROC sf_glad_glIsImageHandleResidentNV;
#define glIsImageHandleResidentNV sf_glad_glIsImageHandleResidentNV
GLAD_API_CALL PFNGLISLISTPROC sf_glad_glIsList;
#define glIsList sf_glad_glIsList
GLAD_API_CALL PFNGLISMEMORYOBJECTEXTPROC sf_glad_glIsMemoryObjectEXT;
#define glIsMemoryObjectEXT sf_glad_glIsMemoryObjectEXT
GLAD_API_CALL PFNGLISNAMEAMDPROC sf_glad_glIsNameAMD;
#define glIsNameAMD sf_glad_glIsNameAMD
GLAD_API_CALL PFNGLISNAMEDBUFFERRESIDENTNVPROC sf_glad_glIsNamedBufferResidentNV;
#define glIsNamedBufferResidentNV sf_glad_glIsNamedBufferResidentNV
GLAD_API_CALL PFNGLISNAMEDSTRINGARBPROC sf_glad_glIsNamedStringARB;
#define glIsNamedStringARB sf_glad_glIsNamedStringARB
GLAD_API_CALL PFNGLISOBJECTBUFFERATIPROC sf_glad_glIsObjectBufferATI;
#define glIsObjectBufferATI sf_glad_glIsObjectBufferATI
GLAD_API_CALL PFNGLISOCCLUSIONQUERYNVPROC sf_glad_glIsOcclusionQueryNV;
#define glIsOcclusionQueryNV sf_glad_glIsOcclusionQueryNV
GLAD_API_CALL PFNGLISPATHNVPROC sf_glad_glIsPathNV;
#define glIsPathNV sf_glad_glIsPathNV
GLAD_API_CALL PFNGLISPOINTINFILLPATHNVPROC sf_glad_glIsPointInFillPathNV;
#define glIsPointInFillPathNV sf_glad_glIsPointInFillPathNV
GLAD_API_CALL PFNGLISPOINTINSTROKEPATHNVPROC sf_glad_glIsPointInStrokePathNV;
#define glIsPointInStrokePathNV sf_glad_glIsPointInStrokePathNV
GLAD_API_CALL PFNGLISPROGRAMPROC sf_glad_glIsProgram;
#define glIsProgram sf_glad_glIsProgram
GLAD_API_CALL PFNGLISPROGRAMARBPROC sf_glad_glIsProgramARB;
#define glIsProgramARB sf_glad_glIsProgramARB
GLAD_API_CALL PFNGLISPROGRAMNVPROC sf_glad_glIsProgramNV;
#define glIsProgramNV sf_glad_glIsProgramNV
GLAD_API_CALL PFNGLISPROGRAMPIPELINEPROC sf_glad_glIsProgramPipeline;
#define glIsProgramPipeline sf_glad_glIsProgramPipeline
GLAD_API_CALL PFNGLISQUERYPROC sf_glad_glIsQuery;
#define glIsQuery sf_glad_glIsQuery
GLAD_API_CALL PFNGLISQUERYARBPROC sf_glad_glIsQueryARB;
#define glIsQueryARB sf_glad_glIsQueryARB
GLAD_API_CALL PFNGLISRENDERBUFFERPROC sf_glad_glIsRenderbuffer;
#define glIsRenderbuffer sf_glad_glIsRenderbuffer
GLAD_API_CALL PFNGLISRENDERBUFFEREXTPROC sf_glad_glIsRenderbufferEXT;
#define glIsRenderbufferEXT sf_glad_glIsRenderbufferEXT
GLAD_API_CALL PFNGLISSAMPLERPROC sf_glad_glIsSampler;
#define glIsSampler sf_glad_glIsSampler
GLAD_API_CALL PFNGLISSEMAPHOREEXTPROC sf_glad_glIsSemaphoreEXT;
#define glIsSemaphoreEXT sf_glad_glIsSemaphoreEXT
GLAD_API_CALL PFNGLISSHADERPROC sf_glad_glIsShader;
#define glIsShader sf_glad_glIsShader
GLAD_API_CALL PFNGLISSTATENVPROC sf_glad_glIsStateNV;
#define glIsStateNV sf_glad_glIsStateNV
GLAD_API_CALL PFNGLISSYNCPROC sf_glad_glIsSync;
#define glIsSync sf_glad_glIsSync
GLAD_API_CALL PFNGLISTEXTUREPROC sf_glad_glIsTexture;
#define glIsTexture sf_glad_glIsTexture
GLAD_API_CALL PFNGLISTEXTUREEXTPROC sf_glad_glIsTextureEXT;
#define glIsTextureEXT sf_glad_glIsTextureEXT
GLAD_API_CALL PFNGLISTEXTUREHANDLERESIDENTARBPROC sf_glad_glIsTextureHandleResidentARB;
#define glIsTextureHandleResidentARB sf_glad_glIsTextureHandleResidentARB
GLAD_API_CALL PFNGLISTEXTUREHANDLERESIDENTNVPROC sf_glad_glIsTextureHandleResidentNV;
#define glIsTextureHandleResidentNV sf_glad_glIsTextureHandleResidentNV
GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKPROC sf_glad_glIsTransformFeedback;
#define glIsTransformFeedback sf_glad_glIsTransformFeedback
GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKNVPROC sf_glad_glIsTransformFeedbackNV;
#define glIsTransformFeedbackNV sf_glad_glIsTransformFeedbackNV
GLAD_API_CALL PFNGLISVARIANTENABLEDEXTPROC sf_glad_glIsVariantEnabledEXT;
#define glIsVariantEnabledEXT sf_glad_glIsVariantEnabledEXT
GLAD_API_CALL PFNGLISVERTEXARRAYPROC sf_glad_glIsVertexArray;
#define glIsVertexArray sf_glad_glIsVertexArray
GLAD_API_CALL PFNGLISVERTEXARRAYAPPLEPROC sf_glad_glIsVertexArrayAPPLE;
#define glIsVertexArrayAPPLE sf_glad_glIsVertexArrayAPPLE
GLAD_API_CALL PFNGLISVERTEXATTRIBENABLEDAPPLEPROC sf_glad_glIsVertexAttribEnabledAPPLE;
#define glIsVertexAttribEnabledAPPLE sf_glad_glIsVertexAttribEnabledAPPLE
GLAD_API_CALL PFNGLLGPUCOPYIMAGESUBDATANVXPROC sf_glad_glLGPUCopyImageSubDataNVX;
#define glLGPUCopyImageSubDataNVX sf_glad_glLGPUCopyImageSubDataNVX
GLAD_API_CALL PFNGLLGPUINTERLOCKNVXPROC sf_glad_glLGPUInterlockNVX;
#define glLGPUInterlockNVX sf_glad_glLGPUInterlockNVX
GLAD_API_CALL PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC sf_glad_glLGPUNamedBufferSubDataNVX;
#define glLGPUNamedBufferSubDataNVX sf_glad_glLGPUNamedBufferSubDataNVX
GLAD_API_CALL PFNGLLABELOBJECTEXTPROC sf_glad_glLabelObjectEXT;
#define glLabelObjectEXT sf_glad_glLabelObjectEXT
GLAD_API_CALL PFNGLLIGHTENVISGIXPROC sf_glad_glLightEnviSGIX;
#define glLightEnviSGIX sf_glad_glLightEnviSGIX
GLAD_API_CALL PFNGLLIGHTMODELFPROC sf_glad_glLightModelf;
#define glLightModelf sf_glad_glLightModelf
GLAD_API_CALL PFNGLLIGHTMODELFVPROC sf_glad_glLightModelfv;
#define glLightModelfv sf_glad_glLightModelfv
GLAD_API_CALL PFNGLLIGHTMODELIPROC sf_glad_glLightModeli;
#define glLightModeli sf_glad_glLightModeli
GLAD_API_CALL PFNGLLIGHTMODELIVPROC sf_glad_glLightModeliv;
#define glLightModeliv sf_glad_glLightModeliv
GLAD_API_CALL PFNGLLIGHTMODELXOESPROC sf_glad_glLightModelxOES;
#define glLightModelxOES sf_glad_glLightModelxOES
GLAD_API_CALL PFNGLLIGHTMODELXVOESPROC sf_glad_glLightModelxvOES;
#define glLightModelxvOES sf_glad_glLightModelxvOES
GLAD_API_CALL PFNGLLIGHTFPROC sf_glad_glLightf;
#define glLightf sf_glad_glLightf
GLAD_API_CALL PFNGLLIGHTFVPROC sf_glad_glLightfv;
#define glLightfv sf_glad_glLightfv
GLAD_API_CALL PFNGLLIGHTIPROC sf_glad_glLighti;
#define glLighti sf_glad_glLighti
GLAD_API_CALL PFNGLLIGHTIVPROC sf_glad_glLightiv;
#define glLightiv sf_glad_glLightiv
GLAD_API_CALL PFNGLLIGHTXOESPROC sf_glad_glLightxOES;
#define glLightxOES sf_glad_glLightxOES
GLAD_API_CALL PFNGLLIGHTXVOESPROC sf_glad_glLightxvOES;
#define glLightxvOES sf_glad_glLightxvOES
GLAD_API_CALL PFNGLLINESTIPPLEPROC sf_glad_glLineStipple;
#define glLineStipple sf_glad_glLineStipple
GLAD_API_CALL PFNGLLINEWIDTHPROC sf_glad_glLineWidth;
#define glLineWidth sf_glad_glLineWidth
GLAD_API_CALL PFNGLLINEWIDTHXOESPROC sf_glad_glLineWidthxOES;
#define glLineWidthxOES sf_glad_glLineWidthxOES
GLAD_API_CALL PFNGLLINKPROGRAMPROC sf_glad_glLinkProgram;
#define glLinkProgram sf_glad_glLinkProgram
GLAD_API_CALL PFNGLLINKPROGRAMARBPROC sf_glad_glLinkProgramARB;
#define glLinkProgramARB sf_glad_glLinkProgramARB
GLAD_API_CALL PFNGLLISTBASEPROC sf_glad_glListBase;
#define glListBase sf_glad_glListBase
GLAD_API_CALL PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC sf_glad_glListDrawCommandsStatesClientNV;
#define glListDrawCommandsStatesClientNV sf_glad_glListDrawCommandsStatesClientNV
GLAD_API_CALL PFNGLLISTPARAMETERFSGIXPROC sf_glad_glListParameterfSGIX;
#define glListParameterfSGIX sf_glad_glListParameterfSGIX
GLAD_API_CALL PFNGLLISTPARAMETERFVSGIXPROC sf_glad_glListParameterfvSGIX;
#define glListParameterfvSGIX sf_glad_glListParameterfvSGIX
GLAD_API_CALL PFNGLLISTPARAMETERISGIXPROC sf_glad_glListParameteriSGIX;
#define glListParameteriSGIX sf_glad_glListParameteriSGIX
GLAD_API_CALL PFNGLLISTPARAMETERIVSGIXPROC sf_glad_glListParameterivSGIX;
#define glListParameterivSGIX sf_glad_glListParameterivSGIX
GLAD_API_CALL PFNGLLOADIDENTITYPROC sf_glad_glLoadIdentity;
#define glLoadIdentity sf_glad_glLoadIdentity
GLAD_API_CALL PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC sf_glad_glLoadIdentityDeformationMapSGIX;
#define glLoadIdentityDeformationMapSGIX sf_glad_glLoadIdentityDeformationMapSGIX
GLAD_API_CALL PFNGLLOADMATRIXDPROC sf_glad_glLoadMatrixd;
#define glLoadMatrixd sf_glad_glLoadMatrixd
GLAD_API_CALL PFNGLLOADMATRIXFPROC sf_glad_glLoadMatrixf;
#define glLoadMatrixf sf_glad_glLoadMatrixf
GLAD_API_CALL PFNGLLOADMATRIXXOESPROC sf_glad_glLoadMatrixxOES;
#define glLoadMatrixxOES sf_glad_glLoadMatrixxOES
GLAD_API_CALL PFNGLLOADNAMEPROC sf_glad_glLoadName;
#define glLoadName sf_glad_glLoadName
GLAD_API_CALL PFNGLLOADPROGRAMNVPROC sf_glad_glLoadProgramNV;
#define glLoadProgramNV sf_glad_glLoadProgramNV
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXDPROC sf_glad_glLoadTransposeMatrixd;
#define glLoadTransposeMatrixd sf_glad_glLoadTransposeMatrixd
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXDARBPROC sf_glad_glLoadTransposeMatrixdARB;
#define glLoadTransposeMatrixdARB sf_glad_glLoadTransposeMatrixdARB
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXFPROC sf_glad_glLoadTransposeMatrixf;
#define glLoadTransposeMatrixf sf_glad_glLoadTransposeMatrixf
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXFARBPROC sf_glad_glLoadTransposeMatrixfARB;
#define glLoadTransposeMatrixfARB sf_glad_glLoadTransposeMatrixfARB
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXXOESPROC sf_glad_glLoadTransposeMatrixxOES;
#define glLoadTransposeMatrixxOES sf_glad_glLoadTransposeMatrixxOES
GLAD_API_CALL PFNGLLOCKARRAYSEXTPROC sf_glad_glLockArraysEXT;
#define glLockArraysEXT sf_glad_glLockArraysEXT
GLAD_API_CALL PFNGLLOGICOPPROC sf_glad_glLogicOp;
#define glLogicOp sf_glad_glLogicOp
GLAD_API_CALL PFNGLMAKEBUFFERNONRESIDENTNVPROC sf_glad_glMakeBufferNonResidentNV;
#define glMakeBufferNonResidentNV sf_glad_glMakeBufferNonResidentNV
GLAD_API_CALL PFNGLMAKEBUFFERRESIDENTNVPROC sf_glad_glMakeBufferResidentNV;
#define glMakeBufferResidentNV sf_glad_glMakeBufferResidentNV
GLAD_API_CALL PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC sf_glad_glMakeImageHandleNonResidentARB;
#define glMakeImageHandleNonResidentARB sf_glad_glMakeImageHandleNonResidentARB
GLAD_API_CALL PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC sf_glad_glMakeImageHandleNonResidentNV;
#define glMakeImageHandleNonResidentNV sf_glad_glMakeImageHandleNonResidentNV
GLAD_API_CALL PFNGLMAKEIMAGEHANDLERESIDENTARBPROC sf_glad_glMakeImageHandleResidentARB;
#define glMakeImageHandleResidentARB sf_glad_glMakeImageHandleResidentARB
GLAD_API_CALL PFNGLMAKEIMAGEHANDLERESIDENTNVPROC sf_glad_glMakeImageHandleResidentNV;
#define glMakeImageHandleResidentNV sf_glad_glMakeImageHandleResidentNV
GLAD_API_CALL PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC sf_glad_glMakeNamedBufferNonResidentNV;
#define glMakeNamedBufferNonResidentNV sf_glad_glMakeNamedBufferNonResidentNV
GLAD_API_CALL PFNGLMAKENAMEDBUFFERRESIDENTNVPROC sf_glad_glMakeNamedBufferResidentNV;
#define glMakeNamedBufferResidentNV sf_glad_glMakeNamedBufferResidentNV
GLAD_API_CALL PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC sf_glad_glMakeTextureHandleNonResidentARB;
#define glMakeTextureHandleNonResidentARB sf_glad_glMakeTextureHandleNonResidentARB
GLAD_API_CALL PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC sf_glad_glMakeTextureHandleNonResidentNV;
#define glMakeTextureHandleNonResidentNV sf_glad_glMakeTextureHandleNonResidentNV
GLAD_API_CALL PFNGLMAKETEXTUREHANDLERESIDENTARBPROC sf_glad_glMakeTextureHandleResidentARB;
#define glMakeTextureHandleResidentARB sf_glad_glMakeTextureHandleResidentARB
GLAD_API_CALL PFNGLMAKETEXTUREHANDLERESIDENTNVPROC sf_glad_glMakeTextureHandleResidentNV;
#define glMakeTextureHandleResidentNV sf_glad_glMakeTextureHandleResidentNV
GLAD_API_CALL PFNGLMAP1DPROC sf_glad_glMap1d;
#define glMap1d sf_glad_glMap1d
GLAD_API_CALL PFNGLMAP1FPROC sf_glad_glMap1f;
#define glMap1f sf_glad_glMap1f
GLAD_API_CALL PFNGLMAP1XOESPROC sf_glad_glMap1xOES;
#define glMap1xOES sf_glad_glMap1xOES
GLAD_API_CALL PFNGLMAP2DPROC sf_glad_glMap2d;
#define glMap2d sf_glad_glMap2d
GLAD_API_CALL PFNGLMAP2FPROC sf_glad_glMap2f;
#define glMap2f sf_glad_glMap2f
GLAD_API_CALL PFNGLMAP2XOESPROC sf_glad_glMap2xOES;
#define glMap2xOES sf_glad_glMap2xOES
GLAD_API_CALL PFNGLMAPBUFFERPROC sf_glad_glMapBuffer;
#define glMapBuffer sf_glad_glMapBuffer
GLAD_API_CALL PFNGLMAPBUFFERARBPROC sf_glad_glMapBufferARB;
#define glMapBufferARB sf_glad_glMapBufferARB
GLAD_API_CALL PFNGLMAPBUFFERRANGEPROC sf_glad_glMapBufferRange;
#define glMapBufferRange sf_glad_glMapBufferRange
GLAD_API_CALL PFNGLMAPCONTROLPOINTSNVPROC sf_glad_glMapControlPointsNV;
#define glMapControlPointsNV sf_glad_glMapControlPointsNV
GLAD_API_CALL PFNGLMAPGRID1DPROC sf_glad_glMapGrid1d;
#define glMapGrid1d sf_glad_glMapGrid1d
GLAD_API_CALL PFNGLMAPGRID1FPROC sf_glad_glMapGrid1f;
#define glMapGrid1f sf_glad_glMapGrid1f
GLAD_API_CALL PFNGLMAPGRID1XOESPROC sf_glad_glMapGrid1xOES;
#define glMapGrid1xOES sf_glad_glMapGrid1xOES
GLAD_API_CALL PFNGLMAPGRID2DPROC sf_glad_glMapGrid2d;
#define glMapGrid2d sf_glad_glMapGrid2d
GLAD_API_CALL PFNGLMAPGRID2FPROC sf_glad_glMapGrid2f;
#define glMapGrid2f sf_glad_glMapGrid2f
GLAD_API_CALL PFNGLMAPGRID2XOESPROC sf_glad_glMapGrid2xOES;
#define glMapGrid2xOES sf_glad_glMapGrid2xOES
GLAD_API_CALL PFNGLMAPNAMEDBUFFERPROC sf_glad_glMapNamedBuffer;
#define glMapNamedBuffer sf_glad_glMapNamedBuffer
GLAD_API_CALL PFNGLMAPNAMEDBUFFEREXTPROC sf_glad_glMapNamedBufferEXT;
#define glMapNamedBufferEXT sf_glad_glMapNamedBufferEXT
GLAD_API_CALL PFNGLMAPNAMEDBUFFERRANGEPROC sf_glad_glMapNamedBufferRange;
#define glMapNamedBufferRange sf_glad_glMapNamedBufferRange
GLAD_API_CALL PFNGLMAPNAMEDBUFFERRANGEEXTPROC sf_glad_glMapNamedBufferRangeEXT;
#define glMapNamedBufferRangeEXT sf_glad_glMapNamedBufferRangeEXT
GLAD_API_CALL PFNGLMAPOBJECTBUFFERATIPROC sf_glad_glMapObjectBufferATI;
#define glMapObjectBufferATI sf_glad_glMapObjectBufferATI
GLAD_API_CALL PFNGLMAPPARAMETERFVNVPROC sf_glad_glMapParameterfvNV;
#define glMapParameterfvNV sf_glad_glMapParameterfvNV
GLAD_API_CALL PFNGLMAPPARAMETERIVNVPROC sf_glad_glMapParameterivNV;
#define glMapParameterivNV sf_glad_glMapParameterivNV
GLAD_API_CALL PFNGLMAPTEXTURE2DINTELPROC sf_glad_glMapTexture2DINTEL;
#define glMapTexture2DINTEL sf_glad_glMapTexture2DINTEL
GLAD_API_CALL PFNGLMAPVERTEXATTRIB1DAPPLEPROC sf_glad_glMapVertexAttrib1dAPPLE;
#define glMapVertexAttrib1dAPPLE sf_glad_glMapVertexAttrib1dAPPLE
GLAD_API_CALL PFNGLMAPVERTEXATTRIB1FAPPLEPROC sf_glad_glMapVertexAttrib1fAPPLE;
#define glMapVertexAttrib1fAPPLE sf_glad_glMapVertexAttrib1fAPPLE
GLAD_API_CALL PFNGLMAPVERTEXATTRIB2DAPPLEPROC sf_glad_glMapVertexAttrib2dAPPLE;
#define glMapVertexAttrib2dAPPLE sf_glad_glMapVertexAttrib2dAPPLE
GLAD_API_CALL PFNGLMAPVERTEXATTRIB2FAPPLEPROC sf_glad_glMapVertexAttrib2fAPPLE;
#define glMapVertexAttrib2fAPPLE sf_glad_glMapVertexAttrib2fAPPLE
GLAD_API_CALL PFNGLMATERIALFPROC sf_glad_glMaterialf;
#define glMaterialf sf_glad_glMaterialf
GLAD_API_CALL PFNGLMATERIALFVPROC sf_glad_glMaterialfv;
#define glMaterialfv sf_glad_glMaterialfv
GLAD_API_CALL PFNGLMATERIALIPROC sf_glad_glMateriali;
#define glMateriali sf_glad_glMateriali
GLAD_API_CALL PFNGLMATERIALIVPROC sf_glad_glMaterialiv;
#define glMaterialiv sf_glad_glMaterialiv
GLAD_API_CALL PFNGLMATERIALXOESPROC sf_glad_glMaterialxOES;
#define glMaterialxOES sf_glad_glMaterialxOES
GLAD_API_CALL PFNGLMATERIALXVOESPROC sf_glad_glMaterialxvOES;
#define glMaterialxvOES sf_glad_glMaterialxvOES
GLAD_API_CALL PFNGLMATRIXFRUSTUMEXTPROC sf_glad_glMatrixFrustumEXT;
#define glMatrixFrustumEXT sf_glad_glMatrixFrustumEXT
GLAD_API_CALL PFNGLMATRIXINDEXPOINTERARBPROC sf_glad_glMatrixIndexPointerARB;
#define glMatrixIndexPointerARB sf_glad_glMatrixIndexPointerARB
GLAD_API_CALL PFNGLMATRIXINDEXUBVARBPROC sf_glad_glMatrixIndexubvARB;
#define glMatrixIndexubvARB sf_glad_glMatrixIndexubvARB
GLAD_API_CALL PFNGLMATRIXINDEXUIVARBPROC sf_glad_glMatrixIndexuivARB;
#define glMatrixIndexuivARB sf_glad_glMatrixIndexuivARB
GLAD_API_CALL PFNGLMATRIXINDEXUSVARBPROC sf_glad_glMatrixIndexusvARB;
#define glMatrixIndexusvARB sf_glad_glMatrixIndexusvARB
GLAD_API_CALL PFNGLMATRIXLOAD3X2FNVPROC sf_glad_glMatrixLoad3x2fNV;
#define glMatrixLoad3x2fNV sf_glad_glMatrixLoad3x2fNV
GLAD_API_CALL PFNGLMATRIXLOAD3X3FNVPROC sf_glad_glMatrixLoad3x3fNV;
#define glMatrixLoad3x3fNV sf_glad_glMatrixLoad3x3fNV
GLAD_API_CALL PFNGLMATRIXLOADIDENTITYEXTPROC sf_glad_glMatrixLoadIdentityEXT;
#define glMatrixLoadIdentityEXT sf_glad_glMatrixLoadIdentityEXT
GLAD_API_CALL PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC sf_glad_glMatrixLoadTranspose3x3fNV;
#define glMatrixLoadTranspose3x3fNV sf_glad_glMatrixLoadTranspose3x3fNV
GLAD_API_CALL PFNGLMATRIXLOADTRANSPOSEDEXTPROC sf_glad_glMatrixLoadTransposedEXT;
#define glMatrixLoadTransposedEXT sf_glad_glMatrixLoadTransposedEXT
GLAD_API_CALL PFNGLMATRIXLOADTRANSPOSEFEXTPROC sf_glad_glMatrixLoadTransposefEXT;
#define glMatrixLoadTransposefEXT sf_glad_glMatrixLoadTransposefEXT
GLAD_API_CALL PFNGLMATRIXLOADDEXTPROC sf_glad_glMatrixLoaddEXT;
#define glMatrixLoaddEXT sf_glad_glMatrixLoaddEXT
GLAD_API_CALL PFNGLMATRIXLOADFEXTPROC sf_glad_glMatrixLoadfEXT;
#define glMatrixLoadfEXT sf_glad_glMatrixLoadfEXT
GLAD_API_CALL PFNGLMATRIXMODEPROC sf_glad_glMatrixMode;
#define glMatrixMode sf_glad_glMatrixMode
GLAD_API_CALL PFNGLMATRIXMULT3X2FNVPROC sf_glad_glMatrixMult3x2fNV;
#define glMatrixMult3x2fNV sf_glad_glMatrixMult3x2fNV
GLAD_API_CALL PFNGLMATRIXMULT3X3FNVPROC sf_glad_glMatrixMult3x3fNV;
#define glMatrixMult3x3fNV sf_glad_glMatrixMult3x3fNV
GLAD_API_CALL PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC sf_glad_glMatrixMultTranspose3x3fNV;
#define glMatrixMultTranspose3x3fNV sf_glad_glMatrixMultTranspose3x3fNV
GLAD_API_CALL PFNGLMATRIXMULTTRANSPOSEDEXTPROC sf_glad_glMatrixMultTransposedEXT;
#define glMatrixMultTransposedEXT sf_glad_glMatrixMultTransposedEXT
GLAD_API_CALL PFNGLMATRIXMULTTRANSPOSEFEXTPROC sf_glad_glMatrixMultTransposefEXT;
#define glMatrixMultTransposefEXT sf_glad_glMatrixMultTransposefEXT
GLAD_API_CALL PFNGLMATRIXMULTDEXTPROC sf_glad_glMatrixMultdEXT;
#define glMatrixMultdEXT sf_glad_glMatrixMultdEXT
GLAD_API_CALL PFNGLMATRIXMULTFEXTPROC sf_glad_glMatrixMultfEXT;
#define glMatrixMultfEXT sf_glad_glMatrixMultfEXT
GLAD_API_CALL PFNGLMATRIXORTHOEXTPROC sf_glad_glMatrixOrthoEXT;
#define glMatrixOrthoEXT sf_glad_glMatrixOrthoEXT
GLAD_API_CALL PFNGLMATRIXPOPEXTPROC sf_glad_glMatrixPopEXT;
#define glMatrixPopEXT sf_glad_glMatrixPopEXT
GLAD_API_CALL PFNGLMATRIXPUSHEXTPROC sf_glad_glMatrixPushEXT;
#define glMatrixPushEXT sf_glad_glMatrixPushEXT
GLAD_API_CALL PFNGLMATRIXROTATEDEXTPROC sf_glad_glMatrixRotatedEXT;
#define glMatrixRotatedEXT sf_glad_glMatrixRotatedEXT
GLAD_API_CALL PFNGLMATRIXROTATEFEXTPROC sf_glad_glMatrixRotatefEXT;
#define glMatrixRotatefEXT sf_glad_glMatrixRotatefEXT
GLAD_API_CALL PFNGLMATRIXSCALEDEXTPROC sf_glad_glMatrixScaledEXT;
#define glMatrixScaledEXT sf_glad_glMatrixScaledEXT
GLAD_API_CALL PFNGLMATRIXSCALEFEXTPROC sf_glad_glMatrixScalefEXT;
#define glMatrixScalefEXT sf_glad_glMatrixScalefEXT
GLAD_API_CALL PFNGLMATRIXTRANSLATEDEXTPROC sf_glad_glMatrixTranslatedEXT;
#define glMatrixTranslatedEXT sf_glad_glMatrixTranslatedEXT
GLAD_API_CALL PFNGLMATRIXTRANSLATEFEXTPROC sf_glad_glMatrixTranslatefEXT;
#define glMatrixTranslatefEXT sf_glad_glMatrixTranslatefEXT
GLAD_API_CALL PFNGLMAXSHADERCOMPILERTHREADSARBPROC sf_glad_glMaxShaderCompilerThreadsARB;
#define glMaxShaderCompilerThreadsARB sf_glad_glMaxShaderCompilerThreadsARB
GLAD_API_CALL PFNGLMAXSHADERCOMPILERTHREADSKHRPROC sf_glad_glMaxShaderCompilerThreadsKHR;
#define glMaxShaderCompilerThreadsKHR sf_glad_glMaxShaderCompilerThreadsKHR
GLAD_API_CALL PFNGLMEMORYBARRIERPROC sf_glad_glMemoryBarrier;
#define glMemoryBarrier sf_glad_glMemoryBarrier
GLAD_API_CALL PFNGLMEMORYBARRIERBYREGIONPROC sf_glad_glMemoryBarrierByRegion;
#define glMemoryBarrierByRegion sf_glad_glMemoryBarrierByRegion
GLAD_API_CALL PFNGLMEMORYBARRIEREXTPROC sf_glad_glMemoryBarrierEXT;
#define glMemoryBarrierEXT sf_glad_glMemoryBarrierEXT
GLAD_API_CALL PFNGLMEMORYOBJECTPARAMETERIVEXTPROC sf_glad_glMemoryObjectParameterivEXT;
#define glMemoryObjectParameterivEXT sf_glad_glMemoryObjectParameterivEXT
GLAD_API_CALL PFNGLMINSAMPLESHADINGPROC sf_glad_glMinSampleShading;
#define glMinSampleShading sf_glad_glMinSampleShading
GLAD_API_CALL PFNGLMINSAMPLESHADINGARBPROC sf_glad_glMinSampleShadingARB;
#define glMinSampleShadingARB sf_glad_glMinSampleShadingARB
GLAD_API_CALL PFNGLMINMAXPROC sf_glad_glMinmax;
#define glMinmax sf_glad_glMinmax
GLAD_API_CALL PFNGLMINMAXEXTPROC sf_glad_glMinmaxEXT;
#define glMinmaxEXT sf_glad_glMinmaxEXT
GLAD_API_CALL PFNGLMULTMATRIXDPROC sf_glad_glMultMatrixd;
#define glMultMatrixd sf_glad_glMultMatrixd
GLAD_API_CALL PFNGLMULTMATRIXFPROC sf_glad_glMultMatrixf;
#define glMultMatrixf sf_glad_glMultMatrixf
GLAD_API_CALL PFNGLMULTMATRIXXOESPROC sf_glad_glMultMatrixxOES;
#define glMultMatrixxOES sf_glad_glMultMatrixxOES
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXDPROC sf_glad_glMultTransposeMatrixd;
#define glMultTransposeMatrixd sf_glad_glMultTransposeMatrixd
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXDARBPROC sf_glad_glMultTransposeMatrixdARB;
#define glMultTransposeMatrixdARB sf_glad_glMultTransposeMatrixdARB
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXFPROC sf_glad_glMultTransposeMatrixf;
#define glMultTransposeMatrixf sf_glad_glMultTransposeMatrixf
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXFARBPROC sf_glad_glMultTransposeMatrixfARB;
#define glMultTransposeMatrixfARB sf_glad_glMultTransposeMatrixfARB
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXXOESPROC sf_glad_glMultTransposeMatrixxOES;
#define glMultTransposeMatrixxOES sf_glad_glMultTransposeMatrixxOES
GLAD_API_CALL PFNGLMULTIDRAWARRAYSPROC sf_glad_glMultiDrawArrays;
#define glMultiDrawArrays sf_glad_glMultiDrawArrays
GLAD_API_CALL PFNGLMULTIDRAWARRAYSEXTPROC sf_glad_glMultiDrawArraysEXT;
#define glMultiDrawArraysEXT sf_glad_glMultiDrawArraysEXT
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTPROC sf_glad_glMultiDrawArraysIndirect;
#define glMultiDrawArraysIndirect sf_glad_glMultiDrawArraysIndirect
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC sf_glad_glMultiDrawArraysIndirectAMD;
#define glMultiDrawArraysIndirectAMD sf_glad_glMultiDrawArraysIndirectAMD
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC sf_glad_glMultiDrawArraysIndirectBindlessCountNV;
#define glMultiDrawArraysIndirectBindlessCountNV sf_glad_glMultiDrawArraysIndirectBindlessCountNV
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC sf_glad_glMultiDrawArraysIndirectBindlessNV;
#define glMultiDrawArraysIndirectBindlessNV sf_glad_glMultiDrawArraysIndirectBindlessNV
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC sf_glad_glMultiDrawArraysIndirectCount;
#define glMultiDrawArraysIndirectCount sf_glad_glMultiDrawArraysIndirectCount
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC sf_glad_glMultiDrawArraysIndirectCountARB;
#define glMultiDrawArraysIndirectCountARB sf_glad_glMultiDrawArraysIndirectCountARB
GLAD_API_CALL PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC sf_glad_glMultiDrawElementArrayAPPLE;
#define glMultiDrawElementArrayAPPLE sf_glad_glMultiDrawElementArrayAPPLE
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSPROC sf_glad_glMultiDrawElements;
#define glMultiDrawElements sf_glad_glMultiDrawElements
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC sf_glad_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex sf_glad_glMultiDrawElementsBaseVertex
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSEXTPROC sf_glad_glMultiDrawElementsEXT;
#define glMultiDrawElementsEXT sf_glad_glMultiDrawElementsEXT
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTPROC sf_glad_glMultiDrawElementsIndirect;
#define glMultiDrawElementsIndirect sf_glad_glMultiDrawElementsIndirect
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC sf_glad_glMultiDrawElementsIndirectAMD;
#define glMultiDrawElementsIndirectAMD sf_glad_glMultiDrawElementsIndirectAMD
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC sf_glad_glMultiDrawElementsIndirectBindlessCountNV;
#define glMultiDrawElementsIndirectBindlessCountNV sf_glad_glMultiDrawElementsIndirectBindlessCountNV
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC sf_glad_glMultiDrawElementsIndirectBindlessNV;
#define glMultiDrawElementsIndirectBindlessNV sf_glad_glMultiDrawElementsIndirectBindlessNV
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC sf_glad_glMultiDrawElementsIndirectCount;
#define glMultiDrawElementsIndirectCount sf_glad_glMultiDrawElementsIndirectCount
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC sf_glad_glMultiDrawElementsIndirectCountARB;
#define glMultiDrawElementsIndirectCountARB sf_glad_glMultiDrawElementsIndirectCountARB
GLAD_API_CALL PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC sf_glad_glMultiDrawMeshTasksIndirectCountNV;
#define glMultiDrawMeshTasksIndirectCountNV sf_glad_glMultiDrawMeshTasksIndirectCountNV
GLAD_API_CALL PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC sf_glad_glMultiDrawMeshTasksIndirectNV;
#define glMultiDrawMeshTasksIndirectNV sf_glad_glMultiDrawMeshTasksIndirectNV
GLAD_API_CALL PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC sf_glad_glMultiDrawRangeElementArrayAPPLE;
#define glMultiDrawRangeElementArrayAPPLE sf_glad_glMultiDrawRangeElementArrayAPPLE
GLAD_API_CALL PFNGLMULTIMODEDRAWARRAYSIBMPROC sf_glad_glMultiModeDrawArraysIBM;
#define glMultiModeDrawArraysIBM sf_glad_glMultiModeDrawArraysIBM
GLAD_API_CALL PFNGLMULTIMODEDRAWELEMENTSIBMPROC sf_glad_glMultiModeDrawElementsIBM;
#define glMultiModeDrawElementsIBM sf_glad_glMultiModeDrawElementsIBM
GLAD_API_CALL PFNGLMULTITEXBUFFEREXTPROC sf_glad_glMultiTexBufferEXT;
#define glMultiTexBufferEXT sf_glad_glMultiTexBufferEXT
GLAD_API_CALL PFNGLMULTITEXCOORD1BOESPROC sf_glad_glMultiTexCoord1bOES;
#define glMultiTexCoord1bOES sf_glad_glMultiTexCoord1bOES
GLAD_API_CALL PFNGLMULTITEXCOORD1BVOESPROC sf_glad_glMultiTexCoord1bvOES;
#define glMultiTexCoord1bvOES sf_glad_glMultiTexCoord1bvOES
GLAD_API_CALL PFNGLMULTITEXCOORD1DPROC sf_glad_glMultiTexCoord1d;
#define glMultiTexCoord1d sf_glad_glMultiTexCoord1d
GLAD_API_CALL PFNGLMULTITEXCOORD1DARBPROC sf_glad_glMultiTexCoord1dARB;
#define glMultiTexCoord1dARB sf_glad_glMultiTexCoord1dARB
GLAD_API_CALL PFNGLMULTITEXCOORD1DVPROC sf_glad_glMultiTexCoord1dv;
#define glMultiTexCoord1dv sf_glad_glMultiTexCoord1dv
GLAD_API_CALL PFNGLMULTITEXCOORD1DVARBPROC sf_glad_glMultiTexCoord1dvARB;
#define glMultiTexCoord1dvARB sf_glad_glMultiTexCoord1dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD1FPROC sf_glad_glMultiTexCoord1f;
#define glMultiTexCoord1f sf_glad_glMultiTexCoord1f
GLAD_API_CALL PFNGLMULTITEXCOORD1FARBPROC sf_glad_glMultiTexCoord1fARB;
#define glMultiTexCoord1fARB sf_glad_glMultiTexCoord1fARB
GLAD_API_CALL PFNGLMULTITEXCOORD1FVPROC sf_glad_glMultiTexCoord1fv;
#define glMultiTexCoord1fv sf_glad_glMultiTexCoord1fv
GLAD_API_CALL PFNGLMULTITEXCOORD1FVARBPROC sf_glad_glMultiTexCoord1fvARB;
#define glMultiTexCoord1fvARB sf_glad_glMultiTexCoord1fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD1HNVPROC sf_glad_glMultiTexCoord1hNV;
#define glMultiTexCoord1hNV sf_glad_glMultiTexCoord1hNV
GLAD_API_CALL PFNGLMULTITEXCOORD1HVNVPROC sf_glad_glMultiTexCoord1hvNV;
#define glMultiTexCoord1hvNV sf_glad_glMultiTexCoord1hvNV
GLAD_API_CALL PFNGLMULTITEXCOORD1IPROC sf_glad_glMultiTexCoord1i;
#define glMultiTexCoord1i sf_glad_glMultiTexCoord1i
GLAD_API_CALL PFNGLMULTITEXCOORD1IARBPROC sf_glad_glMultiTexCoord1iARB;
#define glMultiTexCoord1iARB sf_glad_glMultiTexCoord1iARB
GLAD_API_CALL PFNGLMULTITEXCOORD1IVPROC sf_glad_glMultiTexCoord1iv;
#define glMultiTexCoord1iv sf_glad_glMultiTexCoord1iv
GLAD_API_CALL PFNGLMULTITEXCOORD1IVARBPROC sf_glad_glMultiTexCoord1ivARB;
#define glMultiTexCoord1ivARB sf_glad_glMultiTexCoord1ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD1SPROC sf_glad_glMultiTexCoord1s;
#define glMultiTexCoord1s sf_glad_glMultiTexCoord1s
GLAD_API_CALL PFNGLMULTITEXCOORD1SARBPROC sf_glad_glMultiTexCoord1sARB;
#define glMultiTexCoord1sARB sf_glad_glMultiTexCoord1sARB
GLAD_API_CALL PFNGLMULTITEXCOORD1SVPROC sf_glad_glMultiTexCoord1sv;
#define glMultiTexCoord1sv sf_glad_glMultiTexCoord1sv
GLAD_API_CALL PFNGLMULTITEXCOORD1SVARBPROC sf_glad_glMultiTexCoord1svARB;
#define glMultiTexCoord1svARB sf_glad_glMultiTexCoord1svARB
GLAD_API_CALL PFNGLMULTITEXCOORD1XOESPROC sf_glad_glMultiTexCoord1xOES;
#define glMultiTexCoord1xOES sf_glad_glMultiTexCoord1xOES
GLAD_API_CALL PFNGLMULTITEXCOORD1XVOESPROC sf_glad_glMultiTexCoord1xvOES;
#define glMultiTexCoord1xvOES sf_glad_glMultiTexCoord1xvOES
GLAD_API_CALL PFNGLMULTITEXCOORD2BOESPROC sf_glad_glMultiTexCoord2bOES;
#define glMultiTexCoord2bOES sf_glad_glMultiTexCoord2bOES
GLAD_API_CALL PFNGLMULTITEXCOORD2BVOESPROC sf_glad_glMultiTexCoord2bvOES;
#define glMultiTexCoord2bvOES sf_glad_glMultiTexCoord2bvOES
GLAD_API_CALL PFNGLMULTITEXCOORD2DPROC sf_glad_glMultiTexCoord2d;
#define glMultiTexCoord2d sf_glad_glMultiTexCoord2d
GLAD_API_CALL PFNGLMULTITEXCOORD2DARBPROC sf_glad_glMultiTexCoord2dARB;
#define glMultiTexCoord2dARB sf_glad_glMultiTexCoord2dARB
GLAD_API_CALL PFNGLMULTITEXCOORD2DVPROC sf_glad_glMultiTexCoord2dv;
#define glMultiTexCoord2dv sf_glad_glMultiTexCoord2dv
GLAD_API_CALL PFNGLMULTITEXCOORD2DVARBPROC sf_glad_glMultiTexCoord2dvARB;
#define glMultiTexCoord2dvARB sf_glad_glMultiTexCoord2dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD2FPROC sf_glad_glMultiTexCoord2f;
#define glMultiTexCoord2f sf_glad_glMultiTexCoord2f
GLAD_API_CALL PFNGLMULTITEXCOORD2FARBPROC sf_glad_glMultiTexCoord2fARB;
#define glMultiTexCoord2fARB sf_glad_glMultiTexCoord2fARB
GLAD_API_CALL PFNGLMULTITEXCOORD2FVPROC sf_glad_glMultiTexCoord2fv;
#define glMultiTexCoord2fv sf_glad_glMultiTexCoord2fv
GLAD_API_CALL PFNGLMULTITEXCOORD2FVARBPROC sf_glad_glMultiTexCoord2fvARB;
#define glMultiTexCoord2fvARB sf_glad_glMultiTexCoord2fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD2HNVPROC sf_glad_glMultiTexCoord2hNV;
#define glMultiTexCoord2hNV sf_glad_glMultiTexCoord2hNV
GLAD_API_CALL PFNGLMULTITEXCOORD2HVNVPROC sf_glad_glMultiTexCoord2hvNV;
#define glMultiTexCoord2hvNV sf_glad_glMultiTexCoord2hvNV
GLAD_API_CALL PFNGLMULTITEXCOORD2IPROC sf_glad_glMultiTexCoord2i;
#define glMultiTexCoord2i sf_glad_glMultiTexCoord2i
GLAD_API_CALL PFNGLMULTITEXCOORD2IARBPROC sf_glad_glMultiTexCoord2iARB;
#define glMultiTexCoord2iARB sf_glad_glMultiTexCoord2iARB
GLAD_API_CALL PFNGLMULTITEXCOORD2IVPROC sf_glad_glMultiTexCoord2iv;
#define glMultiTexCoord2iv sf_glad_glMultiTexCoord2iv
GLAD_API_CALL PFNGLMULTITEXCOORD2IVARBPROC sf_glad_glMultiTexCoord2ivARB;
#define glMultiTexCoord2ivARB sf_glad_glMultiTexCoord2ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD2SPROC sf_glad_glMultiTexCoord2s;
#define glMultiTexCoord2s sf_glad_glMultiTexCoord2s
GLAD_API_CALL PFNGLMULTITEXCOORD2SARBPROC sf_glad_glMultiTexCoord2sARB;
#define glMultiTexCoord2sARB sf_glad_glMultiTexCoord2sARB
GLAD_API_CALL PFNGLMULTITEXCOORD2SVPROC sf_glad_glMultiTexCoord2sv;
#define glMultiTexCoord2sv sf_glad_glMultiTexCoord2sv
GLAD_API_CALL PFNGLMULTITEXCOORD2SVARBPROC sf_glad_glMultiTexCoord2svARB;
#define glMultiTexCoord2svARB sf_glad_glMultiTexCoord2svARB
GLAD_API_CALL PFNGLMULTITEXCOORD2XOESPROC sf_glad_glMultiTexCoord2xOES;
#define glMultiTexCoord2xOES sf_glad_glMultiTexCoord2xOES
GLAD_API_CALL PFNGLMULTITEXCOORD2XVOESPROC sf_glad_glMultiTexCoord2xvOES;
#define glMultiTexCoord2xvOES sf_glad_glMultiTexCoord2xvOES
GLAD_API_CALL PFNGLMULTITEXCOORD3BOESPROC sf_glad_glMultiTexCoord3bOES;
#define glMultiTexCoord3bOES sf_glad_glMultiTexCoord3bOES
GLAD_API_CALL PFNGLMULTITEXCOORD3BVOESPROC sf_glad_glMultiTexCoord3bvOES;
#define glMultiTexCoord3bvOES sf_glad_glMultiTexCoord3bvOES
GLAD_API_CALL PFNGLMULTITEXCOORD3DPROC sf_glad_glMultiTexCoord3d;
#define glMultiTexCoord3d sf_glad_glMultiTexCoord3d
GLAD_API_CALL PFNGLMULTITEXCOORD3DARBPROC sf_glad_glMultiTexCoord3dARB;
#define glMultiTexCoord3dARB sf_glad_glMultiTexCoord3dARB
GLAD_API_CALL PFNGLMULTITEXCOORD3DVPROC sf_glad_glMultiTexCoord3dv;
#define glMultiTexCoord3dv sf_glad_glMultiTexCoord3dv
GLAD_API_CALL PFNGLMULTITEXCOORD3DVARBPROC sf_glad_glMultiTexCoord3dvARB;
#define glMultiTexCoord3dvARB sf_glad_glMultiTexCoord3dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD3FPROC sf_glad_glMultiTexCoord3f;
#define glMultiTexCoord3f sf_glad_glMultiTexCoord3f
GLAD_API_CALL PFNGLMULTITEXCOORD3FARBPROC sf_glad_glMultiTexCoord3fARB;
#define glMultiTexCoord3fARB sf_glad_glMultiTexCoord3fARB
GLAD_API_CALL PFNGLMULTITEXCOORD3FVPROC sf_glad_glMultiTexCoord3fv;
#define glMultiTexCoord3fv sf_glad_glMultiTexCoord3fv
GLAD_API_CALL PFNGLMULTITEXCOORD3FVARBPROC sf_glad_glMultiTexCoord3fvARB;
#define glMultiTexCoord3fvARB sf_glad_glMultiTexCoord3fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD3HNVPROC sf_glad_glMultiTexCoord3hNV;
#define glMultiTexCoord3hNV sf_glad_glMultiTexCoord3hNV
GLAD_API_CALL PFNGLMULTITEXCOORD3HVNVPROC sf_glad_glMultiTexCoord3hvNV;
#define glMultiTexCoord3hvNV sf_glad_glMultiTexCoord3hvNV
GLAD_API_CALL PFNGLMULTITEXCOORD3IPROC sf_glad_glMultiTexCoord3i;
#define glMultiTexCoord3i sf_glad_glMultiTexCoord3i
GLAD_API_CALL PFNGLMULTITEXCOORD3IARBPROC sf_glad_glMultiTexCoord3iARB;
#define glMultiTexCoord3iARB sf_glad_glMultiTexCoord3iARB
GLAD_API_CALL PFNGLMULTITEXCOORD3IVPROC sf_glad_glMultiTexCoord3iv;
#define glMultiTexCoord3iv sf_glad_glMultiTexCoord3iv
GLAD_API_CALL PFNGLMULTITEXCOORD3IVARBPROC sf_glad_glMultiTexCoord3ivARB;
#define glMultiTexCoord3ivARB sf_glad_glMultiTexCoord3ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD3SPROC sf_glad_glMultiTexCoord3s;
#define glMultiTexCoord3s sf_glad_glMultiTexCoord3s
GLAD_API_CALL PFNGLMULTITEXCOORD3SARBPROC sf_glad_glMultiTexCoord3sARB;
#define glMultiTexCoord3sARB sf_glad_glMultiTexCoord3sARB
GLAD_API_CALL PFNGLMULTITEXCOORD3SVPROC sf_glad_glMultiTexCoord3sv;
#define glMultiTexCoord3sv sf_glad_glMultiTexCoord3sv
GLAD_API_CALL PFNGLMULTITEXCOORD3SVARBPROC sf_glad_glMultiTexCoord3svARB;
#define glMultiTexCoord3svARB sf_glad_glMultiTexCoord3svARB
GLAD_API_CALL PFNGLMULTITEXCOORD3XOESPROC sf_glad_glMultiTexCoord3xOES;
#define glMultiTexCoord3xOES sf_glad_glMultiTexCoord3xOES
GLAD_API_CALL PFNGLMULTITEXCOORD3XVOESPROC sf_glad_glMultiTexCoord3xvOES;
#define glMultiTexCoord3xvOES sf_glad_glMultiTexCoord3xvOES
GLAD_API_CALL PFNGLMULTITEXCOORD4BOESPROC sf_glad_glMultiTexCoord4bOES;
#define glMultiTexCoord4bOES sf_glad_glMultiTexCoord4bOES
GLAD_API_CALL PFNGLMULTITEXCOORD4BVOESPROC sf_glad_glMultiTexCoord4bvOES;
#define glMultiTexCoord4bvOES sf_glad_glMultiTexCoord4bvOES
GLAD_API_CALL PFNGLMULTITEXCOORD4DPROC sf_glad_glMultiTexCoord4d;
#define glMultiTexCoord4d sf_glad_glMultiTexCoord4d
GLAD_API_CALL PFNGLMULTITEXCOORD4DARBPROC sf_glad_glMultiTexCoord4dARB;
#define glMultiTexCoord4dARB sf_glad_glMultiTexCoord4dARB
GLAD_API_CALL PFNGLMULTITEXCOORD4DVPROC sf_glad_glMultiTexCoord4dv;
#define glMultiTexCoord4dv sf_glad_glMultiTexCoord4dv
GLAD_API_CALL PFNGLMULTITEXCOORD4DVARBPROC sf_glad_glMultiTexCoord4dvARB;
#define glMultiTexCoord4dvARB sf_glad_glMultiTexCoord4dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD4FPROC sf_glad_glMultiTexCoord4f;
#define glMultiTexCoord4f sf_glad_glMultiTexCoord4f
GLAD_API_CALL PFNGLMULTITEXCOORD4FARBPROC sf_glad_glMultiTexCoord4fARB;
#define glMultiTexCoord4fARB sf_glad_glMultiTexCoord4fARB
GLAD_API_CALL PFNGLMULTITEXCOORD4FVPROC sf_glad_glMultiTexCoord4fv;
#define glMultiTexCoord4fv sf_glad_glMultiTexCoord4fv
GLAD_API_CALL PFNGLMULTITEXCOORD4FVARBPROC sf_glad_glMultiTexCoord4fvARB;
#define glMultiTexCoord4fvARB sf_glad_glMultiTexCoord4fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD4HNVPROC sf_glad_glMultiTexCoord4hNV;
#define glMultiTexCoord4hNV sf_glad_glMultiTexCoord4hNV
GLAD_API_CALL PFNGLMULTITEXCOORD4HVNVPROC sf_glad_glMultiTexCoord4hvNV;
#define glMultiTexCoord4hvNV sf_glad_glMultiTexCoord4hvNV
GLAD_API_CALL PFNGLMULTITEXCOORD4IPROC sf_glad_glMultiTexCoord4i;
#define glMultiTexCoord4i sf_glad_glMultiTexCoord4i
GLAD_API_CALL PFNGLMULTITEXCOORD4IARBPROC sf_glad_glMultiTexCoord4iARB;
#define glMultiTexCoord4iARB sf_glad_glMultiTexCoord4iARB
GLAD_API_CALL PFNGLMULTITEXCOORD4IVPROC sf_glad_glMultiTexCoord4iv;
#define glMultiTexCoord4iv sf_glad_glMultiTexCoord4iv
GLAD_API_CALL PFNGLMULTITEXCOORD4IVARBPROC sf_glad_glMultiTexCoord4ivARB;
#define glMultiTexCoord4ivARB sf_glad_glMultiTexCoord4ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD4SPROC sf_glad_glMultiTexCoord4s;
#define glMultiTexCoord4s sf_glad_glMultiTexCoord4s
GLAD_API_CALL PFNGLMULTITEXCOORD4SARBPROC sf_glad_glMultiTexCoord4sARB;
#define glMultiTexCoord4sARB sf_glad_glMultiTexCoord4sARB
GLAD_API_CALL PFNGLMULTITEXCOORD4SVPROC sf_glad_glMultiTexCoord4sv;
#define glMultiTexCoord4sv sf_glad_glMultiTexCoord4sv
GLAD_API_CALL PFNGLMULTITEXCOORD4SVARBPROC sf_glad_glMultiTexCoord4svARB;
#define glMultiTexCoord4svARB sf_glad_glMultiTexCoord4svARB
GLAD_API_CALL PFNGLMULTITEXCOORD4XOESPROC sf_glad_glMultiTexCoord4xOES;
#define glMultiTexCoord4xOES sf_glad_glMultiTexCoord4xOES
GLAD_API_CALL PFNGLMULTITEXCOORD4XVOESPROC sf_glad_glMultiTexCoord4xvOES;
#define glMultiTexCoord4xvOES sf_glad_glMultiTexCoord4xvOES
GLAD_API_CALL PFNGLMULTITEXCOORDP1UIPROC sf_glad_glMultiTexCoordP1ui;
#define glMultiTexCoordP1ui sf_glad_glMultiTexCoordP1ui
GLAD_API_CALL PFNGLMULTITEXCOORDP1UIVPROC sf_glad_glMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv sf_glad_glMultiTexCoordP1uiv
GLAD_API_CALL PFNGLMULTITEXCOORDP2UIPROC sf_glad_glMultiTexCoordP2ui;
#define glMultiTexCoordP2ui sf_glad_glMultiTexCoordP2ui
GLAD_API_CALL PFNGLMULTITEXCOORDP2UIVPROC sf_glad_glMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv sf_glad_glMultiTexCoordP2uiv
GLAD_API_CALL PFNGLMULTITEXCOORDP3UIPROC sf_glad_glMultiTexCoordP3ui;
#define glMultiTexCoordP3ui sf_glad_glMultiTexCoordP3ui
GLAD_API_CALL PFNGLMULTITEXCOORDP3UIVPROC sf_glad_glMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv sf_glad_glMultiTexCoordP3uiv
GLAD_API_CALL PFNGLMULTITEXCOORDP4UIPROC sf_glad_glMultiTexCoordP4ui;
#define glMultiTexCoordP4ui sf_glad_glMultiTexCoordP4ui
GLAD_API_CALL PFNGLMULTITEXCOORDP4UIVPROC sf_glad_glMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv sf_glad_glMultiTexCoordP4uiv
GLAD_API_CALL PFNGLMULTITEXCOORDPOINTEREXTPROC sf_glad_glMultiTexCoordPointerEXT;
#define glMultiTexCoordPointerEXT sf_glad_glMultiTexCoordPointerEXT
GLAD_API_CALL PFNGLMULTITEXENVFEXTPROC sf_glad_glMultiTexEnvfEXT;
#define glMultiTexEnvfEXT sf_glad_glMultiTexEnvfEXT
GLAD_API_CALL PFNGLMULTITEXENVFVEXTPROC sf_glad_glMultiTexEnvfvEXT;
#define glMultiTexEnvfvEXT sf_glad_glMultiTexEnvfvEXT
GLAD_API_CALL PFNGLMULTITEXENVIEXTPROC sf_glad_glMultiTexEnviEXT;
#define glMultiTexEnviEXT sf_glad_glMultiTexEnviEXT
GLAD_API_CALL PFNGLMULTITEXENVIVEXTPROC sf_glad_glMultiTexEnvivEXT;
#define glMultiTexEnvivEXT sf_glad_glMultiTexEnvivEXT
GLAD_API_CALL PFNGLMULTITEXGENDEXTPROC sf_glad_glMultiTexGendEXT;
#define glMultiTexGendEXT sf_glad_glMultiTexGendEXT
GLAD_API_CALL PFNGLMULTITEXGENDVEXTPROC sf_glad_glMultiTexGendvEXT;
#define glMultiTexGendvEXT sf_glad_glMultiTexGendvEXT
GLAD_API_CALL PFNGLMULTITEXGENFEXTPROC sf_glad_glMultiTexGenfEXT;
#define glMultiTexGenfEXT sf_glad_glMultiTexGenfEXT
GLAD_API_CALL PFNGLMULTITEXGENFVEXTPROC sf_glad_glMultiTexGenfvEXT;
#define glMultiTexGenfvEXT sf_glad_glMultiTexGenfvEXT
GLAD_API_CALL PFNGLMULTITEXGENIEXTPROC sf_glad_glMultiTexGeniEXT;
#define glMultiTexGeniEXT sf_glad_glMultiTexGeniEXT
GLAD_API_CALL PFNGLMULTITEXGENIVEXTPROC sf_glad_glMultiTexGenivEXT;
#define glMultiTexGenivEXT sf_glad_glMultiTexGenivEXT
GLAD_API_CALL PFNGLMULTITEXIMAGE1DEXTPROC sf_glad_glMultiTexImage1DEXT;
#define glMultiTexImage1DEXT sf_glad_glMultiTexImage1DEXT
GLAD_API_CALL PFNGLMULTITEXIMAGE2DEXTPROC sf_glad_glMultiTexImage2DEXT;
#define glMultiTexImage2DEXT sf_glad_glMultiTexImage2DEXT
GLAD_API_CALL PFNGLMULTITEXIMAGE3DEXTPROC sf_glad_glMultiTexImage3DEXT;
#define glMultiTexImage3DEXT sf_glad_glMultiTexImage3DEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIIVEXTPROC sf_glad_glMultiTexParameterIivEXT;
#define glMultiTexParameterIivEXT sf_glad_glMultiTexParameterIivEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIUIVEXTPROC sf_glad_glMultiTexParameterIuivEXT;
#define glMultiTexParameterIuivEXT sf_glad_glMultiTexParameterIuivEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERFEXTPROC sf_glad_glMultiTexParameterfEXT;
#define glMultiTexParameterfEXT sf_glad_glMultiTexParameterfEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERFVEXTPROC sf_glad_glMultiTexParameterfvEXT;
#define glMultiTexParameterfvEXT sf_glad_glMultiTexParameterfvEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIEXTPROC sf_glad_glMultiTexParameteriEXT;
#define glMultiTexParameteriEXT sf_glad_glMultiTexParameteriEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIVEXTPROC sf_glad_glMultiTexParameterivEXT;
#define glMultiTexParameterivEXT sf_glad_glMultiTexParameterivEXT
GLAD_API_CALL PFNGLMULTITEXRENDERBUFFEREXTPROC sf_glad_glMultiTexRenderbufferEXT;
#define glMultiTexRenderbufferEXT sf_glad_glMultiTexRenderbufferEXT
GLAD_API_CALL PFNGLMULTITEXSUBIMAGE1DEXTPROC sf_glad_glMultiTexSubImage1DEXT;
#define glMultiTexSubImage1DEXT sf_glad_glMultiTexSubImage1DEXT
GLAD_API_CALL PFNGLMULTITEXSUBIMAGE2DEXTPROC sf_glad_glMultiTexSubImage2DEXT;
#define glMultiTexSubImage2DEXT sf_glad_glMultiTexSubImage2DEXT
GLAD_API_CALL PFNGLMULTITEXSUBIMAGE3DEXTPROC sf_glad_glMultiTexSubImage3DEXT;
#define glMultiTexSubImage3DEXT sf_glad_glMultiTexSubImage3DEXT
GLAD_API_CALL PFNGLMULTICASTBARRIERNVPROC sf_glad_glMulticastBarrierNV;
#define glMulticastBarrierNV sf_glad_glMulticastBarrierNV
GLAD_API_CALL PFNGLMULTICASTBLITFRAMEBUFFERNVPROC sf_glad_glMulticastBlitFramebufferNV;
#define glMulticastBlitFramebufferNV sf_glad_glMulticastBlitFramebufferNV
GLAD_API_CALL PFNGLMULTICASTBUFFERSUBDATANVPROC sf_glad_glMulticastBufferSubDataNV;
#define glMulticastBufferSubDataNV sf_glad_glMulticastBufferSubDataNV
GLAD_API_CALL PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC sf_glad_glMulticastCopyBufferSubDataNV;
#define glMulticastCopyBufferSubDataNV sf_glad_glMulticastCopyBufferSubDataNV
GLAD_API_CALL PFNGLMULTICASTCOPYIMAGESUBDATANVPROC sf_glad_glMulticastCopyImageSubDataNV;
#define glMulticastCopyImageSubDataNV sf_glad_glMulticastCopyImageSubDataNV
GLAD_API_CALL PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC sf_glad_glMulticastFramebufferSampleLocationsfvNV;
#define glMulticastFramebufferSampleLocationsfvNV sf_glad_glMulticastFramebufferSampleLocationsfvNV
GLAD_API_CALL PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC sf_glad_glMulticastGetQueryObjecti64vNV;
#define glMulticastGetQueryObjecti64vNV sf_glad_glMulticastGetQueryObjecti64vNV
GLAD_API_CALL PFNGLMULTICASTGETQUERYOBJECTIVNVPROC sf_glad_glMulticastGetQueryObjectivNV;
#define glMulticastGetQueryObjectivNV sf_glad_glMulticastGetQueryObjectivNV
GLAD_API_CALL PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC sf_glad_glMulticastGetQueryObjectui64vNV;
#define glMulticastGetQueryObjectui64vNV sf_glad_glMulticastGetQueryObjectui64vNV
GLAD_API_CALL PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC sf_glad_glMulticastGetQueryObjectuivNV;
#define glMulticastGetQueryObjectuivNV sf_glad_glMulticastGetQueryObjectuivNV
GLAD_API_CALL PFNGLMULTICASTSCISSORARRAYVNVXPROC sf_glad_glMulticastScissorArrayvNVX;
#define glMulticastScissorArrayvNVX sf_glad_glMulticastScissorArrayvNVX
GLAD_API_CALL PFNGLMULTICASTVIEWPORTARRAYVNVXPROC sf_glad_glMulticastViewportArrayvNVX;
#define glMulticastViewportArrayvNVX sf_glad_glMulticastViewportArrayvNVX
GLAD_API_CALL PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC sf_glad_glMulticastViewportPositionWScaleNVX;
#define glMulticastViewportPositionWScaleNVX sf_glad_glMulticastViewportPositionWScaleNVX
GLAD_API_CALL PFNGLMULTICASTWAITSYNCNVPROC sf_glad_glMulticastWaitSyncNV;
#define glMulticastWaitSyncNV sf_glad_glMulticastWaitSyncNV
GLAD_API_CALL PFNGLNAMEDBUFFERATTACHMEMORYNVPROC sf_glad_glNamedBufferAttachMemoryNV;
#define glNamedBufferAttachMemoryNV sf_glad_glNamedBufferAttachMemoryNV
GLAD_API_CALL PFNGLNAMEDBUFFERDATAPROC sf_glad_glNamedBufferData;
#define glNamedBufferData sf_glad_glNamedBufferData
GLAD_API_CALL PFNGLNAMEDBUFFERDATAEXTPROC sf_glad_glNamedBufferDataEXT;
#define glNamedBufferDataEXT sf_glad_glNamedBufferDataEXT
GLAD_API_CALL PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC sf_glad_glNamedBufferPageCommitmentARB;
#define glNamedBufferPageCommitmentARB sf_glad_glNamedBufferPageCommitmentARB
GLAD_API_CALL PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC sf_glad_glNamedBufferPageCommitmentEXT;
#define glNamedBufferPageCommitmentEXT sf_glad_glNamedBufferPageCommitmentEXT
GLAD_API_CALL PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC sf_glad_glNamedBufferPageCommitmentMemNV;
#define glNamedBufferPageCommitmentMemNV sf_glad_glNamedBufferPageCommitmentMemNV
GLAD_API_CALL PFNGLNAMEDBUFFERSTORAGEPROC sf_glad_glNamedBufferStorage;
#define glNamedBufferStorage sf_glad_glNamedBufferStorage
GLAD_API_CALL PFNGLNAMEDBUFFERSTORAGEEXTPROC sf_glad_glNamedBufferStorageEXT;
#define glNamedBufferStorageEXT sf_glad_glNamedBufferStorageEXT
GLAD_API_CALL PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC sf_glad_glNamedBufferStorageExternalEXT;
#define glNamedBufferStorageExternalEXT sf_glad_glNamedBufferStorageExternalEXT
GLAD_API_CALL PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC sf_glad_glNamedBufferStorageMemEXT;
#define glNamedBufferStorageMemEXT sf_glad_glNamedBufferStorageMemEXT
GLAD_API_CALL PFNGLNAMEDBUFFERSUBDATAPROC sf_glad_glNamedBufferSubData;
#define glNamedBufferSubData sf_glad_glNamedBufferSubData
GLAD_API_CALL PFNGLNAMEDBUFFERSUBDATAEXTPROC sf_glad_glNamedBufferSubDataEXT;
#define glNamedBufferSubDataEXT sf_glad_glNamedBufferSubDataEXT
GLAD_API_CALL PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC sf_glad_glNamedCopyBufferSubDataEXT;
#define glNamedCopyBufferSubDataEXT sf_glad_glNamedCopyBufferSubDataEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC sf_glad_glNamedFramebufferDrawBuffer;
#define glNamedFramebufferDrawBuffer sf_glad_glNamedFramebufferDrawBuffer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC sf_glad_glNamedFramebufferDrawBuffers;
#define glNamedFramebufferDrawBuffers sf_glad_glNamedFramebufferDrawBuffers
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC sf_glad_glNamedFramebufferParameteri;
#define glNamedFramebufferParameteri sf_glad_glNamedFramebufferParameteri
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC sf_glad_glNamedFramebufferParameteriEXT;
#define glNamedFramebufferParameteriEXT sf_glad_glNamedFramebufferParameteriEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC sf_glad_glNamedFramebufferReadBuffer;
#define glNamedFramebufferReadBuffer sf_glad_glNamedFramebufferReadBuffer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC sf_glad_glNamedFramebufferRenderbuffer;
#define glNamedFramebufferRenderbuffer sf_glad_glNamedFramebufferRenderbuffer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC sf_glad_glNamedFramebufferRenderbufferEXT;
#define glNamedFramebufferRenderbufferEXT sf_glad_glNamedFramebufferRenderbufferEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC sf_glad_glNamedFramebufferSampleLocationsfvARB;
#define glNamedFramebufferSampleLocationsfvARB sf_glad_glNamedFramebufferSampleLocationsfvARB
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC sf_glad_glNamedFramebufferSampleLocationsfvNV;
#define glNamedFramebufferSampleLocationsfvNV sf_glad_glNamedFramebufferSampleLocationsfvNV
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC sf_glad_glNamedFramebufferSamplePositionsfvAMD;
#define glNamedFramebufferSamplePositionsfvAMD sf_glad_glNamedFramebufferSamplePositionsfvAMD
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREPROC sf_glad_glNamedFramebufferTexture;
#define glNamedFramebufferTexture sf_glad_glNamedFramebufferTexture
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC sf_glad_glNamedFramebufferTexture1DEXT;
#define glNamedFramebufferTexture1DEXT sf_glad_glNamedFramebufferTexture1DEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC sf_glad_glNamedFramebufferTexture2DEXT;
#define glNamedFramebufferTexture2DEXT sf_glad_glNamedFramebufferTexture2DEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC sf_glad_glNamedFramebufferTexture3DEXT;
#define glNamedFramebufferTexture3DEXT sf_glad_glNamedFramebufferTexture3DEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC sf_glad_glNamedFramebufferTextureEXT;
#define glNamedFramebufferTextureEXT sf_glad_glNamedFramebufferTextureEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC sf_glad_glNamedFramebufferTextureFaceEXT;
#define glNamedFramebufferTextureFaceEXT sf_glad_glNamedFramebufferTextureFaceEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC sf_glad_glNamedFramebufferTextureLayer;
#define glNamedFramebufferTextureLayer sf_glad_glNamedFramebufferTextureLayer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC sf_glad_glNamedFramebufferTextureLayerEXT;
#define glNamedFramebufferTextureLayerEXT sf_glad_glNamedFramebufferTextureLayerEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC sf_glad_glNamedFramebufferTextureMultiviewOVR;
#define glNamedFramebufferTextureMultiviewOVR sf_glad_glNamedFramebufferTextureMultiviewOVR
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC sf_glad_glNamedProgramLocalParameter4dEXT;
#define glNamedProgramLocalParameter4dEXT sf_glad_glNamedProgramLocalParameter4dEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC sf_glad_glNamedProgramLocalParameter4dvEXT;
#define glNamedProgramLocalParameter4dvEXT sf_glad_glNamedProgramLocalParameter4dvEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC sf_glad_glNamedProgramLocalParameter4fEXT;
#define glNamedProgramLocalParameter4fEXT sf_glad_glNamedProgramLocalParameter4fEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC sf_glad_glNamedProgramLocalParameter4fvEXT;
#define glNamedProgramLocalParameter4fvEXT sf_glad_glNamedProgramLocalParameter4fvEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC sf_glad_glNamedProgramLocalParameterI4iEXT;
#define glNamedProgramLocalParameterI4iEXT sf_glad_glNamedProgramLocalParameterI4iEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC sf_glad_glNamedProgramLocalParameterI4ivEXT;
#define glNamedProgramLocalParameterI4ivEXT sf_glad_glNamedProgramLocalParameterI4ivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC sf_glad_glNamedProgramLocalParameterI4uiEXT;
#define glNamedProgramLocalParameterI4uiEXT sf_glad_glNamedProgramLocalParameterI4uiEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC sf_glad_glNamedProgramLocalParameterI4uivEXT;
#define glNamedProgramLocalParameterI4uivEXT sf_glad_glNamedProgramLocalParameterI4uivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC sf_glad_glNamedProgramLocalParameters4fvEXT;
#define glNamedProgramLocalParameters4fvEXT sf_glad_glNamedProgramLocalParameters4fvEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC sf_glad_glNamedProgramLocalParametersI4ivEXT;
#define glNamedProgramLocalParametersI4ivEXT sf_glad_glNamedProgramLocalParametersI4ivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC sf_glad_glNamedProgramLocalParametersI4uivEXT;
#define glNamedProgramLocalParametersI4uivEXT sf_glad_glNamedProgramLocalParametersI4uivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMSTRINGEXTPROC sf_glad_glNamedProgramStringEXT;
#define glNamedProgramStringEXT sf_glad_glNamedProgramStringEXT
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEPROC sf_glad_glNamedRenderbufferStorage;
#define glNamedRenderbufferStorage sf_glad_glNamedRenderbufferStorage
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC sf_glad_glNamedRenderbufferStorageEXT;
#define glNamedRenderbufferStorageEXT sf_glad_glNamedRenderbufferStorageEXT
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC sf_glad_glNamedRenderbufferStorageMultisample;
#define glNamedRenderbufferStorageMultisample sf_glad_glNamedRenderbufferStorageMultisample
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC sf_glad_glNamedRenderbufferStorageMultisampleAdvancedAMD;
#define glNamedRenderbufferStorageMultisampleAdvancedAMD sf_glad_glNamedRenderbufferStorageMultisampleAdvancedAMD
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC sf_glad_glNamedRenderbufferStorageMultisampleCoverageEXT;
#define glNamedRenderbufferStorageMultisampleCoverageEXT sf_glad_glNamedRenderbufferStorageMultisampleCoverageEXT
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC sf_glad_glNamedRenderbufferStorageMultisampleEXT;
#define glNamedRenderbufferStorageMultisampleEXT sf_glad_glNamedRenderbufferStorageMultisampleEXT
GLAD_API_CALL PFNGLNAMEDSTRINGARBPROC sf_glad_glNamedStringARB;
#define glNamedStringARB sf_glad_glNamedStringARB
GLAD_API_CALL PFNGLNEWLISTPROC sf_glad_glNewList;
#define glNewList sf_glad_glNewList
GLAD_API_CALL PFNGLNEWOBJECTBUFFERATIPROC sf_glad_glNewObjectBufferATI;
#define glNewObjectBufferATI sf_glad_glNewObjectBufferATI
GLAD_API_CALL PFNGLNORMAL3BPROC sf_glad_glNormal3b;
#define glNormal3b sf_glad_glNormal3b
GLAD_API_CALL PFNGLNORMAL3BVPROC sf_glad_glNormal3bv;
#define glNormal3bv sf_glad_glNormal3bv
GLAD_API_CALL PFNGLNORMAL3DPROC sf_glad_glNormal3d;
#define glNormal3d sf_glad_glNormal3d
GLAD_API_CALL PFNGLNORMAL3DVPROC sf_glad_glNormal3dv;
#define glNormal3dv sf_glad_glNormal3dv
GLAD_API_CALL PFNGLNORMAL3FPROC sf_glad_glNormal3f;
#define glNormal3f sf_glad_glNormal3f
GLAD_API_CALL PFNGLNORMAL3FVERTEX3FSUNPROC sf_glad_glNormal3fVertex3fSUN;
#define glNormal3fVertex3fSUN sf_glad_glNormal3fVertex3fSUN
GLAD_API_CALL PFNGLNORMAL3FVERTEX3FVSUNPROC sf_glad_glNormal3fVertex3fvSUN;
#define glNormal3fVertex3fvSUN sf_glad_glNormal3fVertex3fvSUN
GLAD_API_CALL PFNGLNORMAL3FVPROC sf_glad_glNormal3fv;
#define glNormal3fv sf_glad_glNormal3fv
GLAD_API_CALL PFNGLNORMAL3HNVPROC sf_glad_glNormal3hNV;
#define glNormal3hNV sf_glad_glNormal3hNV
GLAD_API_CALL PFNGLNORMAL3HVNVPROC sf_glad_glNormal3hvNV;
#define glNormal3hvNV sf_glad_glNormal3hvNV
GLAD_API_CALL PFNGLNORMAL3IPROC sf_glad_glNormal3i;
#define glNormal3i sf_glad_glNormal3i
GLAD_API_CALL PFNGLNORMAL3IVPROC sf_glad_glNormal3iv;
#define glNormal3iv sf_glad_glNormal3iv
GLAD_API_CALL PFNGLNORMAL3SPROC sf_glad_glNormal3s;
#define glNormal3s sf_glad_glNormal3s
GLAD_API_CALL PFNGLNORMAL3SVPROC sf_glad_glNormal3sv;
#define glNormal3sv sf_glad_glNormal3sv
GLAD_API_CALL PFNGLNORMAL3XOESPROC sf_glad_glNormal3xOES;
#define glNormal3xOES sf_glad_glNormal3xOES
GLAD_API_CALL PFNGLNORMAL3XVOESPROC sf_glad_glNormal3xvOES;
#define glNormal3xvOES sf_glad_glNormal3xvOES
GLAD_API_CALL PFNGLNORMALFORMATNVPROC sf_glad_glNormalFormatNV;
#define glNormalFormatNV sf_glad_glNormalFormatNV
GLAD_API_CALL PFNGLNORMALP3UIPROC sf_glad_glNormalP3ui;
#define glNormalP3ui sf_glad_glNormalP3ui
GLAD_API_CALL PFNGLNORMALP3UIVPROC sf_glad_glNormalP3uiv;
#define glNormalP3uiv sf_glad_glNormalP3uiv
GLAD_API_CALL PFNGLNORMALPOINTERPROC sf_glad_glNormalPointer;
#define glNormalPointer sf_glad_glNormalPointer
GLAD_API_CALL PFNGLNORMALPOINTEREXTPROC sf_glad_glNormalPointerEXT;
#define glNormalPointerEXT sf_glad_glNormalPointerEXT
GLAD_API_CALL PFNGLNORMALPOINTERLISTIBMPROC sf_glad_glNormalPointerListIBM;
#define glNormalPointerListIBM sf_glad_glNormalPointerListIBM
GLAD_API_CALL PFNGLNORMALPOINTERVINTELPROC sf_glad_glNormalPointervINTEL;
#define glNormalPointervINTEL sf_glad_glNormalPointervINTEL
GLAD_API_CALL PFNGLNORMALSTREAM3BATIPROC sf_glad_glNormalStream3bATI;
#define glNormalStream3bATI sf_glad_glNormalStream3bATI
GLAD_API_CALL PFNGLNORMALSTREAM3BVATIPROC sf_glad_glNormalStream3bvATI;
#define glNormalStream3bvATI sf_glad_glNormalStream3bvATI
GLAD_API_CALL PFNGLNORMALSTREAM3DATIPROC sf_glad_glNormalStream3dATI;
#define glNormalStream3dATI sf_glad_glNormalStream3dATI
GLAD_API_CALL PFNGLNORMALSTREAM3DVATIPROC sf_glad_glNormalStream3dvATI;
#define glNormalStream3dvATI sf_glad_glNormalStream3dvATI
GLAD_API_CALL PFNGLNORMALSTREAM3FATIPROC sf_glad_glNormalStream3fATI;
#define glNormalStream3fATI sf_glad_glNormalStream3fATI
GLAD_API_CALL PFNGLNORMALSTREAM3FVATIPROC sf_glad_glNormalStream3fvATI;
#define glNormalStream3fvATI sf_glad_glNormalStream3fvATI
GLAD_API_CALL PFNGLNORMALSTREAM3IATIPROC sf_glad_glNormalStream3iATI;
#define glNormalStream3iATI sf_glad_glNormalStream3iATI
GLAD_API_CALL PFNGLNORMALSTREAM3IVATIPROC sf_glad_glNormalStream3ivATI;
#define glNormalStream3ivATI sf_glad_glNormalStream3ivATI
GLAD_API_CALL PFNGLNORMALSTREAM3SATIPROC sf_glad_glNormalStream3sATI;
#define glNormalStream3sATI sf_glad_glNormalStream3sATI
GLAD_API_CALL PFNGLNORMALSTREAM3SVATIPROC sf_glad_glNormalStream3svATI;
#define glNormalStream3svATI sf_glad_glNormalStream3svATI
GLAD_API_CALL PFNGLOBJECTLABELPROC sf_glad_glObjectLabel;
#define glObjectLabel sf_glad_glObjectLabel
GLAD_API_CALL PFNGLOBJECTPTRLABELPROC sf_glad_glObjectPtrLabel;
#define glObjectPtrLabel sf_glad_glObjectPtrLabel
GLAD_API_CALL PFNGLOBJECTPURGEABLEAPPLEPROC sf_glad_glObjectPurgeableAPPLE;
#define glObjectPurgeableAPPLE sf_glad_glObjectPurgeableAPPLE
GLAD_API_CALL PFNGLOBJECTUNPURGEABLEAPPLEPROC sf_glad_glObjectUnpurgeableAPPLE;
#define glObjectUnpurgeableAPPLE sf_glad_glObjectUnpurgeableAPPLE
GLAD_API_CALL PFNGLORTHOPROC sf_glad_glOrtho;
#define glOrtho sf_glad_glOrtho
GLAD_API_CALL PFNGLORTHOFOESPROC sf_glad_glOrthofOES;
#define glOrthofOES sf_glad_glOrthofOES
GLAD_API_CALL PFNGLORTHOXOESPROC sf_glad_glOrthoxOES;
#define glOrthoxOES sf_glad_glOrthoxOES
GLAD_API_CALL PFNGLPNTRIANGLESFATIPROC sf_glad_glPNTrianglesfATI;
#define glPNTrianglesfATI sf_glad_glPNTrianglesfATI
GLAD_API_CALL PFNGLPNTRIANGLESIATIPROC sf_glad_glPNTrianglesiATI;
#define glPNTrianglesiATI sf_glad_glPNTrianglesiATI
GLAD_API_CALL PFNGLPASSTEXCOORDATIPROC sf_glad_glPassTexCoordATI;
#define glPassTexCoordATI sf_glad_glPassTexCoordATI
GLAD_API_CALL PFNGLPASSTHROUGHPROC sf_glad_glPassThrough;
#define glPassThrough sf_glad_glPassThrough
GLAD_API_CALL PFNGLPASSTHROUGHXOESPROC sf_glad_glPassThroughxOES;
#define glPassThroughxOES sf_glad_glPassThroughxOES
GLAD_API_CALL PFNGLPATCHPARAMETERFVPROC sf_glad_glPatchParameterfv;
#define glPatchParameterfv sf_glad_glPatchParameterfv
GLAD_API_CALL PFNGLPATCHPARAMETERIPROC sf_glad_glPatchParameteri;
#define glPatchParameteri sf_glad_glPatchParameteri
GLAD_API_CALL PFNGLPATHCOLORGENNVPROC sf_glad_glPathColorGenNV;
#define glPathColorGenNV sf_glad_glPathColorGenNV
GLAD_API_CALL PFNGLPATHCOMMANDSNVPROC sf_glad_glPathCommandsNV;
#define glPathCommandsNV sf_glad_glPathCommandsNV
GLAD_API_CALL PFNGLPATHCOORDSNVPROC sf_glad_glPathCoordsNV;
#define glPathCoordsNV sf_glad_glPathCoordsNV
GLAD_API_CALL PFNGLPATHCOVERDEPTHFUNCNVPROC sf_glad_glPathCoverDepthFuncNV;
#define glPathCoverDepthFuncNV sf_glad_glPathCoverDepthFuncNV
GLAD_API_CALL PFNGLPATHDASHARRAYNVPROC sf_glad_glPathDashArrayNV;
#define glPathDashArrayNV sf_glad_glPathDashArrayNV
GLAD_API_CALL PFNGLPATHFOGGENNVPROC sf_glad_glPathFogGenNV;
#define glPathFogGenNV sf_glad_glPathFogGenNV
GLAD_API_CALL PFNGLPATHGLYPHINDEXARRAYNVPROC sf_glad_glPathGlyphIndexArrayNV;
#define glPathGlyphIndexArrayNV sf_glad_glPathGlyphIndexArrayNV
GLAD_API_CALL PFNGLPATHGLYPHINDEXRANGENVPROC sf_glad_glPathGlyphIndexRangeNV;
#define glPathGlyphIndexRangeNV sf_glad_glPathGlyphIndexRangeNV
GLAD_API_CALL PFNGLPATHGLYPHRANGENVPROC sf_glad_glPathGlyphRangeNV;
#define glPathGlyphRangeNV sf_glad_glPathGlyphRangeNV
GLAD_API_CALL PFNGLPATHGLYPHSNVPROC sf_glad_glPathGlyphsNV;
#define glPathGlyphsNV sf_glad_glPathGlyphsNV
GLAD_API_CALL PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC sf_glad_glPathMemoryGlyphIndexArrayNV;
#define glPathMemoryGlyphIndexArrayNV sf_glad_glPathMemoryGlyphIndexArrayNV
GLAD_API_CALL PFNGLPATHPARAMETERFNVPROC sf_glad_glPathParameterfNV;
#define glPathParameterfNV sf_glad_glPathParameterfNV
GLAD_API_CALL PFNGLPATHPARAMETERFVNVPROC sf_glad_glPathParameterfvNV;
#define glPathParameterfvNV sf_glad_glPathParameterfvNV
GLAD_API_CALL PFNGLPATHPARAMETERINVPROC sf_glad_glPathParameteriNV;
#define glPathParameteriNV sf_glad_glPathParameteriNV
GLAD_API_CALL PFNGLPATHPARAMETERIVNVPROC sf_glad_glPathParameterivNV;
#define glPathParameterivNV sf_glad_glPathParameterivNV
GLAD_API_CALL PFNGLPATHSTENCILDEPTHOFFSETNVPROC sf_glad_glPathStencilDepthOffsetNV;
#define glPathStencilDepthOffsetNV sf_glad_glPathStencilDepthOffsetNV
GLAD_API_CALL PFNGLPATHSTENCILFUNCNVPROC sf_glad_glPathStencilFuncNV;
#define glPathStencilFuncNV sf_glad_glPathStencilFuncNV
GLAD_API_CALL PFNGLPATHSTRINGNVPROC sf_glad_glPathStringNV;
#define glPathStringNV sf_glad_glPathStringNV
GLAD_API_CALL PFNGLPATHSUBCOMMANDSNVPROC sf_glad_glPathSubCommandsNV;
#define glPathSubCommandsNV sf_glad_glPathSubCommandsNV
GLAD_API_CALL PFNGLPATHSUBCOORDSNVPROC sf_glad_glPathSubCoordsNV;
#define glPathSubCoordsNV sf_glad_glPathSubCoordsNV
GLAD_API_CALL PFNGLPATHTEXGENNVPROC sf_glad_glPathTexGenNV;
#define glPathTexGenNV sf_glad_glPathTexGenNV
GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKPROC sf_glad_glPauseTransformFeedback;
#define glPauseTransformFeedback sf_glad_glPauseTransformFeedback
GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKNVPROC sf_glad_glPauseTransformFeedbackNV;
#define glPauseTransformFeedbackNV sf_glad_glPauseTransformFeedbackNV
GLAD_API_CALL PFNGLPIXELDATARANGENVPROC sf_glad_glPixelDataRangeNV;
#define glPixelDataRangeNV sf_glad_glPixelDataRangeNV
GLAD_API_CALL PFNGLPIXELMAPFVPROC sf_glad_glPixelMapfv;
#define glPixelMapfv sf_glad_glPixelMapfv
GLAD_API_CALL PFNGLPIXELMAPUIVPROC sf_glad_glPixelMapuiv;
#define glPixelMapuiv sf_glad_glPixelMapuiv
GLAD_API_CALL PFNGLPIXELMAPUSVPROC sf_glad_glPixelMapusv;
#define glPixelMapusv sf_glad_glPixelMapusv
GLAD_API_CALL PFNGLPIXELMAPXPROC sf_glad_glPixelMapx;
#define glPixelMapx sf_glad_glPixelMapx
GLAD_API_CALL PFNGLPIXELSTOREFPROC sf_glad_glPixelStoref;
#define glPixelStoref sf_glad_glPixelStoref
GLAD_API_CALL PFNGLPIXELSTOREIPROC sf_glad_glPixelStorei;
#define glPixelStorei sf_glad_glPixelStorei
GLAD_API_CALL PFNGLPIXELSTOREXPROC sf_glad_glPixelStorex;
#define glPixelStorex sf_glad_glPixelStorex
GLAD_API_CALL PFNGLPIXELTEXGENPARAMETERFSGISPROC sf_glad_glPixelTexGenParameterfSGIS;
#define glPixelTexGenParameterfSGIS sf_glad_glPixelTexGenParameterfSGIS
GLAD_API_CALL PFNGLPIXELTEXGENPARAMETERFVSGISPROC sf_glad_glPixelTexGenParameterfvSGIS;
#define glPixelTexGenParameterfvSGIS sf_glad_glPixelTexGenParameterfvSGIS
GLAD_API_CALL PFNGLPIXELTEXGENPARAMETERISGISPROC sf_glad_glPixelTexGenParameteriSGIS;
#define glPixelTexGenParameteriSGIS sf_glad_glPixelTexGenParameteriSGIS
GLAD_API_CALL PFNGLPIXELTEXGENPARAMETERIVSGISPROC sf_glad_glPixelTexGenParameterivSGIS;
#define glPixelTexGenParameterivSGIS sf_glad_glPixelTexGenParameterivSGIS
GLAD_API_CALL PFNGLPIXELTEXGENSGIXPROC sf_glad_glPixelTexGenSGIX;
#define glPixelTexGenSGIX sf_glad_glPixelTexGenSGIX
GLAD_API_CALL PFNGLPIXELTRANSFERFPROC sf_glad_glPixelTransferf;
#define glPixelTransferf sf_glad_glPixelTransferf
GLAD_API_CALL PFNGLPIXELTRANSFERIPROC sf_glad_glPixelTransferi;
#define glPixelTransferi sf_glad_glPixelTransferi
GLAD_API_CALL PFNGLPIXELTRANSFERXOESPROC sf_glad_glPixelTransferxOES;
#define glPixelTransferxOES sf_glad_glPixelTransferxOES
GLAD_API_CALL PFNGLPIXELTRANSFORMPARAMETERFEXTPROC sf_glad_glPixelTransformParameterfEXT;
#define glPixelTransformParameterfEXT sf_glad_glPixelTransformParameterfEXT
GLAD_API_CALL PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC sf_glad_glPixelTransformParameterfvEXT;
#define glPixelTransformParameterfvEXT sf_glad_glPixelTransformParameterfvEXT
GLAD_API_CALL PFNGLPIXELTRANSFORMPARAMETERIEXTPROC sf_glad_glPixelTransformParameteriEXT;
#define glPixelTransformParameteriEXT sf_glad_glPixelTransformParameteriEXT
GLAD_API_CALL PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC sf_glad_glPixelTransformParameterivEXT;
#define glPixelTransformParameterivEXT sf_glad_glPixelTransformParameterivEXT
GLAD_API_CALL PFNGLPIXELZOOMPROC sf_glad_glPixelZoom;
#define glPixelZoom sf_glad_glPixelZoom
GLAD_API_CALL PFNGLPIXELZOOMXOESPROC sf_glad_glPixelZoomxOES;
#define glPixelZoomxOES sf_glad_glPixelZoomxOES
GLAD_API_CALL PFNGLPOINTALONGPATHNVPROC sf_glad_glPointAlongPathNV;
#define glPointAlongPathNV sf_glad_glPointAlongPathNV
GLAD_API_CALL PFNGLPOINTPARAMETERFPROC sf_glad_glPointParameterf;
#define glPointParameterf sf_glad_glPointParameterf
GLAD_API_CALL PFNGLPOINTPARAMETERFARBPROC sf_glad_glPointParameterfARB;
#define glPointParameterfARB sf_glad_glPointParameterfARB
GLAD_API_CALL PFNGLPOINTPARAMETERFEXTPROC sf_glad_glPointParameterfEXT;
#define glPointParameterfEXT sf_glad_glPointParameterfEXT
GLAD_API_CALL PFNGLPOINTPARAMETERFSGISPROC sf_glad_glPointParameterfSGIS;
#define glPointParameterfSGIS sf_glad_glPointParameterfSGIS
GLAD_API_CALL PFNGLPOINTPARAMETERFVPROC sf_glad_glPointParameterfv;
#define glPointParameterfv sf_glad_glPointParameterfv
GLAD_API_CALL PFNGLPOINTPARAMETERFVARBPROC sf_glad_glPointParameterfvARB;
#define glPointParameterfvARB sf_glad_glPointParameterfvARB
GLAD_API_CALL PFNGLPOINTPARAMETERFVEXTPROC sf_glad_glPointParameterfvEXT;
#define glPointParameterfvEXT sf_glad_glPointParameterfvEXT
GLAD_API_CALL PFNGLPOINTPARAMETERFVSGISPROC sf_glad_glPointParameterfvSGIS;
#define glPointParameterfvSGIS sf_glad_glPointParameterfvSGIS
GLAD_API_CALL PFNGLPOINTPARAMETERIPROC sf_glad_glPointParameteri;
#define glPointParameteri sf_glad_glPointParameteri
GLAD_API_CALL PFNGLPOINTPARAMETERINVPROC sf_glad_glPointParameteriNV;
#define glPointParameteriNV sf_glad_glPointParameteriNV
GLAD_API_CALL PFNGLPOINTPARAMETERIVPROC sf_glad_glPointParameteriv;
#define glPointParameteriv sf_glad_glPointParameteriv
GLAD_API_CALL PFNGLPOINTPARAMETERIVNVPROC sf_glad_glPointParameterivNV;
#define glPointParameterivNV sf_glad_glPointParameterivNV
GLAD_API_CALL PFNGLPOINTPARAMETERXVOESPROC sf_glad_glPointParameterxvOES;
#define glPointParameterxvOES sf_glad_glPointParameterxvOES
GLAD_API_CALL PFNGLPOINTSIZEPROC sf_glad_glPointSize;
#define glPointSize sf_glad_glPointSize
GLAD_API_CALL PFNGLPOINTSIZEXOESPROC sf_glad_glPointSizexOES;
#define glPointSizexOES sf_glad_glPointSizexOES
GLAD_API_CALL PFNGLPOLLASYNCSGIXPROC sf_glad_glPollAsyncSGIX;
#define glPollAsyncSGIX sf_glad_glPollAsyncSGIX
GLAD_API_CALL PFNGLPOLLINSTRUMENTSSGIXPROC sf_glad_glPollInstrumentsSGIX;
#define glPollInstrumentsSGIX sf_glad_glPollInstrumentsSGIX
GLAD_API_CALL PFNGLPOLYGONMODEPROC sf_glad_glPolygonMode;
#define glPolygonMode sf_glad_glPolygonMode
GLAD_API_CALL PFNGLPOLYGONOFFSETPROC sf_glad_glPolygonOffset;
#define glPolygonOffset sf_glad_glPolygonOffset
GLAD_API_CALL PFNGLPOLYGONOFFSETCLAMPPROC sf_glad_glPolygonOffsetClamp;
#define glPolygonOffsetClamp sf_glad_glPolygonOffsetClamp
GLAD_API_CALL PFNGLPOLYGONOFFSETCLAMPEXTPROC sf_glad_glPolygonOffsetClampEXT;
#define glPolygonOffsetClampEXT sf_glad_glPolygonOffsetClampEXT
GLAD_API_CALL PFNGLPOLYGONOFFSETEXTPROC sf_glad_glPolygonOffsetEXT;
#define glPolygonOffsetEXT sf_glad_glPolygonOffsetEXT
GLAD_API_CALL PFNGLPOLYGONOFFSETXOESPROC sf_glad_glPolygonOffsetxOES;
#define glPolygonOffsetxOES sf_glad_glPolygonOffsetxOES
GLAD_API_CALL PFNGLPOLYGONSTIPPLEPROC sf_glad_glPolygonStipple;
#define glPolygonStipple sf_glad_glPolygonStipple
GLAD_API_CALL PFNGLPOPATTRIBPROC sf_glad_glPopAttrib;
#define glPopAttrib sf_glad_glPopAttrib
GLAD_API_CALL PFNGLPOPCLIENTATTRIBPROC sf_glad_glPopClientAttrib;
#define glPopClientAttrib sf_glad_glPopClientAttrib
GLAD_API_CALL PFNGLPOPDEBUGGROUPPROC sf_glad_glPopDebugGroup;
#define glPopDebugGroup sf_glad_glPopDebugGroup
GLAD_API_CALL PFNGLPOPGROUPMARKEREXTPROC sf_glad_glPopGroupMarkerEXT;
#define glPopGroupMarkerEXT sf_glad_glPopGroupMarkerEXT
GLAD_API_CALL PFNGLPOPMATRIXPROC sf_glad_glPopMatrix;
#define glPopMatrix sf_glad_glPopMatrix
GLAD_API_CALL PFNGLPOPNAMEPROC sf_glad_glPopName;
#define glPopName sf_glad_glPopName
GLAD_API_CALL PFNGLPRESENTFRAMEDUALFILLNVPROC sf_glad_glPresentFrameDualFillNV;
#define glPresentFrameDualFillNV sf_glad_glPresentFrameDualFillNV
GLAD_API_CALL PFNGLPRESENTFRAMEKEYEDNVPROC sf_glad_glPresentFrameKeyedNV;
#define glPresentFrameKeyedNV sf_glad_glPresentFrameKeyedNV
GLAD_API_CALL PFNGLPRIMITIVEBOUNDINGBOXARBPROC sf_glad_glPrimitiveBoundingBoxARB;
#define glPrimitiveBoundingBoxARB sf_glad_glPrimitiveBoundingBoxARB
GLAD_API_CALL PFNGLPRIMITIVERESTARTINDEXPROC sf_glad_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex sf_glad_glPrimitiveRestartIndex
GLAD_API_CALL PFNGLPRIMITIVERESTARTINDEXNVPROC sf_glad_glPrimitiveRestartIndexNV;
#define glPrimitiveRestartIndexNV sf_glad_glPrimitiveRestartIndexNV
GLAD_API_CALL PFNGLPRIMITIVERESTARTNVPROC sf_glad_glPrimitiveRestartNV;
#define glPrimitiveRestartNV sf_glad_glPrimitiveRestartNV
GLAD_API_CALL PFNGLPRIORITIZETEXTURESPROC sf_glad_glPrioritizeTextures;
#define glPrioritizeTextures sf_glad_glPrioritizeTextures
GLAD_API_CALL PFNGLPRIORITIZETEXTURESEXTPROC sf_glad_glPrioritizeTexturesEXT;
#define glPrioritizeTexturesEXT sf_glad_glPrioritizeTexturesEXT
GLAD_API_CALL PFNGLPRIORITIZETEXTURESXOESPROC sf_glad_glPrioritizeTexturesxOES;
#define glPrioritizeTexturesxOES sf_glad_glPrioritizeTexturesxOES
GLAD_API_CALL PFNGLPROGRAMBINARYPROC sf_glad_glProgramBinary;
#define glProgramBinary sf_glad_glProgramBinary
GLAD_API_CALL PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC sf_glad_glProgramBufferParametersIivNV;
#define glProgramBufferParametersIivNV sf_glad_glProgramBufferParametersIivNV
GLAD_API_CALL PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC sf_glad_glProgramBufferParametersIuivNV;
#define glProgramBufferParametersIuivNV sf_glad_glProgramBufferParametersIuivNV
GLAD_API_CALL PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC sf_glad_glProgramBufferParametersfvNV;
#define glProgramBufferParametersfvNV sf_glad_glProgramBufferParametersfvNV
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4DARBPROC sf_glad_glProgramEnvParameter4dARB;
#define glProgramEnvParameter4dARB sf_glad_glProgramEnvParameter4dARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4DVARBPROC sf_glad_glProgramEnvParameter4dvARB;
#define glProgramEnvParameter4dvARB sf_glad_glProgramEnvParameter4dvARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4FARBPROC sf_glad_glProgramEnvParameter4fARB;
#define glProgramEnvParameter4fARB sf_glad_glProgramEnvParameter4fARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4FVARBPROC sf_glad_glProgramEnvParameter4fvARB;
#define glProgramEnvParameter4fvARB sf_glad_glProgramEnvParameter4fvARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETERI4INVPROC sf_glad_glProgramEnvParameterI4iNV;
#define glProgramEnvParameterI4iNV sf_glad_glProgramEnvParameterI4iNV
GLAD_API_CALL PFNGLPROGRAMENVPARAMETERI4IVNVPROC sf_glad_glProgramEnvParameterI4ivNV;
#define glProgramEnvParameterI4ivNV sf_glad_glProgramEnvParameterI4ivNV
GLAD_API_CALL PFNGLPROGRAMENVPARAMETERI4UINVPROC sf_glad_glProgramEnvParameterI4uiNV;
#define glProgramEnvParameterI4uiNV sf_glad_glProgramEnvParameterI4uiNV
GLAD_API_CALL PFNGLPROGRAMENVPARAMETERI4UIVNVPROC sf_glad_glProgramEnvParameterI4uivNV;
#define glProgramEnvParameterI4uivNV sf_glad_glProgramEnvParameterI4uivNV
GLAD_API_CALL PFNGLPROGRAMENVPARAMETERS4FVEXTPROC sf_glad_glProgramEnvParameters4fvEXT;
#define glProgramEnvParameters4fvEXT sf_glad_glProgramEnvParameters4fvEXT
GLAD_API_CALL PFNGLPROGRAMENVPARAMETERSI4IVNVPROC sf_glad_glProgramEnvParametersI4ivNV;
#define glProgramEnvParametersI4ivNV sf_glad_glProgramEnvParametersI4ivNV
GLAD_API_CALL PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC sf_glad_glProgramEnvParametersI4uivNV;
#define glProgramEnvParametersI4uivNV sf_glad_glProgramEnvParametersI4uivNV
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4DARBPROC sf_glad_glProgramLocalParameter4dARB;
#define glProgramLocalParameter4dARB sf_glad_glProgramLocalParameter4dARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4DVARBPROC sf_glad_glProgramLocalParameter4dvARB;
#define glProgramLocalParameter4dvARB sf_glad_glProgramLocalParameter4dvARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4FARBPROC sf_glad_glProgramLocalParameter4fARB;
#define glProgramLocalParameter4fARB sf_glad_glProgramLocalParameter4fARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4FVARBPROC sf_glad_glProgramLocalParameter4fvARB;
#define glProgramLocalParameter4fvARB sf_glad_glProgramLocalParameter4fvARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETERI4INVPROC sf_glad_glProgramLocalParameterI4iNV;
#define glProgramLocalParameterI4iNV sf_glad_glProgramLocalParameterI4iNV
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC sf_glad_glProgramLocalParameterI4ivNV;
#define glProgramLocalParameterI4ivNV sf_glad_glProgramLocalParameterI4ivNV
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETERI4UINVPROC sf_glad_glProgramLocalParameterI4uiNV;
#define glProgramLocalParameterI4uiNV sf_glad_glProgramLocalParameterI4uiNV
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC sf_glad_glProgramLocalParameterI4uivNV;
#define glProgramLocalParameterI4uivNV sf_glad_glProgramLocalParameterI4uivNV
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC sf_glad_glProgramLocalParameters4fvEXT;
#define glProgramLocalParameters4fvEXT sf_glad_glProgramLocalParameters4fvEXT
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC sf_glad_glProgramLocalParametersI4ivNV;
#define glProgramLocalParametersI4ivNV sf_glad_glProgramLocalParametersI4ivNV
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC sf_glad_glProgramLocalParametersI4uivNV;
#define glProgramLocalParametersI4uivNV sf_glad_glProgramLocalParametersI4uivNV
GLAD_API_CALL PFNGLPROGRAMNAMEDPARAMETER4DNVPROC sf_glad_glProgramNamedParameter4dNV;
#define glProgramNamedParameter4dNV sf_glad_glProgramNamedParameter4dNV
GLAD_API_CALL PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC sf_glad_glProgramNamedParameter4dvNV;
#define glProgramNamedParameter4dvNV sf_glad_glProgramNamedParameter4dvNV
GLAD_API_CALL PFNGLPROGRAMNAMEDPARAMETER4FNVPROC sf_glad_glProgramNamedParameter4fNV;
#define glProgramNamedParameter4fNV sf_glad_glProgramNamedParameter4fNV
GLAD_API_CALL PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC sf_glad_glProgramNamedParameter4fvNV;
#define glProgramNamedParameter4fvNV sf_glad_glProgramNamedParameter4fvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4DNVPROC sf_glad_glProgramParameter4dNV;
#define glProgramParameter4dNV sf_glad_glProgramParameter4dNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4DVNVPROC sf_glad_glProgramParameter4dvNV;
#define glProgramParameter4dvNV sf_glad_glProgramParameter4dvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4FNVPROC sf_glad_glProgramParameter4fNV;
#define glProgramParameter4fNV sf_glad_glProgramParameter4fNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4FVNVPROC sf_glad_glProgramParameter4fvNV;
#define glProgramParameter4fvNV sf_glad_glProgramParameter4fvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETERIPROC sf_glad_glProgramParameteri;
#define glProgramParameteri sf_glad_glProgramParameteri
GLAD_API_CALL PFNGLPROGRAMPARAMETERIARBPROC sf_glad_glProgramParameteriARB;
#define glProgramParameteriARB sf_glad_glProgramParameteriARB
GLAD_API_CALL PFNGLPROGRAMPARAMETERIEXTPROC sf_glad_glProgramParameteriEXT;
#define glProgramParameteriEXT sf_glad_glProgramParameteriEXT
GLAD_API_CALL PFNGLPROGRAMPARAMETERS4DVNVPROC sf_glad_glProgramParameters4dvNV;
#define glProgramParameters4dvNV sf_glad_glProgramParameters4dvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETERS4FVNVPROC sf_glad_glProgramParameters4fvNV;
#define glProgramParameters4fvNV sf_glad_glProgramParameters4fvNV
GLAD_API_CALL PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC sf_glad_glProgramPathFragmentInputGenNV;
#define glProgramPathFragmentInputGenNV sf_glad_glProgramPathFragmentInputGenNV
GLAD_API_CALL PFNGLPROGRAMSTRINGARBPROC sf_glad_glProgramStringARB;
#define glProgramStringARB sf_glad_glProgramStringARB
GLAD_API_CALL PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC sf_glad_glProgramSubroutineParametersuivNV;
#define glProgramSubroutineParametersuivNV sf_glad_glProgramSubroutineParametersuivNV
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DPROC sf_glad_glProgramUniform1d;
#define glProgramUniform1d sf_glad_glProgramUniform1d
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DEXTPROC sf_glad_glProgramUniform1dEXT;
#define glProgramUniform1dEXT sf_glad_glProgramUniform1dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVPROC sf_glad_glProgramUniform1dv;
#define glProgramUniform1dv sf_glad_glProgramUniform1dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVEXTPROC sf_glad_glProgramUniform1dvEXT;
#define glProgramUniform1dvEXT sf_glad_glProgramUniform1dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FPROC sf_glad_glProgramUniform1f;
#define glProgramUniform1f sf_glad_glProgramUniform1f
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FEXTPROC sf_glad_glProgramUniform1fEXT;
#define glProgramUniform1fEXT sf_glad_glProgramUniform1fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVPROC sf_glad_glProgramUniform1fv;
#define glProgramUniform1fv sf_glad_glProgramUniform1fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVEXTPROC sf_glad_glProgramUniform1fvEXT;
#define glProgramUniform1fvEXT sf_glad_glProgramUniform1fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IPROC sf_glad_glProgramUniform1i;
#define glProgramUniform1i sf_glad_glProgramUniform1i
GLAD_API_CALL PFNGLPROGRAMUNIFORM1I64ARBPROC sf_glad_glProgramUniform1i64ARB;
#define glProgramUniform1i64ARB sf_glad_glProgramUniform1i64ARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM1I64NVPROC sf_glad_glProgramUniform1i64NV;
#define glProgramUniform1i64NV sf_glad_glProgramUniform1i64NV
GLAD_API_CALL PFNGLPROGRAMUNIFORM1I64VARBPROC sf_glad_glProgramUniform1i64vARB;
#define glProgramUniform1i64vARB sf_glad_glProgramUniform1i64vARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM1I64VNVPROC sf_glad_glProgramUniform1i64vNV;
#define glProgramUniform1i64vNV sf_glad_glProgramUniform1i64vNV
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IEXTPROC sf_glad_glProgramUniform1iEXT;
#define glProgramUniform1iEXT sf_glad_glProgramUniform1iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVPROC sf_glad_glProgramUniform1iv;
#define glProgramUniform1iv sf_glad_glProgramUniform1iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVEXTPROC sf_glad_glProgramUniform1ivEXT;
#define glProgramUniform1ivEXT sf_glad_glProgramUniform1ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIPROC sf_glad_glProgramUniform1ui;
#define glProgramUniform1ui sf_glad_glProgramUniform1ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UI64ARBPROC sf_glad_glProgramUniform1ui64ARB;
#define glProgramUniform1ui64ARB sf_glad_glProgramUniform1ui64ARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UI64NVPROC sf_glad_glProgramUniform1ui64NV;
#define glProgramUniform1ui64NV sf_glad_glProgramUniform1ui64NV
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UI64VARBPROC sf_glad_glProgramUniform1ui64vARB;
#define glProgramUniform1ui64vARB sf_glad_glProgramUniform1ui64vARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UI64VNVPROC sf_glad_glProgramUniform1ui64vNV;
#define glProgramUniform1ui64vNV sf_glad_glProgramUniform1ui64vNV
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIEXTPROC sf_glad_glProgramUniform1uiEXT;
#define glProgramUniform1uiEXT sf_glad_glProgramUniform1uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVPROC sf_glad_glProgramUniform1uiv;
#define glProgramUniform1uiv sf_glad_glProgramUniform1uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVEXTPROC sf_glad_glProgramUniform1uivEXT;
#define glProgramUniform1uivEXT sf_glad_glProgramUniform1uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DPROC sf_glad_glProgramUniform2d;
#define glProgramUniform2d sf_glad_glProgramUniform2d
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DEXTPROC sf_glad_glProgramUniform2dEXT;
#define glProgramUniform2dEXT sf_glad_glProgramUniform2dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVPROC sf_glad_glProgramUniform2dv;
#define glProgramUniform2dv sf_glad_glProgramUniform2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVEXTPROC sf_glad_glProgramUniform2dvEXT;
#define glProgramUniform2dvEXT sf_glad_glProgramUniform2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FPROC sf_glad_glProgramUniform2f;
#define glProgramUniform2f sf_glad_glProgramUniform2f
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FEXTPROC sf_glad_glProgramUniform2fEXT;
#define glProgramUniform2fEXT sf_glad_glProgramUniform2fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVPROC sf_glad_glProgramUniform2fv;
#define glProgramUniform2fv sf_glad_glProgramUniform2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVEXTPROC sf_glad_glProgramUniform2fvEXT;
#define glProgramUniform2fvEXT sf_glad_glProgramUniform2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IPROC sf_glad_glProgramUniform2i;
#define glProgramUniform2i sf_glad_glProgramUniform2i
GLAD_API_CALL PFNGLPROGRAMUNIFORM2I64ARBPROC sf_glad_glProgramUniform2i64ARB;
#define glProgramUniform2i64ARB sf_glad_glProgramUniform2i64ARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM2I64NVPROC sf_glad_glProgramUniform2i64NV;
#define glProgramUniform2i64NV sf_glad_glProgramUniform2i64NV
GLAD_API_CALL PFNGLPROGRAMUNIFORM2I64VARBPROC sf_glad_glProgramUniform2i64vARB;
#define glProgramUniform2i64vARB sf_glad_glProgramUniform2i64vARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM2I64VNVPROC sf_glad_glProgramUniform2i64vNV;
#define glProgramUniform2i64vNV sf_glad_glProgramUniform2i64vNV
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IEXTPROC sf_glad_glProgramUniform2iEXT;
#define glProgramUniform2iEXT sf_glad_glProgramUniform2iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVPROC sf_glad_glProgramUniform2iv;
#define glProgramUniform2iv sf_glad_glProgramUniform2iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVEXTPROC sf_glad_glProgramUniform2ivEXT;
#define glProgramUniform2ivEXT sf_glad_glProgramUniform2ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIPROC sf_glad_glProgramUniform2ui;
#define glProgramUniform2ui sf_glad_glProgramUniform2ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UI64ARBPROC sf_glad_glProgramUniform2ui64ARB;
#define glProgramUniform2ui64ARB sf_glad_glProgramUniform2ui64ARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UI64NVPROC sf_glad_glProgramUniform2ui64NV;
#define glProgramUniform2ui64NV sf_glad_glProgramUniform2ui64NV
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UI64VARBPROC sf_glad_glProgramUniform2ui64vARB;
#define glProgramUniform2ui64vARB sf_glad_glProgramUniform2ui64vARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UI64VNVPROC sf_glad_glProgramUniform2ui64vNV;
#define glProgramUniform2ui64vNV sf_glad_glProgramUniform2ui64vNV
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIEXTPROC sf_glad_glProgramUniform2uiEXT;
#define glProgramUniform2uiEXT sf_glad_glProgramUniform2uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVPROC sf_glad_glProgramUniform2uiv;
#define glProgramUniform2uiv sf_glad_glProgramUniform2uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVEXTPROC sf_glad_glProgramUniform2uivEXT;
#define glProgramUniform2uivEXT sf_glad_glProgramUniform2uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DPROC sf_glad_glProgramUniform3d;
#define glProgramUniform3d sf_glad_glProgramUniform3d
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DEXTPROC sf_glad_glProgramUniform3dEXT;
#define glProgramUniform3dEXT sf_glad_glProgramUniform3dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVPROC sf_glad_glProgramUniform3dv;
#define glProgramUniform3dv sf_glad_glProgramUniform3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVEXTPROC sf_glad_glProgramUniform3dvEXT;
#define glProgramUniform3dvEXT sf_glad_glProgramUniform3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FPROC sf_glad_glProgramUniform3f;
#define glProgramUniform3f sf_glad_glProgramUniform3f
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FEXTPROC sf_glad_glProgramUniform3fEXT;
#define glProgramUniform3fEXT sf_glad_glProgramUniform3fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVPROC sf_glad_glProgramUniform3fv;
#define glProgramUniform3fv sf_glad_glProgramUniform3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVEXTPROC sf_glad_glProgramUniform3fvEXT;
#define glProgramUniform3fvEXT sf_glad_glProgramUniform3fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IPROC sf_glad_glProgramUniform3i;
#define glProgramUniform3i sf_glad_glProgramUniform3i
GLAD_API_CALL PFNGLPROGRAMUNIFORM3I64ARBPROC sf_glad_glProgramUniform3i64ARB;
#define glProgramUniform3i64ARB sf_glad_glProgramUniform3i64ARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM3I64NVPROC sf_glad_glProgramUniform3i64NV;
#define glProgramUniform3i64NV sf_glad_glProgramUniform3i64NV
GLAD_API_CALL PFNGLPROGRAMUNIFORM3I64VARBPROC sf_glad_glProgramUniform3i64vARB;
#define glProgramUniform3i64vARB sf_glad_glProgramUniform3i64vARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM3I64VNVPROC sf_glad_glProgramUniform3i64vNV;
#define glProgramUniform3i64vNV sf_glad_glProgramUniform3i64vNV
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IEXTPROC sf_glad_glProgramUniform3iEXT;
#define glProgramUniform3iEXT sf_glad_glProgramUniform3iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVPROC sf_glad_glProgramUniform3iv;
#define glProgramUniform3iv sf_glad_glProgramUniform3iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVEXTPROC sf_glad_glProgramUniform3ivEXT;
#define glProgramUniform3ivEXT sf_glad_glProgramUniform3ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIPROC sf_glad_glProgramUniform3ui;
#define glProgramUniform3ui sf_glad_glProgramUniform3ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UI64ARBPROC sf_glad_glProgramUniform3ui64ARB;
#define glProgramUniform3ui64ARB sf_glad_glProgramUniform3ui64ARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UI64NVPROC sf_glad_glProgramUniform3ui64NV;
#define glProgramUniform3ui64NV sf_glad_glProgramUniform3ui64NV
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UI64VARBPROC sf_glad_glProgramUniform3ui64vARB;
#define glProgramUniform3ui64vARB sf_glad_glProgramUniform3ui64vARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UI64VNVPROC sf_glad_glProgramUniform3ui64vNV;
#define glProgramUniform3ui64vNV sf_glad_glProgramUniform3ui64vNV
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIEXTPROC sf_glad_glProgramUniform3uiEXT;
#define glProgramUniform3uiEXT sf_glad_glProgramUniform3uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVPROC sf_glad_glProgramUniform3uiv;
#define glProgramUniform3uiv sf_glad_glProgramUniform3uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVEXTPROC sf_glad_glProgramUniform3uivEXT;
#define glProgramUniform3uivEXT sf_glad_glProgramUniform3uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DPROC sf_glad_glProgramUniform4d;
#define glProgramUniform4d sf_glad_glProgramUniform4d
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DEXTPROC sf_glad_glProgramUniform4dEXT;
#define glProgramUniform4dEXT sf_glad_glProgramUniform4dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVPROC sf_glad_glProgramUniform4dv;
#define glProgramUniform4dv sf_glad_glProgramUniform4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVEXTPROC sf_glad_glProgramUniform4dvEXT;
#define glProgramUniform4dvEXT sf_glad_glProgramUniform4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FPROC sf_glad_glProgramUniform4f;
#define glProgramUniform4f sf_glad_glProgramUniform4f
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FEXTPROC sf_glad_glProgramUniform4fEXT;
#define glProgramUniform4fEXT sf_glad_glProgramUniform4fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVPROC sf_glad_glProgramUniform4fv;
#define glProgramUniform4fv sf_glad_glProgramUniform4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVEXTPROC sf_glad_glProgramUniform4fvEXT;
#define glProgramUniform4fvEXT sf_glad_glProgramUniform4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IPROC sf_glad_glProgramUniform4i;
#define glProgramUniform4i sf_glad_glProgramUniform4i
GLAD_API_CALL PFNGLPROGRAMUNIFORM4I64ARBPROC sf_glad_glProgramUniform4i64ARB;
#define glProgramUniform4i64ARB sf_glad_glProgramUniform4i64ARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM4I64NVPROC sf_glad_glProgramUniform4i64NV;
#define glProgramUniform4i64NV sf_glad_glProgramUniform4i64NV
GLAD_API_CALL PFNGLPROGRAMUNIFORM4I64VARBPROC sf_glad_glProgramUniform4i64vARB;
#define glProgramUniform4i64vARB sf_glad_glProgramUniform4i64vARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM4I64VNVPROC sf_glad_glProgramUniform4i64vNV;
#define glProgramUniform4i64vNV sf_glad_glProgramUniform4i64vNV
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IEXTPROC sf_glad_glProgramUniform4iEXT;
#define glProgramUniform4iEXT sf_glad_glProgramUniform4iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVPROC sf_glad_glProgramUniform4iv;
#define glProgramUniform4iv sf_glad_glProgramUniform4iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVEXTPROC sf_glad_glProgramUniform4ivEXT;
#define glProgramUniform4ivEXT sf_glad_glProgramUniform4ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIPROC sf_glad_glProgramUniform4ui;
#define glProgramUniform4ui sf_glad_glProgramUniform4ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UI64ARBPROC sf_glad_glProgramUniform4ui64ARB;
#define glProgramUniform4ui64ARB sf_glad_glProgramUniform4ui64ARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UI64NVPROC sf_glad_glProgramUniform4ui64NV;
#define glProgramUniform4ui64NV sf_glad_glProgramUniform4ui64NV
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UI64VARBPROC sf_glad_glProgramUniform4ui64vARB;
#define glProgramUniform4ui64vARB sf_glad_glProgramUniform4ui64vARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UI64VNVPROC sf_glad_glProgramUniform4ui64vNV;
#define glProgramUniform4ui64vNV sf_glad_glProgramUniform4ui64vNV
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIEXTPROC sf_glad_glProgramUniform4uiEXT;
#define glProgramUniform4uiEXT sf_glad_glProgramUniform4uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVPROC sf_glad_glProgramUniform4uiv;
#define glProgramUniform4uiv sf_glad_glProgramUniform4uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVEXTPROC sf_glad_glProgramUniform4uivEXT;
#define glProgramUniform4uivEXT sf_glad_glProgramUniform4uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC sf_glad_glProgramUniformHandleui64ARB;
#define glProgramUniformHandleui64ARB sf_glad_glProgramUniformHandleui64ARB
GLAD_API_CALL PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC sf_glad_glProgramUniformHandleui64NV;
#define glProgramUniformHandleui64NV sf_glad_glProgramUniformHandleui64NV
GLAD_API_CALL PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC sf_glad_glProgramUniformHandleui64vARB;
#define glProgramUniformHandleui64vARB sf_glad_glProgramUniformHandleui64vARB
GLAD_API_CALL PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC sf_glad_glProgramUniformHandleui64vNV;
#define glProgramUniformHandleui64vNV sf_glad_glProgramUniformHandleui64vNV
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVPROC sf_glad_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv sf_glad_glProgramUniformMatrix2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC sf_glad_glProgramUniformMatrix2dvEXT;
#define glProgramUniformMatrix2dvEXT sf_glad_glProgramUniformMatrix2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVPROC sf_glad_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv sf_glad_glProgramUniformMatrix2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC sf_glad_glProgramUniformMatrix2fvEXT;
#define glProgramUniformMatrix2fvEXT sf_glad_glProgramUniformMatrix2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC sf_glad_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv sf_glad_glProgramUniformMatrix2x3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC sf_glad_glProgramUniformMatrix2x3dvEXT;
#define glProgramUniformMatrix2x3dvEXT sf_glad_glProgramUniformMatrix2x3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC sf_glad_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv sf_glad_glProgramUniformMatrix2x3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC sf_glad_glProgramUniformMatrix2x3fvEXT;
#define glProgramUniformMatrix2x3fvEXT sf_glad_glProgramUniformMatrix2x3fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC sf_glad_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv sf_glad_glProgramUniformMatrix2x4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC sf_glad_glProgramUniformMatrix2x4dvEXT;
#define glProgramUniformMatrix2x4dvEXT sf_glad_glProgramUniformMatrix2x4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC sf_glad_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv sf_glad_glProgramUniformMatrix2x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC sf_glad_glProgramUniformMatrix2x4fvEXT;
#define glProgramUniformMatrix2x4fvEXT sf_glad_glProgramUniformMatrix2x4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVPROC sf_glad_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv sf_glad_glProgramUniformMatrix3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC sf_glad_glProgramUniformMatrix3dvEXT;
#define glProgramUniformMatrix3dvEXT sf_glad_glProgramUniformMatrix3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVPROC sf_glad_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv sf_glad_glProgramUniformMatrix3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC sf_glad_glProgramUniformMatrix3fvEXT;
#define glProgramUniformMatrix3fvEXT sf_glad_glProgramUniformMatrix3fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC sf_glad_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv sf_glad_glProgramUniformMatrix3x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC sf_glad_glProgramUniformMatrix3x2dvEXT;
#define glProgramUniformMatrix3x2dvEXT sf_glad_glProgramUniformMatrix3x2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC sf_glad_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv sf_glad_glProgramUniformMatrix3x2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC sf_glad_glProgramUniformMatrix3x2fvEXT;
#define glProgramUniformMatrix3x2fvEXT sf_glad_glProgramUniformMatrix3x2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC sf_glad_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv sf_glad_glProgramUniformMatrix3x4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC sf_glad_glProgramUniformMatrix3x4dvEXT;
#define glProgramUniformMatrix3x4dvEXT sf_glad_glProgramUniformMatrix3x4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC sf_glad_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv sf_glad_glProgramUniformMatrix3x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC sf_glad_glProgramUniformMatrix3x4fvEXT;
#define glProgramUniformMatrix3x4fvEXT sf_glad_glProgramUniformMatrix3x4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVPROC sf_glad_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv sf_glad_glProgramUniformMatrix4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC sf_glad_glProgramUniformMatrix4dvEXT;
#define glProgramUniformMatrix4dvEXT sf_glad_glProgramUniformMatrix4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVPROC sf_glad_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv sf_glad_glProgramUniformMatrix4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC sf_glad_glProgramUniformMatrix4fvEXT;
#define glProgramUniformMatrix4fvEXT sf_glad_glProgramUniformMatrix4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC sf_glad_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv sf_glad_glProgramUniformMatrix4x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC sf_glad_glProgramUniformMatrix4x2dvEXT;
#define glProgramUniformMatrix4x2dvEXT sf_glad_glProgramUniformMatrix4x2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC sf_glad_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv sf_glad_glProgramUniformMatrix4x2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC sf_glad_glProgramUniformMatrix4x2fvEXT;
#define glProgramUniformMatrix4x2fvEXT sf_glad_glProgramUniformMatrix4x2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC sf_glad_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv sf_glad_glProgramUniformMatrix4x3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC sf_glad_glProgramUniformMatrix4x3dvEXT;
#define glProgramUniformMatrix4x3dvEXT sf_glad_glProgramUniformMatrix4x3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC sf_glad_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv sf_glad_glProgramUniformMatrix4x3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC sf_glad_glProgramUniformMatrix4x3fvEXT;
#define glProgramUniformMatrix4x3fvEXT sf_glad_glProgramUniformMatrix4x3fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMUI64NVPROC sf_glad_glProgramUniformui64NV;
#define glProgramUniformui64NV sf_glad_glProgramUniformui64NV
GLAD_API_CALL PFNGLPROGRAMUNIFORMUI64VNVPROC sf_glad_glProgramUniformui64vNV;
#define glProgramUniformui64vNV sf_glad_glProgramUniformui64vNV
GLAD_API_CALL PFNGLPROGRAMVERTEXLIMITNVPROC sf_glad_glProgramVertexLimitNV;
#define glProgramVertexLimitNV sf_glad_glProgramVertexLimitNV
GLAD_API_CALL PFNGLPROVOKINGVERTEXPROC sf_glad_glProvokingVertex;
#define glProvokingVertex sf_glad_glProvokingVertex
GLAD_API_CALL PFNGLPROVOKINGVERTEXEXTPROC sf_glad_glProvokingVertexEXT;
#define glProvokingVertexEXT sf_glad_glProvokingVertexEXT
GLAD_API_CALL PFNGLPUSHATTRIBPROC sf_glad_glPushAttrib;
#define glPushAttrib sf_glad_glPushAttrib
GLAD_API_CALL PFNGLPUSHCLIENTATTRIBPROC sf_glad_glPushClientAttrib;
#define glPushClientAttrib sf_glad_glPushClientAttrib
GLAD_API_CALL PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC sf_glad_glPushClientAttribDefaultEXT;
#define glPushClientAttribDefaultEXT sf_glad_glPushClientAttribDefaultEXT
GLAD_API_CALL PFNGLPUSHDEBUGGROUPPROC sf_glad_glPushDebugGroup;
#define glPushDebugGroup sf_glad_glPushDebugGroup
GLAD_API_CALL PFNGLPUSHGROUPMARKEREXTPROC sf_glad_glPushGroupMarkerEXT;
#define glPushGroupMarkerEXT sf_glad_glPushGroupMarkerEXT
GLAD_API_CALL PFNGLPUSHMATRIXPROC sf_glad_glPushMatrix;
#define glPushMatrix sf_glad_glPushMatrix
GLAD_API_CALL PFNGLPUSHNAMEPROC sf_glad_glPushName;
#define glPushName sf_glad_glPushName
GLAD_API_CALL PFNGLQUERYCOUNTERPROC sf_glad_glQueryCounter;
#define glQueryCounter sf_glad_glQueryCounter
GLAD_API_CALL PFNGLQUERYMATRIXXOESPROC sf_glad_glQueryMatrixxOES;
#define glQueryMatrixxOES sf_glad_glQueryMatrixxOES
GLAD_API_CALL PFNGLQUERYOBJECTPARAMETERUIAMDPROC sf_glad_glQueryObjectParameteruiAMD;
#define glQueryObjectParameteruiAMD sf_glad_glQueryObjectParameteruiAMD
GLAD_API_CALL PFNGLQUERYRESOURCENVPROC sf_glad_glQueryResourceNV;
#define glQueryResourceNV sf_glad_glQueryResourceNV
GLAD_API_CALL PFNGLQUERYRESOURCETAGNVPROC sf_glad_glQueryResourceTagNV;
#define glQueryResourceTagNV sf_glad_glQueryResourceTagNV
GLAD_API_CALL PFNGLRASTERPOS2DPROC sf_glad_glRasterPos2d;
#define glRasterPos2d sf_glad_glRasterPos2d
GLAD_API_CALL PFNGLRASTERPOS2DVPROC sf_glad_glRasterPos2dv;
#define glRasterPos2dv sf_glad_glRasterPos2dv
GLAD_API_CALL PFNGLRASTERPOS2FPROC sf_glad_glRasterPos2f;
#define glRasterPos2f sf_glad_glRasterPos2f
GLAD_API_CALL PFNGLRASTERPOS2FVPROC sf_glad_glRasterPos2fv;
#define glRasterPos2fv sf_glad_glRasterPos2fv
GLAD_API_CALL PFNGLRASTERPOS2IPROC sf_glad_glRasterPos2i;
#define glRasterPos2i sf_glad_glRasterPos2i
GLAD_API_CALL PFNGLRASTERPOS2IVPROC sf_glad_glRasterPos2iv;
#define glRasterPos2iv sf_glad_glRasterPos2iv
GLAD_API_CALL PFNGLRASTERPOS2SPROC sf_glad_glRasterPos2s;
#define glRasterPos2s sf_glad_glRasterPos2s
GLAD_API_CALL PFNGLRASTERPOS2SVPROC sf_glad_glRasterPos2sv;
#define glRasterPos2sv sf_glad_glRasterPos2sv
GLAD_API_CALL PFNGLRASTERPOS2XOESPROC sf_glad_glRasterPos2xOES;
#define glRasterPos2xOES sf_glad_glRasterPos2xOES
GLAD_API_CALL PFNGLRASTERPOS2XVOESPROC sf_glad_glRasterPos2xvOES;
#define glRasterPos2xvOES sf_glad_glRasterPos2xvOES
GLAD_API_CALL PFNGLRASTERPOS3DPROC sf_glad_glRasterPos3d;
#define glRasterPos3d sf_glad_glRasterPos3d
GLAD_API_CALL PFNGLRASTERPOS3DVPROC sf_glad_glRasterPos3dv;
#define glRasterPos3dv sf_glad_glRasterPos3dv
GLAD_API_CALL PFNGLRASTERPOS3FPROC sf_glad_glRasterPos3f;
#define glRasterPos3f sf_glad_glRasterPos3f
GLAD_API_CALL PFNGLRASTERPOS3FVPROC sf_glad_glRasterPos3fv;
#define glRasterPos3fv sf_glad_glRasterPos3fv
GLAD_API_CALL PFNGLRASTERPOS3IPROC sf_glad_glRasterPos3i;
#define glRasterPos3i sf_glad_glRasterPos3i
GLAD_API_CALL PFNGLRASTERPOS3IVPROC sf_glad_glRasterPos3iv;
#define glRasterPos3iv sf_glad_glRasterPos3iv
GLAD_API_CALL PFNGLRASTERPOS3SPROC sf_glad_glRasterPos3s;
#define glRasterPos3s sf_glad_glRasterPos3s
GLAD_API_CALL PFNGLRASTERPOS3SVPROC sf_glad_glRasterPos3sv;
#define glRasterPos3sv sf_glad_glRasterPos3sv
GLAD_API_CALL PFNGLRASTERPOS3XOESPROC sf_glad_glRasterPos3xOES;
#define glRasterPos3xOES sf_glad_glRasterPos3xOES
GLAD_API_CALL PFNGLRASTERPOS3XVOESPROC sf_glad_glRasterPos3xvOES;
#define glRasterPos3xvOES sf_glad_glRasterPos3xvOES
GLAD_API_CALL PFNGLRASTERPOS4DPROC sf_glad_glRasterPos4d;
#define glRasterPos4d sf_glad_glRasterPos4d
GLAD_API_CALL PFNGLRASTERPOS4DVPROC sf_glad_glRasterPos4dv;
#define glRasterPos4dv sf_glad_glRasterPos4dv
GLAD_API_CALL PFNGLRASTERPOS4FPROC sf_glad_glRasterPos4f;
#define glRasterPos4f sf_glad_glRasterPos4f
GLAD_API_CALL PFNGLRASTERPOS4FVPROC sf_glad_glRasterPos4fv;
#define glRasterPos4fv sf_glad_glRasterPos4fv
GLAD_API_CALL PFNGLRASTERPOS4IPROC sf_glad_glRasterPos4i;
#define glRasterPos4i sf_glad_glRasterPos4i
GLAD_API_CALL PFNGLRASTERPOS4IVPROC sf_glad_glRasterPos4iv;
#define glRasterPos4iv sf_glad_glRasterPos4iv
GLAD_API_CALL PFNGLRASTERPOS4SPROC sf_glad_glRasterPos4s;
#define glRasterPos4s sf_glad_glRasterPos4s
GLAD_API_CALL PFNGLRASTERPOS4SVPROC sf_glad_glRasterPos4sv;
#define glRasterPos4sv sf_glad_glRasterPos4sv
GLAD_API_CALL PFNGLRASTERPOS4XOESPROC sf_glad_glRasterPos4xOES;
#define glRasterPos4xOES sf_glad_glRasterPos4xOES
GLAD_API_CALL PFNGLRASTERPOS4XVOESPROC sf_glad_glRasterPos4xvOES;
#define glRasterPos4xvOES sf_glad_glRasterPos4xvOES
GLAD_API_CALL PFNGLRASTERSAMPLESEXTPROC sf_glad_glRasterSamplesEXT;
#define glRasterSamplesEXT sf_glad_glRasterSamplesEXT
GLAD_API_CALL PFNGLREADBUFFERPROC sf_glad_glReadBuffer;
#define glReadBuffer sf_glad_glReadBuffer
GLAD_API_CALL PFNGLREADINSTRUMENTSSGIXPROC sf_glad_glReadInstrumentsSGIX;
#define glReadInstrumentsSGIX sf_glad_glReadInstrumentsSGIX
GLAD_API_CALL PFNGLREADPIXELSPROC sf_glad_glReadPixels;
#define glReadPixels sf_glad_glReadPixels
GLAD_API_CALL PFNGLREADNPIXELSPROC sf_glad_glReadnPixels;
#define glReadnPixels sf_glad_glReadnPixels
GLAD_API_CALL PFNGLREADNPIXELSARBPROC sf_glad_glReadnPixelsARB;
#define glReadnPixelsARB sf_glad_glReadnPixelsARB
GLAD_API_CALL PFNGLRECTDPROC sf_glad_glRectd;
#define glRectd sf_glad_glRectd
GLAD_API_CALL PFNGLRECTDVPROC sf_glad_glRectdv;
#define glRectdv sf_glad_glRectdv
GLAD_API_CALL PFNGLRECTFPROC sf_glad_glRectf;
#define glRectf sf_glad_glRectf
GLAD_API_CALL PFNGLRECTFVPROC sf_glad_glRectfv;
#define glRectfv sf_glad_glRectfv
GLAD_API_CALL PFNGLRECTIPROC sf_glad_glRecti;
#define glRecti sf_glad_glRecti
GLAD_API_CALL PFNGLRECTIVPROC sf_glad_glRectiv;
#define glRectiv sf_glad_glRectiv
GLAD_API_CALL PFNGLRECTSPROC sf_glad_glRects;
#define glRects sf_glad_glRects
GLAD_API_CALL PFNGLRECTSVPROC sf_glad_glRectsv;
#define glRectsv sf_glad_glRectsv
GLAD_API_CALL PFNGLRECTXOESPROC sf_glad_glRectxOES;
#define glRectxOES sf_glad_glRectxOES
GLAD_API_CALL PFNGLRECTXVOESPROC sf_glad_glRectxvOES;
#define glRectxvOES sf_glad_glRectxvOES
GLAD_API_CALL PFNGLREFERENCEPLANESGIXPROC sf_glad_glReferencePlaneSGIX;
#define glReferencePlaneSGIX sf_glad_glReferencePlaneSGIX
GLAD_API_CALL PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC sf_glad_glReleaseKeyedMutexWin32EXT;
#define glReleaseKeyedMutexWin32EXT sf_glad_glReleaseKeyedMutexWin32EXT
GLAD_API_CALL PFNGLRELEASESHADERCOMPILERPROC sf_glad_glReleaseShaderCompiler;
#define glReleaseShaderCompiler sf_glad_glReleaseShaderCompiler
GLAD_API_CALL PFNGLRENDERGPUMASKNVPROC sf_glad_glRenderGpuMaskNV;
#define glRenderGpuMaskNV sf_glad_glRenderGpuMaskNV
GLAD_API_CALL PFNGLRENDERMODEPROC sf_glad_glRenderMode;
#define glRenderMode sf_glad_glRenderMode
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEPROC sf_glad_glRenderbufferStorage;
#define glRenderbufferStorage sf_glad_glRenderbufferStorage
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEEXTPROC sf_glad_glRenderbufferStorageEXT;
#define glRenderbufferStorageEXT sf_glad_glRenderbufferStorageEXT
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC sf_glad_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample sf_glad_glRenderbufferStorageMultisample
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC sf_glad_glRenderbufferStorageMultisampleAdvancedAMD;
#define glRenderbufferStorageMultisampleAdvancedAMD sf_glad_glRenderbufferStorageMultisampleAdvancedAMD
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC sf_glad_glRenderbufferStorageMultisampleCoverageNV;
#define glRenderbufferStorageMultisampleCoverageNV sf_glad_glRenderbufferStorageMultisampleCoverageNV
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC sf_glad_glRenderbufferStorageMultisampleEXT;
#define glRenderbufferStorageMultisampleEXT sf_glad_glRenderbufferStorageMultisampleEXT
GLAD_API_CALL PFNGLREPLACEMENTCODEPOINTERSUNPROC sf_glad_glReplacementCodePointerSUN;
#define glReplacementCodePointerSUN sf_glad_glReplacementCodePointerSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUBSUNPROC sf_glad_glReplacementCodeubSUN;
#define glReplacementCodeubSUN sf_glad_glReplacementCodeubSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUBVSUNPROC sf_glad_glReplacementCodeubvSUN;
#define glReplacementCodeubvSUN sf_glad_glReplacementCodeubvSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiColor3fVertex3fSUN;
#define glReplacementCodeuiColor3fVertex3fSUN sf_glad_glReplacementCodeuiColor3fVertex3fSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiColor3fVertex3fvSUN;
#define glReplacementCodeuiColor3fVertex3fvSUN sf_glad_glReplacementCodeuiColor3fVertex3fvSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN sf_glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN sf_glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC sf_glad_glReplacementCodeuiColor4ubVertex3fSUN;
#define glReplacementCodeuiColor4ubVertex3fSUN sf_glad_glReplacementCodeuiColor4ubVertex3fSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiColor4ubVertex3fvSUN;
#define glReplacementCodeuiColor4ubVertex3fvSUN sf_glad_glReplacementCodeuiColor4ubVertex3fvSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiNormal3fVertex3fSUN;
#define glReplacementCodeuiNormal3fVertex3fSUN sf_glad_glReplacementCodeuiNormal3fVertex3fSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiNormal3fVertex3fvSUN;
#define glReplacementCodeuiNormal3fVertex3fvSUN sf_glad_glReplacementCodeuiNormal3fVertex3fvSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUISUNPROC sf_glad_glReplacementCodeuiSUN;
#define glReplacementCodeuiSUN sf_glad_glReplacementCodeuiSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN sf_glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN sf_glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN sf_glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN sf_glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiTexCoord2fVertex3fSUN;
#define glReplacementCodeuiTexCoord2fVertex3fSUN sf_glad_glReplacementCodeuiTexCoord2fVertex3fSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiTexCoord2fVertex3fvSUN;
#define glReplacementCodeuiTexCoord2fVertex3fvSUN sf_glad_glReplacementCodeuiTexCoord2fVertex3fvSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC sf_glad_glReplacementCodeuiVertex3fSUN;
#define glReplacementCodeuiVertex3fSUN sf_glad_glReplacementCodeuiVertex3fSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiVertex3fvSUN;
#define glReplacementCodeuiVertex3fvSUN sf_glad_glReplacementCodeuiVertex3fvSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUIVSUNPROC sf_glad_glReplacementCodeuivSUN;
#define glReplacementCodeuivSUN sf_glad_glReplacementCodeuivSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUSSUNPROC sf_glad_glReplacementCodeusSUN;
#define glReplacementCodeusSUN sf_glad_glReplacementCodeusSUN
GLAD_API_CALL PFNGLREPLACEMENTCODEUSVSUNPROC sf_glad_glReplacementCodeusvSUN;
#define glReplacementCodeusvSUN sf_glad_glReplacementCodeusvSUN
GLAD_API_CALL PFNGLREQUESTRESIDENTPROGRAMSNVPROC sf_glad_glRequestResidentProgramsNV;
#define glRequestResidentProgramsNV sf_glad_glRequestResidentProgramsNV
GLAD_API_CALL PFNGLRESETHISTOGRAMPROC sf_glad_glResetHistogram;
#define glResetHistogram sf_glad_glResetHistogram
GLAD_API_CALL PFNGLRESETHISTOGRAMEXTPROC sf_glad_glResetHistogramEXT;
#define glResetHistogramEXT sf_glad_glResetHistogramEXT
GLAD_API_CALL PFNGLRESETMEMORYOBJECTPARAMETERNVPROC sf_glad_glResetMemoryObjectParameterNV;
#define glResetMemoryObjectParameterNV sf_glad_glResetMemoryObjectParameterNV
GLAD_API_CALL PFNGLRESETMINMAXPROC sf_glad_glResetMinmax;
#define glResetMinmax sf_glad_glResetMinmax
GLAD_API_CALL PFNGLRESETMINMAXEXTPROC sf_glad_glResetMinmaxEXT;
#define glResetMinmaxEXT sf_glad_glResetMinmaxEXT
GLAD_API_CALL PFNGLRESIZEBUFFERSMESAPROC sf_glad_glResizeBuffersMESA;
#define glResizeBuffersMESA sf_glad_glResizeBuffersMESA
GLAD_API_CALL PFNGLRESOLVEDEPTHVALUESNVPROC sf_glad_glResolveDepthValuesNV;
#define glResolveDepthValuesNV sf_glad_glResolveDepthValuesNV
GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKPROC sf_glad_glResumeTransformFeedback;
#define glResumeTransformFeedback sf_glad_glResumeTransformFeedback
GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKNVPROC sf_glad_glResumeTransformFeedbackNV;
#define glResumeTransformFeedbackNV sf_glad_glResumeTransformFeedbackNV
GLAD_API_CALL PFNGLROTATEDPROC sf_glad_glRotated;
#define glRotated sf_glad_glRotated
GLAD_API_CALL PFNGLROTATEFPROC sf_glad_glRotatef;
#define glRotatef sf_glad_glRotatef
GLAD_API_CALL PFNGLROTATEXOESPROC sf_glad_glRotatexOES;
#define glRotatexOES sf_glad_glRotatexOES
GLAD_API_CALL PFNGLSAMPLECOVERAGEPROC sf_glad_glSampleCoverage;
#define glSampleCoverage sf_glad_glSampleCoverage
GLAD_API_CALL PFNGLSAMPLECOVERAGEARBPROC sf_glad_glSampleCoverageARB;
#define glSampleCoverageARB sf_glad_glSampleCoverageARB
GLAD_API_CALL PFNGLSAMPLEMAPATIPROC sf_glad_glSampleMapATI;
#define glSampleMapATI sf_glad_glSampleMapATI
GLAD_API_CALL PFNGLSAMPLEMASKEXTPROC sf_glad_glSampleMaskEXT;
#define glSampleMaskEXT sf_glad_glSampleMaskEXT
GLAD_API_CALL PFNGLSAMPLEMASKINDEXEDNVPROC sf_glad_glSampleMaskIndexedNV;
#define glSampleMaskIndexedNV sf_glad_glSampleMaskIndexedNV
GLAD_API_CALL PFNGLSAMPLEMASKSGISPROC sf_glad_glSampleMaskSGIS;
#define glSampleMaskSGIS sf_glad_glSampleMaskSGIS
GLAD_API_CALL PFNGLSAMPLEMASKIPROC sf_glad_glSampleMaski;
#define glSampleMaski sf_glad_glSampleMaski
GLAD_API_CALL PFNGLSAMPLEPATTERNEXTPROC sf_glad_glSamplePatternEXT;
#define glSamplePatternEXT sf_glad_glSamplePatternEXT
GLAD_API_CALL PFNGLSAMPLEPATTERNSGISPROC sf_glad_glSamplePatternSGIS;
#define glSamplePatternSGIS sf_glad_glSamplePatternSGIS
GLAD_API_CALL PFNGLSAMPLERPARAMETERIIVPROC sf_glad_glSamplerParameterIiv;
#define glSamplerParameterIiv sf_glad_glSamplerParameterIiv
GLAD_API_CALL PFNGLSAMPLERPARAMETERIUIVPROC sf_glad_glSamplerParameterIuiv;
#define glSamplerParameterIuiv sf_glad_glSamplerParameterIuiv
GLAD_API_CALL PFNGLSAMPLERPARAMETERFPROC sf_glad_glSamplerParameterf;
#define glSamplerParameterf sf_glad_glSamplerParameterf
GLAD_API_CALL PFNGLSAMPLERPARAMETERFVPROC sf_glad_glSamplerParameterfv;
#define glSamplerParameterfv sf_glad_glSamplerParameterfv
GLAD_API_CALL PFNGLSAMPLERPARAMETERIPROC sf_glad_glSamplerParameteri;
#define glSamplerParameteri sf_glad_glSamplerParameteri
GLAD_API_CALL PFNGLSAMPLERPARAMETERIVPROC sf_glad_glSamplerParameteriv;
#define glSamplerParameteriv sf_glad_glSamplerParameteriv
GLAD_API_CALL PFNGLSCALEDPROC sf_glad_glScaled;
#define glScaled sf_glad_glScaled
GLAD_API_CALL PFNGLSCALEFPROC sf_glad_glScalef;
#define glScalef sf_glad_glScalef
GLAD_API_CALL PFNGLSCALEXOESPROC sf_glad_glScalexOES;
#define glScalexOES sf_glad_glScalexOES
GLAD_API_CALL PFNGLSCISSORPROC sf_glad_glScissor;
#define glScissor sf_glad_glScissor
GLAD_API_CALL PFNGLSCISSORARRAYVPROC sf_glad_glScissorArrayv;
#define glScissorArrayv sf_glad_glScissorArrayv
GLAD_API_CALL PFNGLSCISSOREXCLUSIVEARRAYVNVPROC sf_glad_glScissorExclusiveArrayvNV;
#define glScissorExclusiveArrayvNV sf_glad_glScissorExclusiveArrayvNV
GLAD_API_CALL PFNGLSCISSOREXCLUSIVENVPROC sf_glad_glScissorExclusiveNV;
#define glScissorExclusiveNV sf_glad_glScissorExclusiveNV
GLAD_API_CALL PFNGLSCISSORINDEXEDPROC sf_glad_glScissorIndexed;
#define glScissorIndexed sf_glad_glScissorIndexed
GLAD_API_CALL PFNGLSCISSORINDEXEDVPROC sf_glad_glScissorIndexedv;
#define glScissorIndexedv sf_glad_glScissorIndexedv
GLAD_API_CALL PFNGLSECONDARYCOLOR3BPROC sf_glad_glSecondaryColor3b;
#define glSecondaryColor3b sf_glad_glSecondaryColor3b
GLAD_API_CALL PFNGLSECONDARYCOLOR3BEXTPROC sf_glad_glSecondaryColor3bEXT;
#define glSecondaryColor3bEXT sf_glad_glSecondaryColor3bEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3BVPROC sf_glad_glSecondaryColor3bv;
#define glSecondaryColor3bv sf_glad_glSecondaryColor3bv
GLAD_API_CALL PFNGLSECONDARYCOLOR3BVEXTPROC sf_glad_glSecondaryColor3bvEXT;
#define glSecondaryColor3bvEXT sf_glad_glSecondaryColor3bvEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3DPROC sf_glad_glSecondaryColor3d;
#define glSecondaryColor3d sf_glad_glSecondaryColor3d
GLAD_API_CALL PFNGLSECONDARYCOLOR3DEXTPROC sf_glad_glSecondaryColor3dEXT;
#define glSecondaryColor3dEXT sf_glad_glSecondaryColor3dEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3DVPROC sf_glad_glSecondaryColor3dv;
#define glSecondaryColor3dv sf_glad_glSecondaryColor3dv
GLAD_API_CALL PFNGLSECONDARYCOLOR3DVEXTPROC sf_glad_glSecondaryColor3dvEXT;
#define glSecondaryColor3dvEXT sf_glad_glSecondaryColor3dvEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3FPROC sf_glad_glSecondaryColor3f;
#define glSecondaryColor3f sf_glad_glSecondaryColor3f
GLAD_API_CALL PFNGLSECONDARYCOLOR3FEXTPROC sf_glad_glSecondaryColor3fEXT;
#define glSecondaryColor3fEXT sf_glad_glSecondaryColor3fEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3FVPROC sf_glad_glSecondaryColor3fv;
#define glSecondaryColor3fv sf_glad_glSecondaryColor3fv
GLAD_API_CALL PFNGLSECONDARYCOLOR3FVEXTPROC sf_glad_glSecondaryColor3fvEXT;
#define glSecondaryColor3fvEXT sf_glad_glSecondaryColor3fvEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3HNVPROC sf_glad_glSecondaryColor3hNV;
#define glSecondaryColor3hNV sf_glad_glSecondaryColor3hNV
GLAD_API_CALL PFNGLSECONDARYCOLOR3HVNVPROC sf_glad_glSecondaryColor3hvNV;
#define glSecondaryColor3hvNV sf_glad_glSecondaryColor3hvNV
GLAD_API_CALL PFNGLSECONDARYCOLOR3IPROC sf_glad_glSecondaryColor3i;
#define glSecondaryColor3i sf_glad_glSecondaryColor3i
GLAD_API_CALL PFNGLSECONDARYCOLOR3IEXTPROC sf_glad_glSecondaryColor3iEXT;
#define glSecondaryColor3iEXT sf_glad_glSecondaryColor3iEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3IVPROC sf_glad_glSecondaryColor3iv;
#define glSecondaryColor3iv sf_glad_glSecondaryColor3iv
GLAD_API_CALL PFNGLSECONDARYCOLOR3IVEXTPROC sf_glad_glSecondaryColor3ivEXT;
#define glSecondaryColor3ivEXT sf_glad_glSecondaryColor3ivEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3SPROC sf_glad_glSecondaryColor3s;
#define glSecondaryColor3s sf_glad_glSecondaryColor3s
GLAD_API_CALL PFNGLSECONDARYCOLOR3SEXTPROC sf_glad_glSecondaryColor3sEXT;
#define glSecondaryColor3sEXT sf_glad_glSecondaryColor3sEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3SVPROC sf_glad_glSecondaryColor3sv;
#define glSecondaryColor3sv sf_glad_glSecondaryColor3sv
GLAD_API_CALL PFNGLSECONDARYCOLOR3SVEXTPROC sf_glad_glSecondaryColor3svEXT;
#define glSecondaryColor3svEXT sf_glad_glSecondaryColor3svEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBPROC sf_glad_glSecondaryColor3ub;
#define glSecondaryColor3ub sf_glad_glSecondaryColor3ub
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBEXTPROC sf_glad_glSecondaryColor3ubEXT;
#define glSecondaryColor3ubEXT sf_glad_glSecondaryColor3ubEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBVPROC sf_glad_glSecondaryColor3ubv;
#define glSecondaryColor3ubv sf_glad_glSecondaryColor3ubv
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBVEXTPROC sf_glad_glSecondaryColor3ubvEXT;
#define glSecondaryColor3ubvEXT sf_glad_glSecondaryColor3ubvEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIPROC sf_glad_glSecondaryColor3ui;
#define glSecondaryColor3ui sf_glad_glSecondaryColor3ui
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIEXTPROC sf_glad_glSecondaryColor3uiEXT;
#define glSecondaryColor3uiEXT sf_glad_glSecondaryColor3uiEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIVPROC sf_glad_glSecondaryColor3uiv;
#define glSecondaryColor3uiv sf_glad_glSecondaryColor3uiv
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIVEXTPROC sf_glad_glSecondaryColor3uivEXT;
#define glSecondaryColor3uivEXT sf_glad_glSecondaryColor3uivEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3USPROC sf_glad_glSecondaryColor3us;
#define glSecondaryColor3us sf_glad_glSecondaryColor3us
GLAD_API_CALL PFNGLSECONDARYCOLOR3USEXTPROC sf_glad_glSecondaryColor3usEXT;
#define glSecondaryColor3usEXT sf_glad_glSecondaryColor3usEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3USVPROC sf_glad_glSecondaryColor3usv;
#define glSecondaryColor3usv sf_glad_glSecondaryColor3usv
GLAD_API_CALL PFNGLSECONDARYCOLOR3USVEXTPROC sf_glad_glSecondaryColor3usvEXT;
#define glSecondaryColor3usvEXT sf_glad_glSecondaryColor3usvEXT
GLAD_API_CALL PFNGLSECONDARYCOLORFORMATNVPROC sf_glad_glSecondaryColorFormatNV;
#define glSecondaryColorFormatNV sf_glad_glSecondaryColorFormatNV
GLAD_API_CALL PFNGLSECONDARYCOLORP3UIPROC sf_glad_glSecondaryColorP3ui;
#define glSecondaryColorP3ui sf_glad_glSecondaryColorP3ui
GLAD_API_CALL PFNGLSECONDARYCOLORP3UIVPROC sf_glad_glSecondaryColorP3uiv;
#define glSecondaryColorP3uiv sf_glad_glSecondaryColorP3uiv
GLAD_API_CALL PFNGLSECONDARYCOLORPOINTERPROC sf_glad_glSecondaryColorPointer;
#define glSecondaryColorPointer sf_glad_glSecondaryColorPointer
GLAD_API_CALL PFNGLSECONDARYCOLORPOINTEREXTPROC sf_glad_glSecondaryColorPointerEXT;
#define glSecondaryColorPointerEXT sf_glad_glSecondaryColorPointerEXT
GLAD_API_CALL PFNGLSECONDARYCOLORPOINTERLISTIBMPROC sf_glad_glSecondaryColorPointerListIBM;
#define glSecondaryColorPointerListIBM sf_glad_glSecondaryColorPointerListIBM
GLAD_API_CALL PFNGLSELECTBUFFERPROC sf_glad_glSelectBuffer;
#define glSelectBuffer sf_glad_glSelectBuffer
GLAD_API_CALL PFNGLSELECTPERFMONITORCOUNTERSAMDPROC sf_glad_glSelectPerfMonitorCountersAMD;
#define glSelectPerfMonitorCountersAMD sf_glad_glSelectPerfMonitorCountersAMD
GLAD_API_CALL PFNGLSEMAPHOREPARAMETERIVNVPROC sf_glad_glSemaphoreParameterivNV;
#define glSemaphoreParameterivNV sf_glad_glSemaphoreParameterivNV
GLAD_API_CALL PFNGLSEMAPHOREPARAMETERUI64VEXTPROC sf_glad_glSemaphoreParameterui64vEXT;
#define glSemaphoreParameterui64vEXT sf_glad_glSemaphoreParameterui64vEXT
GLAD_API_CALL PFNGLSEPARABLEFILTER2DPROC sf_glad_glSeparableFilter2D;
#define glSeparableFilter2D sf_glad_glSeparableFilter2D
GLAD_API_CALL PFNGLSEPARABLEFILTER2DEXTPROC sf_glad_glSeparableFilter2DEXT;
#define glSeparableFilter2DEXT sf_glad_glSeparableFilter2DEXT
GLAD_API_CALL PFNGLSETFENCEAPPLEPROC sf_glad_glSetFenceAPPLE;
#define glSetFenceAPPLE sf_glad_glSetFenceAPPLE
GLAD_API_CALL PFNGLSETFENCENVPROC sf_glad_glSetFenceNV;
#define glSetFenceNV sf_glad_glSetFenceNV
GLAD_API_CALL PFNGLSETFRAGMENTSHADERCONSTANTATIPROC sf_glad_glSetFragmentShaderConstantATI;
#define glSetFragmentShaderConstantATI sf_glad_glSetFragmentShaderConstantATI
GLAD_API_CALL PFNGLSETINVARIANTEXTPROC sf_glad_glSetInvariantEXT;
#define glSetInvariantEXT sf_glad_glSetInvariantEXT
GLAD_API_CALL PFNGLSETLOCALCONSTANTEXTPROC sf_glad_glSetLocalConstantEXT;
#define glSetLocalConstantEXT sf_glad_glSetLocalConstantEXT
GLAD_API_CALL PFNGLSETMULTISAMPLEFVAMDPROC sf_glad_glSetMultisamplefvAMD;
#define glSetMultisamplefvAMD sf_glad_glSetMultisamplefvAMD
GLAD_API_CALL PFNGLSHADEMODELPROC sf_glad_glShadeModel;
#define glShadeModel sf_glad_glShadeModel
GLAD_API_CALL PFNGLSHADERBINARYPROC sf_glad_glShaderBinary;
#define glShaderBinary sf_glad_glShaderBinary
GLAD_API_CALL PFNGLSHADEROP1EXTPROC sf_glad_glShaderOp1EXT;
#define glShaderOp1EXT sf_glad_glShaderOp1EXT
GLAD_API_CALL PFNGLSHADEROP2EXTPROC sf_glad_glShaderOp2EXT;
#define glShaderOp2EXT sf_glad_glShaderOp2EXT
GLAD_API_CALL PFNGLSHADEROP3EXTPROC sf_glad_glShaderOp3EXT;
#define glShaderOp3EXT sf_glad_glShaderOp3EXT
GLAD_API_CALL PFNGLSHADERSOURCEPROC sf_glad_glShaderSource;
#define glShaderSource sf_glad_glShaderSource
GLAD_API_CALL PFNGLSHADERSOURCEARBPROC sf_glad_glShaderSourceARB;
#define glShaderSourceARB sf_glad_glShaderSourceARB
GLAD_API_CALL PFNGLSHADERSTORAGEBLOCKBINDINGPROC sf_glad_glShaderStorageBlockBinding;
#define glShaderStorageBlockBinding sf_glad_glShaderStorageBlockBinding
GLAD_API_CALL PFNGLSHADINGRATEIMAGEBARRIERNVPROC sf_glad_glShadingRateImageBarrierNV;
#define glShadingRateImageBarrierNV sf_glad_glShadingRateImageBarrierNV
GLAD_API_CALL PFNGLSHADINGRATEIMAGEPALETTENVPROC sf_glad_glShadingRateImagePaletteNV;
#define glShadingRateImagePaletteNV sf_glad_glShadingRateImagePaletteNV
GLAD_API_CALL PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC sf_glad_glShadingRateSampleOrderCustomNV;
#define glShadingRateSampleOrderCustomNV sf_glad_glShadingRateSampleOrderCustomNV
GLAD_API_CALL PFNGLSHADINGRATESAMPLEORDERNVPROC sf_glad_glShadingRateSampleOrderNV;
#define glShadingRateSampleOrderNV sf_glad_glShadingRateSampleOrderNV
GLAD_API_CALL PFNGLSHARPENTEXFUNCSGISPROC sf_glad_glSharpenTexFuncSGIS;
#define glSharpenTexFuncSGIS sf_glad_glSharpenTexFuncSGIS
GLAD_API_CALL PFNGLSIGNALSEMAPHOREEXTPROC sf_glad_glSignalSemaphoreEXT;
#define glSignalSemaphoreEXT sf_glad_glSignalSemaphoreEXT
GLAD_API_CALL PFNGLSIGNALSEMAPHOREUI64NVXPROC sf_glad_glSignalSemaphoreui64NVX;
#define glSignalSemaphoreui64NVX sf_glad_glSignalSemaphoreui64NVX
GLAD_API_CALL PFNGLSIGNALVKFENCENVPROC sf_glad_glSignalVkFenceNV;
#define glSignalVkFenceNV sf_glad_glSignalVkFenceNV
GLAD_API_CALL PFNGLSIGNALVKSEMAPHORENVPROC sf_glad_glSignalVkSemaphoreNV;
#define glSignalVkSemaphoreNV sf_glad_glSignalVkSemaphoreNV
GLAD_API_CALL PFNGLSPECIALIZESHADERPROC sf_glad_glSpecializeShader;
#define glSpecializeShader sf_glad_glSpecializeShader
GLAD_API_CALL PFNGLSPECIALIZESHADERARBPROC sf_glad_glSpecializeShaderARB;
#define glSpecializeShaderARB sf_glad_glSpecializeShaderARB
GLAD_API_CALL PFNGLSPRITEPARAMETERFSGIXPROC sf_glad_glSpriteParameterfSGIX;
#define glSpriteParameterfSGIX sf_glad_glSpriteParameterfSGIX
GLAD_API_CALL PFNGLSPRITEPARAMETERFVSGIXPROC sf_glad_glSpriteParameterfvSGIX;
#define glSpriteParameterfvSGIX sf_glad_glSpriteParameterfvSGIX
GLAD_API_CALL PFNGLSPRITEPARAMETERISGIXPROC sf_glad_glSpriteParameteriSGIX;
#define glSpriteParameteriSGIX sf_glad_glSpriteParameteriSGIX
GLAD_API_CALL PFNGLSPRITEPARAMETERIVSGIXPROC sf_glad_glSpriteParameterivSGIX;
#define glSpriteParameterivSGIX sf_glad_glSpriteParameterivSGIX
GLAD_API_CALL PFNGLSTARTINSTRUMENTSSGIXPROC sf_glad_glStartInstrumentsSGIX;
#define glStartInstrumentsSGIX sf_glad_glStartInstrumentsSGIX
GLAD_API_CALL PFNGLSTATECAPTURENVPROC sf_glad_glStateCaptureNV;
#define glStateCaptureNV sf_glad_glStateCaptureNV
GLAD_API_CALL PFNGLSTENCILCLEARTAGEXTPROC sf_glad_glStencilClearTagEXT;
#define glStencilClearTagEXT sf_glad_glStencilClearTagEXT
GLAD_API_CALL PFNGLSTENCILFILLPATHINSTANCEDNVPROC sf_glad_glStencilFillPathInstancedNV;
#define glStencilFillPathInstancedNV sf_glad_glStencilFillPathInstancedNV
GLAD_API_CALL PFNGLSTENCILFILLPATHNVPROC sf_glad_glStencilFillPathNV;
#define glStencilFillPathNV sf_glad_glStencilFillPathNV
GLAD_API_CALL PFNGLSTENCILFUNCPROC sf_glad_glStencilFunc;
#define glStencilFunc sf_glad_glStencilFunc
GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEPROC sf_glad_glStencilFuncSeparate;
#define glStencilFuncSeparate sf_glad_glStencilFuncSeparate
GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEATIPROC sf_glad_glStencilFuncSeparateATI;
#define glStencilFuncSeparateATI sf_glad_glStencilFuncSeparateATI
GLAD_API_CALL PFNGLSTENCILMASKPROC sf_glad_glStencilMask;
#define glStencilMask sf_glad_glStencilMask
GLAD_API_CALL PFNGLSTENCILMASKSEPARATEPROC sf_glad_glStencilMaskSeparate;
#define glStencilMaskSeparate sf_glad_glStencilMaskSeparate
GLAD_API_CALL PFNGLSTENCILOPPROC sf_glad_glStencilOp;
#define glStencilOp sf_glad_glStencilOp
GLAD_API_CALL PFNGLSTENCILOPSEPARATEPROC sf_glad_glStencilOpSeparate;
#define glStencilOpSeparate sf_glad_glStencilOpSeparate
GLAD_API_CALL PFNGLSTENCILOPSEPARATEATIPROC sf_glad_glStencilOpSeparateATI;
#define glStencilOpSeparateATI sf_glad_glStencilOpSeparateATI
GLAD_API_CALL PFNGLSTENCILOPVALUEAMDPROC sf_glad_glStencilOpValueAMD;
#define glStencilOpValueAMD sf_glad_glStencilOpValueAMD
GLAD_API_CALL PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC sf_glad_glStencilStrokePathInstancedNV;
#define glStencilStrokePathInstancedNV sf_glad_glStencilStrokePathInstancedNV
GLAD_API_CALL PFNGLSTENCILSTROKEPATHNVPROC sf_glad_glStencilStrokePathNV;
#define glStencilStrokePathNV sf_glad_glStencilStrokePathNV
GLAD_API_CALL PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC sf_glad_glStencilThenCoverFillPathInstancedNV;
#define glStencilThenCoverFillPathInstancedNV sf_glad_glStencilThenCoverFillPathInstancedNV
GLAD_API_CALL PFNGLSTENCILTHENCOVERFILLPATHNVPROC sf_glad_glStencilThenCoverFillPathNV;
#define glStencilThenCoverFillPathNV sf_glad_glStencilThenCoverFillPathNV
GLAD_API_CALL PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC sf_glad_glStencilThenCoverStrokePathInstancedNV;
#define glStencilThenCoverStrokePathInstancedNV sf_glad_glStencilThenCoverStrokePathInstancedNV
GLAD_API_CALL PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC sf_glad_glStencilThenCoverStrokePathNV;
#define glStencilThenCoverStrokePathNV sf_glad_glStencilThenCoverStrokePathNV
GLAD_API_CALL PFNGLSTOPINSTRUMENTSSGIXPROC sf_glad_glStopInstrumentsSGIX;
#define glStopInstrumentsSGIX sf_glad_glStopInstrumentsSGIX
GLAD_API_CALL PFNGLSTRINGMARKERGREMEDYPROC sf_glad_glStringMarkerGREMEDY;
#define glStringMarkerGREMEDY sf_glad_glStringMarkerGREMEDY
GLAD_API_CALL PFNGLSUBPIXELPRECISIONBIASNVPROC sf_glad_glSubpixelPrecisionBiasNV;
#define glSubpixelPrecisionBiasNV sf_glad_glSubpixelPrecisionBiasNV
GLAD_API_CALL PFNGLSWIZZLEEXTPROC sf_glad_glSwizzleEXT;
#define glSwizzleEXT sf_glad_glSwizzleEXT
GLAD_API_CALL PFNGLSYNCTEXTUREINTELPROC sf_glad_glSyncTextureINTEL;
#define glSyncTextureINTEL sf_glad_glSyncTextureINTEL
GLAD_API_CALL PFNGLTAGSAMPLEBUFFERSGIXPROC sf_glad_glTagSampleBufferSGIX;
#define glTagSampleBufferSGIX sf_glad_glTagSampleBufferSGIX
GLAD_API_CALL PFNGLTANGENT3BEXTPROC sf_glad_glTangent3bEXT;
#define glTangent3bEXT sf_glad_glTangent3bEXT
GLAD_API_CALL PFNGLTANGENT3BVEXTPROC sf_glad_glTangent3bvEXT;
#define glTangent3bvEXT sf_glad_glTangent3bvEXT
GLAD_API_CALL PFNGLTANGENT3DEXTPROC sf_glad_glTangent3dEXT;
#define glTangent3dEXT sf_glad_glTangent3dEXT
GLAD_API_CALL PFNGLTANGENT3DVEXTPROC sf_glad_glTangent3dvEXT;
#define glTangent3dvEXT sf_glad_glTangent3dvEXT
GLAD_API_CALL PFNGLTANGENT3FEXTPROC sf_glad_glTangent3fEXT;
#define glTangent3fEXT sf_glad_glTangent3fEXT
GLAD_API_CALL PFNGLTANGENT3FVEXTPROC sf_glad_glTangent3fvEXT;
#define glTangent3fvEXT sf_glad_glTangent3fvEXT
GLAD_API_CALL PFNGLTANGENT3IEXTPROC sf_glad_glTangent3iEXT;
#define glTangent3iEXT sf_glad_glTangent3iEXT
GLAD_API_CALL PFNGLTANGENT3IVEXTPROC sf_glad_glTangent3ivEXT;
#define glTangent3ivEXT sf_glad_glTangent3ivEXT
GLAD_API_CALL PFNGLTANGENT3SEXTPROC sf_glad_glTangent3sEXT;
#define glTangent3sEXT sf_glad_glTangent3sEXT
GLAD_API_CALL PFNGLTANGENT3SVEXTPROC sf_glad_glTangent3svEXT;
#define glTangent3svEXT sf_glad_glTangent3svEXT
GLAD_API_CALL PFNGLTANGENTPOINTEREXTPROC sf_glad_glTangentPointerEXT;
#define glTangentPointerEXT sf_glad_glTangentPointerEXT
GLAD_API_CALL PFNGLTBUFFERMASK3DFXPROC sf_glad_glTbufferMask3DFX;
#define glTbufferMask3DFX sf_glad_glTbufferMask3DFX
GLAD_API_CALL PFNGLTESSELLATIONFACTORAMDPROC sf_glad_glTessellationFactorAMD;
#define glTessellationFactorAMD sf_glad_glTessellationFactorAMD
GLAD_API_CALL PFNGLTESSELLATIONMODEAMDPROC sf_glad_glTessellationModeAMD;
#define glTessellationModeAMD sf_glad_glTessellationModeAMD
GLAD_API_CALL PFNGLTESTFENCEAPPLEPROC sf_glad_glTestFenceAPPLE;
#define glTestFenceAPPLE sf_glad_glTestFenceAPPLE
GLAD_API_CALL PFNGLTESTFENCENVPROC sf_glad_glTestFenceNV;
#define glTestFenceNV sf_glad_glTestFenceNV
GLAD_API_CALL PFNGLTESTOBJECTAPPLEPROC sf_glad_glTestObjectAPPLE;
#define glTestObjectAPPLE sf_glad_glTestObjectAPPLE
GLAD_API_CALL PFNGLTEXATTACHMEMORYNVPROC sf_glad_glTexAttachMemoryNV;
#define glTexAttachMemoryNV sf_glad_glTexAttachMemoryNV
GLAD_API_CALL PFNGLTEXBUFFERPROC sf_glad_glTexBuffer;
#define glTexBuffer sf_glad_glTexBuffer
GLAD_API_CALL PFNGLTEXBUFFERARBPROC sf_glad_glTexBufferARB;
#define glTexBufferARB sf_glad_glTexBufferARB
GLAD_API_CALL PFNGLTEXBUFFEREXTPROC sf_glad_glTexBufferEXT;
#define glTexBufferEXT sf_glad_glTexBufferEXT
GLAD_API_CALL PFNGLTEXBUFFERRANGEPROC sf_glad_glTexBufferRange;
#define glTexBufferRange sf_glad_glTexBufferRange
GLAD_API_CALL PFNGLTEXBUMPPARAMETERFVATIPROC sf_glad_glTexBumpParameterfvATI;
#define glTexBumpParameterfvATI sf_glad_glTexBumpParameterfvATI
GLAD_API_CALL PFNGLTEXBUMPPARAMETERIVATIPROC sf_glad_glTexBumpParameterivATI;
#define glTexBumpParameterivATI sf_glad_glTexBumpParameterivATI
GLAD_API_CALL PFNGLTEXCOORD1BOESPROC sf_glad_glTexCoord1bOES;
#define glTexCoord1bOES sf_glad_glTexCoord1bOES
GLAD_API_CALL PFNGLTEXCOORD1BVOESPROC sf_glad_glTexCoord1bvOES;
#define glTexCoord1bvOES sf_glad_glTexCoord1bvOES
GLAD_API_CALL PFNGLTEXCOORD1DPROC sf_glad_glTexCoord1d;
#define glTexCoord1d sf_glad_glTexCoord1d
GLAD_API_CALL PFNGLTEXCOORD1DVPROC sf_glad_glTexCoord1dv;
#define glTexCoord1dv sf_glad_glTexCoord1dv
GLAD_API_CALL PFNGLTEXCOORD1FPROC sf_glad_glTexCoord1f;
#define glTexCoord1f sf_glad_glTexCoord1f
GLAD_API_CALL PFNGLTEXCOORD1FVPROC sf_glad_glTexCoord1fv;
#define glTexCoord1fv sf_glad_glTexCoord1fv
GLAD_API_CALL PFNGLTEXCOORD1HNVPROC sf_glad_glTexCoord1hNV;
#define glTexCoord1hNV sf_glad_glTexCoord1hNV
GLAD_API_CALL PFNGLTEXCOORD1HVNVPROC sf_glad_glTexCoord1hvNV;
#define glTexCoord1hvNV sf_glad_glTexCoord1hvNV
GLAD_API_CALL PFNGLTEXCOORD1IPROC sf_glad_glTexCoord1i;
#define glTexCoord1i sf_glad_glTexCoord1i
GLAD_API_CALL PFNGLTEXCOORD1IVPROC sf_glad_glTexCoord1iv;
#define glTexCoord1iv sf_glad_glTexCoord1iv
GLAD_API_CALL PFNGLTEXCOORD1SPROC sf_glad_glTexCoord1s;
#define glTexCoord1s sf_glad_glTexCoord1s
GLAD_API_CALL PFNGLTEXCOORD1SVPROC sf_glad_glTexCoord1sv;
#define glTexCoord1sv sf_glad_glTexCoord1sv
GLAD_API_CALL PFNGLTEXCOORD1XOESPROC sf_glad_glTexCoord1xOES;
#define glTexCoord1xOES sf_glad_glTexCoord1xOES
GLAD_API_CALL PFNGLTEXCOORD1XVOESPROC sf_glad_glTexCoord1xvOES;
#define glTexCoord1xvOES sf_glad_glTexCoord1xvOES
GLAD_API_CALL PFNGLTEXCOORD2BOESPROC sf_glad_glTexCoord2bOES;
#define glTexCoord2bOES sf_glad_glTexCoord2bOES
GLAD_API_CALL PFNGLTEXCOORD2BVOESPROC sf_glad_glTexCoord2bvOES;
#define glTexCoord2bvOES sf_glad_glTexCoord2bvOES
GLAD_API_CALL PFNGLTEXCOORD2DPROC sf_glad_glTexCoord2d;
#define glTexCoord2d sf_glad_glTexCoord2d
GLAD_API_CALL PFNGLTEXCOORD2DVPROC sf_glad_glTexCoord2dv;
#define glTexCoord2dv sf_glad_glTexCoord2dv
GLAD_API_CALL PFNGLTEXCOORD2FPROC sf_glad_glTexCoord2f;
#define glTexCoord2f sf_glad_glTexCoord2f
GLAD_API_CALL PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC sf_glad_glTexCoord2fColor3fVertex3fSUN;
#define glTexCoord2fColor3fVertex3fSUN sf_glad_glTexCoord2fColor3fVertex3fSUN
GLAD_API_CALL PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC sf_glad_glTexCoord2fColor3fVertex3fvSUN;
#define glTexCoord2fColor3fVertex3fvSUN sf_glad_glTexCoord2fColor3fVertex3fvSUN
GLAD_API_CALL PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC sf_glad_glTexCoord2fColor4fNormal3fVertex3fSUN;
#define glTexCoord2fColor4fNormal3fVertex3fSUN sf_glad_glTexCoord2fColor4fNormal3fVertex3fSUN
GLAD_API_CALL PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC sf_glad_glTexCoord2fColor4fNormal3fVertex3fvSUN;
#define glTexCoord2fColor4fNormal3fVertex3fvSUN sf_glad_glTexCoord2fColor4fNormal3fVertex3fvSUN
GLAD_API_CALL PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC sf_glad_glTexCoord2fColor4ubVertex3fSUN;
#define glTexCoord2fColor4ubVertex3fSUN sf_glad_glTexCoord2fColor4ubVertex3fSUN
GLAD_API_CALL PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC sf_glad_glTexCoord2fColor4ubVertex3fvSUN;
#define glTexCoord2fColor4ubVertex3fvSUN sf_glad_glTexCoord2fColor4ubVertex3fvSUN
GLAD_API_CALL PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC sf_glad_glTexCoord2fNormal3fVertex3fSUN;
#define glTexCoord2fNormal3fVertex3fSUN sf_glad_glTexCoord2fNormal3fVertex3fSUN
GLAD_API_CALL PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC sf_glad_glTexCoord2fNormal3fVertex3fvSUN;
#define glTexCoord2fNormal3fVertex3fvSUN sf_glad_glTexCoord2fNormal3fVertex3fvSUN
GLAD_API_CALL PFNGLTEXCOORD2FVERTEX3FSUNPROC sf_glad_glTexCoord2fVertex3fSUN;
#define glTexCoord2fVertex3fSUN sf_glad_glTexCoord2fVertex3fSUN
GLAD_API_CALL PFNGLTEXCOORD2FVERTEX3FVSUNPROC sf_glad_glTexCoord2fVertex3fvSUN;
#define glTexCoord2fVertex3fvSUN sf_glad_glTexCoord2fVertex3fvSUN
GLAD_API_CALL PFNGLTEXCOORD2FVPROC sf_glad_glTexCoord2fv;
#define glTexCoord2fv sf_glad_glTexCoord2fv
GLAD_API_CALL PFNGLTEXCOORD2HNVPROC sf_glad_glTexCoord2hNV;
#define glTexCoord2hNV sf_glad_glTexCoord2hNV
GLAD_API_CALL PFNGLTEXCOORD2HVNVPROC sf_glad_glTexCoord2hvNV;
#define glTexCoord2hvNV sf_glad_glTexCoord2hvNV
GLAD_API_CALL PFNGLTEXCOORD2IPROC sf_glad_glTexCoord2i;
#define glTexCoord2i sf_glad_glTexCoord2i
GLAD_API_CALL PFNGLTEXCOORD2IVPROC sf_glad_glTexCoord2iv;
#define glTexCoord2iv sf_glad_glTexCoord2iv
GLAD_API_CALL PFNGLTEXCOORD2SPROC sf_glad_glTexCoord2s;
#define glTexCoord2s sf_glad_glTexCoord2s
GLAD_API_CALL PFNGLTEXCOORD2SVPROC sf_glad_glTexCoord2sv;
#define glTexCoord2sv sf_glad_glTexCoord2sv
GLAD_API_CALL PFNGLTEXCOORD2XOESPROC sf_glad_glTexCoord2xOES;
#define glTexCoord2xOES sf_glad_glTexCoord2xOES
GLAD_API_CALL PFNGLTEXCOORD2XVOESPROC sf_glad_glTexCoord2xvOES;
#define glTexCoord2xvOES sf_glad_glTexCoord2xvOES
GLAD_API_CALL PFNGLTEXCOORD3BOESPROC sf_glad_glTexCoord3bOES;
#define glTexCoord3bOES sf_glad_glTexCoord3bOES
GLAD_API_CALL PFNGLTEXCOORD3BVOESPROC sf_glad_glTexCoord3bvOES;
#define glTexCoord3bvOES sf_glad_glTexCoord3bvOES
GLAD_API_CALL PFNGLTEXCOORD3DPROC sf_glad_glTexCoord3d;
#define glTexCoord3d sf_glad_glTexCoord3d
GLAD_API_CALL PFNGLTEXCOORD3DVPROC sf_glad_glTexCoord3dv;
#define glTexCoord3dv sf_glad_glTexCoord3dv
GLAD_API_CALL PFNGLTEXCOORD3FPROC sf_glad_glTexCoord3f;
#define glTexCoord3f sf_glad_glTexCoord3f
GLAD_API_CALL PFNGLTEXCOORD3FVPROC sf_glad_glTexCoord3fv;
#define glTexCoord3fv sf_glad_glTexCoord3fv
GLAD_API_CALL PFNGLTEXCOORD3HNVPROC sf_glad_glTexCoord3hNV;
#define glTexCoord3hNV sf_glad_glTexCoord3hNV
GLAD_API_CALL PFNGLTEXCOORD3HVNVPROC sf_glad_glTexCoord3hvNV;
#define glTexCoord3hvNV sf_glad_glTexCoord3hvNV
GLAD_API_CALL PFNGLTEXCOORD3IPROC sf_glad_glTexCoord3i;
#define glTexCoord3i sf_glad_glTexCoord3i
GLAD_API_CALL PFNGLTEXCOORD3IVPROC sf_glad_glTexCoord3iv;
#define glTexCoord3iv sf_glad_glTexCoord3iv
GLAD_API_CALL PFNGLTEXCOORD3SPROC sf_glad_glTexCoord3s;
#define glTexCoord3s sf_glad_glTexCoord3s
GLAD_API_CALL PFNGLTEXCOORD3SVPROC sf_glad_glTexCoord3sv;
#define glTexCoord3sv sf_glad_glTexCoord3sv
GLAD_API_CALL PFNGLTEXCOORD3XOESPROC sf_glad_glTexCoord3xOES;
#define glTexCoord3xOES sf_glad_glTexCoord3xOES
GLAD_API_CALL PFNGLTEXCOORD3XVOESPROC sf_glad_glTexCoord3xvOES;
#define glTexCoord3xvOES sf_glad_glTexCoord3xvOES
GLAD_API_CALL PFNGLTEXCOORD4BOESPROC sf_glad_glTexCoord4bOES;
#define glTexCoord4bOES sf_glad_glTexCoord4bOES
GLAD_API_CALL PFNGLTEXCOORD4BVOESPROC sf_glad_glTexCoord4bvOES;
#define glTexCoord4bvOES sf_glad_glTexCoord4bvOES
GLAD_API_CALL PFNGLTEXCOORD4DPROC sf_glad_glTexCoord4d;
#define glTexCoord4d sf_glad_glTexCoord4d
GLAD_API_CALL PFNGLTEXCOORD4DVPROC sf_glad_glTexCoord4dv;
#define glTexCoord4dv sf_glad_glTexCoord4dv
GLAD_API_CALL PFNGLTEXCOORD4FPROC sf_glad_glTexCoord4f;
#define glTexCoord4f sf_glad_glTexCoord4f
GLAD_API_CALL PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC sf_glad_glTexCoord4fColor4fNormal3fVertex4fSUN;
#define glTexCoord4fColor4fNormal3fVertex4fSUN sf_glad_glTexCoord4fColor4fNormal3fVertex4fSUN
GLAD_API_CALL PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC sf_glad_glTexCoord4fColor4fNormal3fVertex4fvSUN;
#define glTexCoord4fColor4fNormal3fVertex4fvSUN sf_glad_glTexCoord4fColor4fNormal3fVertex4fvSUN
GLAD_API_CALL PFNGLTEXCOORD4FVERTEX4FSUNPROC sf_glad_glTexCoord4fVertex4fSUN;
#define glTexCoord4fVertex4fSUN sf_glad_glTexCoord4fVertex4fSUN
GLAD_API_CALL PFNGLTEXCOORD4FVERTEX4FVSUNPROC sf_glad_glTexCoord4fVertex4fvSUN;
#define glTexCoord4fVertex4fvSUN sf_glad_glTexCoord4fVertex4fvSUN
GLAD_API_CALL PFNGLTEXCOORD4FVPROC sf_glad_glTexCoord4fv;
#define glTexCoord4fv sf_glad_glTexCoord4fv
GLAD_API_CALL PFNGLTEXCOORD4HNVPROC sf_glad_glTexCoord4hNV;
#define glTexCoord4hNV sf_glad_glTexCoord4hNV
GLAD_API_CALL PFNGLTEXCOORD4HVNVPROC sf_glad_glTexCoord4hvNV;
#define glTexCoord4hvNV sf_glad_glTexCoord4hvNV
GLAD_API_CALL PFNGLTEXCOORD4IPROC sf_glad_glTexCoord4i;
#define glTexCoord4i sf_glad_glTexCoord4i
GLAD_API_CALL PFNGLTEXCOORD4IVPROC sf_glad_glTexCoord4iv;
#define glTexCoord4iv sf_glad_glTexCoord4iv
GLAD_API_CALL PFNGLTEXCOORD4SPROC sf_glad_glTexCoord4s;
#define glTexCoord4s sf_glad_glTexCoord4s
GLAD_API_CALL PFNGLTEXCOORD4SVPROC sf_glad_glTexCoord4sv;
#define glTexCoord4sv sf_glad_glTexCoord4sv
GLAD_API_CALL PFNGLTEXCOORD4XOESPROC sf_glad_glTexCoord4xOES;
#define glTexCoord4xOES sf_glad_glTexCoord4xOES
GLAD_API_CALL PFNGLTEXCOORD4XVOESPROC sf_glad_glTexCoord4xvOES;
#define glTexCoord4xvOES sf_glad_glTexCoord4xvOES
GLAD_API_CALL PFNGLTEXCOORDFORMATNVPROC sf_glad_glTexCoordFormatNV;
#define glTexCoordFormatNV sf_glad_glTexCoordFormatNV
GLAD_API_CALL PFNGLTEXCOORDP1UIPROC sf_glad_glTexCoordP1ui;
#define glTexCoordP1ui sf_glad_glTexCoordP1ui
GLAD_API_CALL PFNGLTEXCOORDP1UIVPROC sf_glad_glTexCoordP1uiv;
#define glTexCoordP1uiv sf_glad_glTexCoordP1uiv
GLAD_API_CALL PFNGLTEXCOORDP2UIPROC sf_glad_glTexCoordP2ui;
#define glTexCoordP2ui sf_glad_glTexCoordP2ui
GLAD_API_CALL PFNGLTEXCOORDP2UIVPROC sf_glad_glTexCoordP2uiv;
#define glTexCoordP2uiv sf_glad_glTexCoordP2uiv
GLAD_API_CALL PFNGLTEXCOORDP3UIPROC sf_glad_glTexCoordP3ui;
#define glTexCoordP3ui sf_glad_glTexCoordP3ui
GLAD_API_CALL PFNGLTEXCOORDP3UIVPROC sf_glad_glTexCoordP3uiv;
#define glTexCoordP3uiv sf_glad_glTexCoordP3uiv
GLAD_API_CALL PFNGLTEXCOORDP4UIPROC sf_glad_glTexCoordP4ui;
#define glTexCoordP4ui sf_glad_glTexCoordP4ui
GLAD_API_CALL PFNGLTEXCOORDP4UIVPROC sf_glad_glTexCoordP4uiv;
#define glTexCoordP4uiv sf_glad_glTexCoordP4uiv
GLAD_API_CALL PFNGLTEXCOORDPOINTERPROC sf_glad_glTexCoordPointer;
#define glTexCoordPointer sf_glad_glTexCoordPointer
GLAD_API_CALL PFNGLTEXCOORDPOINTEREXTPROC sf_glad_glTexCoordPointerEXT;
#define glTexCoordPointerEXT sf_glad_glTexCoordPointerEXT
GLAD_API_CALL PFNGLTEXCOORDPOINTERLISTIBMPROC sf_glad_glTexCoordPointerListIBM;
#define glTexCoordPointerListIBM sf_glad_glTexCoordPointerListIBM
GLAD_API_CALL PFNGLTEXCOORDPOINTERVINTELPROC sf_glad_glTexCoordPointervINTEL;
#define glTexCoordPointervINTEL sf_glad_glTexCoordPointervINTEL
GLAD_API_CALL PFNGLTEXENVFPROC sf_glad_glTexEnvf;
#define glTexEnvf sf_glad_glTexEnvf
GLAD_API_CALL PFNGLTEXENVFVPROC sf_glad_glTexEnvfv;
#define glTexEnvfv sf_glad_glTexEnvfv
GLAD_API_CALL PFNGLTEXENVIPROC sf_glad_glTexEnvi;
#define glTexEnvi sf_glad_glTexEnvi
GLAD_API_CALL PFNGLTEXENVIVPROC sf_glad_glTexEnviv;
#define glTexEnviv sf_glad_glTexEnviv
GLAD_API_CALL PFNGLTEXENVXOESPROC sf_glad_glTexEnvxOES;
#define glTexEnvxOES sf_glad_glTexEnvxOES
GLAD_API_CALL PFNGLTEXENVXVOESPROC sf_glad_glTexEnvxvOES;
#define glTexEnvxvOES sf_glad_glTexEnvxvOES
GLAD_API_CALL PFNGLTEXFILTERFUNCSGISPROC sf_glad_glTexFilterFuncSGIS;
#define glTexFilterFuncSGIS sf_glad_glTexFilterFuncSGIS
GLAD_API_CALL PFNGLTEXGENDPROC sf_glad_glTexGend;
#define glTexGend sf_glad_glTexGend
GLAD_API_CALL PFNGLTEXGENDVPROC sf_glad_glTexGendv;
#define glTexGendv sf_glad_glTexGendv
GLAD_API_CALL PFNGLTEXGENFPROC sf_glad_glTexGenf;
#define glTexGenf sf_glad_glTexGenf
GLAD_API_CALL PFNGLTEXGENFVPROC sf_glad_glTexGenfv;
#define glTexGenfv sf_glad_glTexGenfv
GLAD_API_CALL PFNGLTEXGENIPROC sf_glad_glTexGeni;
#define glTexGeni sf_glad_glTexGeni
GLAD_API_CALL PFNGLTEXGENIVPROC sf_glad_glTexGeniv;
#define glTexGeniv sf_glad_glTexGeniv
GLAD_API_CALL PFNGLTEXGENXOESPROC sf_glad_glTexGenxOES;
#define glTexGenxOES sf_glad_glTexGenxOES
GLAD_API_CALL PFNGLTEXGENXVOESPROC sf_glad_glTexGenxvOES;
#define glTexGenxvOES sf_glad_glTexGenxvOES
GLAD_API_CALL PFNGLTEXIMAGE1DPROC sf_glad_glTexImage1D;
#define glTexImage1D sf_glad_glTexImage1D
GLAD_API_CALL PFNGLTEXIMAGE2DPROC sf_glad_glTexImage2D;
#define glTexImage2D sf_glad_glTexImage2D
GLAD_API_CALL PFNGLTEXIMAGE2DMULTISAMPLEPROC sf_glad_glTexImage2DMultisample;
#define glTexImage2DMultisample sf_glad_glTexImage2DMultisample
GLAD_API_CALL PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC sf_glad_glTexImage2DMultisampleCoverageNV;
#define glTexImage2DMultisampleCoverageNV sf_glad_glTexImage2DMultisampleCoverageNV
GLAD_API_CALL PFNGLTEXIMAGE3DPROC sf_glad_glTexImage3D;
#define glTexImage3D sf_glad_glTexImage3D
GLAD_API_CALL PFNGLTEXIMAGE3DEXTPROC sf_glad_glTexImage3DEXT;
#define glTexImage3DEXT sf_glad_glTexImage3DEXT
GLAD_API_CALL PFNGLTEXIMAGE3DMULTISAMPLEPROC sf_glad_glTexImage3DMultisample;
#define glTexImage3DMultisample sf_glad_glTexImage3DMultisample
GLAD_API_CALL PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC sf_glad_glTexImage3DMultisampleCoverageNV;
#define glTexImage3DMultisampleCoverageNV sf_glad_glTexImage3DMultisampleCoverageNV
GLAD_API_CALL PFNGLTEXIMAGE4DSGISPROC sf_glad_glTexImage4DSGIS;
#define glTexImage4DSGIS sf_glad_glTexImage4DSGIS
GLAD_API_CALL PFNGLTEXPAGECOMMITMENTARBPROC sf_glad_glTexPageCommitmentARB;
#define glTexPageCommitmentARB sf_glad_glTexPageCommitmentARB
GLAD_API_CALL PFNGLTEXPAGECOMMITMENTMEMNVPROC sf_glad_glTexPageCommitmentMemNV;
#define glTexPageCommitmentMemNV sf_glad_glTexPageCommitmentMemNV
GLAD_API_CALL PFNGLTEXPARAMETERIIVPROC sf_glad_glTexParameterIiv;
#define glTexParameterIiv sf_glad_glTexParameterIiv
GLAD_API_CALL PFNGLTEXPARAMETERIIVEXTPROC sf_glad_glTexParameterIivEXT;
#define glTexParameterIivEXT sf_glad_glTexParameterIivEXT
GLAD_API_CALL PFNGLTEXPARAMETERIUIVPROC sf_glad_glTexParameterIuiv;
#define glTexParameterIuiv sf_glad_glTexParameterIuiv
GLAD_API_CALL PFNGLTEXPARAMETERIUIVEXTPROC sf_glad_glTexParameterIuivEXT;
#define glTexParameterIuivEXT sf_glad_glTexParameterIuivEXT
GLAD_API_CALL PFNGLTEXPARAMETERFPROC sf_glad_glTexParameterf;
#define glTexParameterf sf_glad_glTexParameterf
GLAD_API_CALL PFNGLTEXPARAMETERFVPROC sf_glad_glTexParameterfv;
#define glTexParameterfv sf_glad_glTexParameterfv
GLAD_API_CALL PFNGLTEXPARAMETERIPROC sf_glad_glTexParameteri;
#define glTexParameteri sf_glad_glTexParameteri
GLAD_API_CALL PFNGLTEXPARAMETERIVPROC sf_glad_glTexParameteriv;
#define glTexParameteriv sf_glad_glTexParameteriv
GLAD_API_CALL PFNGLTEXPARAMETERXOESPROC sf_glad_glTexParameterxOES;
#define glTexParameterxOES sf_glad_glTexParameterxOES
GLAD_API_CALL PFNGLTEXPARAMETERXVOESPROC sf_glad_glTexParameterxvOES;
#define glTexParameterxvOES sf_glad_glTexParameterxvOES
GLAD_API_CALL PFNGLTEXRENDERBUFFERNVPROC sf_glad_glTexRenderbufferNV;
#define glTexRenderbufferNV sf_glad_glTexRenderbufferNV
GLAD_API_CALL PFNGLTEXSTORAGE1DPROC sf_glad_glTexStorage1D;
#define glTexStorage1D sf_glad_glTexStorage1D
GLAD_API_CALL PFNGLTEXSTORAGE1DEXTPROC sf_glad_glTexStorage1DEXT;
#define glTexStorage1DEXT sf_glad_glTexStorage1DEXT
GLAD_API_CALL PFNGLTEXSTORAGE2DPROC sf_glad_glTexStorage2D;
#define glTexStorage2D sf_glad_glTexStorage2D
GLAD_API_CALL PFNGLTEXSTORAGE2DEXTPROC sf_glad_glTexStorage2DEXT;
#define glTexStorage2DEXT sf_glad_glTexStorage2DEXT
GLAD_API_CALL PFNGLTEXSTORAGE2DMULTISAMPLEPROC sf_glad_glTexStorage2DMultisample;
#define glTexStorage2DMultisample sf_glad_glTexStorage2DMultisample
GLAD_API_CALL PFNGLTEXSTORAGE3DPROC sf_glad_glTexStorage3D;
#define glTexStorage3D sf_glad_glTexStorage3D
GLAD_API_CALL PFNGLTEXSTORAGE3DEXTPROC sf_glad_glTexStorage3DEXT;
#define glTexStorage3DEXT sf_glad_glTexStorage3DEXT
GLAD_API_CALL PFNGLTEXSTORAGE3DMULTISAMPLEPROC sf_glad_glTexStorage3DMultisample;
#define glTexStorage3DMultisample sf_glad_glTexStorage3DMultisample
GLAD_API_CALL PFNGLTEXSTORAGEMEM1DEXTPROC sf_glad_glTexStorageMem1DEXT;
#define glTexStorageMem1DEXT sf_glad_glTexStorageMem1DEXT
GLAD_API_CALL PFNGLTEXSTORAGEMEM2DEXTPROC sf_glad_glTexStorageMem2DEXT;
#define glTexStorageMem2DEXT sf_glad_glTexStorageMem2DEXT
GLAD_API_CALL PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC sf_glad_glTexStorageMem2DMultisampleEXT;
#define glTexStorageMem2DMultisampleEXT sf_glad_glTexStorageMem2DMultisampleEXT
GLAD_API_CALL PFNGLTEXSTORAGEMEM3DEXTPROC sf_glad_glTexStorageMem3DEXT;
#define glTexStorageMem3DEXT sf_glad_glTexStorageMem3DEXT
GLAD_API_CALL PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC sf_glad_glTexStorageMem3DMultisampleEXT;
#define glTexStorageMem3DMultisampleEXT sf_glad_glTexStorageMem3DMultisampleEXT
GLAD_API_CALL PFNGLTEXSTORAGESPARSEAMDPROC sf_glad_glTexStorageSparseAMD;
#define glTexStorageSparseAMD sf_glad_glTexStorageSparseAMD
GLAD_API_CALL PFNGLTEXSUBIMAGE1DPROC sf_glad_glTexSubImage1D;
#define glTexSubImage1D sf_glad_glTexSubImage1D
GLAD_API_CALL PFNGLTEXSUBIMAGE1DEXTPROC sf_glad_glTexSubImage1DEXT;
#define glTexSubImage1DEXT sf_glad_glTexSubImage1DEXT
GLAD_API_CALL PFNGLTEXSUBIMAGE2DPROC sf_glad_glTexSubImage2D;
#define glTexSubImage2D sf_glad_glTexSubImage2D
GLAD_API_CALL PFNGLTEXSUBIMAGE2DEXTPROC sf_glad_glTexSubImage2DEXT;
#define glTexSubImage2DEXT sf_glad_glTexSubImage2DEXT
GLAD_API_CALL PFNGLTEXSUBIMAGE3DPROC sf_glad_glTexSubImage3D;
#define glTexSubImage3D sf_glad_glTexSubImage3D
GLAD_API_CALL PFNGLTEXSUBIMAGE3DEXTPROC sf_glad_glTexSubImage3DEXT;
#define glTexSubImage3DEXT sf_glad_glTexSubImage3DEXT
GLAD_API_CALL PFNGLTEXSUBIMAGE4DSGISPROC sf_glad_glTexSubImage4DSGIS;
#define glTexSubImage4DSGIS sf_glad_glTexSubImage4DSGIS
GLAD_API_CALL PFNGLTEXTUREATTACHMEMORYNVPROC sf_glad_glTextureAttachMemoryNV;
#define glTextureAttachMemoryNV sf_glad_glTextureAttachMemoryNV
GLAD_API_CALL PFNGLTEXTUREBARRIERPROC sf_glad_glTextureBarrier;
#define glTextureBarrier sf_glad_glTextureBarrier
GLAD_API_CALL PFNGLTEXTUREBARRIERNVPROC sf_glad_glTextureBarrierNV;
#define glTextureBarrierNV sf_glad_glTextureBarrierNV
GLAD_API_CALL PFNGLTEXTUREBUFFERPROC sf_glad_glTextureBuffer;
#define glTextureBuffer sf_glad_glTextureBuffer
GLAD_API_CALL PFNGLTEXTUREBUFFEREXTPROC sf_glad_glTextureBufferEXT;
#define glTextureBufferEXT sf_glad_glTextureBufferEXT
GLAD_API_CALL PFNGLTEXTUREBUFFERRANGEPROC sf_glad_glTextureBufferRange;
#define glTextureBufferRange sf_glad_glTextureBufferRange
GLAD_API_CALL PFNGLTEXTUREBUFFERRANGEEXTPROC sf_glad_glTextureBufferRangeEXT;
#define glTextureBufferRangeEXT sf_glad_glTextureBufferRangeEXT
GLAD_API_CALL PFNGLTEXTURECOLORMASKSGISPROC sf_glad_glTextureColorMaskSGIS;
#define glTextureColorMaskSGIS sf_glad_glTextureColorMaskSGIS
GLAD_API_CALL PFNGLTEXTUREIMAGE1DEXTPROC sf_glad_glTextureImage1DEXT;
#define glTextureImage1DEXT sf_glad_glTextureImage1DEXT
GLAD_API_CALL PFNGLTEXTUREIMAGE2DEXTPROC sf_glad_glTextureImage2DEXT;
#define glTextureImage2DEXT sf_glad_glTextureImage2DEXT
GLAD_API_CALL PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC sf_glad_glTextureImage2DMultisampleCoverageNV;
#define glTextureImage2DMultisampleCoverageNV sf_glad_glTextureImage2DMultisampleCoverageNV
GLAD_API_CALL PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC sf_glad_glTextureImage2DMultisampleNV;
#define glTextureImage2DMultisampleNV sf_glad_glTextureImage2DMultisampleNV
GLAD_API_CALL PFNGLTEXTUREIMAGE3DEXTPROC sf_glad_glTextureImage3DEXT;
#define glTextureImage3DEXT sf_glad_glTextureImage3DEXT
GLAD_API_CALL PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC sf_glad_glTextureImage3DMultisampleCoverageNV;
#define glTextureImage3DMultisampleCoverageNV sf_glad_glTextureImage3DMultisampleCoverageNV
GLAD_API_CALL PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC sf_glad_glTextureImage3DMultisampleNV;
#define glTextureImage3DMultisampleNV sf_glad_glTextureImage3DMultisampleNV
GLAD_API_CALL PFNGLTEXTURELIGHTEXTPROC sf_glad_glTextureLightEXT;
#define glTextureLightEXT sf_glad_glTextureLightEXT
GLAD_API_CALL PFNGLTEXTUREMATERIALEXTPROC sf_glad_glTextureMaterialEXT;
#define glTextureMaterialEXT sf_glad_glTextureMaterialEXT
GLAD_API_CALL PFNGLTEXTURENORMALEXTPROC sf_glad_glTextureNormalEXT;
#define glTextureNormalEXT sf_glad_glTextureNormalEXT
GLAD_API_CALL PFNGLTEXTUREPAGECOMMITMENTEXTPROC sf_glad_glTexturePageCommitmentEXT;
#define glTexturePageCommitmentEXT sf_glad_glTexturePageCommitmentEXT
GLAD_API_CALL PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC sf_glad_glTexturePageCommitmentMemNV;
#define glTexturePageCommitmentMemNV sf_glad_glTexturePageCommitmentMemNV
GLAD_API_CALL PFNGLTEXTUREPARAMETERIIVPROC sf_glad_glTextureParameterIiv;
#define glTextureParameterIiv sf_glad_glTextureParameterIiv
GLAD_API_CALL PFNGLTEXTUREPARAMETERIIVEXTPROC sf_glad_glTextureParameterIivEXT;
#define glTextureParameterIivEXT sf_glad_glTextureParameterIivEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIUIVPROC sf_glad_glTextureParameterIuiv;
#define glTextureParameterIuiv sf_glad_glTextureParameterIuiv
GLAD_API_CALL PFNGLTEXTUREPARAMETERIUIVEXTPROC sf_glad_glTextureParameterIuivEXT;
#define glTextureParameterIuivEXT sf_glad_glTextureParameterIuivEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERFPROC sf_glad_glTextureParameterf;
#define glTextureParameterf sf_glad_glTextureParameterf
GLAD_API_CALL PFNGLTEXTUREPARAMETERFEXTPROC sf_glad_glTextureParameterfEXT;
#define glTextureParameterfEXT sf_glad_glTextureParameterfEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERFVPROC sf_glad_glTextureParameterfv;
#define glTextureParameterfv sf_glad_glTextureParameterfv
GLAD_API_CALL PFNGLTEXTUREPARAMETERFVEXTPROC sf_glad_glTextureParameterfvEXT;
#define glTextureParameterfvEXT sf_glad_glTextureParameterfvEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIPROC sf_glad_glTextureParameteri;
#define glTextureParameteri sf_glad_glTextureParameteri
GLAD_API_CALL PFNGLTEXTUREPARAMETERIEXTPROC sf_glad_glTextureParameteriEXT;
#define glTextureParameteriEXT sf_glad_glTextureParameteriEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIVPROC sf_glad_glTextureParameteriv;
#define glTextureParameteriv sf_glad_glTextureParameteriv
GLAD_API_CALL PFNGLTEXTUREPARAMETERIVEXTPROC sf_glad_glTextureParameterivEXT;
#define glTextureParameterivEXT sf_glad_glTextureParameterivEXT
GLAD_API_CALL PFNGLTEXTURERANGEAPPLEPROC sf_glad_glTextureRangeAPPLE;
#define glTextureRangeAPPLE sf_glad_glTextureRangeAPPLE
GLAD_API_CALL PFNGLTEXTURERENDERBUFFEREXTPROC sf_glad_glTextureRenderbufferEXT;
#define glTextureRenderbufferEXT sf_glad_glTextureRenderbufferEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE1DPROC sf_glad_glTextureStorage1D;
#define glTextureStorage1D sf_glad_glTextureStorage1D
GLAD_API_CALL PFNGLTEXTURESTORAGE1DEXTPROC sf_glad_glTextureStorage1DEXT;
#define glTextureStorage1DEXT sf_glad_glTextureStorage1DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE2DPROC sf_glad_glTextureStorage2D;
#define glTextureStorage2D sf_glad_glTextureStorage2D
GLAD_API_CALL PFNGLTEXTURESTORAGE2DEXTPROC sf_glad_glTextureStorage2DEXT;
#define glTextureStorage2DEXT sf_glad_glTextureStorage2DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC sf_glad_glTextureStorage2DMultisample;
#define glTextureStorage2DMultisample sf_glad_glTextureStorage2DMultisample
GLAD_API_CALL PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC sf_glad_glTextureStorage2DMultisampleEXT;
#define glTextureStorage2DMultisampleEXT sf_glad_glTextureStorage2DMultisampleEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE3DPROC sf_glad_glTextureStorage3D;
#define glTextureStorage3D sf_glad_glTextureStorage3D
GLAD_API_CALL PFNGLTEXTURESTORAGE3DEXTPROC sf_glad_glTextureStorage3DEXT;
#define glTextureStorage3DEXT sf_glad_glTextureStorage3DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC sf_glad_glTextureStorage3DMultisample;
#define glTextureStorage3DMultisample sf_glad_glTextureStorage3DMultisample
GLAD_API_CALL PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC sf_glad_glTextureStorage3DMultisampleEXT;
#define glTextureStorage3DMultisampleEXT sf_glad_glTextureStorage3DMultisampleEXT
GLAD_API_CALL PFNGLTEXTURESTORAGEMEM1DEXTPROC sf_glad_glTextureStorageMem1DEXT;
#define glTextureStorageMem1DEXT sf_glad_glTextureStorageMem1DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGEMEM2DEXTPROC sf_glad_glTextureStorageMem2DEXT;
#define glTextureStorageMem2DEXT sf_glad_glTextureStorageMem2DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC sf_glad_glTextureStorageMem2DMultisampleEXT;
#define glTextureStorageMem2DMultisampleEXT sf_glad_glTextureStorageMem2DMultisampleEXT
GLAD_API_CALL PFNGLTEXTURESTORAGEMEM3DEXTPROC sf_glad_glTextureStorageMem3DEXT;
#define glTextureStorageMem3DEXT sf_glad_glTextureStorageMem3DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC sf_glad_glTextureStorageMem3DMultisampleEXT;
#define glTextureStorageMem3DMultisampleEXT sf_glad_glTextureStorageMem3DMultisampleEXT
GLAD_API_CALL PFNGLTEXTURESTORAGESPARSEAMDPROC sf_glad_glTextureStorageSparseAMD;
#define glTextureStorageSparseAMD sf_glad_glTextureStorageSparseAMD
GLAD_API_CALL PFNGLTEXTURESUBIMAGE1DPROC sf_glad_glTextureSubImage1D;
#define glTextureSubImage1D sf_glad_glTextureSubImage1D
GLAD_API_CALL PFNGLTEXTURESUBIMAGE1DEXTPROC sf_glad_glTextureSubImage1DEXT;
#define glTextureSubImage1DEXT sf_glad_glTextureSubImage1DEXT
GLAD_API_CALL PFNGLTEXTURESUBIMAGE2DPROC sf_glad_glTextureSubImage2D;
#define glTextureSubImage2D sf_glad_glTextureSubImage2D
GLAD_API_CALL PFNGLTEXTURESUBIMAGE2DEXTPROC sf_glad_glTextureSubImage2DEXT;
#define glTextureSubImage2DEXT sf_glad_glTextureSubImage2DEXT
GLAD_API_CALL PFNGLTEXTURESUBIMAGE3DPROC sf_glad_glTextureSubImage3D;
#define glTextureSubImage3D sf_glad_glTextureSubImage3D
GLAD_API_CALL PFNGLTEXTURESUBIMAGE3DEXTPROC sf_glad_glTextureSubImage3DEXT;
#define glTextureSubImage3DEXT sf_glad_glTextureSubImage3DEXT
GLAD_API_CALL PFNGLTEXTUREVIEWPROC sf_glad_glTextureView;
#define glTextureView sf_glad_glTextureView
GLAD_API_CALL PFNGLTRACKMATRIXNVPROC sf_glad_glTrackMatrixNV;
#define glTrackMatrixNV sf_glad_glTrackMatrixNV
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC sf_glad_glTransformFeedbackAttribsNV;
#define glTransformFeedbackAttribsNV sf_glad_glTransformFeedbackAttribsNV
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC sf_glad_glTransformFeedbackBufferBase;
#define glTransformFeedbackBufferBase sf_glad_glTransformFeedbackBufferBase
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC sf_glad_glTransformFeedbackBufferRange;
#define glTransformFeedbackBufferRange sf_glad_glTransformFeedbackBufferRange
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC sf_glad_glTransformFeedbackStreamAttribsNV;
#define glTransformFeedbackStreamAttribsNV sf_glad_glTransformFeedbackStreamAttribsNV
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSPROC sf_glad_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings sf_glad_glTransformFeedbackVaryings
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC sf_glad_glTransformFeedbackVaryingsEXT;
#define glTransformFeedbackVaryingsEXT sf_glad_glTransformFeedbackVaryingsEXT
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC sf_glad_glTransformFeedbackVaryingsNV;
#define glTransformFeedbackVaryingsNV sf_glad_glTransformFeedbackVaryingsNV
GLAD_API_CALL PFNGLTRANSFORMPATHNVPROC sf_glad_glTransformPathNV;
#define glTransformPathNV sf_glad_glTransformPathNV
GLAD_API_CALL PFNGLTRANSLATEDPROC sf_glad_glTranslated;
#define glTranslated sf_glad_glTranslated
GLAD_API_CALL PFNGLTRANSLATEFPROC sf_glad_glTranslatef;
#define glTranslatef sf_glad_glTranslatef
GLAD_API_CALL PFNGLTRANSLATEXOESPROC sf_glad_glTranslatexOES;
#define glTranslatexOES sf_glad_glTranslatexOES
GLAD_API_CALL PFNGLUNIFORM1DPROC sf_glad_glUniform1d;
#define glUniform1d sf_glad_glUniform1d
GLAD_API_CALL PFNGLUNIFORM1DVPROC sf_glad_glUniform1dv;
#define glUniform1dv sf_glad_glUniform1dv
GLAD_API_CALL PFNGLUNIFORM1FPROC sf_glad_glUniform1f;
#define glUniform1f sf_glad_glUniform1f
GLAD_API_CALL PFNGLUNIFORM1FARBPROC sf_glad_glUniform1fARB;
#define glUniform1fARB sf_glad_glUniform1fARB
GLAD_API_CALL PFNGLUNIFORM1FVPROC sf_glad_glUniform1fv;
#define glUniform1fv sf_glad_glUniform1fv
GLAD_API_CALL PFNGLUNIFORM1FVARBPROC sf_glad_glUniform1fvARB;
#define glUniform1fvARB sf_glad_glUniform1fvARB
GLAD_API_CALL PFNGLUNIFORM1IPROC sf_glad_glUniform1i;
#define glUniform1i sf_glad_glUniform1i
GLAD_API_CALL PFNGLUNIFORM1I64ARBPROC sf_glad_glUniform1i64ARB;
#define glUniform1i64ARB sf_glad_glUniform1i64ARB
GLAD_API_CALL PFNGLUNIFORM1I64NVPROC sf_glad_glUniform1i64NV;
#define glUniform1i64NV sf_glad_glUniform1i64NV
GLAD_API_CALL PFNGLUNIFORM1I64VARBPROC sf_glad_glUniform1i64vARB;
#define glUniform1i64vARB sf_glad_glUniform1i64vARB
GLAD_API_CALL PFNGLUNIFORM1I64VNVPROC sf_glad_glUniform1i64vNV;
#define glUniform1i64vNV sf_glad_glUniform1i64vNV
GLAD_API_CALL PFNGLUNIFORM1IARBPROC sf_glad_glUniform1iARB;
#define glUniform1iARB sf_glad_glUniform1iARB
GLAD_API_CALL PFNGLUNIFORM1IVPROC sf_glad_glUniform1iv;
#define glUniform1iv sf_glad_glUniform1iv
GLAD_API_CALL PFNGLUNIFORM1IVARBPROC sf_glad_glUniform1ivARB;
#define glUniform1ivARB sf_glad_glUniform1ivARB
GLAD_API_CALL PFNGLUNIFORM1UIPROC sf_glad_glUniform1ui;
#define glUniform1ui sf_glad_glUniform1ui
GLAD_API_CALL PFNGLUNIFORM1UI64ARBPROC sf_glad_glUniform1ui64ARB;
#define glUniform1ui64ARB sf_glad_glUniform1ui64ARB
GLAD_API_CALL PFNGLUNIFORM1UI64NVPROC sf_glad_glUniform1ui64NV;
#define glUniform1ui64NV sf_glad_glUniform1ui64NV
GLAD_API_CALL PFNGLUNIFORM1UI64VARBPROC sf_glad_glUniform1ui64vARB;
#define glUniform1ui64vARB sf_glad_glUniform1ui64vARB
GLAD_API_CALL PFNGLUNIFORM1UI64VNVPROC sf_glad_glUniform1ui64vNV;
#define glUniform1ui64vNV sf_glad_glUniform1ui64vNV
GLAD_API_CALL PFNGLUNIFORM1UIEXTPROC sf_glad_glUniform1uiEXT;
#define glUniform1uiEXT sf_glad_glUniform1uiEXT
GLAD_API_CALL PFNGLUNIFORM1UIVPROC sf_glad_glUniform1uiv;
#define glUniform1uiv sf_glad_glUniform1uiv
GLAD_API_CALL PFNGLUNIFORM1UIVEXTPROC sf_glad_glUniform1uivEXT;
#define glUniform1uivEXT sf_glad_glUniform1uivEXT
GLAD_API_CALL PFNGLUNIFORM2DPROC sf_glad_glUniform2d;
#define glUniform2d sf_glad_glUniform2d
GLAD_API_CALL PFNGLUNIFORM2DVPROC sf_glad_glUniform2dv;
#define glUniform2dv sf_glad_glUniform2dv
GLAD_API_CALL PFNGLUNIFORM2FPROC sf_glad_glUniform2f;
#define glUniform2f sf_glad_glUniform2f
GLAD_API_CALL PFNGLUNIFORM2FARBPROC sf_glad_glUniform2fARB;
#define glUniform2fARB sf_glad_glUniform2fARB
GLAD_API_CALL PFNGLUNIFORM2FVPROC sf_glad_glUniform2fv;
#define glUniform2fv sf_glad_glUniform2fv
GLAD_API_CALL PFNGLUNIFORM2FVARBPROC sf_glad_glUniform2fvARB;
#define glUniform2fvARB sf_glad_glUniform2fvARB
GLAD_API_CALL PFNGLUNIFORM2IPROC sf_glad_glUniform2i;
#define glUniform2i sf_glad_glUniform2i
GLAD_API_CALL PFNGLUNIFORM2I64ARBPROC sf_glad_glUniform2i64ARB;
#define glUniform2i64ARB sf_glad_glUniform2i64ARB
GLAD_API_CALL PFNGLUNIFORM2I64NVPROC sf_glad_glUniform2i64NV;
#define glUniform2i64NV sf_glad_glUniform2i64NV
GLAD_API_CALL PFNGLUNIFORM2I64VARBPROC sf_glad_glUniform2i64vARB;
#define glUniform2i64vARB sf_glad_glUniform2i64vARB
GLAD_API_CALL PFNGLUNIFORM2I64VNVPROC sf_glad_glUniform2i64vNV;
#define glUniform2i64vNV sf_glad_glUniform2i64vNV
GLAD_API_CALL PFNGLUNIFORM2IARBPROC sf_glad_glUniform2iARB;
#define glUniform2iARB sf_glad_glUniform2iARB
GLAD_API_CALL PFNGLUNIFORM2IVPROC sf_glad_glUniform2iv;
#define glUniform2iv sf_glad_glUniform2iv
GLAD_API_CALL PFNGLUNIFORM2IVARBPROC sf_glad_glUniform2ivARB;
#define glUniform2ivARB sf_glad_glUniform2ivARB
GLAD_API_CALL PFNGLUNIFORM2UIPROC sf_glad_glUniform2ui;
#define glUniform2ui sf_glad_glUniform2ui
GLAD_API_CALL PFNGLUNIFORM2UI64ARBPROC sf_glad_glUniform2ui64ARB;
#define glUniform2ui64ARB sf_glad_glUniform2ui64ARB
GLAD_API_CALL PFNGLUNIFORM2UI64NVPROC sf_glad_glUniform2ui64NV;
#define glUniform2ui64NV sf_glad_glUniform2ui64NV
GLAD_API_CALL PFNGLUNIFORM2UI64VARBPROC sf_glad_glUniform2ui64vARB;
#define glUniform2ui64vARB sf_glad_glUniform2ui64vARB
GLAD_API_CALL PFNGLUNIFORM2UI64VNVPROC sf_glad_glUniform2ui64vNV;
#define glUniform2ui64vNV sf_glad_glUniform2ui64vNV
GLAD_API_CALL PFNGLUNIFORM2UIEXTPROC sf_glad_glUniform2uiEXT;
#define glUniform2uiEXT sf_glad_glUniform2uiEXT
GLAD_API_CALL PFNGLUNIFORM2UIVPROC sf_glad_glUniform2uiv;
#define glUniform2uiv sf_glad_glUniform2uiv
GLAD_API_CALL PFNGLUNIFORM2UIVEXTPROC sf_glad_glUniform2uivEXT;
#define glUniform2uivEXT sf_glad_glUniform2uivEXT
GLAD_API_CALL PFNGLUNIFORM3DPROC sf_glad_glUniform3d;
#define glUniform3d sf_glad_glUniform3d
GLAD_API_CALL PFNGLUNIFORM3DVPROC sf_glad_glUniform3dv;
#define glUniform3dv sf_glad_glUniform3dv
GLAD_API_CALL PFNGLUNIFORM3FPROC sf_glad_glUniform3f;
#define glUniform3f sf_glad_glUniform3f
GLAD_API_CALL PFNGLUNIFORM3FARBPROC sf_glad_glUniform3fARB;
#define glUniform3fARB sf_glad_glUniform3fARB
GLAD_API_CALL PFNGLUNIFORM3FVPROC sf_glad_glUniform3fv;
#define glUniform3fv sf_glad_glUniform3fv
GLAD_API_CALL PFNGLUNIFORM3FVARBPROC sf_glad_glUniform3fvARB;
#define glUniform3fvARB sf_glad_glUniform3fvARB
GLAD_API_CALL PFNGLUNIFORM3IPROC sf_glad_glUniform3i;
#define glUniform3i sf_glad_glUniform3i
GLAD_API_CALL PFNGLUNIFORM3I64ARBPROC sf_glad_glUniform3i64ARB;
#define glUniform3i64ARB sf_glad_glUniform3i64ARB
GLAD_API_CALL PFNGLUNIFORM3I64NVPROC sf_glad_glUniform3i64NV;
#define glUniform3i64NV sf_glad_glUniform3i64NV
GLAD_API_CALL PFNGLUNIFORM3I64VARBPROC sf_glad_glUniform3i64vARB;
#define glUniform3i64vARB sf_glad_glUniform3i64vARB
GLAD_API_CALL PFNGLUNIFORM3I64VNVPROC sf_glad_glUniform3i64vNV;
#define glUniform3i64vNV sf_glad_glUniform3i64vNV
GLAD_API_CALL PFNGLUNIFORM3IARBPROC sf_glad_glUniform3iARB;
#define glUniform3iARB sf_glad_glUniform3iARB
GLAD_API_CALL PFNGLUNIFORM3IVPROC sf_glad_glUniform3iv;
#define glUniform3iv sf_glad_glUniform3iv
GLAD_API_CALL PFNGLUNIFORM3IVARBPROC sf_glad_glUniform3ivARB;
#define glUniform3ivARB sf_glad_glUniform3ivARB
GLAD_API_CALL PFNGLUNIFORM3UIPROC sf_glad_glUniform3ui;
#define glUniform3ui sf_glad_glUniform3ui
GLAD_API_CALL PFNGLUNIFORM3UI64ARBPROC sf_glad_glUniform3ui64ARB;
#define glUniform3ui64ARB sf_glad_glUniform3ui64ARB
GLAD_API_CALL PFNGLUNIFORM3UI64NVPROC sf_glad_glUniform3ui64NV;
#define glUniform3ui64NV sf_glad_glUniform3ui64NV
GLAD_API_CALL PFNGLUNIFORM3UI64VARBPROC sf_glad_glUniform3ui64vARB;
#define glUniform3ui64vARB sf_glad_glUniform3ui64vARB
GLAD_API_CALL PFNGLUNIFORM3UI64VNVPROC sf_glad_glUniform3ui64vNV;
#define glUniform3ui64vNV sf_glad_glUniform3ui64vNV
GLAD_API_CALL PFNGLUNIFORM3UIEXTPROC sf_glad_glUniform3uiEXT;
#define glUniform3uiEXT sf_glad_glUniform3uiEXT
GLAD_API_CALL PFNGLUNIFORM3UIVPROC sf_glad_glUniform3uiv;
#define glUniform3uiv sf_glad_glUniform3uiv
GLAD_API_CALL PFNGLUNIFORM3UIVEXTPROC sf_glad_glUniform3uivEXT;
#define glUniform3uivEXT sf_glad_glUniform3uivEXT
GLAD_API_CALL PFNGLUNIFORM4DPROC sf_glad_glUniform4d;
#define glUniform4d sf_glad_glUniform4d
GLAD_API_CALL PFNGLUNIFORM4DVPROC sf_glad_glUniform4dv;
#define glUniform4dv sf_glad_glUniform4dv
GLAD_API_CALL PFNGLUNIFORM4FPROC sf_glad_glUniform4f;
#define glUniform4f sf_glad_glUniform4f
GLAD_API_CALL PFNGLUNIFORM4FARBPROC sf_glad_glUniform4fARB;
#define glUniform4fARB sf_glad_glUniform4fARB
GLAD_API_CALL PFNGLUNIFORM4FVPROC sf_glad_glUniform4fv;
#define glUniform4fv sf_glad_glUniform4fv
GLAD_API_CALL PFNGLUNIFORM4FVARBPROC sf_glad_glUniform4fvARB;
#define glUniform4fvARB sf_glad_glUniform4fvARB
GLAD_API_CALL PFNGLUNIFORM4IPROC sf_glad_glUniform4i;
#define glUniform4i sf_glad_glUniform4i
GLAD_API_CALL PFNGLUNIFORM4I64ARBPROC sf_glad_glUniform4i64ARB;
#define glUniform4i64ARB sf_glad_glUniform4i64ARB
GLAD_API_CALL PFNGLUNIFORM4I64NVPROC sf_glad_glUniform4i64NV;
#define glUniform4i64NV sf_glad_glUniform4i64NV
GLAD_API_CALL PFNGLUNIFORM4I64VARBPROC sf_glad_glUniform4i64vARB;
#define glUniform4i64vARB sf_glad_glUniform4i64vARB
GLAD_API_CALL PFNGLUNIFORM4I64VNVPROC sf_glad_glUniform4i64vNV;
#define glUniform4i64vNV sf_glad_glUniform4i64vNV
GLAD_API_CALL PFNGLUNIFORM4IARBPROC sf_glad_glUniform4iARB;
#define glUniform4iARB sf_glad_glUniform4iARB
GLAD_API_CALL PFNGLUNIFORM4IVPROC sf_glad_glUniform4iv;
#define glUniform4iv sf_glad_glUniform4iv
GLAD_API_CALL PFNGLUNIFORM4IVARBPROC sf_glad_glUniform4ivARB;
#define glUniform4ivARB sf_glad_glUniform4ivARB
GLAD_API_CALL PFNGLUNIFORM4UIPROC sf_glad_glUniform4ui;
#define glUniform4ui sf_glad_glUniform4ui
GLAD_API_CALL PFNGLUNIFORM4UI64ARBPROC sf_glad_glUniform4ui64ARB;
#define glUniform4ui64ARB sf_glad_glUniform4ui64ARB
GLAD_API_CALL PFNGLUNIFORM4UI64NVPROC sf_glad_glUniform4ui64NV;
#define glUniform4ui64NV sf_glad_glUniform4ui64NV
GLAD_API_CALL PFNGLUNIFORM4UI64VARBPROC sf_glad_glUniform4ui64vARB;
#define glUniform4ui64vARB sf_glad_glUniform4ui64vARB
GLAD_API_CALL PFNGLUNIFORM4UI64VNVPROC sf_glad_glUniform4ui64vNV;
#define glUniform4ui64vNV sf_glad_glUniform4ui64vNV
GLAD_API_CALL PFNGLUNIFORM4UIEXTPROC sf_glad_glUniform4uiEXT;
#define glUniform4uiEXT sf_glad_glUniform4uiEXT
GLAD_API_CALL PFNGLUNIFORM4UIVPROC sf_glad_glUniform4uiv;
#define glUniform4uiv sf_glad_glUniform4uiv
GLAD_API_CALL PFNGLUNIFORM4UIVEXTPROC sf_glad_glUniform4uivEXT;
#define glUniform4uivEXT sf_glad_glUniform4uivEXT
GLAD_API_CALL PFNGLUNIFORMBLOCKBINDINGPROC sf_glad_glUniformBlockBinding;
#define glUniformBlockBinding sf_glad_glUniformBlockBinding
GLAD_API_CALL PFNGLUNIFORMBUFFEREXTPROC sf_glad_glUniformBufferEXT;
#define glUniformBufferEXT sf_glad_glUniformBufferEXT
GLAD_API_CALL PFNGLUNIFORMHANDLEUI64ARBPROC sf_glad_glUniformHandleui64ARB;
#define glUniformHandleui64ARB sf_glad_glUniformHandleui64ARB
GLAD_API_CALL PFNGLUNIFORMHANDLEUI64NVPROC sf_glad_glUniformHandleui64NV;
#define glUniformHandleui64NV sf_glad_glUniformHandleui64NV
GLAD_API_CALL PFNGLUNIFORMHANDLEUI64VARBPROC sf_glad_glUniformHandleui64vARB;
#define glUniformHandleui64vARB sf_glad_glUniformHandleui64vARB
GLAD_API_CALL PFNGLUNIFORMHANDLEUI64VNVPROC sf_glad_glUniformHandleui64vNV;
#define glUniformHandleui64vNV sf_glad_glUniformHandleui64vNV
GLAD_API_CALL PFNGLUNIFORMMATRIX2DVPROC sf_glad_glUniformMatrix2dv;
#define glUniformMatrix2dv sf_glad_glUniformMatrix2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVPROC sf_glad_glUniformMatrix2fv;
#define glUniformMatrix2fv sf_glad_glUniformMatrix2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVARBPROC sf_glad_glUniformMatrix2fvARB;
#define glUniformMatrix2fvARB sf_glad_glUniformMatrix2fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3DVPROC sf_glad_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv sf_glad_glUniformMatrix2x3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3FVPROC sf_glad_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv sf_glad_glUniformMatrix2x3fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4DVPROC sf_glad_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv sf_glad_glUniformMatrix2x4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4FVPROC sf_glad_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv sf_glad_glUniformMatrix2x4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3DVPROC sf_glad_glUniformMatrix3dv;
#define glUniformMatrix3dv sf_glad_glUniformMatrix3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVPROC sf_glad_glUniformMatrix3fv;
#define glUniformMatrix3fv sf_glad_glUniformMatrix3fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVARBPROC sf_glad_glUniformMatrix3fvARB;
#define glUniformMatrix3fvARB sf_glad_glUniformMatrix3fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2DVPROC sf_glad_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv sf_glad_glUniformMatrix3x2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2FVPROC sf_glad_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv sf_glad_glUniformMatrix3x2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4DVPROC sf_glad_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv sf_glad_glUniformMatrix3x4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4FVPROC sf_glad_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv sf_glad_glUniformMatrix3x4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4DVPROC sf_glad_glUniformMatrix4dv;
#define glUniformMatrix4dv sf_glad_glUniformMatrix4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVPROC sf_glad_glUniformMatrix4fv;
#define glUniformMatrix4fv sf_glad_glUniformMatrix4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVARBPROC sf_glad_glUniformMatrix4fvARB;
#define glUniformMatrix4fvARB sf_glad_glUniformMatrix4fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2DVPROC sf_glad_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv sf_glad_glUniformMatrix4x2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2FVPROC sf_glad_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv sf_glad_glUniformMatrix4x2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3DVPROC sf_glad_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv sf_glad_glUniformMatrix4x3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3FVPROC sf_glad_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv sf_glad_glUniformMatrix4x3fv
GLAD_API_CALL PFNGLUNIFORMSUBROUTINESUIVPROC sf_glad_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv sf_glad_glUniformSubroutinesuiv
GLAD_API_CALL PFNGLUNIFORMUI64NVPROC sf_glad_glUniformui64NV;
#define glUniformui64NV sf_glad_glUniformui64NV
GLAD_API_CALL PFNGLUNIFORMUI64VNVPROC sf_glad_glUniformui64vNV;
#define glUniformui64vNV sf_glad_glUniformui64vNV
GLAD_API_CALL PFNGLUNLOCKARRAYSEXTPROC sf_glad_glUnlockArraysEXT;
#define glUnlockArraysEXT sf_glad_glUnlockArraysEXT
GLAD_API_CALL PFNGLUNMAPBUFFERPROC sf_glad_glUnmapBuffer;
#define glUnmapBuffer sf_glad_glUnmapBuffer
GLAD_API_CALL PFNGLUNMAPBUFFERARBPROC sf_glad_glUnmapBufferARB;
#define glUnmapBufferARB sf_glad_glUnmapBufferARB
GLAD_API_CALL PFNGLUNMAPNAMEDBUFFERPROC sf_glad_glUnmapNamedBuffer;
#define glUnmapNamedBuffer sf_glad_glUnmapNamedBuffer
GLAD_API_CALL PFNGLUNMAPNAMEDBUFFEREXTPROC sf_glad_glUnmapNamedBufferEXT;
#define glUnmapNamedBufferEXT sf_glad_glUnmapNamedBufferEXT
GLAD_API_CALL PFNGLUNMAPOBJECTBUFFERATIPROC sf_glad_glUnmapObjectBufferATI;
#define glUnmapObjectBufferATI sf_glad_glUnmapObjectBufferATI
GLAD_API_CALL PFNGLUNMAPTEXTURE2DINTELPROC sf_glad_glUnmapTexture2DINTEL;
#define glUnmapTexture2DINTEL sf_glad_glUnmapTexture2DINTEL
GLAD_API_CALL PFNGLUPDATEOBJECTBUFFERATIPROC sf_glad_glUpdateObjectBufferATI;
#define glUpdateObjectBufferATI sf_glad_glUpdateObjectBufferATI
GLAD_API_CALL PFNGLUPLOADGPUMASKNVXPROC sf_glad_glUploadGpuMaskNVX;
#define glUploadGpuMaskNVX sf_glad_glUploadGpuMaskNVX
GLAD_API_CALL PFNGLUSEPROGRAMPROC sf_glad_glUseProgram;
#define glUseProgram sf_glad_glUseProgram
GLAD_API_CALL PFNGLUSEPROGRAMOBJECTARBPROC sf_glad_glUseProgramObjectARB;
#define glUseProgramObjectARB sf_glad_glUseProgramObjectARB
GLAD_API_CALL PFNGLUSEPROGRAMSTAGESPROC sf_glad_glUseProgramStages;
#define glUseProgramStages sf_glad_glUseProgramStages
GLAD_API_CALL PFNGLUSESHADERPROGRAMEXTPROC sf_glad_glUseShaderProgramEXT;
#define glUseShaderProgramEXT sf_glad_glUseShaderProgramEXT
GLAD_API_CALL PFNGLVDPAUFININVPROC sf_glad_glVDPAUFiniNV;
#define glVDPAUFiniNV sf_glad_glVDPAUFiniNV
GLAD_API_CALL PFNGLVDPAUGETSURFACEIVNVPROC sf_glad_glVDPAUGetSurfaceivNV;
#define glVDPAUGetSurfaceivNV sf_glad_glVDPAUGetSurfaceivNV
GLAD_API_CALL PFNGLVDPAUINITNVPROC sf_glad_glVDPAUInitNV;
#define glVDPAUInitNV sf_glad_glVDPAUInitNV
GLAD_API_CALL PFNGLVDPAUISSURFACENVPROC sf_glad_glVDPAUIsSurfaceNV;
#define glVDPAUIsSurfaceNV sf_glad_glVDPAUIsSurfaceNV
GLAD_API_CALL PFNGLVDPAUMAPSURFACESNVPROC sf_glad_glVDPAUMapSurfacesNV;
#define glVDPAUMapSurfacesNV sf_glad_glVDPAUMapSurfacesNV
GLAD_API_CALL PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC sf_glad_glVDPAURegisterOutputSurfaceNV;
#define glVDPAURegisterOutputSurfaceNV sf_glad_glVDPAURegisterOutputSurfaceNV
GLAD_API_CALL PFNGLVDPAUREGISTERVIDEOSURFACENVPROC sf_glad_glVDPAURegisterVideoSurfaceNV;
#define glVDPAURegisterVideoSurfaceNV sf_glad_glVDPAURegisterVideoSurfaceNV
GLAD_API_CALL PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC sf_glad_glVDPAURegisterVideoSurfaceWithPictureStructureNV;
#define glVDPAURegisterVideoSurfaceWithPictureStructureNV sf_glad_glVDPAURegisterVideoSurfaceWithPictureStructureNV
GLAD_API_CALL PFNGLVDPAUSURFACEACCESSNVPROC sf_glad_glVDPAUSurfaceAccessNV;
#define glVDPAUSurfaceAccessNV sf_glad_glVDPAUSurfaceAccessNV
GLAD_API_CALL PFNGLVDPAUUNMAPSURFACESNVPROC sf_glad_glVDPAUUnmapSurfacesNV;
#define glVDPAUUnmapSurfacesNV sf_glad_glVDPAUUnmapSurfacesNV
GLAD_API_CALL PFNGLVDPAUUNREGISTERSURFACENVPROC sf_glad_glVDPAUUnregisterSurfaceNV;
#define glVDPAUUnregisterSurfaceNV sf_glad_glVDPAUUnregisterSurfaceNV
GLAD_API_CALL PFNGLVALIDATEPROGRAMPROC sf_glad_glValidateProgram;
#define glValidateProgram sf_glad_glValidateProgram
GLAD_API_CALL PFNGLVALIDATEPROGRAMARBPROC sf_glad_glValidateProgramARB;
#define glValidateProgramARB sf_glad_glValidateProgramARB
GLAD_API_CALL PFNGLVALIDATEPROGRAMPIPELINEPROC sf_glad_glValidateProgramPipeline;
#define glValidateProgramPipeline sf_glad_glValidateProgramPipeline
GLAD_API_CALL PFNGLVARIANTARRAYOBJECTATIPROC sf_glad_glVariantArrayObjectATI;
#define glVariantArrayObjectATI sf_glad_glVariantArrayObjectATI
GLAD_API_CALL PFNGLVARIANTPOINTEREXTPROC sf_glad_glVariantPointerEXT;
#define glVariantPointerEXT sf_glad_glVariantPointerEXT
GLAD_API_CALL PFNGLVARIANTBVEXTPROC sf_glad_glVariantbvEXT;
#define glVariantbvEXT sf_glad_glVariantbvEXT
GLAD_API_CALL PFNGLVARIANTDVEXTPROC sf_glad_glVariantdvEXT;
#define glVariantdvEXT sf_glad_glVariantdvEXT
GLAD_API_CALL PFNGLVARIANTFVEXTPROC sf_glad_glVariantfvEXT;
#define glVariantfvEXT sf_glad_glVariantfvEXT
GLAD_API_CALL PFNGLVARIANTIVEXTPROC sf_glad_glVariantivEXT;
#define glVariantivEXT sf_glad_glVariantivEXT
GLAD_API_CALL PFNGLVARIANTSVEXTPROC sf_glad_glVariantsvEXT;
#define glVariantsvEXT sf_glad_glVariantsvEXT
GLAD_API_CALL PFNGLVARIANTUBVEXTPROC sf_glad_glVariantubvEXT;
#define glVariantubvEXT sf_glad_glVariantubvEXT
GLAD_API_CALL PFNGLVARIANTUIVEXTPROC sf_glad_glVariantuivEXT;
#define glVariantuivEXT sf_glad_glVariantuivEXT
GLAD_API_CALL PFNGLVARIANTUSVEXTPROC sf_glad_glVariantusvEXT;
#define glVariantusvEXT sf_glad_glVariantusvEXT
GLAD_API_CALL PFNGLVERTEX2BOESPROC sf_glad_glVertex2bOES;
#define glVertex2bOES sf_glad_glVertex2bOES
GLAD_API_CALL PFNGLVERTEX2BVOESPROC sf_glad_glVertex2bvOES;
#define glVertex2bvOES sf_glad_glVertex2bvOES
GLAD_API_CALL PFNGLVERTEX2DPROC sf_glad_glVertex2d;
#define glVertex2d sf_glad_glVertex2d
GLAD_API_CALL PFNGLVERTEX2DVPROC sf_glad_glVertex2dv;
#define glVertex2dv sf_glad_glVertex2dv
GLAD_API_CALL PFNGLVERTEX2FPROC sf_glad_glVertex2f;
#define glVertex2f sf_glad_glVertex2f
GLAD_API_CALL PFNGLVERTEX2FVPROC sf_glad_glVertex2fv;
#define glVertex2fv sf_glad_glVertex2fv
GLAD_API_CALL PFNGLVERTEX2HNVPROC sf_glad_glVertex2hNV;
#define glVertex2hNV sf_glad_glVertex2hNV
GLAD_API_CALL PFNGLVERTEX2HVNVPROC sf_glad_glVertex2hvNV;
#define glVertex2hvNV sf_glad_glVertex2hvNV
GLAD_API_CALL PFNGLVERTEX2IPROC sf_glad_glVertex2i;
#define glVertex2i sf_glad_glVertex2i
GLAD_API_CALL PFNGLVERTEX2IVPROC sf_glad_glVertex2iv;
#define glVertex2iv sf_glad_glVertex2iv
GLAD_API_CALL PFNGLVERTEX2SPROC sf_glad_glVertex2s;
#define glVertex2s sf_glad_glVertex2s
GLAD_API_CALL PFNGLVERTEX2SVPROC sf_glad_glVertex2sv;
#define glVertex2sv sf_glad_glVertex2sv
GLAD_API_CALL PFNGLVERTEX2XOESPROC sf_glad_glVertex2xOES;
#define glVertex2xOES sf_glad_glVertex2xOES
GLAD_API_CALL PFNGLVERTEX2XVOESPROC sf_glad_glVertex2xvOES;
#define glVertex2xvOES sf_glad_glVertex2xvOES
GLAD_API_CALL PFNGLVERTEX3BOESPROC sf_glad_glVertex3bOES;
#define glVertex3bOES sf_glad_glVertex3bOES
GLAD_API_CALL PFNGLVERTEX3BVOESPROC sf_glad_glVertex3bvOES;
#define glVertex3bvOES sf_glad_glVertex3bvOES
GLAD_API_CALL PFNGLVERTEX3DPROC sf_glad_glVertex3d;
#define glVertex3d sf_glad_glVertex3d
GLAD_API_CALL PFNGLVERTEX3DVPROC sf_glad_glVertex3dv;
#define glVertex3dv sf_glad_glVertex3dv
GLAD_API_CALL PFNGLVERTEX3FPROC sf_glad_glVertex3f;
#define glVertex3f sf_glad_glVertex3f
GLAD_API_CALL PFNGLVERTEX3FVPROC sf_glad_glVertex3fv;
#define glVertex3fv sf_glad_glVertex3fv
GLAD_API_CALL PFNGLVERTEX3HNVPROC sf_glad_glVertex3hNV;
#define glVertex3hNV sf_glad_glVertex3hNV
GLAD_API_CALL PFNGLVERTEX3HVNVPROC sf_glad_glVertex3hvNV;
#define glVertex3hvNV sf_glad_glVertex3hvNV
GLAD_API_CALL PFNGLVERTEX3IPROC sf_glad_glVertex3i;
#define glVertex3i sf_glad_glVertex3i
GLAD_API_CALL PFNGLVERTEX3IVPROC sf_glad_glVertex3iv;
#define glVertex3iv sf_glad_glVertex3iv
GLAD_API_CALL PFNGLVERTEX3SPROC sf_glad_glVertex3s;
#define glVertex3s sf_glad_glVertex3s
GLAD_API_CALL PFNGLVERTEX3SVPROC sf_glad_glVertex3sv;
#define glVertex3sv sf_glad_glVertex3sv
GLAD_API_CALL PFNGLVERTEX3XOESPROC sf_glad_glVertex3xOES;
#define glVertex3xOES sf_glad_glVertex3xOES
GLAD_API_CALL PFNGLVERTEX3XVOESPROC sf_glad_glVertex3xvOES;
#define glVertex3xvOES sf_glad_glVertex3xvOES
GLAD_API_CALL PFNGLVERTEX4BOESPROC sf_glad_glVertex4bOES;
#define glVertex4bOES sf_glad_glVertex4bOES
GLAD_API_CALL PFNGLVERTEX4BVOESPROC sf_glad_glVertex4bvOES;
#define glVertex4bvOES sf_glad_glVertex4bvOES
GLAD_API_CALL PFNGLVERTEX4DPROC sf_glad_glVertex4d;
#define glVertex4d sf_glad_glVertex4d
GLAD_API_CALL PFNGLVERTEX4DVPROC sf_glad_glVertex4dv;
#define glVertex4dv sf_glad_glVertex4dv
GLAD_API_CALL PFNGLVERTEX4FPROC sf_glad_glVertex4f;
#define glVertex4f sf_glad_glVertex4f
GLAD_API_CALL PFNGLVERTEX4FVPROC sf_glad_glVertex4fv;
#define glVertex4fv sf_glad_glVertex4fv
GLAD_API_CALL PFNGLVERTEX4HNVPROC sf_glad_glVertex4hNV;
#define glVertex4hNV sf_glad_glVertex4hNV
GLAD_API_CALL PFNGLVERTEX4HVNVPROC sf_glad_glVertex4hvNV;
#define glVertex4hvNV sf_glad_glVertex4hvNV
GLAD_API_CALL PFNGLVERTEX4IPROC sf_glad_glVertex4i;
#define glVertex4i sf_glad_glVertex4i
GLAD_API_CALL PFNGLVERTEX4IVPROC sf_glad_glVertex4iv;
#define glVertex4iv sf_glad_glVertex4iv
GLAD_API_CALL PFNGLVERTEX4SPROC sf_glad_glVertex4s;
#define glVertex4s sf_glad_glVertex4s
GLAD_API_CALL PFNGLVERTEX4SVPROC sf_glad_glVertex4sv;
#define glVertex4sv sf_glad_glVertex4sv
GLAD_API_CALL PFNGLVERTEX4XOESPROC sf_glad_glVertex4xOES;
#define glVertex4xOES sf_glad_glVertex4xOES
GLAD_API_CALL PFNGLVERTEX4XVOESPROC sf_glad_glVertex4xvOES;
#define glVertex4xvOES sf_glad_glVertex4xvOES
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBBINDINGPROC sf_glad_glVertexArrayAttribBinding;
#define glVertexArrayAttribBinding sf_glad_glVertexArrayAttribBinding
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBFORMATPROC sf_glad_glVertexArrayAttribFormat;
#define glVertexArrayAttribFormat sf_glad_glVertexArrayAttribFormat
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBIFORMATPROC sf_glad_glVertexArrayAttribIFormat;
#define glVertexArrayAttribIFormat sf_glad_glVertexArrayAttribIFormat
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBLFORMATPROC sf_glad_glVertexArrayAttribLFormat;
#define glVertexArrayAttribLFormat sf_glad_glVertexArrayAttribLFormat
GLAD_API_CALL PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC sf_glad_glVertexArrayBindVertexBufferEXT;
#define glVertexArrayBindVertexBufferEXT sf_glad_glVertexArrayBindVertexBufferEXT
GLAD_API_CALL PFNGLVERTEXARRAYBINDINGDIVISORPROC sf_glad_glVertexArrayBindingDivisor;
#define glVertexArrayBindingDivisor sf_glad_glVertexArrayBindingDivisor
GLAD_API_CALL PFNGLVERTEXARRAYCOLOROFFSETEXTPROC sf_glad_glVertexArrayColorOffsetEXT;
#define glVertexArrayColorOffsetEXT sf_glad_glVertexArrayColorOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC sf_glad_glVertexArrayEdgeFlagOffsetEXT;
#define glVertexArrayEdgeFlagOffsetEXT sf_glad_glVertexArrayEdgeFlagOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYELEMENTBUFFERPROC sf_glad_glVertexArrayElementBuffer;
#define glVertexArrayElementBuffer sf_glad_glVertexArrayElementBuffer
GLAD_API_CALL PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC sf_glad_glVertexArrayFogCoordOffsetEXT;
#define glVertexArrayFogCoordOffsetEXT sf_glad_glVertexArrayFogCoordOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYINDEXOFFSETEXTPROC sf_glad_glVertexArrayIndexOffsetEXT;
#define glVertexArrayIndexOffsetEXT sf_glad_glVertexArrayIndexOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC sf_glad_glVertexArrayMultiTexCoordOffsetEXT;
#define glVertexArrayMultiTexCoordOffsetEXT sf_glad_glVertexArrayMultiTexCoordOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYNORMALOFFSETEXTPROC sf_glad_glVertexArrayNormalOffsetEXT;
#define glVertexArrayNormalOffsetEXT sf_glad_glVertexArrayNormalOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYPARAMETERIAPPLEPROC sf_glad_glVertexArrayParameteriAPPLE;
#define glVertexArrayParameteriAPPLE sf_glad_glVertexArrayParameteriAPPLE
GLAD_API_CALL PFNGLVERTEXARRAYRANGEAPPLEPROC sf_glad_glVertexArrayRangeAPPLE;
#define glVertexArrayRangeAPPLE sf_glad_glVertexArrayRangeAPPLE
GLAD_API_CALL PFNGLVERTEXARRAYRANGENVPROC sf_glad_glVertexArrayRangeNV;
#define glVertexArrayRangeNV sf_glad_glVertexArrayRangeNV
GLAD_API_CALL PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC sf_glad_glVertexArraySecondaryColorOffsetEXT;
#define glVertexArraySecondaryColorOffsetEXT sf_glad_glVertexArraySecondaryColorOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC sf_glad_glVertexArrayTexCoordOffsetEXT;
#define glVertexArrayTexCoordOffsetEXT sf_glad_glVertexArrayTexCoordOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC sf_glad_glVertexArrayVertexAttribBindingEXT;
#define glVertexArrayVertexAttribBindingEXT sf_glad_glVertexArrayVertexAttribBindingEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC sf_glad_glVertexArrayVertexAttribDivisorEXT;
#define glVertexArrayVertexAttribDivisorEXT sf_glad_glVertexArrayVertexAttribDivisorEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC sf_glad_glVertexArrayVertexAttribFormatEXT;
#define glVertexArrayVertexAttribFormatEXT sf_glad_glVertexArrayVertexAttribFormatEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC sf_glad_glVertexArrayVertexAttribIFormatEXT;
#define glVertexArrayVertexAttribIFormatEXT sf_glad_glVertexArrayVertexAttribIFormatEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribIOffsetEXT;
#define glVertexArrayVertexAttribIOffsetEXT sf_glad_glVertexArrayVertexAttribIOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC sf_glad_glVertexArrayVertexAttribLFormatEXT;
#define glVertexArrayVertexAttribLFormatEXT sf_glad_glVertexArrayVertexAttribLFormatEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribLOffsetEXT;
#define glVertexArrayVertexAttribLOffsetEXT sf_glad_glVertexArrayVertexAttribLOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribOffsetEXT;
#define glVertexArrayVertexAttribOffsetEXT sf_glad_glVertexArrayVertexAttribOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC sf_glad_glVertexArrayVertexBindingDivisorEXT;
#define glVertexArrayVertexBindingDivisorEXT sf_glad_glVertexArrayVertexBindingDivisorEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBUFFERPROC sf_glad_glVertexArrayVertexBuffer;
#define glVertexArrayVertexBuffer sf_glad_glVertexArrayVertexBuffer
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBUFFERSPROC sf_glad_glVertexArrayVertexBuffers;
#define glVertexArrayVertexBuffers sf_glad_glVertexArrayVertexBuffers
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC sf_glad_glVertexArrayVertexOffsetEXT;
#define glVertexArrayVertexOffsetEXT sf_glad_glVertexArrayVertexOffsetEXT
GLAD_API_CALL PFNGLVERTEXATTRIB1DPROC sf_glad_glVertexAttrib1d;
#define glVertexAttrib1d sf_glad_glVertexAttrib1d
GLAD_API_CALL PFNGLVERTEXATTRIB1DARBPROC sf_glad_glVertexAttrib1dARB;
#define glVertexAttrib1dARB sf_glad_glVertexAttrib1dARB
GLAD_API_CALL PFNGLVERTEXATTRIB1DNVPROC sf_glad_glVertexAttrib1dNV;
#define glVertexAttrib1dNV sf_glad_glVertexAttrib1dNV
GLAD_API_CALL PFNGLVERTEXATTRIB1DVPROC sf_glad_glVertexAttrib1dv;
#define glVertexAttrib1dv sf_glad_glVertexAttrib1dv
GLAD_API_CALL PFNGLVERTEXATTRIB1DVARBPROC sf_glad_glVertexAttrib1dvARB;
#define glVertexAttrib1dvARB sf_glad_glVertexAttrib1dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB1DVNVPROC sf_glad_glVertexAttrib1dvNV;
#define glVertexAttrib1dvNV sf_glad_glVertexAttrib1dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB1FPROC sf_glad_glVertexAttrib1f;
#define glVertexAttrib1f sf_glad_glVertexAttrib1f
GLAD_API_CALL PFNGLVERTEXATTRIB1FARBPROC sf_glad_glVertexAttrib1fARB;
#define glVertexAttrib1fARB sf_glad_glVertexAttrib1fARB
GLAD_API_CALL PFNGLVERTEXATTRIB1FNVPROC sf_glad_glVertexAttrib1fNV;
#define glVertexAttrib1fNV sf_glad_glVertexAttrib1fNV
GLAD_API_CALL PFNGLVERTEXATTRIB1FVPROC sf_glad_glVertexAttrib1fv;
#define glVertexAttrib1fv sf_glad_glVertexAttrib1fv
GLAD_API_CALL PFNGLVERTEXATTRIB1FVARBPROC sf_glad_glVertexAttrib1fvARB;
#define glVertexAttrib1fvARB sf_glad_glVertexAttrib1fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB1FVNVPROC sf_glad_glVertexAttrib1fvNV;
#define glVertexAttrib1fvNV sf_glad_glVertexAttrib1fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB1HNVPROC sf_glad_glVertexAttrib1hNV;
#define glVertexAttrib1hNV sf_glad_glVertexAttrib1hNV
GLAD_API_CALL PFNGLVERTEXATTRIB1HVNVPROC sf_glad_glVertexAttrib1hvNV;
#define glVertexAttrib1hvNV sf_glad_glVertexAttrib1hvNV
GLAD_API_CALL PFNGLVERTEXATTRIB1SPROC sf_glad_glVertexAttrib1s;
#define glVertexAttrib1s sf_glad_glVertexAttrib1s
GLAD_API_CALL PFNGLVERTEXATTRIB1SARBPROC sf_glad_glVertexAttrib1sARB;
#define glVertexAttrib1sARB sf_glad_glVertexAttrib1sARB
GLAD_API_CALL PFNGLVERTEXATTRIB1SNVPROC sf_glad_glVertexAttrib1sNV;
#define glVertexAttrib1sNV sf_glad_glVertexAttrib1sNV
GLAD_API_CALL PFNGLVERTEXATTRIB1SVPROC sf_glad_glVertexAttrib1sv;
#define glVertexAttrib1sv sf_glad_glVertexAttrib1sv
GLAD_API_CALL PFNGLVERTEXATTRIB1SVARBPROC sf_glad_glVertexAttrib1svARB;
#define glVertexAttrib1svARB sf_glad_glVertexAttrib1svARB
GLAD_API_CALL PFNGLVERTEXATTRIB1SVNVPROC sf_glad_glVertexAttrib1svNV;
#define glVertexAttrib1svNV sf_glad_glVertexAttrib1svNV
GLAD_API_CALL PFNGLVERTEXATTRIB2DPROC sf_glad_glVertexAttrib2d;
#define glVertexAttrib2d sf_glad_glVertexAttrib2d
GLAD_API_CALL PFNGLVERTEXATTRIB2DARBPROC sf_glad_glVertexAttrib2dARB;
#define glVertexAttrib2dARB sf_glad_glVertexAttrib2dARB
GLAD_API_CALL PFNGLVERTEXATTRIB2DNVPROC sf_glad_glVertexAttrib2dNV;
#define glVertexAttrib2dNV sf_glad_glVertexAttrib2dNV
GLAD_API_CALL PFNGLVERTEXATTRIB2DVPROC sf_glad_glVertexAttrib2dv;
#define glVertexAttrib2dv sf_glad_glVertexAttrib2dv
GLAD_API_CALL PFNGLVERTEXATTRIB2DVARBPROC sf_glad_glVertexAttrib2dvARB;
#define glVertexAttrib2dvARB sf_glad_glVertexAttrib2dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB2DVNVPROC sf_glad_glVertexAttrib2dvNV;
#define glVertexAttrib2dvNV sf_glad_glVertexAttrib2dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB2FPROC sf_glad_glVertexAttrib2f;
#define glVertexAttrib2f sf_glad_glVertexAttrib2f
GLAD_API_CALL PFNGLVERTEXATTRIB2FARBPROC sf_glad_glVertexAttrib2fARB;
#define glVertexAttrib2fARB sf_glad_glVertexAttrib2fARB
GLAD_API_CALL PFNGLVERTEXATTRIB2FNVPROC sf_glad_glVertexAttrib2fNV;
#define glVertexAttrib2fNV sf_glad_glVertexAttrib2fNV
GLAD_API_CALL PFNGLVERTEXATTRIB2FVPROC sf_glad_glVertexAttrib2fv;
#define glVertexAttrib2fv sf_glad_glVertexAttrib2fv
GLAD_API_CALL PFNGLVERTEXATTRIB2FVARBPROC sf_glad_glVertexAttrib2fvARB;
#define glVertexAttrib2fvARB sf_glad_glVertexAttrib2fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB2FVNVPROC sf_glad_glVertexAttrib2fvNV;
#define glVertexAttrib2fvNV sf_glad_glVertexAttrib2fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB2HNVPROC sf_glad_glVertexAttrib2hNV;
#define glVertexAttrib2hNV sf_glad_glVertexAttrib2hNV
GLAD_API_CALL PFNGLVERTEXATTRIB2HVNVPROC sf_glad_glVertexAttrib2hvNV;
#define glVertexAttrib2hvNV sf_glad_glVertexAttrib2hvNV
GLAD_API_CALL PFNGLVERTEXATTRIB2SPROC sf_glad_glVertexAttrib2s;
#define glVertexAttrib2s sf_glad_glVertexAttrib2s
GLAD_API_CALL PFNGLVERTEXATTRIB2SARBPROC sf_glad_glVertexAttrib2sARB;
#define glVertexAttrib2sARB sf_glad_glVertexAttrib2sARB
GLAD_API_CALL PFNGLVERTEXATTRIB2SNVPROC sf_glad_glVertexAttrib2sNV;
#define glVertexAttrib2sNV sf_glad_glVertexAttrib2sNV
GLAD_API_CALL PFNGLVERTEXATTRIB2SVPROC sf_glad_glVertexAttrib2sv;
#define glVertexAttrib2sv sf_glad_glVertexAttrib2sv
GLAD_API_CALL PFNGLVERTEXATTRIB2SVARBPROC sf_glad_glVertexAttrib2svARB;
#define glVertexAttrib2svARB sf_glad_glVertexAttrib2svARB
GLAD_API_CALL PFNGLVERTEXATTRIB2SVNVPROC sf_glad_glVertexAttrib2svNV;
#define glVertexAttrib2svNV sf_glad_glVertexAttrib2svNV
GLAD_API_CALL PFNGLVERTEXATTRIB3DPROC sf_glad_glVertexAttrib3d;
#define glVertexAttrib3d sf_glad_glVertexAttrib3d
GLAD_API_CALL PFNGLVERTEXATTRIB3DARBPROC sf_glad_glVertexAttrib3dARB;
#define glVertexAttrib3dARB sf_glad_glVertexAttrib3dARB
GLAD_API_CALL PFNGLVERTEXATTRIB3DNVPROC sf_glad_glVertexAttrib3dNV;
#define glVertexAttrib3dNV sf_glad_glVertexAttrib3dNV
GLAD_API_CALL PFNGLVERTEXATTRIB3DVPROC sf_glad_glVertexAttrib3dv;
#define glVertexAttrib3dv sf_glad_glVertexAttrib3dv
GLAD_API_CALL PFNGLVERTEXATTRIB3DVARBPROC sf_glad_glVertexAttrib3dvARB;
#define glVertexAttrib3dvARB sf_glad_glVertexAttrib3dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB3DVNVPROC sf_glad_glVertexAttrib3dvNV;
#define glVertexAttrib3dvNV sf_glad_glVertexAttrib3dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB3FPROC sf_glad_glVertexAttrib3f;
#define glVertexAttrib3f sf_glad_glVertexAttrib3f
GLAD_API_CALL PFNGLVERTEXATTRIB3FARBPROC sf_glad_glVertexAttrib3fARB;
#define glVertexAttrib3fARB sf_glad_glVertexAttrib3fARB
GLAD_API_CALL PFNGLVERTEXATTRIB3FNVPROC sf_glad_glVertexAttrib3fNV;
#define glVertexAttrib3fNV sf_glad_glVertexAttrib3fNV
GLAD_API_CALL PFNGLVERTEXATTRIB3FVPROC sf_glad_glVertexAttrib3fv;
#define glVertexAttrib3fv sf_glad_glVertexAttrib3fv
GLAD_API_CALL PFNGLVERTEXATTRIB3FVARBPROC sf_glad_glVertexAttrib3fvARB;
#define glVertexAttrib3fvARB sf_glad_glVertexAttrib3fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB3FVNVPROC sf_glad_glVertexAttrib3fvNV;
#define glVertexAttrib3fvNV sf_glad_glVertexAttrib3fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB3HNVPROC sf_glad_glVertexAttrib3hNV;
#define glVertexAttrib3hNV sf_glad_glVertexAttrib3hNV
GLAD_API_CALL PFNGLVERTEXATTRIB3HVNVPROC sf_glad_glVertexAttrib3hvNV;
#define glVertexAttrib3hvNV sf_glad_glVertexAttrib3hvNV
GLAD_API_CALL PFNGLVERTEXATTRIB3SPROC sf_glad_glVertexAttrib3s;
#define glVertexAttrib3s sf_glad_glVertexAttrib3s
GLAD_API_CALL PFNGLVERTEXATTRIB3SARBPROC sf_glad_glVertexAttrib3sARB;
#define glVertexAttrib3sARB sf_glad_glVertexAttrib3sARB
GLAD_API_CALL PFNGLVERTEXATTRIB3SNVPROC sf_glad_glVertexAttrib3sNV;
#define glVertexAttrib3sNV sf_glad_glVertexAttrib3sNV
GLAD_API_CALL PFNGLVERTEXATTRIB3SVPROC sf_glad_glVertexAttrib3sv;
#define glVertexAttrib3sv sf_glad_glVertexAttrib3sv
GLAD_API_CALL PFNGLVERTEXATTRIB3SVARBPROC sf_glad_glVertexAttrib3svARB;
#define glVertexAttrib3svARB sf_glad_glVertexAttrib3svARB
GLAD_API_CALL PFNGLVERTEXATTRIB3SVNVPROC sf_glad_glVertexAttrib3svNV;
#define glVertexAttrib3svNV sf_glad_glVertexAttrib3svNV
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVPROC sf_glad_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv sf_glad_glVertexAttrib4Nbv
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVARBPROC sf_glad_glVertexAttrib4NbvARB;
#define glVertexAttrib4NbvARB sf_glad_glVertexAttrib4NbvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVPROC sf_glad_glVertexAttrib4Niv;
#define glVertexAttrib4Niv sf_glad_glVertexAttrib4Niv
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVARBPROC sf_glad_glVertexAttrib4NivARB;
#define glVertexAttrib4NivARB sf_glad_glVertexAttrib4NivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVPROC sf_glad_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv sf_glad_glVertexAttrib4Nsv
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVARBPROC sf_glad_glVertexAttrib4NsvARB;
#define glVertexAttrib4NsvARB sf_glad_glVertexAttrib4NsvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBPROC sf_glad_glVertexAttrib4Nub;
#define glVertexAttrib4Nub sf_glad_glVertexAttrib4Nub
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBARBPROC sf_glad_glVertexAttrib4NubARB;
#define glVertexAttrib4NubARB sf_glad_glVertexAttrib4NubARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVPROC sf_glad_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv sf_glad_glVertexAttrib4Nubv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVARBPROC sf_glad_glVertexAttrib4NubvARB;
#define glVertexAttrib4NubvARB sf_glad_glVertexAttrib4NubvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVPROC sf_glad_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv sf_glad_glVertexAttrib4Nuiv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVARBPROC sf_glad_glVertexAttrib4NuivARB;
#define glVertexAttrib4NuivARB sf_glad_glVertexAttrib4NuivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVPROC sf_glad_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv sf_glad_glVertexAttrib4Nusv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVARBPROC sf_glad_glVertexAttrib4NusvARB;
#define glVertexAttrib4NusvARB sf_glad_glVertexAttrib4NusvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4BVPROC sf_glad_glVertexAttrib4bv;
#define glVertexAttrib4bv sf_glad_glVertexAttrib4bv
GLAD_API_CALL PFNGLVERTEXATTRIB4BVARBPROC sf_glad_glVertexAttrib4bvARB;
#define glVertexAttrib4bvARB sf_glad_glVertexAttrib4bvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DPROC sf_glad_glVertexAttrib4d;
#define glVertexAttrib4d sf_glad_glVertexAttrib4d
GLAD_API_CALL PFNGLVERTEXATTRIB4DARBPROC sf_glad_glVertexAttrib4dARB;
#define glVertexAttrib4dARB sf_glad_glVertexAttrib4dARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DNVPROC sf_glad_glVertexAttrib4dNV;
#define glVertexAttrib4dNV sf_glad_glVertexAttrib4dNV
GLAD_API_CALL PFNGLVERTEXATTRIB4DVPROC sf_glad_glVertexAttrib4dv;
#define glVertexAttrib4dv sf_glad_glVertexAttrib4dv
GLAD_API_CALL PFNGLVERTEXATTRIB4DVARBPROC sf_glad_glVertexAttrib4dvARB;
#define glVertexAttrib4dvARB sf_glad_glVertexAttrib4dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DVNVPROC sf_glad_glVertexAttrib4dvNV;
#define glVertexAttrib4dvNV sf_glad_glVertexAttrib4dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4FPROC sf_glad_glVertexAttrib4f;
#define glVertexAttrib4f sf_glad_glVertexAttrib4f
GLAD_API_CALL PFNGLVERTEXATTRIB4FARBPROC sf_glad_glVertexAttrib4fARB;
#define glVertexAttrib4fARB sf_glad_glVertexAttrib4fARB
GLAD_API_CALL PFNGLVERTEXATTRIB4FNVPROC sf_glad_glVertexAttrib4fNV;
#define glVertexAttrib4fNV sf_glad_glVertexAttrib4fNV
GLAD_API_CALL PFNGLVERTEXATTRIB4FVPROC sf_glad_glVertexAttrib4fv;
#define glVertexAttrib4fv sf_glad_glVertexAttrib4fv
GLAD_API_CALL PFNGLVERTEXATTRIB4FVARBPROC sf_glad_glVertexAttrib4fvARB;
#define glVertexAttrib4fvARB sf_glad_glVertexAttrib4fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4FVNVPROC sf_glad_glVertexAttrib4fvNV;
#define glVertexAttrib4fvNV sf_glad_glVertexAttrib4fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4HNVPROC sf_glad_glVertexAttrib4hNV;
#define glVertexAttrib4hNV sf_glad_glVertexAttrib4hNV
GLAD_API_CALL PFNGLVERTEXATTRIB4HVNVPROC sf_glad_glVertexAttrib4hvNV;
#define glVertexAttrib4hvNV sf_glad_glVertexAttrib4hvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4IVPROC sf_glad_glVertexAttrib4iv;
#define glVertexAttrib4iv sf_glad_glVertexAttrib4iv
GLAD_API_CALL PFNGLVERTEXATTRIB4IVARBPROC sf_glad_glVertexAttrib4ivARB;
#define glVertexAttrib4ivARB sf_glad_glVertexAttrib4ivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SPROC sf_glad_glVertexAttrib4s;
#define glVertexAttrib4s sf_glad_glVertexAttrib4s
GLAD_API_CALL PFNGLVERTEXATTRIB4SARBPROC sf_glad_glVertexAttrib4sARB;
#define glVertexAttrib4sARB sf_glad_glVertexAttrib4sARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SNVPROC sf_glad_glVertexAttrib4sNV;
#define glVertexAttrib4sNV sf_glad_glVertexAttrib4sNV
GLAD_API_CALL PFNGLVERTEXATTRIB4SVPROC sf_glad_glVertexAttrib4sv;
#define glVertexAttrib4sv sf_glad_glVertexAttrib4sv
GLAD_API_CALL PFNGLVERTEXATTRIB4SVARBPROC sf_glad_glVertexAttrib4svARB;
#define glVertexAttrib4svARB sf_glad_glVertexAttrib4svARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SVNVPROC sf_glad_glVertexAttrib4svNV;
#define glVertexAttrib4svNV sf_glad_glVertexAttrib4svNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UBNVPROC sf_glad_glVertexAttrib4ubNV;
#define glVertexAttrib4ubNV sf_glad_glVertexAttrib4ubNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVPROC sf_glad_glVertexAttrib4ubv;
#define glVertexAttrib4ubv sf_glad_glVertexAttrib4ubv
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVARBPROC sf_glad_glVertexAttrib4ubvARB;
#define glVertexAttrib4ubvARB sf_glad_glVertexAttrib4ubvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVNVPROC sf_glad_glVertexAttrib4ubvNV;
#define glVertexAttrib4ubvNV sf_glad_glVertexAttrib4ubvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVPROC sf_glad_glVertexAttrib4uiv;
#define glVertexAttrib4uiv sf_glad_glVertexAttrib4uiv
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVARBPROC sf_glad_glVertexAttrib4uivARB;
#define glVertexAttrib4uivARB sf_glad_glVertexAttrib4uivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4USVPROC sf_glad_glVertexAttrib4usv;
#define glVertexAttrib4usv sf_glad_glVertexAttrib4usv
GLAD_API_CALL PFNGLVERTEXATTRIB4USVARBPROC sf_glad_glVertexAttrib4usvARB;
#define glVertexAttrib4usvARB sf_glad_glVertexAttrib4usvARB
GLAD_API_CALL PFNGLVERTEXATTRIBARRAYOBJECTATIPROC sf_glad_glVertexAttribArrayObjectATI;
#define glVertexAttribArrayObjectATI sf_glad_glVertexAttribArrayObjectATI
GLAD_API_CALL PFNGLVERTEXATTRIBBINDINGPROC sf_glad_glVertexAttribBinding;
#define glVertexAttribBinding sf_glad_glVertexAttribBinding
GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORPROC sf_glad_glVertexAttribDivisor;
#define glVertexAttribDivisor sf_glad_glVertexAttribDivisor
GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORARBPROC sf_glad_glVertexAttribDivisorARB;
#define glVertexAttribDivisorARB sf_glad_glVertexAttribDivisorARB
GLAD_API_CALL PFNGLVERTEXATTRIBFORMATPROC sf_glad_glVertexAttribFormat;
#define glVertexAttribFormat sf_glad_glVertexAttribFormat
GLAD_API_CALL PFNGLVERTEXATTRIBFORMATNVPROC sf_glad_glVertexAttribFormatNV;
#define glVertexAttribFormatNV sf_glad_glVertexAttribFormatNV
GLAD_API_CALL PFNGLVERTEXATTRIBI1IPROC sf_glad_glVertexAttribI1i;
#define glVertexAttribI1i sf_glad_glVertexAttribI1i
GLAD_API_CALL PFNGLVERTEXATTRIBI1IEXTPROC sf_glad_glVertexAttribI1iEXT;
#define glVertexAttribI1iEXT sf_glad_glVertexAttribI1iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI1IVPROC sf_glad_glVertexAttribI1iv;
#define glVertexAttribI1iv sf_glad_glVertexAttribI1iv
GLAD_API_CALL PFNGLVERTEXATTRIBI1IVEXTPROC sf_glad_glVertexAttribI1ivEXT;
#define glVertexAttribI1ivEXT sf_glad_glVertexAttribI1ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIPROC sf_glad_glVertexAttribI1ui;
#define glVertexAttribI1ui sf_glad_glVertexAttribI1ui
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIEXTPROC sf_glad_glVertexAttribI1uiEXT;
#define glVertexAttribI1uiEXT sf_glad_glVertexAttribI1uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIVPROC sf_glad_glVertexAttribI1uiv;
#define glVertexAttribI1uiv sf_glad_glVertexAttribI1uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIVEXTPROC sf_glad_glVertexAttribI1uivEXT;
#define glVertexAttribI1uivEXT sf_glad_glVertexAttribI1uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2IPROC sf_glad_glVertexAttribI2i;
#define glVertexAttribI2i sf_glad_glVertexAttribI2i
GLAD_API_CALL PFNGLVERTEXATTRIBI2IEXTPROC sf_glad_glVertexAttribI2iEXT;
#define glVertexAttribI2iEXT sf_glad_glVertexAttribI2iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2IVPROC sf_glad_glVertexAttribI2iv;
#define glVertexAttribI2iv sf_glad_glVertexAttribI2iv
GLAD_API_CALL PFNGLVERTEXATTRIBI2IVEXTPROC sf_glad_glVertexAttribI2ivEXT;
#define glVertexAttribI2ivEXT sf_glad_glVertexAttribI2ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIPROC sf_glad_glVertexAttribI2ui;
#define glVertexAttribI2ui sf_glad_glVertexAttribI2ui
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIEXTPROC sf_glad_glVertexAttribI2uiEXT;
#define glVertexAttribI2uiEXT sf_glad_glVertexAttribI2uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIVPROC sf_glad_glVertexAttribI2uiv;
#define glVertexAttribI2uiv sf_glad_glVertexAttribI2uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIVEXTPROC sf_glad_glVertexAttribI2uivEXT;
#define glVertexAttribI2uivEXT sf_glad_glVertexAttribI2uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3IPROC sf_glad_glVertexAttribI3i;
#define glVertexAttribI3i sf_glad_glVertexAttribI3i
GLAD_API_CALL PFNGLVERTEXATTRIBI3IEXTPROC sf_glad_glVertexAttribI3iEXT;
#define glVertexAttribI3iEXT sf_glad_glVertexAttribI3iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3IVPROC sf_glad_glVertexAttribI3iv;
#define glVertexAttribI3iv sf_glad_glVertexAttribI3iv
GLAD_API_CALL PFNGLVERTEXATTRIBI3IVEXTPROC sf_glad_glVertexAttribI3ivEXT;
#define glVertexAttribI3ivEXT sf_glad_glVertexAttribI3ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIPROC sf_glad_glVertexAttribI3ui;
#define glVertexAttribI3ui sf_glad_glVertexAttribI3ui
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIEXTPROC sf_glad_glVertexAttribI3uiEXT;
#define glVertexAttribI3uiEXT sf_glad_glVertexAttribI3uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIVPROC sf_glad_glVertexAttribI3uiv;
#define glVertexAttribI3uiv sf_glad_glVertexAttribI3uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIVEXTPROC sf_glad_glVertexAttribI3uivEXT;
#define glVertexAttribI3uivEXT sf_glad_glVertexAttribI3uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4BVPROC sf_glad_glVertexAttribI4bv;
#define glVertexAttribI4bv sf_glad_glVertexAttribI4bv
GLAD_API_CALL PFNGLVERTEXATTRIBI4BVEXTPROC sf_glad_glVertexAttribI4bvEXT;
#define glVertexAttribI4bvEXT sf_glad_glVertexAttribI4bvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4IPROC sf_glad_glVertexAttribI4i;
#define glVertexAttribI4i sf_glad_glVertexAttribI4i
GLAD_API_CALL PFNGLVERTEXATTRIBI4IEXTPROC sf_glad_glVertexAttribI4iEXT;
#define glVertexAttribI4iEXT sf_glad_glVertexAttribI4iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4IVPROC sf_glad_glVertexAttribI4iv;
#define glVertexAttribI4iv sf_glad_glVertexAttribI4iv
GLAD_API_CALL PFNGLVERTEXATTRIBI4IVEXTPROC sf_glad_glVertexAttribI4ivEXT;
#define glVertexAttribI4ivEXT sf_glad_glVertexAttribI4ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4SVPROC sf_glad_glVertexAttribI4sv;
#define glVertexAttribI4sv sf_glad_glVertexAttribI4sv
GLAD_API_CALL PFNGLVERTEXATTRIBI4SVEXTPROC sf_glad_glVertexAttribI4svEXT;
#define glVertexAttribI4svEXT sf_glad_glVertexAttribI4svEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4UBVPROC sf_glad_glVertexAttribI4ubv;
#define glVertexAttribI4ubv sf_glad_glVertexAttribI4ubv
GLAD_API_CALL PFNGLVERTEXATTRIBI4UBVEXTPROC sf_glad_glVertexAttribI4ubvEXT;
#define glVertexAttribI4ubvEXT sf_glad_glVertexAttribI4ubvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIPROC sf_glad_glVertexAttribI4ui;
#define glVertexAttribI4ui sf_glad_glVertexAttribI4ui
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIEXTPROC sf_glad_glVertexAttribI4uiEXT;
#define glVertexAttribI4uiEXT sf_glad_glVertexAttribI4uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVPROC sf_glad_glVertexAttribI4uiv;
#define glVertexAttribI4uiv sf_glad_glVertexAttribI4uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVEXTPROC sf_glad_glVertexAttribI4uivEXT;
#define glVertexAttribI4uivEXT sf_glad_glVertexAttribI4uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4USVPROC sf_glad_glVertexAttribI4usv;
#define glVertexAttribI4usv sf_glad_glVertexAttribI4usv
GLAD_API_CALL PFNGLVERTEXATTRIBI4USVEXTPROC sf_glad_glVertexAttribI4usvEXT;
#define glVertexAttribI4usvEXT sf_glad_glVertexAttribI4usvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBIFORMATPROC sf_glad_glVertexAttribIFormat;
#define glVertexAttribIFormat sf_glad_glVertexAttribIFormat
GLAD_API_CALL PFNGLVERTEXATTRIBIFORMATNVPROC sf_glad_glVertexAttribIFormatNV;
#define glVertexAttribIFormatNV sf_glad_glVertexAttribIFormatNV
GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTERPROC sf_glad_glVertexAttribIPointer;
#define glVertexAttribIPointer sf_glad_glVertexAttribIPointer
GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTEREXTPROC sf_glad_glVertexAttribIPointerEXT;
#define glVertexAttribIPointerEXT sf_glad_glVertexAttribIPointerEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL1DPROC sf_glad_glVertexAttribL1d;
#define glVertexAttribL1d sf_glad_glVertexAttribL1d
GLAD_API_CALL PFNGLVERTEXATTRIBL1DEXTPROC sf_glad_glVertexAttribL1dEXT;
#define glVertexAttribL1dEXT sf_glad_glVertexAttribL1dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL1DVPROC sf_glad_glVertexAttribL1dv;
#define glVertexAttribL1dv sf_glad_glVertexAttribL1dv
GLAD_API_CALL PFNGLVERTEXATTRIBL1DVEXTPROC sf_glad_glVertexAttribL1dvEXT;
#define glVertexAttribL1dvEXT sf_glad_glVertexAttribL1dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL1I64NVPROC sf_glad_glVertexAttribL1i64NV;
#define glVertexAttribL1i64NV sf_glad_glVertexAttribL1i64NV
GLAD_API_CALL PFNGLVERTEXATTRIBL1I64VNVPROC sf_glad_glVertexAttribL1i64vNV;
#define glVertexAttribL1i64vNV sf_glad_glVertexAttribL1i64vNV
GLAD_API_CALL PFNGLVERTEXATTRIBL1UI64ARBPROC sf_glad_glVertexAttribL1ui64ARB;
#define glVertexAttribL1ui64ARB sf_glad_glVertexAttribL1ui64ARB
GLAD_API_CALL PFNGLVERTEXATTRIBL1UI64NVPROC sf_glad_glVertexAttribL1ui64NV;
#define glVertexAttribL1ui64NV sf_glad_glVertexAttribL1ui64NV
GLAD_API_CALL PFNGLVERTEXATTRIBL1UI64VARBPROC sf_glad_glVertexAttribL1ui64vARB;
#define glVertexAttribL1ui64vARB sf_glad_glVertexAttribL1ui64vARB
GLAD_API_CALL PFNGLVERTEXATTRIBL1UI64VNVPROC sf_glad_glVertexAttribL1ui64vNV;
#define glVertexAttribL1ui64vNV sf_glad_glVertexAttribL1ui64vNV
GLAD_API_CALL PFNGLVERTEXATTRIBL2DPROC sf_glad_glVertexAttribL2d;
#define glVertexAttribL2d sf_glad_glVertexAttribL2d
GLAD_API_CALL PFNGLVERTEXATTRIBL2DEXTPROC sf_glad_glVertexAttribL2dEXT;
#define glVertexAttribL2dEXT sf_glad_glVertexAttribL2dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL2DVPROC sf_glad_glVertexAttribL2dv;
#define glVertexAttribL2dv sf_glad_glVertexAttribL2dv
GLAD_API_CALL PFNGLVERTEXATTRIBL2DVEXTPROC sf_glad_glVertexAttribL2dvEXT;
#define glVertexAttribL2dvEXT sf_glad_glVertexAttribL2dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL2I64NVPROC sf_glad_glVertexAttribL2i64NV;
#define glVertexAttribL2i64NV sf_glad_glVertexAttribL2i64NV
GLAD_API_CALL PFNGLVERTEXATTRIBL2I64VNVPROC sf_glad_glVertexAttribL2i64vNV;
#define glVertexAttribL2i64vNV sf_glad_glVertexAttribL2i64vNV
GLAD_API_CALL PFNGLVERTEXATTRIBL2UI64NVPROC sf_glad_glVertexAttribL2ui64NV;
#define glVertexAttribL2ui64NV sf_glad_glVertexAttribL2ui64NV
GLAD_API_CALL PFNGLVERTEXATTRIBL2UI64VNVPROC sf_glad_glVertexAttribL2ui64vNV;
#define glVertexAttribL2ui64vNV sf_glad_glVertexAttribL2ui64vNV
GLAD_API_CALL PFNGLVERTEXATTRIBL3DPROC sf_glad_glVertexAttribL3d;
#define glVertexAttribL3d sf_glad_glVertexAttribL3d
GLAD_API_CALL PFNGLVERTEXATTRIBL3DEXTPROC sf_glad_glVertexAttribL3dEXT;
#define glVertexAttribL3dEXT sf_glad_glVertexAttribL3dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL3DVPROC sf_glad_glVertexAttribL3dv;
#define glVertexAttribL3dv sf_glad_glVertexAttribL3dv
GLAD_API_CALL PFNGLVERTEXATTRIBL3DVEXTPROC sf_glad_glVertexAttribL3dvEXT;
#define glVertexAttribL3dvEXT sf_glad_glVertexAttribL3dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL3I64NVPROC sf_glad_glVertexAttribL3i64NV;
#define glVertexAttribL3i64NV sf_glad_glVertexAttribL3i64NV
GLAD_API_CALL PFNGLVERTEXATTRIBL3I64VNVPROC sf_glad_glVertexAttribL3i64vNV;
#define glVertexAttribL3i64vNV sf_glad_glVertexAttribL3i64vNV
GLAD_API_CALL PFNGLVERTEXATTRIBL3UI64NVPROC sf_glad_glVertexAttribL3ui64NV;
#define glVertexAttribL3ui64NV sf_glad_glVertexAttribL3ui64NV
GLAD_API_CALL PFNGLVERTEXATTRIBL3UI64VNVPROC sf_glad_glVertexAttribL3ui64vNV;
#define glVertexAttribL3ui64vNV sf_glad_glVertexAttribL3ui64vNV
GLAD_API_CALL PFNGLVERTEXATTRIBL4DPROC sf_glad_glVertexAttribL4d;
#define glVertexAttribL4d sf_glad_glVertexAttribL4d
GLAD_API_CALL PFNGLVERTEXATTRIBL4DEXTPROC sf_glad_glVertexAttribL4dEXT;
#define glVertexAttribL4dEXT sf_glad_glVertexAttribL4dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL4DVPROC sf_glad_glVertexAttribL4dv;
#define glVertexAttribL4dv sf_glad_glVertexAttribL4dv
GLAD_API_CALL PFNGLVERTEXATTRIBL4DVEXTPROC sf_glad_glVertexAttribL4dvEXT;
#define glVertexAttribL4dvEXT sf_glad_glVertexAttribL4dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL4I64NVPROC sf_glad_glVertexAttribL4i64NV;
#define glVertexAttribL4i64NV sf_glad_glVertexAttribL4i64NV
GLAD_API_CALL PFNGLVERTEXATTRIBL4I64VNVPROC sf_glad_glVertexAttribL4i64vNV;
#define glVertexAttribL4i64vNV sf_glad_glVertexAttribL4i64vNV
GLAD_API_CALL PFNGLVERTEXATTRIBL4UI64NVPROC sf_glad_glVertexAttribL4ui64NV;
#define glVertexAttribL4ui64NV sf_glad_glVertexAttribL4ui64NV
GLAD_API_CALL PFNGLVERTEXATTRIBL4UI64VNVPROC sf_glad_glVertexAttribL4ui64vNV;
#define glVertexAttribL4ui64vNV sf_glad_glVertexAttribL4ui64vNV
GLAD_API_CALL PFNGLVERTEXATTRIBLFORMATPROC sf_glad_glVertexAttribLFormat;
#define glVertexAttribLFormat sf_glad_glVertexAttribLFormat
GLAD_API_CALL PFNGLVERTEXATTRIBLFORMATNVPROC sf_glad_glVertexAttribLFormatNV;
#define glVertexAttribLFormatNV sf_glad_glVertexAttribLFormatNV
GLAD_API_CALL PFNGLVERTEXATTRIBLPOINTERPROC sf_glad_glVertexAttribLPointer;
#define glVertexAttribLPointer sf_glad_glVertexAttribLPointer
GLAD_API_CALL PFNGLVERTEXATTRIBLPOINTEREXTPROC sf_glad_glVertexAttribLPointerEXT;
#define glVertexAttribLPointerEXT sf_glad_glVertexAttribLPointerEXT
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIPROC sf_glad_glVertexAttribP1ui;
#define glVertexAttribP1ui sf_glad_glVertexAttribP1ui
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIVPROC sf_glad_glVertexAttribP1uiv;
#define glVertexAttribP1uiv sf_glad_glVertexAttribP1uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIPROC sf_glad_glVertexAttribP2ui;
#define glVertexAttribP2ui sf_glad_glVertexAttribP2ui
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIVPROC sf_glad_glVertexAttribP2uiv;
#define glVertexAttribP2uiv sf_glad_glVertexAttribP2uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIPROC sf_glad_glVertexAttribP3ui;
#define glVertexAttribP3ui sf_glad_glVertexAttribP3ui
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIVPROC sf_glad_glVertexAttribP3uiv;
#define glVertexAttribP3uiv sf_glad_glVertexAttribP3uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIPROC sf_glad_glVertexAttribP4ui;
#define glVertexAttribP4ui sf_glad_glVertexAttribP4ui
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIVPROC sf_glad_glVertexAttribP4uiv;
#define glVertexAttribP4uiv sf_glad_glVertexAttribP4uiv
GLAD_API_CALL PFNGLVERTEXATTRIBPARAMETERIAMDPROC sf_glad_glVertexAttribParameteriAMD;
#define glVertexAttribParameteriAMD sf_glad_glVertexAttribParameteriAMD
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERPROC sf_glad_glVertexAttribPointer;
#define glVertexAttribPointer sf_glad_glVertexAttribPointer
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERARBPROC sf_glad_glVertexAttribPointerARB;
#define glVertexAttribPointerARB sf_glad_glVertexAttribPointerARB
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERNVPROC sf_glad_glVertexAttribPointerNV;
#define glVertexAttribPointerNV sf_glad_glVertexAttribPointerNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1DVNVPROC sf_glad_glVertexAttribs1dvNV;
#define glVertexAttribs1dvNV sf_glad_glVertexAttribs1dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1FVNVPROC sf_glad_glVertexAttribs1fvNV;
#define glVertexAttribs1fvNV sf_glad_glVertexAttribs1fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1HVNVPROC sf_glad_glVertexAttribs1hvNV;
#define glVertexAttribs1hvNV sf_glad_glVertexAttribs1hvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1SVNVPROC sf_glad_glVertexAttribs1svNV;
#define glVertexAttribs1svNV sf_glad_glVertexAttribs1svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2DVNVPROC sf_glad_glVertexAttribs2dvNV;
#define glVertexAttribs2dvNV sf_glad_glVertexAttribs2dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2FVNVPROC sf_glad_glVertexAttribs2fvNV;
#define glVertexAttribs2fvNV sf_glad_glVertexAttribs2fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2HVNVPROC sf_glad_glVertexAttribs2hvNV;
#define glVertexAttribs2hvNV sf_glad_glVertexAttribs2hvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2SVNVPROC sf_glad_glVertexAttribs2svNV;
#define glVertexAttribs2svNV sf_glad_glVertexAttribs2svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3DVNVPROC sf_glad_glVertexAttribs3dvNV;
#define glVertexAttribs3dvNV sf_glad_glVertexAttribs3dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3FVNVPROC sf_glad_glVertexAttribs3fvNV;
#define glVertexAttribs3fvNV sf_glad_glVertexAttribs3fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3HVNVPROC sf_glad_glVertexAttribs3hvNV;
#define glVertexAttribs3hvNV sf_glad_glVertexAttribs3hvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3SVNVPROC sf_glad_glVertexAttribs3svNV;
#define glVertexAttribs3svNV sf_glad_glVertexAttribs3svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4DVNVPROC sf_glad_glVertexAttribs4dvNV;
#define glVertexAttribs4dvNV sf_glad_glVertexAttribs4dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4FVNVPROC sf_glad_glVertexAttribs4fvNV;
#define glVertexAttribs4fvNV sf_glad_glVertexAttribs4fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4HVNVPROC sf_glad_glVertexAttribs4hvNV;
#define glVertexAttribs4hvNV sf_glad_glVertexAttribs4hvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4SVNVPROC sf_glad_glVertexAttribs4svNV;
#define glVertexAttribs4svNV sf_glad_glVertexAttribs4svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4UBVNVPROC sf_glad_glVertexAttribs4ubvNV;
#define glVertexAttribs4ubvNV sf_glad_glVertexAttribs4ubvNV
GLAD_API_CALL PFNGLVERTEXBINDINGDIVISORPROC sf_glad_glVertexBindingDivisor;
#define glVertexBindingDivisor sf_glad_glVertexBindingDivisor
GLAD_API_CALL PFNGLVERTEXBLENDARBPROC sf_glad_glVertexBlendARB;
#define glVertexBlendARB sf_glad_glVertexBlendARB
GLAD_API_CALL PFNGLVERTEXBLENDENVFATIPROC sf_glad_glVertexBlendEnvfATI;
#define glVertexBlendEnvfATI sf_glad_glVertexBlendEnvfATI
GLAD_API_CALL PFNGLVERTEXBLENDENVIATIPROC sf_glad_glVertexBlendEnviATI;
#define glVertexBlendEnviATI sf_glad_glVertexBlendEnviATI
GLAD_API_CALL PFNGLVERTEXFORMATNVPROC sf_glad_glVertexFormatNV;
#define glVertexFormatNV sf_glad_glVertexFormatNV
GLAD_API_CALL PFNGLVERTEXP2UIPROC sf_glad_glVertexP2ui;
#define glVertexP2ui sf_glad_glVertexP2ui
GLAD_API_CALL PFNGLVERTEXP2UIVPROC sf_glad_glVertexP2uiv;
#define glVertexP2uiv sf_glad_glVertexP2uiv
GLAD_API_CALL PFNGLVERTEXP3UIPROC sf_glad_glVertexP3ui;
#define glVertexP3ui sf_glad_glVertexP3ui
GLAD_API_CALL PFNGLVERTEXP3UIVPROC sf_glad_glVertexP3uiv;
#define glVertexP3uiv sf_glad_glVertexP3uiv
GLAD_API_CALL PFNGLVERTEXP4UIPROC sf_glad_glVertexP4ui;
#define glVertexP4ui sf_glad_glVertexP4ui
GLAD_API_CALL PFNGLVERTEXP4UIVPROC sf_glad_glVertexP4uiv;
#define glVertexP4uiv sf_glad_glVertexP4uiv
GLAD_API_CALL PFNGLVERTEXPOINTERPROC sf_glad_glVertexPointer;
#define glVertexPointer sf_glad_glVertexPointer
GLAD_API_CALL PFNGLVERTEXPOINTEREXTPROC sf_glad_glVertexPointerEXT;
#define glVertexPointerEXT sf_glad_glVertexPointerEXT
GLAD_API_CALL PFNGLVERTEXPOINTERLISTIBMPROC sf_glad_glVertexPointerListIBM;
#define glVertexPointerListIBM sf_glad_glVertexPointerListIBM
GLAD_API_CALL PFNGLVERTEXPOINTERVINTELPROC sf_glad_glVertexPointervINTEL;
#define glVertexPointervINTEL sf_glad_glVertexPointervINTEL
GLAD_API_CALL PFNGLVERTEXSTREAM1DATIPROC sf_glad_glVertexStream1dATI;
#define glVertexStream1dATI sf_glad_glVertexStream1dATI
GLAD_API_CALL PFNGLVERTEXSTREAM1DVATIPROC sf_glad_glVertexStream1dvATI;
#define glVertexStream1dvATI sf_glad_glVertexStream1dvATI
GLAD_API_CALL PFNGLVERTEXSTREAM1FATIPROC sf_glad_glVertexStream1fATI;
#define glVertexStream1fATI sf_glad_glVertexStream1fATI
GLAD_API_CALL PFNGLVERTEXSTREAM1FVATIPROC sf_glad_glVertexStream1fvATI;
#define glVertexStream1fvATI sf_glad_glVertexStream1fvATI
GLAD_API_CALL PFNGLVERTEXSTREAM1IATIPROC sf_glad_glVertexStream1iATI;
#define glVertexStream1iATI sf_glad_glVertexStream1iATI
GLAD_API_CALL PFNGLVERTEXSTREAM1IVATIPROC sf_glad_glVertexStream1ivATI;
#define glVertexStream1ivATI sf_glad_glVertexStream1ivATI
GLAD_API_CALL PFNGLVERTEXSTREAM1SATIPROC sf_glad_glVertexStream1sATI;
#define glVertexStream1sATI sf_glad_glVertexStream1sATI
GLAD_API_CALL PFNGLVERTEXSTREAM1SVATIPROC sf_glad_glVertexStream1svATI;
#define glVertexStream1svATI sf_glad_glVertexStream1svATI
GLAD_API_CALL PFNGLVERTEXSTREAM2DATIPROC sf_glad_glVertexStream2dATI;
#define glVertexStream2dATI sf_glad_glVertexStream2dATI
GLAD_API_CALL PFNGLVERTEXSTREAM2DVATIPROC sf_glad_glVertexStream2dvATI;
#define glVertexStream2dvATI sf_glad_glVertexStream2dvATI
GLAD_API_CALL PFNGLVERTEXSTREAM2FATIPROC sf_glad_glVertexStream2fATI;
#define glVertexStream2fATI sf_glad_glVertexStream2fATI
GLAD_API_CALL PFNGLVERTEXSTREAM2FVATIPROC sf_glad_glVertexStream2fvATI;
#define glVertexStream2fvATI sf_glad_glVertexStream2fvATI
GLAD_API_CALL PFNGLVERTEXSTREAM2IATIPROC sf_glad_glVertexStream2iATI;
#define glVertexStream2iATI sf_glad_glVertexStream2iATI
GLAD_API_CALL PFNGLVERTEXSTREAM2IVATIPROC sf_glad_glVertexStream2ivATI;
#define glVertexStream2ivATI sf_glad_glVertexStream2ivATI
GLAD_API_CALL PFNGLVERTEXSTREAM2SATIPROC sf_glad_glVertexStream2sATI;
#define glVertexStream2sATI sf_glad_glVertexStream2sATI
GLAD_API_CALL PFNGLVERTEXSTREAM2SVATIPROC sf_glad_glVertexStream2svATI;
#define glVertexStream2svATI sf_glad_glVertexStream2svATI
GLAD_API_CALL PFNGLVERTEXSTREAM3DATIPROC sf_glad_glVertexStream3dATI;
#define glVertexStream3dATI sf_glad_glVertexStream3dATI
GLAD_API_CALL PFNGLVERTEXSTREAM3DVATIPROC sf_glad_glVertexStream3dvATI;
#define glVertexStream3dvATI sf_glad_glVertexStream3dvATI
GLAD_API_CALL PFNGLVERTEXSTREAM3FATIPROC sf_glad_glVertexStream3fATI;
#define glVertexStream3fATI sf_glad_glVertexStream3fATI
GLAD_API_CALL PFNGLVERTEXSTREAM3FVATIPROC sf_glad_glVertexStream3fvATI;
#define glVertexStream3fvATI sf_glad_glVertexStream3fvATI
GLAD_API_CALL PFNGLVERTEXSTREAM3IATIPROC sf_glad_glVertexStream3iATI;
#define glVertexStream3iATI sf_glad_glVertexStream3iATI
GLAD_API_CALL PFNGLVERTEXSTREAM3IVATIPROC sf_glad_glVertexStream3ivATI;
#define glVertexStream3ivATI sf_glad_glVertexStream3ivATI
GLAD_API_CALL PFNGLVERTEXSTREAM3SATIPROC sf_glad_glVertexStream3sATI;
#define glVertexStream3sATI sf_glad_glVertexStream3sATI
GLAD_API_CALL PFNGLVERTEXSTREAM3SVATIPROC sf_glad_glVertexStream3svATI;
#define glVertexStream3svATI sf_glad_glVertexStream3svATI
GLAD_API_CALL PFNGLVERTEXSTREAM4DATIPROC sf_glad_glVertexStream4dATI;
#define glVertexStream4dATI sf_glad_glVertexStream4dATI
GLAD_API_CALL PFNGLVERTEXSTREAM4DVATIPROC sf_glad_glVertexStream4dvATI;
#define glVertexStream4dvATI sf_glad_glVertexStream4dvATI
GLAD_API_CALL PFNGLVERTEXSTREAM4FATIPROC sf_glad_glVertexStream4fATI;
#define glVertexStream4fATI sf_glad_glVertexStream4fATI
GLAD_API_CALL PFNGLVERTEXSTREAM4FVATIPROC sf_glad_glVertexStream4fvATI;
#define glVertexStream4fvATI sf_glad_glVertexStream4fvATI
GLAD_API_CALL PFNGLVERTEXSTREAM4IATIPROC sf_glad_glVertexStream4iATI;
#define glVertexStream4iATI sf_glad_glVertexStream4iATI
GLAD_API_CALL PFNGLVERTEXSTREAM4IVATIPROC sf_glad_glVertexStream4ivATI;
#define glVertexStream4ivATI sf_glad_glVertexStream4ivATI
GLAD_API_CALL PFNGLVERTEXSTREAM4SATIPROC sf_glad_glVertexStream4sATI;
#define glVertexStream4sATI sf_glad_glVertexStream4sATI
GLAD_API_CALL PFNGLVERTEXSTREAM4SVATIPROC sf_glad_glVertexStream4svATI;
#define glVertexStream4svATI sf_glad_glVertexStream4svATI
GLAD_API_CALL PFNGLVERTEXWEIGHTPOINTEREXTPROC sf_glad_glVertexWeightPointerEXT;
#define glVertexWeightPointerEXT sf_glad_glVertexWeightPointerEXT
GLAD_API_CALL PFNGLVERTEXWEIGHTFEXTPROC sf_glad_glVertexWeightfEXT;
#define glVertexWeightfEXT sf_glad_glVertexWeightfEXT
GLAD_API_CALL PFNGLVERTEXWEIGHTFVEXTPROC sf_glad_glVertexWeightfvEXT;
#define glVertexWeightfvEXT sf_glad_glVertexWeightfvEXT
GLAD_API_CALL PFNGLVERTEXWEIGHTHNVPROC sf_glad_glVertexWeighthNV;
#define glVertexWeighthNV sf_glad_glVertexWeighthNV
GLAD_API_CALL PFNGLVERTEXWEIGHTHVNVPROC sf_glad_glVertexWeighthvNV;
#define glVertexWeighthvNV sf_glad_glVertexWeighthvNV
GLAD_API_CALL PFNGLVIDEOCAPTURENVPROC sf_glad_glVideoCaptureNV;
#define glVideoCaptureNV sf_glad_glVideoCaptureNV
GLAD_API_CALL PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC sf_glad_glVideoCaptureStreamParameterdvNV;
#define glVideoCaptureStreamParameterdvNV sf_glad_glVideoCaptureStreamParameterdvNV
GLAD_API_CALL PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC sf_glad_glVideoCaptureStreamParameterfvNV;
#define glVideoCaptureStreamParameterfvNV sf_glad_glVideoCaptureStreamParameterfvNV
GLAD_API_CALL PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC sf_glad_glVideoCaptureStreamParameterivNV;
#define glVideoCaptureStreamParameterivNV sf_glad_glVideoCaptureStreamParameterivNV
GLAD_API_CALL PFNGLVIEWPORTPROC sf_glad_glViewport;
#define glViewport sf_glad_glViewport
GLAD_API_CALL PFNGLVIEWPORTARRAYVPROC sf_glad_glViewportArrayv;
#define glViewportArrayv sf_glad_glViewportArrayv
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFPROC sf_glad_glViewportIndexedf;
#define glViewportIndexedf sf_glad_glViewportIndexedf
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFVPROC sf_glad_glViewportIndexedfv;
#define glViewportIndexedfv sf_glad_glViewportIndexedfv
GLAD_API_CALL PFNGLVIEWPORTPOSITIONWSCALENVPROC sf_glad_glViewportPositionWScaleNV;
#define glViewportPositionWScaleNV sf_glad_glViewportPositionWScaleNV
GLAD_API_CALL PFNGLVIEWPORTSWIZZLENVPROC sf_glad_glViewportSwizzleNV;
#define glViewportSwizzleNV sf_glad_glViewportSwizzleNV
GLAD_API_CALL PFNGLWAITSEMAPHOREEXTPROC sf_glad_glWaitSemaphoreEXT;
#define glWaitSemaphoreEXT sf_glad_glWaitSemaphoreEXT
GLAD_API_CALL PFNGLWAITSEMAPHOREUI64NVXPROC sf_glad_glWaitSemaphoreui64NVX;
#define glWaitSemaphoreui64NVX sf_glad_glWaitSemaphoreui64NVX
GLAD_API_CALL PFNGLWAITSYNCPROC sf_glad_glWaitSync;
#define glWaitSync sf_glad_glWaitSync
GLAD_API_CALL PFNGLWAITVKSEMAPHORENVPROC sf_glad_glWaitVkSemaphoreNV;
#define glWaitVkSemaphoreNV sf_glad_glWaitVkSemaphoreNV
GLAD_API_CALL PFNGLWEIGHTPATHSNVPROC sf_glad_glWeightPathsNV;
#define glWeightPathsNV sf_glad_glWeightPathsNV
GLAD_API_CALL PFNGLWEIGHTPOINTERARBPROC sf_glad_glWeightPointerARB;
#define glWeightPointerARB sf_glad_glWeightPointerARB
GLAD_API_CALL PFNGLWEIGHTBVARBPROC sf_glad_glWeightbvARB;
#define glWeightbvARB sf_glad_glWeightbvARB
GLAD_API_CALL PFNGLWEIGHTDVARBPROC sf_glad_glWeightdvARB;
#define glWeightdvARB sf_glad_glWeightdvARB
GLAD_API_CALL PFNGLWEIGHTFVARBPROC sf_glad_glWeightfvARB;
#define glWeightfvARB sf_glad_glWeightfvARB
GLAD_API_CALL PFNGLWEIGHTIVARBPROC sf_glad_glWeightivARB;
#define glWeightivARB sf_glad_glWeightivARB
GLAD_API_CALL PFNGLWEIGHTSVARBPROC sf_glad_glWeightsvARB;
#define glWeightsvARB sf_glad_glWeightsvARB
GLAD_API_CALL PFNGLWEIGHTUBVARBPROC sf_glad_glWeightubvARB;
#define glWeightubvARB sf_glad_glWeightubvARB
GLAD_API_CALL PFNGLWEIGHTUIVARBPROC sf_glad_glWeightuivARB;
#define glWeightuivARB sf_glad_glWeightuivARB
GLAD_API_CALL PFNGLWEIGHTUSVARBPROC sf_glad_glWeightusvARB;
#define glWeightusvARB sf_glad_glWeightusvARB
GLAD_API_CALL PFNGLWINDOWPOS2DPROC sf_glad_glWindowPos2d;
#define glWindowPos2d sf_glad_glWindowPos2d
GLAD_API_CALL PFNGLWINDOWPOS2DARBPROC sf_glad_glWindowPos2dARB;
#define glWindowPos2dARB sf_glad_glWindowPos2dARB
GLAD_API_CALL PFNGLWINDOWPOS2DMESAPROC sf_glad_glWindowPos2dMESA;
#define glWindowPos2dMESA sf_glad_glWindowPos2dMESA
GLAD_API_CALL PFNGLWINDOWPOS2DVPROC sf_glad_glWindowPos2dv;
#define glWindowPos2dv sf_glad_glWindowPos2dv
GLAD_API_CALL PFNGLWINDOWPOS2DVARBPROC sf_glad_glWindowPos2dvARB;
#define glWindowPos2dvARB sf_glad_glWindowPos2dvARB
GLAD_API_CALL PFNGLWINDOWPOS2DVMESAPROC sf_glad_glWindowPos2dvMESA;
#define glWindowPos2dvMESA sf_glad_glWindowPos2dvMESA
GLAD_API_CALL PFNGLWINDOWPOS2FPROC sf_glad_glWindowPos2f;
#define glWindowPos2f sf_glad_glWindowPos2f
GLAD_API_CALL PFNGLWINDOWPOS2FARBPROC sf_glad_glWindowPos2fARB;
#define glWindowPos2fARB sf_glad_glWindowPos2fARB
GLAD_API_CALL PFNGLWINDOWPOS2FMESAPROC sf_glad_glWindowPos2fMESA;
#define glWindowPos2fMESA sf_glad_glWindowPos2fMESA
GLAD_API_CALL PFNGLWINDOWPOS2FVPROC sf_glad_glWindowPos2fv;
#define glWindowPos2fv sf_glad_glWindowPos2fv
GLAD_API_CALL PFNGLWINDOWPOS2FVARBPROC sf_glad_glWindowPos2fvARB;
#define glWindowPos2fvARB sf_glad_glWindowPos2fvARB
GLAD_API_CALL PFNGLWINDOWPOS2FVMESAPROC sf_glad_glWindowPos2fvMESA;
#define glWindowPos2fvMESA sf_glad_glWindowPos2fvMESA
GLAD_API_CALL PFNGLWINDOWPOS2IPROC sf_glad_glWindowPos2i;
#define glWindowPos2i sf_glad_glWindowPos2i
GLAD_API_CALL PFNGLWINDOWPOS2IARBPROC sf_glad_glWindowPos2iARB;
#define glWindowPos2iARB sf_glad_glWindowPos2iARB
GLAD_API_CALL PFNGLWINDOWPOS2IMESAPROC sf_glad_glWindowPos2iMESA;
#define glWindowPos2iMESA sf_glad_glWindowPos2iMESA
GLAD_API_CALL PFNGLWINDOWPOS2IVPROC sf_glad_glWindowPos2iv;
#define glWindowPos2iv sf_glad_glWindowPos2iv
GLAD_API_CALL PFNGLWINDOWPOS2IVARBPROC sf_glad_glWindowPos2ivARB;
#define glWindowPos2ivARB sf_glad_glWindowPos2ivARB
GLAD_API_CALL PFNGLWINDOWPOS2IVMESAPROC sf_glad_glWindowPos2ivMESA;
#define glWindowPos2ivMESA sf_glad_glWindowPos2ivMESA
GLAD_API_CALL PFNGLWINDOWPOS2SPROC sf_glad_glWindowPos2s;
#define glWindowPos2s sf_glad_glWindowPos2s
GLAD_API_CALL PFNGLWINDOWPOS2SARBPROC sf_glad_glWindowPos2sARB;
#define glWindowPos2sARB sf_glad_glWindowPos2sARB
GLAD_API_CALL PFNGLWINDOWPOS2SMESAPROC sf_glad_glWindowPos2sMESA;
#define glWindowPos2sMESA sf_glad_glWindowPos2sMESA
GLAD_API_CALL PFNGLWINDOWPOS2SVPROC sf_glad_glWindowPos2sv;
#define glWindowPos2sv sf_glad_glWindowPos2sv
GLAD_API_CALL PFNGLWINDOWPOS2SVARBPROC sf_glad_glWindowPos2svARB;
#define glWindowPos2svARB sf_glad_glWindowPos2svARB
GLAD_API_CALL PFNGLWINDOWPOS2SVMESAPROC sf_glad_glWindowPos2svMESA;
#define glWindowPos2svMESA sf_glad_glWindowPos2svMESA
GLAD_API_CALL PFNGLWINDOWPOS3DPROC sf_glad_glWindowPos3d;
#define glWindowPos3d sf_glad_glWindowPos3d
GLAD_API_CALL PFNGLWINDOWPOS3DARBPROC sf_glad_glWindowPos3dARB;
#define glWindowPos3dARB sf_glad_glWindowPos3dARB
GLAD_API_CALL PFNGLWINDOWPOS3DMESAPROC sf_glad_glWindowPos3dMESA;
#define glWindowPos3dMESA sf_glad_glWindowPos3dMESA
GLAD_API_CALL PFNGLWINDOWPOS3DVPROC sf_glad_glWindowPos3dv;
#define glWindowPos3dv sf_glad_glWindowPos3dv
GLAD_API_CALL PFNGLWINDOWPOS3DVARBPROC sf_glad_glWindowPos3dvARB;
#define glWindowPos3dvARB sf_glad_glWindowPos3dvARB
GLAD_API_CALL PFNGLWINDOWPOS3DVMESAPROC sf_glad_glWindowPos3dvMESA;
#define glWindowPos3dvMESA sf_glad_glWindowPos3dvMESA
GLAD_API_CALL PFNGLWINDOWPOS3FPROC sf_glad_glWindowPos3f;
#define glWindowPos3f sf_glad_glWindowPos3f
GLAD_API_CALL PFNGLWINDOWPOS3FARBPROC sf_glad_glWindowPos3fARB;
#define glWindowPos3fARB sf_glad_glWindowPos3fARB
GLAD_API_CALL PFNGLWINDOWPOS3FMESAPROC sf_glad_glWindowPos3fMESA;
#define glWindowPos3fMESA sf_glad_glWindowPos3fMESA
GLAD_API_CALL PFNGLWINDOWPOS3FVPROC sf_glad_glWindowPos3fv;
#define glWindowPos3fv sf_glad_glWindowPos3fv
GLAD_API_CALL PFNGLWINDOWPOS3FVARBPROC sf_glad_glWindowPos3fvARB;
#define glWindowPos3fvARB sf_glad_glWindowPos3fvARB
GLAD_API_CALL PFNGLWINDOWPOS3FVMESAPROC sf_glad_glWindowPos3fvMESA;
#define glWindowPos3fvMESA sf_glad_glWindowPos3fvMESA
GLAD_API_CALL PFNGLWINDOWPOS3IPROC sf_glad_glWindowPos3i;
#define glWindowPos3i sf_glad_glWindowPos3i
GLAD_API_CALL PFNGLWINDOWPOS3IARBPROC sf_glad_glWindowPos3iARB;
#define glWindowPos3iARB sf_glad_glWindowPos3iARB
GLAD_API_CALL PFNGLWINDOWPOS3IMESAPROC sf_glad_glWindowPos3iMESA;
#define glWindowPos3iMESA sf_glad_glWindowPos3iMESA
GLAD_API_CALL PFNGLWINDOWPOS3IVPROC sf_glad_glWindowPos3iv;
#define glWindowPos3iv sf_glad_glWindowPos3iv
GLAD_API_CALL PFNGLWINDOWPOS3IVARBPROC sf_glad_glWindowPos3ivARB;
#define glWindowPos3ivARB sf_glad_glWindowPos3ivARB
GLAD_API_CALL PFNGLWINDOWPOS3IVMESAPROC sf_glad_glWindowPos3ivMESA;
#define glWindowPos3ivMESA sf_glad_glWindowPos3ivMESA
GLAD_API_CALL PFNGLWINDOWPOS3SPROC sf_glad_glWindowPos3s;
#define glWindowPos3s sf_glad_glWindowPos3s
GLAD_API_CALL PFNGLWINDOWPOS3SARBPROC sf_glad_glWindowPos3sARB;
#define glWindowPos3sARB sf_glad_glWindowPos3sARB
GLAD_API_CALL PFNGLWINDOWPOS3SMESAPROC sf_glad_glWindowPos3sMESA;
#define glWindowPos3sMESA sf_glad_glWindowPos3sMESA
GLAD_API_CALL PFNGLWINDOWPOS3SVPROC sf_glad_glWindowPos3sv;
#define glWindowPos3sv sf_glad_glWindowPos3sv
GLAD_API_CALL PFNGLWINDOWPOS3SVARBPROC sf_glad_glWindowPos3svARB;
#define glWindowPos3svARB sf_glad_glWindowPos3svARB
GLAD_API_CALL PFNGLWINDOWPOS3SVMESAPROC sf_glad_glWindowPos3svMESA;
#define glWindowPos3svMESA sf_glad_glWindowPos3svMESA
GLAD_API_CALL PFNGLWINDOWPOS4DMESAPROC sf_glad_glWindowPos4dMESA;
#define glWindowPos4dMESA sf_glad_glWindowPos4dMESA
GLAD_API_CALL PFNGLWINDOWPOS4DVMESAPROC sf_glad_glWindowPos4dvMESA;
#define glWindowPos4dvMESA sf_glad_glWindowPos4dvMESA
GLAD_API_CALL PFNGLWINDOWPOS4FMESAPROC sf_glad_glWindowPos4fMESA;
#define glWindowPos4fMESA sf_glad_glWindowPos4fMESA
GLAD_API_CALL PFNGLWINDOWPOS4FVMESAPROC sf_glad_glWindowPos4fvMESA;
#define glWindowPos4fvMESA sf_glad_glWindowPos4fvMESA
GLAD_API_CALL PFNGLWINDOWPOS4IMESAPROC sf_glad_glWindowPos4iMESA;
#define glWindowPos4iMESA sf_glad_glWindowPos4iMESA
GLAD_API_CALL PFNGLWINDOWPOS4IVMESAPROC sf_glad_glWindowPos4ivMESA;
#define glWindowPos4ivMESA sf_glad_glWindowPos4ivMESA
GLAD_API_CALL PFNGLWINDOWPOS4SMESAPROC sf_glad_glWindowPos4sMESA;
#define glWindowPos4sMESA sf_glad_glWindowPos4sMESA
GLAD_API_CALL PFNGLWINDOWPOS4SVMESAPROC sf_glad_glWindowPos4svMESA;
#define glWindowPos4svMESA sf_glad_glWindowPos4svMESA
GLAD_API_CALL PFNGLWINDOWRECTANGLESEXTPROC sf_glad_glWindowRectanglesEXT;
#define glWindowRectanglesEXT sf_glad_glWindowRectanglesEXT
GLAD_API_CALL PFNGLWRITEMASKEXTPROC sf_glad_glWriteMaskEXT;
#define glWriteMaskEXT sf_glad_glWriteMaskEXT
GLAD_API_CALL PFNGLALPHAFUNCXPROC sf_glad_glAlphaFuncx;
#define glAlphaFuncx sf_glad_glAlphaFuncx
GLAD_API_CALL PFNGLBINDFRAMEBUFFEROESPROC sf_glad_glBindFramebufferOES;
#define glBindFramebufferOES sf_glad_glBindFramebufferOES
GLAD_API_CALL PFNGLBINDRENDERBUFFEROESPROC sf_glad_glBindRenderbufferOES;
#define glBindRenderbufferOES sf_glad_glBindRenderbufferOES
GLAD_API_CALL PFNGLBINDVERTEXARRAYOESPROC sf_glad_glBindVertexArrayOES;
#define glBindVertexArrayOES sf_glad_glBindVertexArrayOES
GLAD_API_CALL PFNGLBLENDEQUATIONOESPROC sf_glad_glBlendEquationOES;
#define glBlendEquationOES sf_glad_glBlendEquationOES
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEOESPROC sf_glad_glBlendEquationSeparateOES;
#define glBlendEquationSeparateOES sf_glad_glBlendEquationSeparateOES
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEOESPROC sf_glad_glBlendFuncSeparateOES;
#define glBlendFuncSeparateOES sf_glad_glBlendFuncSeparateOES
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSOESPROC sf_glad_glCheckFramebufferStatusOES;
#define glCheckFramebufferStatusOES sf_glad_glCheckFramebufferStatusOES
GLAD_API_CALL PFNGLCLEARCOLORXPROC sf_glad_glClearColorx;
#define glClearColorx sf_glad_glClearColorx
GLAD_API_CALL PFNGLCLEARDEPTHXPROC sf_glad_glClearDepthx;
#define glClearDepthx sf_glad_glClearDepthx
GLAD_API_CALL PFNGLCLIENTWAITSYNCAPPLEPROC sf_glad_glClientWaitSyncAPPLE;
#define glClientWaitSyncAPPLE sf_glad_glClientWaitSyncAPPLE
GLAD_API_CALL PFNGLCLIPPLANEFPROC sf_glad_glClipPlanef;
#define glClipPlanef sf_glad_glClipPlanef
GLAD_API_CALL PFNGLCLIPPLANEFIMGPROC sf_glad_glClipPlanefIMG;
#define glClipPlanefIMG sf_glad_glClipPlanefIMG
GLAD_API_CALL PFNGLCLIPPLANEXPROC sf_glad_glClipPlanex;
#define glClipPlanex sf_glad_glClipPlanex
GLAD_API_CALL PFNGLCLIPPLANEXIMGPROC sf_glad_glClipPlanexIMG;
#define glClipPlanexIMG sf_glad_glClipPlanexIMG
GLAD_API_CALL PFNGLCOLOR4XPROC sf_glad_glColor4x;
#define glColor4x sf_glad_glColor4x
GLAD_API_CALL PFNGLCOPYTEXTURELEVELSAPPLEPROC sf_glad_glCopyTextureLevelsAPPLE;
#define glCopyTextureLevelsAPPLE sf_glad_glCopyTextureLevelsAPPLE
GLAD_API_CALL PFNGLCURRENTPALETTEMATRIXOESPROC sf_glad_glCurrentPaletteMatrixOES;
#define glCurrentPaletteMatrixOES sf_glad_glCurrentPaletteMatrixOES
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSOESPROC sf_glad_glDeleteFramebuffersOES;
#define glDeleteFramebuffersOES sf_glad_glDeleteFramebuffersOES
GLAD_API_CALL PFNGLDELETERENDERBUFFERSOESPROC sf_glad_glDeleteRenderbuffersOES;
#define glDeleteRenderbuffersOES sf_glad_glDeleteRenderbuffersOES
GLAD_API_CALL PFNGLDELETESYNCAPPLEPROC sf_glad_glDeleteSyncAPPLE;
#define glDeleteSyncAPPLE sf_glad_glDeleteSyncAPPLE
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSOESPROC sf_glad_glDeleteVertexArraysOES;
#define glDeleteVertexArraysOES sf_glad_glDeleteVertexArraysOES
GLAD_API_CALL PFNGLDEPTHRANGEXPROC sf_glad_glDepthRangex;
#define glDepthRangex sf_glad_glDepthRangex
GLAD_API_CALL PFNGLDISABLEDRIVERCONTROLQCOMPROC sf_glad_glDisableDriverControlQCOM;
#define glDisableDriverControlQCOM sf_glad_glDisableDriverControlQCOM
GLAD_API_CALL PFNGLDISCARDFRAMEBUFFEREXTPROC sf_glad_glDiscardFramebufferEXT;
#define glDiscardFramebufferEXT sf_glad_glDiscardFramebufferEXT
GLAD_API_CALL PFNGLDRAWTEXFOESPROC sf_glad_glDrawTexfOES;
#define glDrawTexfOES sf_glad_glDrawTexfOES
GLAD_API_CALL PFNGLDRAWTEXFVOESPROC sf_glad_glDrawTexfvOES;
#define glDrawTexfvOES sf_glad_glDrawTexfvOES
GLAD_API_CALL PFNGLDRAWTEXIOESPROC sf_glad_glDrawTexiOES;
#define glDrawTexiOES sf_glad_glDrawTexiOES
GLAD_API_CALL PFNGLDRAWTEXIVOESPROC sf_glad_glDrawTexivOES;
#define glDrawTexivOES sf_glad_glDrawTexivOES
GLAD_API_CALL PFNGLDRAWTEXSOESPROC sf_glad_glDrawTexsOES;
#define glDrawTexsOES sf_glad_glDrawTexsOES
GLAD_API_CALL PFNGLDRAWTEXSVOESPROC sf_glad_glDrawTexsvOES;
#define glDrawTexsvOES sf_glad_glDrawTexsvOES
GLAD_API_CALL PFNGLDRAWTEXXOESPROC sf_glad_glDrawTexxOES;
#define glDrawTexxOES sf_glad_glDrawTexxOES
GLAD_API_CALL PFNGLDRAWTEXXVOESPROC sf_glad_glDrawTexxvOES;
#define glDrawTexxvOES sf_glad_glDrawTexxvOES
GLAD_API_CALL PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC sf_glad_glEGLImageTargetRenderbufferStorageOES;
#define glEGLImageTargetRenderbufferStorageOES sf_glad_glEGLImageTargetRenderbufferStorageOES
GLAD_API_CALL PFNGLEGLIMAGETARGETTEXTURE2DOESPROC sf_glad_glEGLImageTargetTexture2DOES;
#define glEGLImageTargetTexture2DOES sf_glad_glEGLImageTargetTexture2DOES
GLAD_API_CALL PFNGLENABLEDRIVERCONTROLQCOMPROC sf_glad_glEnableDriverControlQCOM;
#define glEnableDriverControlQCOM sf_glad_glEnableDriverControlQCOM
GLAD_API_CALL PFNGLENDTILINGQCOMPROC sf_glad_glEndTilingQCOM;
#define glEndTilingQCOM sf_glad_glEndTilingQCOM
GLAD_API_CALL PFNGLEXTGETBUFFERPOINTERVQCOMPROC sf_glad_glExtGetBufferPointervQCOM;
#define glExtGetBufferPointervQCOM sf_glad_glExtGetBufferPointervQCOM
GLAD_API_CALL PFNGLEXTGETBUFFERSQCOMPROC sf_glad_glExtGetBuffersQCOM;
#define glExtGetBuffersQCOM sf_glad_glExtGetBuffersQCOM
GLAD_API_CALL PFNGLEXTGETFRAMEBUFFERSQCOMPROC sf_glad_glExtGetFramebuffersQCOM;
#define glExtGetFramebuffersQCOM sf_glad_glExtGetFramebuffersQCOM
GLAD_API_CALL PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC sf_glad_glExtGetProgramBinarySourceQCOM;
#define glExtGetProgramBinarySourceQCOM sf_glad_glExtGetProgramBinarySourceQCOM
GLAD_API_CALL PFNGLEXTGETPROGRAMSQCOMPROC sf_glad_glExtGetProgramsQCOM;
#define glExtGetProgramsQCOM sf_glad_glExtGetProgramsQCOM
GLAD_API_CALL PFNGLEXTGETRENDERBUFFERSQCOMPROC sf_glad_glExtGetRenderbuffersQCOM;
#define glExtGetRenderbuffersQCOM sf_glad_glExtGetRenderbuffersQCOM
GLAD_API_CALL PFNGLEXTGETSHADERSQCOMPROC sf_glad_glExtGetShadersQCOM;
#define glExtGetShadersQCOM sf_glad_glExtGetShadersQCOM
GLAD_API_CALL PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC sf_glad_glExtGetTexLevelParameterivQCOM;
#define glExtGetTexLevelParameterivQCOM sf_glad_glExtGetTexLevelParameterivQCOM
GLAD_API_CALL PFNGLEXTGETTEXSUBIMAGEQCOMPROC sf_glad_glExtGetTexSubImageQCOM;
#define glExtGetTexSubImageQCOM sf_glad_glExtGetTexSubImageQCOM
GLAD_API_CALL PFNGLEXTGETTEXTURESQCOMPROC sf_glad_glExtGetTexturesQCOM;
#define glExtGetTexturesQCOM sf_glad_glExtGetTexturesQCOM
GLAD_API_CALL PFNGLEXTISPROGRAMBINARYQCOMPROC sf_glad_glExtIsProgramBinaryQCOM;
#define glExtIsProgramBinaryQCOM sf_glad_glExtIsProgramBinaryQCOM
GLAD_API_CALL PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC sf_glad_glExtTexObjectStateOverrideiQCOM;
#define glExtTexObjectStateOverrideiQCOM sf_glad_glExtTexObjectStateOverrideiQCOM
GLAD_API_CALL PFNGLFENCESYNCAPPLEPROC sf_glad_glFenceSyncAPPLE;
#define glFenceSyncAPPLE sf_glad_glFenceSyncAPPLE
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC sf_glad_glFlushMappedBufferRangeEXT;
#define glFlushMappedBufferRangeEXT sf_glad_glFlushMappedBufferRangeEXT
GLAD_API_CALL PFNGLFOGXPROC sf_glad_glFogx;
#define glFogx sf_glad_glFogx
GLAD_API_CALL PFNGLFOGXVPROC sf_glad_glFogxv;
#define glFogxv sf_glad_glFogxv
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFEROESPROC sf_glad_glFramebufferRenderbufferOES;
#define glFramebufferRenderbufferOES sf_glad_glFramebufferRenderbufferOES
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC sf_glad_glFramebufferTexture2DMultisampleEXT;
#define glFramebufferTexture2DMultisampleEXT sf_glad_glFramebufferTexture2DMultisampleEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC sf_glad_glFramebufferTexture2DMultisampleIMG;
#define glFramebufferTexture2DMultisampleIMG sf_glad_glFramebufferTexture2DMultisampleIMG
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DOESPROC sf_glad_glFramebufferTexture2DOES;
#define glFramebufferTexture2DOES sf_glad_glFramebufferTexture2DOES
GLAD_API_CALL PFNGLFRUSTUMFPROC sf_glad_glFrustumf;
#define glFrustumf sf_glad_glFrustumf
GLAD_API_CALL PFNGLFRUSTUMXPROC sf_glad_glFrustumx;
#define glFrustumx sf_glad_glFrustumx
GLAD_API_CALL PFNGLGENFRAMEBUFFERSOESPROC sf_glad_glGenFramebuffersOES;
#define glGenFramebuffersOES sf_glad_glGenFramebuffersOES
GLAD_API_CALL PFNGLGENRENDERBUFFERSOESPROC sf_glad_glGenRenderbuffersOES;
#define glGenRenderbuffersOES sf_glad_glGenRenderbuffersOES
GLAD_API_CALL PFNGLGENVERTEXARRAYSOESPROC sf_glad_glGenVertexArraysOES;
#define glGenVertexArraysOES sf_glad_glGenVertexArraysOES
GLAD_API_CALL PFNGLGENERATEMIPMAPOESPROC sf_glad_glGenerateMipmapOES;
#define glGenerateMipmapOES sf_glad_glGenerateMipmapOES
GLAD_API_CALL PFNGLGETBUFFERPOINTERVOESPROC sf_glad_glGetBufferPointervOES;
#define glGetBufferPointervOES sf_glad_glGetBufferPointervOES
GLAD_API_CALL PFNGLGETCLIPPLANEFPROC sf_glad_glGetClipPlanef;
#define glGetClipPlanef sf_glad_glGetClipPlanef
GLAD_API_CALL PFNGLGETCLIPPLANEXPROC sf_glad_glGetClipPlanex;
#define glGetClipPlanex sf_glad_glGetClipPlanex
GLAD_API_CALL PFNGLGETDRIVERCONTROLSTRINGQCOMPROC sf_glad_glGetDriverControlStringQCOM;
#define glGetDriverControlStringQCOM sf_glad_glGetDriverControlStringQCOM
GLAD_API_CALL PFNGLGETDRIVERCONTROLSQCOMPROC sf_glad_glGetDriverControlsQCOM;
#define glGetDriverControlsQCOM sf_glad_glGetDriverControlsQCOM
GLAD_API_CALL PFNGLGETFIXEDVPROC sf_glad_glGetFixedv;
#define glGetFixedv sf_glad_glGetFixedv
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC sf_glad_glGetFramebufferAttachmentParameterivOES;
#define glGetFramebufferAttachmentParameterivOES sf_glad_glGetFramebufferAttachmentParameterivOES
GLAD_API_CALL PFNGLGETGRAPHICSRESETSTATUSEXTPROC sf_glad_glGetGraphicsResetStatusEXT;
#define glGetGraphicsResetStatusEXT sf_glad_glGetGraphicsResetStatusEXT
GLAD_API_CALL PFNGLGETINTEGER64VAPPLEPROC sf_glad_glGetInteger64vAPPLE;
#define glGetInteger64vAPPLE sf_glad_glGetInteger64vAPPLE
GLAD_API_CALL PFNGLGETLIGHTXVPROC sf_glad_glGetLightxv;
#define glGetLightxv sf_glad_glGetLightxv
GLAD_API_CALL PFNGLGETLIGHTXVOESPROC sf_glad_glGetLightxvOES;
#define glGetLightxvOES sf_glad_glGetLightxvOES
GLAD_API_CALL PFNGLGETMATERIALXVPROC sf_glad_glGetMaterialxv;
#define glGetMaterialxv sf_glad_glGetMaterialxv
GLAD_API_CALL PFNGLGETMATERIALXVOESPROC sf_glad_glGetMaterialxvOES;
#define glGetMaterialxvOES sf_glad_glGetMaterialxvOES
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVOESPROC sf_glad_glGetRenderbufferParameterivOES;
#define glGetRenderbufferParameterivOES sf_glad_glGetRenderbufferParameterivOES
GLAD_API_CALL PFNGLGETSYNCIVAPPLEPROC sf_glad_glGetSyncivAPPLE;
#define glGetSyncivAPPLE sf_glad_glGetSyncivAPPLE
GLAD_API_CALL PFNGLGETTEXENVXVPROC sf_glad_glGetTexEnvxv;
#define glGetTexEnvxv sf_glad_glGetTexEnvxv
GLAD_API_CALL PFNGLGETTEXGENFVOESPROC sf_glad_glGetTexGenfvOES;
#define glGetTexGenfvOES sf_glad_glGetTexGenfvOES
GLAD_API_CALL PFNGLGETTEXGENIVOESPROC sf_glad_glGetTexGenivOES;
#define glGetTexGenivOES sf_glad_glGetTexGenivOES
GLAD_API_CALL PFNGLGETTEXPARAMETERXVPROC sf_glad_glGetTexParameterxv;
#define glGetTexParameterxv sf_glad_glGetTexParameterxv
GLAD_API_CALL PFNGLGETNUNIFORMFVEXTPROC sf_glad_glGetnUniformfvEXT;
#define glGetnUniformfvEXT sf_glad_glGetnUniformfvEXT
GLAD_API_CALL PFNGLGETNUNIFORMIVEXTPROC sf_glad_glGetnUniformivEXT;
#define glGetnUniformivEXT sf_glad_glGetnUniformivEXT
GLAD_API_CALL PFNGLISFRAMEBUFFEROESPROC sf_glad_glIsFramebufferOES;
#define glIsFramebufferOES sf_glad_glIsFramebufferOES
GLAD_API_CALL PFNGLISRENDERBUFFEROESPROC sf_glad_glIsRenderbufferOES;
#define glIsRenderbufferOES sf_glad_glIsRenderbufferOES
GLAD_API_CALL PFNGLISSYNCAPPLEPROC sf_glad_glIsSyncAPPLE;
#define glIsSyncAPPLE sf_glad_glIsSyncAPPLE
GLAD_API_CALL PFNGLISVERTEXARRAYOESPROC sf_glad_glIsVertexArrayOES;
#define glIsVertexArrayOES sf_glad_glIsVertexArrayOES
GLAD_API_CALL PFNGLLIGHTMODELXPROC sf_glad_glLightModelx;
#define glLightModelx sf_glad_glLightModelx
GLAD_API_CALL PFNGLLIGHTMODELXVPROC sf_glad_glLightModelxv;
#define glLightModelxv sf_glad_glLightModelxv
GLAD_API_CALL PFNGLLIGHTXPROC sf_glad_glLightx;
#define glLightx sf_glad_glLightx
GLAD_API_CALL PFNGLLIGHTXVPROC sf_glad_glLightxv;
#define glLightxv sf_glad_glLightxv
GLAD_API_CALL PFNGLLINEWIDTHXPROC sf_glad_glLineWidthx;
#define glLineWidthx sf_glad_glLineWidthx
GLAD_API_CALL PFNGLLOADMATRIXXPROC sf_glad_glLoadMatrixx;
#define glLoadMatrixx sf_glad_glLoadMatrixx
GLAD_API_CALL PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC sf_glad_glLoadPaletteFromModelViewMatrixOES;
#define glLoadPaletteFromModelViewMatrixOES sf_glad_glLoadPaletteFromModelViewMatrixOES
GLAD_API_CALL PFNGLMAPBUFFEROESPROC sf_glad_glMapBufferOES;
#define glMapBufferOES sf_glad_glMapBufferOES
GLAD_API_CALL PFNGLMAPBUFFERRANGEEXTPROC sf_glad_glMapBufferRangeEXT;
#define glMapBufferRangeEXT sf_glad_glMapBufferRangeEXT
GLAD_API_CALL PFNGLMATERIALXPROC sf_glad_glMaterialx;
#define glMaterialx sf_glad_glMaterialx
GLAD_API_CALL PFNGLMATERIALXVPROC sf_glad_glMaterialxv;
#define glMaterialxv sf_glad_glMaterialxv
GLAD_API_CALL PFNGLMATRIXINDEXPOINTEROESPROC sf_glad_glMatrixIndexPointerOES;
#define glMatrixIndexPointerOES sf_glad_glMatrixIndexPointerOES
GLAD_API_CALL PFNGLMULTMATRIXXPROC sf_glad_glMultMatrixx;
#define glMultMatrixx sf_glad_glMultMatrixx
GLAD_API_CALL PFNGLMULTITEXCOORD4XPROC sf_glad_glMultiTexCoord4x;
#define glMultiTexCoord4x sf_glad_glMultiTexCoord4x
GLAD_API_CALL PFNGLNORMAL3XPROC sf_glad_glNormal3x;
#define glNormal3x sf_glad_glNormal3x
GLAD_API_CALL PFNGLORTHOFPROC sf_glad_glOrthof;
#define glOrthof sf_glad_glOrthof
GLAD_API_CALL PFNGLORTHOXPROC sf_glad_glOrthox;
#define glOrthox sf_glad_glOrthox
GLAD_API_CALL PFNGLPOINTPARAMETERXPROC sf_glad_glPointParameterx;
#define glPointParameterx sf_glad_glPointParameterx
GLAD_API_CALL PFNGLPOINTPARAMETERXOESPROC sf_glad_glPointParameterxOES;
#define glPointParameterxOES sf_glad_glPointParameterxOES
GLAD_API_CALL PFNGLPOINTPARAMETERXVPROC sf_glad_glPointParameterxv;
#define glPointParameterxv sf_glad_glPointParameterxv
GLAD_API_CALL PFNGLPOINTSIZEPOINTEROESPROC sf_glad_glPointSizePointerOES;
#define glPointSizePointerOES sf_glad_glPointSizePointerOES
GLAD_API_CALL PFNGLPOINTSIZEXPROC sf_glad_glPointSizex;
#define glPointSizex sf_glad_glPointSizex
GLAD_API_CALL PFNGLPOLYGONOFFSETXPROC sf_glad_glPolygonOffsetx;
#define glPolygonOffsetx sf_glad_glPolygonOffsetx
GLAD_API_CALL PFNGLREADNPIXELSEXTPROC sf_glad_glReadnPixelsEXT;
#define glReadnPixelsEXT sf_glad_glReadnPixelsEXT
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC sf_glad_glRenderbufferStorageMultisampleAPPLE;
#define glRenderbufferStorageMultisampleAPPLE sf_glad_glRenderbufferStorageMultisampleAPPLE
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC sf_glad_glRenderbufferStorageMultisampleIMG;
#define glRenderbufferStorageMultisampleIMG sf_glad_glRenderbufferStorageMultisampleIMG
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEOESPROC sf_glad_glRenderbufferStorageOES;
#define glRenderbufferStorageOES sf_glad_glRenderbufferStorageOES
GLAD_API_CALL PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC sf_glad_glResolveMultisampleFramebufferAPPLE;
#define glResolveMultisampleFramebufferAPPLE sf_glad_glResolveMultisampleFramebufferAPPLE
GLAD_API_CALL PFNGLROTATEXPROC sf_glad_glRotatex;
#define glRotatex sf_glad_glRotatex
GLAD_API_CALL PFNGLSAMPLECOVERAGEXPROC sf_glad_glSampleCoveragex;
#define glSampleCoveragex sf_glad_glSampleCoveragex
GLAD_API_CALL PFNGLSAMPLECOVERAGEXOESPROC sf_glad_glSampleCoveragexOES;
#define glSampleCoveragexOES sf_glad_glSampleCoveragexOES
GLAD_API_CALL PFNGLSCALEXPROC sf_glad_glScalex;
#define glScalex sf_glad_glScalex
GLAD_API_CALL PFNGLSTARTTILINGQCOMPROC sf_glad_glStartTilingQCOM;
#define glStartTilingQCOM sf_glad_glStartTilingQCOM
GLAD_API_CALL PFNGLTEXENVXPROC sf_glad_glTexEnvx;
#define glTexEnvx sf_glad_glTexEnvx
GLAD_API_CALL PFNGLTEXENVXVPROC sf_glad_glTexEnvxv;
#define glTexEnvxv sf_glad_glTexEnvxv
GLAD_API_CALL PFNGLTEXGENFOESPROC sf_glad_glTexGenfOES;
#define glTexGenfOES sf_glad_glTexGenfOES
GLAD_API_CALL PFNGLTEXGENFVOESPROC sf_glad_glTexGenfvOES;
#define glTexGenfvOES sf_glad_glTexGenfvOES
GLAD_API_CALL PFNGLTEXGENIOESPROC sf_glad_glTexGeniOES;
#define glTexGeniOES sf_glad_glTexGeniOES
GLAD_API_CALL PFNGLTEXGENIVOESPROC sf_glad_glTexGenivOES;
#define glTexGenivOES sf_glad_glTexGenivOES
GLAD_API_CALL PFNGLTEXPARAMETERXPROC sf_glad_glTexParameterx;
#define glTexParameterx sf_glad_glTexParameterx
GLAD_API_CALL PFNGLTEXPARAMETERXVPROC sf_glad_glTexParameterxv;
#define glTexParameterxv sf_glad_glTexParameterxv
GLAD_API_CALL PFNGLTRANSLATEXPROC sf_glad_glTranslatex;
#define glTranslatex sf_glad_glTranslatex
GLAD_API_CALL PFNGLUNMAPBUFFEROESPROC sf_glad_glUnmapBufferOES;
#define glUnmapBufferOES sf_glad_glUnmapBufferOES
GLAD_API_CALL PFNGLWAITSYNCAPPLEPROC sf_glad_glWaitSyncAPPLE;
#define glWaitSyncAPPLE sf_glad_glWaitSyncAPPLE
GLAD_API_CALL PFNGLWEIGHTPOINTEROESPROC sf_glad_glWeightPointerOES;
#define glWeightPointerOES sf_glad_glWeightPointerOES





#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef SF_GLAD_GL_IMPLEMENTATION
/**
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */

#ifdef __cplusplus
extern "C" {
#endif



int SF_GLAD_GL_VERSION_1_0 = 0;
int SF_GLAD_GL_VERSION_1_1 = 0;
int SF_GLAD_GL_VERSION_1_2 = 0;
int SF_GLAD_GL_VERSION_1_3 = 0;
int SF_GLAD_GL_VERSION_1_4 = 0;
int SF_GLAD_GL_VERSION_1_5 = 0;
int SF_GLAD_GL_VERSION_2_0 = 0;
int SF_GLAD_GL_VERSION_2_1 = 0;
int SF_GLAD_GL_VERSION_3_0 = 0;
int SF_GLAD_GL_VERSION_3_1 = 0;
int SF_GLAD_GL_VERSION_3_2 = 0;
int SF_GLAD_GL_VERSION_3_3 = 0;
int SF_GLAD_GL_VERSION_4_0 = 0;
int SF_GLAD_GL_VERSION_4_1 = 0;
int SF_GLAD_GL_VERSION_4_2 = 0;
int SF_GLAD_GL_VERSION_4_3 = 0;
int SF_GLAD_GL_VERSION_4_4 = 0;
int SF_GLAD_GL_VERSION_4_5 = 0;
int SF_GLAD_GL_VERSION_4_6 = 0;
int SF_GLAD_GL_VERSION_ES_CM_1_0 = 0;
int SF_GLAD_GL_3DFX_multisample = 0;
int SF_GLAD_GL_3DFX_tbuffer = 0;
int SF_GLAD_GL_3DFX_texture_compression_FXT1 = 0;
int SF_GLAD_GL_AMD_blend_minmax_factor = 0;
int SF_GLAD_GL_AMD_conservative_depth = 0;
int SF_GLAD_GL_AMD_debug_output = 0;
int SF_GLAD_GL_AMD_depth_clamp_separate = 0;
int SF_GLAD_GL_AMD_draw_buffers_blend = 0;
int SF_GLAD_GL_AMD_framebuffer_multisample_advanced = 0;
int SF_GLAD_GL_AMD_framebuffer_sample_positions = 0;
int SF_GLAD_GL_AMD_gcn_shader = 0;
int SF_GLAD_GL_AMD_gpu_shader_half_float = 0;
int SF_GLAD_GL_AMD_gpu_shader_int16 = 0;
int SF_GLAD_GL_AMD_gpu_shader_int64 = 0;
int SF_GLAD_GL_AMD_interleaved_elements = 0;
int SF_GLAD_GL_AMD_multi_draw_indirect = 0;
int SF_GLAD_GL_AMD_name_gen_delete = 0;
int SF_GLAD_GL_AMD_occlusion_query_event = 0;
int SF_GLAD_GL_AMD_performance_monitor = 0;
int SF_GLAD_GL_AMD_pinned_memory = 0;
int SF_GLAD_GL_AMD_query_buffer_object = 0;
int SF_GLAD_GL_AMD_sample_positions = 0;
int SF_GLAD_GL_AMD_seamless_cubemap_per_texture = 0;
int SF_GLAD_GL_AMD_shader_atomic_counter_ops = 0;
int SF_GLAD_GL_AMD_shader_ballot = 0;
int SF_GLAD_GL_AMD_shader_explicit_vertex_parameter = 0;
int SF_GLAD_GL_AMD_shader_gpu_shader_half_float_fetch = 0;
int SF_GLAD_GL_AMD_shader_image_load_store_lod = 0;
int SF_GLAD_GL_AMD_shader_stencil_export = 0;
int SF_GLAD_GL_AMD_shader_trinary_minmax = 0;
int SF_GLAD_GL_AMD_sparse_texture = 0;
int SF_GLAD_GL_AMD_stencil_operation_extended = 0;
int SF_GLAD_GL_AMD_texture_gather_bias_lod = 0;
int SF_GLAD_GL_AMD_texture_texture4 = 0;
int SF_GLAD_GL_AMD_transform_feedback3_lines_triangles = 0;
int SF_GLAD_GL_AMD_transform_feedback4 = 0;
int SF_GLAD_GL_AMD_vertex_shader_layer = 0;
int SF_GLAD_GL_AMD_vertex_shader_tessellator = 0;
int SF_GLAD_GL_AMD_vertex_shader_viewport_index = 0;
int SF_GLAD_GL_APPLE_aux_depth_stencil = 0;
int SF_GLAD_GL_APPLE_client_storage = 0;
int SF_GLAD_GL_APPLE_element_array = 0;
int SF_GLAD_GL_APPLE_fence = 0;
int SF_GLAD_GL_APPLE_float_pixels = 0;
int SF_GLAD_GL_APPLE_flush_buffer_range = 0;
int SF_GLAD_GL_APPLE_object_purgeable = 0;
int SF_GLAD_GL_APPLE_rgb_422 = 0;
int SF_GLAD_GL_APPLE_row_bytes = 0;
int SF_GLAD_GL_APPLE_specular_vector = 0;
int SF_GLAD_GL_APPLE_texture_range = 0;
int SF_GLAD_GL_APPLE_transform_hint = 0;
int SF_GLAD_GL_APPLE_vertex_array_object = 0;
int SF_GLAD_GL_APPLE_vertex_array_range = 0;
int SF_GLAD_GL_APPLE_vertex_program_evaluators = 0;
int SF_GLAD_GL_APPLE_ycbcr_422 = 0;
int SF_GLAD_GL_ARB_ES2_compatibility = 0;
int SF_GLAD_GL_ARB_ES3_1_compatibility = 0;
int SF_GLAD_GL_ARB_ES3_2_compatibility = 0;
int SF_GLAD_GL_ARB_ES3_compatibility = 0;
int SF_GLAD_GL_ARB_arrays_of_arrays = 0;
int SF_GLAD_GL_ARB_base_instance = 0;
int SF_GLAD_GL_ARB_bindless_texture = 0;
int SF_GLAD_GL_ARB_blend_func_extended = 0;
int SF_GLAD_GL_ARB_buffer_storage = 0;
int SF_GLAD_GL_ARB_cl_event = 0;
int SF_GLAD_GL_ARB_clear_buffer_object = 0;
int SF_GLAD_GL_ARB_clear_texture = 0;
int SF_GLAD_GL_ARB_clip_control = 0;
int SF_GLAD_GL_ARB_color_buffer_float = 0;
int SF_GLAD_GL_ARB_compatibility = 0;
int SF_GLAD_GL_ARB_compressed_texture_pixel_storage = 0;
int SF_GLAD_GL_ARB_compute_shader = 0;
int SF_GLAD_GL_ARB_compute_variable_group_size = 0;
int SF_GLAD_GL_ARB_conditional_render_inverted = 0;
int SF_GLAD_GL_ARB_conservative_depth = 0;
int SF_GLAD_GL_ARB_copy_buffer = 0;
int SF_GLAD_GL_ARB_copy_image = 0;
int SF_GLAD_GL_ARB_cull_distance = 0;
int SF_GLAD_GL_ARB_debug_output = 0;
int SF_GLAD_GL_ARB_depth_buffer_float = 0;
int SF_GLAD_GL_ARB_depth_clamp = 0;
int SF_GLAD_GL_ARB_depth_texture = 0;
int SF_GLAD_GL_ARB_derivative_control = 0;
int SF_GLAD_GL_ARB_direct_state_access = 0;
int SF_GLAD_GL_ARB_draw_buffers = 0;
int SF_GLAD_GL_ARB_draw_buffers_blend = 0;
int SF_GLAD_GL_ARB_draw_elements_base_vertex = 0;
int SF_GLAD_GL_ARB_draw_indirect = 0;
int SF_GLAD_GL_ARB_draw_instanced = 0;
int SF_GLAD_GL_ARB_enhanced_layouts = 0;
int SF_GLAD_GL_ARB_explicit_attrib_location = 0;
int SF_GLAD_GL_ARB_explicit_uniform_location = 0;
int SF_GLAD_GL_ARB_fragment_coord_conventions = 0;
int SF_GLAD_GL_ARB_fragment_layer_viewport = 0;
int SF_GLAD_GL_ARB_fragment_program = 0;
int SF_GLAD_GL_ARB_fragment_program_shadow = 0;
int SF_GLAD_GL_ARB_fragment_shader = 0;
int SF_GLAD_GL_ARB_fragment_shader_interlock = 0;
int SF_GLAD_GL_ARB_framebuffer_no_attachments = 0;
int SF_GLAD_GL_ARB_framebuffer_object = 0;
int SF_GLAD_GL_ARB_framebuffer_sRGB = 0;
int SF_GLAD_GL_ARB_geometry_shader4 = 0;
int SF_GLAD_GL_ARB_get_program_binary = 0;
int SF_GLAD_GL_ARB_get_texture_sub_image = 0;
int SF_GLAD_GL_ARB_gl_spirv = 0;
int SF_GLAD_GL_ARB_gpu_shader5 = 0;
int SF_GLAD_GL_ARB_gpu_shader_fp64 = 0;
int SF_GLAD_GL_ARB_gpu_shader_int64 = 0;
int SF_GLAD_GL_ARB_half_float_pixel = 0;
int SF_GLAD_GL_ARB_half_float_vertex = 0;
int SF_GLAD_GL_ARB_imaging = 0;
int SF_GLAD_GL_ARB_indirect_parameters = 0;
int SF_GLAD_GL_ARB_instanced_arrays = 0;
int SF_GLAD_GL_ARB_internalformat_query = 0;
int SF_GLAD_GL_ARB_internalformat_query2 = 0;
int SF_GLAD_GL_ARB_invalidate_subdata = 0;
int SF_GLAD_GL_ARB_map_buffer_alignment = 0;
int SF_GLAD_GL_ARB_map_buffer_range = 0;
int SF_GLAD_GL_ARB_matrix_palette = 0;
int SF_GLAD_GL_ARB_multi_bind = 0;
int SF_GLAD_GL_ARB_multi_draw_indirect = 0;
int SF_GLAD_GL_ARB_multisample = 0;
int SF_GLAD_GL_ARB_multitexture = 0;
int SF_GLAD_GL_ARB_occlusion_query = 0;
int SF_GLAD_GL_ARB_occlusion_query2 = 0;
int SF_GLAD_GL_ARB_parallel_shader_compile = 0;
int SF_GLAD_GL_ARB_pipeline_statistics_query = 0;
int SF_GLAD_GL_ARB_pixel_buffer_object = 0;
int SF_GLAD_GL_ARB_point_parameters = 0;
int SF_GLAD_GL_ARB_point_sprite = 0;
int SF_GLAD_GL_ARB_polygon_offset_clamp = 0;
int SF_GLAD_GL_ARB_post_depth_coverage = 0;
int SF_GLAD_GL_ARB_program_interface_query = 0;
int SF_GLAD_GL_ARB_provoking_vertex = 0;
int SF_GLAD_GL_ARB_query_buffer_object = 0;
int SF_GLAD_GL_ARB_robust_buffer_access_behavior = 0;
int SF_GLAD_GL_ARB_robustness = 0;
int SF_GLAD_GL_ARB_robustness_isolation = 0;
int SF_GLAD_GL_ARB_sample_locations = 0;
int SF_GLAD_GL_ARB_sample_shading = 0;
int SF_GLAD_GL_ARB_sampler_objects = 0;
int SF_GLAD_GL_ARB_seamless_cube_map = 0;
int SF_GLAD_GL_ARB_seamless_cubemap_per_texture = 0;
int SF_GLAD_GL_ARB_separate_shader_objects = 0;
int SF_GLAD_GL_ARB_shader_atomic_counter_ops = 0;
int SF_GLAD_GL_ARB_shader_atomic_counters = 0;
int SF_GLAD_GL_ARB_shader_ballot = 0;
int SF_GLAD_GL_ARB_shader_bit_encoding = 0;
int SF_GLAD_GL_ARB_shader_clock = 0;
int SF_GLAD_GL_ARB_shader_draw_parameters = 0;
int SF_GLAD_GL_ARB_shader_group_vote = 0;
int SF_GLAD_GL_ARB_shader_image_load_store = 0;
int SF_GLAD_GL_ARB_shader_image_size = 0;
int SF_GLAD_GL_ARB_shader_objects = 0;
int SF_GLAD_GL_ARB_shader_precision = 0;
int SF_GLAD_GL_ARB_shader_stencil_export = 0;
int SF_GLAD_GL_ARB_shader_storage_buffer_object = 0;
int SF_GLAD_GL_ARB_shader_subroutine = 0;
int SF_GLAD_GL_ARB_shader_texture_image_samples = 0;
int SF_GLAD_GL_ARB_shader_texture_lod = 0;
int SF_GLAD_GL_ARB_shader_viewport_layer_array = 0;
int SF_GLAD_GL_ARB_shading_language_100 = 0;
int SF_GLAD_GL_ARB_shading_language_420pack = 0;
int SF_GLAD_GL_ARB_shading_language_include = 0;
int SF_GLAD_GL_ARB_shading_language_packing = 0;
int SF_GLAD_GL_ARB_shadow = 0;
int SF_GLAD_GL_ARB_shadow_ambient = 0;
int SF_GLAD_GL_ARB_sparse_buffer = 0;
int SF_GLAD_GL_ARB_sparse_texture = 0;
int SF_GLAD_GL_ARB_sparse_texture2 = 0;
int SF_GLAD_GL_ARB_sparse_texture_clamp = 0;
int SF_GLAD_GL_ARB_spirv_extensions = 0;
int SF_GLAD_GL_ARB_stencil_texturing = 0;
int SF_GLAD_GL_ARB_sync = 0;
int SF_GLAD_GL_ARB_tessellation_shader = 0;
int SF_GLAD_GL_ARB_texture_barrier = 0;
int SF_GLAD_GL_ARB_texture_border_clamp = 0;
int SF_GLAD_GL_ARB_texture_buffer_object = 0;
int SF_GLAD_GL_ARB_texture_buffer_object_rgb32 = 0;
int SF_GLAD_GL_ARB_texture_buffer_range = 0;
int SF_GLAD_GL_ARB_texture_compression = 0;
int SF_GLAD_GL_ARB_texture_compression_bptc = 0;
int SF_GLAD_GL_ARB_texture_compression_rgtc = 0;
int SF_GLAD_GL_ARB_texture_cube_map = 0;
int SF_GLAD_GL_ARB_texture_cube_map_array = 0;
int SF_GLAD_GL_ARB_texture_env_add = 0;
int SF_GLAD_GL_ARB_texture_env_combine = 0;
int SF_GLAD_GL_ARB_texture_env_crossbar = 0;
int SF_GLAD_GL_ARB_texture_env_dot3 = 0;
int SF_GLAD_GL_ARB_texture_filter_anisotropic = 0;
int SF_GLAD_GL_ARB_texture_filter_minmax = 0;
int SF_GLAD_GL_ARB_texture_float = 0;
int SF_GLAD_GL_ARB_texture_gather = 0;
int SF_GLAD_GL_ARB_texture_mirror_clamp_to_edge = 0;
int SF_GLAD_GL_ARB_texture_mirrored_repeat = 0;
int SF_GLAD_GL_ARB_texture_multisample = 0;
int SF_GLAD_GL_ARB_texture_non_power_of_two = 0;
int SF_GLAD_GL_ARB_texture_query_levels = 0;
int SF_GLAD_GL_ARB_texture_query_lod = 0;
int SF_GLAD_GL_ARB_texture_rectangle = 0;
int SF_GLAD_GL_ARB_texture_rg = 0;
int SF_GLAD_GL_ARB_texture_rgb10_a2ui = 0;
int SF_GLAD_GL_ARB_texture_stencil8 = 0;
int SF_GLAD_GL_ARB_texture_storage = 0;
int SF_GLAD_GL_ARB_texture_storage_multisample = 0;
int SF_GLAD_GL_ARB_texture_swizzle = 0;
int SF_GLAD_GL_ARB_texture_view = 0;
int SF_GLAD_GL_ARB_timer_query = 0;
int SF_GLAD_GL_ARB_transform_feedback2 = 0;
int SF_GLAD_GL_ARB_transform_feedback3 = 0;
int SF_GLAD_GL_ARB_transform_feedback_instanced = 0;
int SF_GLAD_GL_ARB_transform_feedback_overflow_query = 0;
int SF_GLAD_GL_ARB_transpose_matrix = 0;
int SF_GLAD_GL_ARB_uniform_buffer_object = 0;
int SF_GLAD_GL_ARB_vertex_array_bgra = 0;
int SF_GLAD_GL_ARB_vertex_array_object = 0;
int SF_GLAD_GL_ARB_vertex_attrib_64bit = 0;
int SF_GLAD_GL_ARB_vertex_attrib_binding = 0;
int SF_GLAD_GL_ARB_vertex_blend = 0;
int SF_GLAD_GL_ARB_vertex_buffer_object = 0;
int SF_GLAD_GL_ARB_vertex_program = 0;
int SF_GLAD_GL_ARB_vertex_shader = 0;
int SF_GLAD_GL_ARB_vertex_type_10f_11f_11f_rev = 0;
int SF_GLAD_GL_ARB_vertex_type_2_10_10_10_rev = 0;
int SF_GLAD_GL_ARB_viewport_array = 0;
int SF_GLAD_GL_ARB_window_pos = 0;
int SF_GLAD_GL_ATI_draw_buffers = 0;
int SF_GLAD_GL_ATI_element_array = 0;
int SF_GLAD_GL_ATI_envmap_bumpmap = 0;
int SF_GLAD_GL_ATI_fragment_shader = 0;
int SF_GLAD_GL_ATI_map_object_buffer = 0;
int SF_GLAD_GL_ATI_meminfo = 0;
int SF_GLAD_GL_ATI_pixel_format_float = 0;
int SF_GLAD_GL_ATI_pn_triangles = 0;
int SF_GLAD_GL_ATI_separate_stencil = 0;
int SF_GLAD_GL_ATI_text_fragment_shader = 0;
int SF_GLAD_GL_ATI_texture_env_combine3 = 0;
int SF_GLAD_GL_ATI_texture_float = 0;
int SF_GLAD_GL_ATI_texture_mirror_once = 0;
int SF_GLAD_GL_ATI_vertex_array_object = 0;
int SF_GLAD_GL_ATI_vertex_attrib_array_object = 0;
int SF_GLAD_GL_ATI_vertex_streams = 0;
int SF_GLAD_GL_EXT_422_pixels = 0;
int SF_GLAD_GL_EXT_EGL_image_storage = 0;
int SF_GLAD_GL_EXT_EGL_sync = 0;
int SF_GLAD_GL_EXT_abgr = 0;
int SF_GLAD_GL_EXT_bgra = 0;
int SF_GLAD_GL_EXT_bindable_uniform = 0;
int SF_GLAD_GL_EXT_blend_color = 0;
int SF_GLAD_GL_EXT_blend_equation_separate = 0;
int SF_GLAD_GL_EXT_blend_func_separate = 0;
int SF_GLAD_GL_EXT_blend_logic_op = 0;
int SF_GLAD_GL_EXT_blend_minmax = 0;
int SF_GLAD_GL_EXT_blend_subtract = 0;
int SF_GLAD_GL_EXT_clip_volume_hint = 0;
int SF_GLAD_GL_EXT_cmyka = 0;
int SF_GLAD_GL_EXT_color_subtable = 0;
int SF_GLAD_GL_EXT_compiled_vertex_array = 0;
int SF_GLAD_GL_EXT_convolution = 0;
int SF_GLAD_GL_EXT_coordinate_frame = 0;
int SF_GLAD_GL_EXT_copy_texture = 0;
int SF_GLAD_GL_EXT_cull_vertex = 0;
int SF_GLAD_GL_EXT_debug_label = 0;
int SF_GLAD_GL_EXT_debug_marker = 0;
int SF_GLAD_GL_EXT_depth_bounds_test = 0;
int SF_GLAD_GL_EXT_direct_state_access = 0;
int SF_GLAD_GL_EXT_draw_buffers2 = 0;
int SF_GLAD_GL_EXT_draw_instanced = 0;
int SF_GLAD_GL_EXT_draw_range_elements = 0;
int SF_GLAD_GL_EXT_external_buffer = 0;
int SF_GLAD_GL_EXT_fog_coord = 0;
int SF_GLAD_GL_EXT_framebuffer_blit = 0;
int SF_GLAD_GL_EXT_framebuffer_blit_layers = 0;
int SF_GLAD_GL_EXT_framebuffer_multisample = 0;
int SF_GLAD_GL_EXT_framebuffer_multisample_blit_scaled = 0;
int SF_GLAD_GL_EXT_framebuffer_object = 0;
int SF_GLAD_GL_EXT_framebuffer_sRGB = 0;
int SF_GLAD_GL_EXT_geometry_shader4 = 0;
int SF_GLAD_GL_EXT_gpu_program_parameters = 0;
int SF_GLAD_GL_EXT_gpu_shader4 = 0;
int SF_GLAD_GL_EXT_histogram = 0;
int SF_GLAD_GL_EXT_index_array_formats = 0;
int SF_GLAD_GL_EXT_index_func = 0;
int SF_GLAD_GL_EXT_index_material = 0;
int SF_GLAD_GL_EXT_index_texture = 0;
int SF_GLAD_GL_EXT_light_texture = 0;
int SF_GLAD_GL_EXT_memory_object = 0;
int SF_GLAD_GL_EXT_memory_object_fd = 0;
int SF_GLAD_GL_EXT_memory_object_win32 = 0;
int SF_GLAD_GL_EXT_misc_attribute = 0;
int SF_GLAD_GL_EXT_multi_draw_arrays = 0;
int SF_GLAD_GL_EXT_multisample = 0;
int SF_GLAD_GL_EXT_multiview_tessellation_geometry_shader = 0;
int SF_GLAD_GL_EXT_multiview_texture_multisample = 0;
int SF_GLAD_GL_EXT_multiview_timer_query = 0;
int SF_GLAD_GL_EXT_packed_depth_stencil = 0;
int SF_GLAD_GL_EXT_packed_float = 0;
int SF_GLAD_GL_EXT_packed_pixels = 0;
int SF_GLAD_GL_EXT_paletted_texture = 0;
int SF_GLAD_GL_EXT_pixel_buffer_object = 0;
int SF_GLAD_GL_EXT_pixel_transform = 0;
int SF_GLAD_GL_EXT_pixel_transform_color_table = 0;
int SF_GLAD_GL_EXT_point_parameters = 0;
int SF_GLAD_GL_EXT_polygon_offset = 0;
int SF_GLAD_GL_EXT_polygon_offset_clamp = 0;
int SF_GLAD_GL_EXT_post_depth_coverage = 0;
int SF_GLAD_GL_EXT_provoking_vertex = 0;
int SF_GLAD_GL_EXT_raster_multisample = 0;
int SF_GLAD_GL_EXT_rescale_normal = 0;
int SF_GLAD_GL_EXT_secondary_color = 0;
int SF_GLAD_GL_EXT_semaphore = 0;
int SF_GLAD_GL_EXT_semaphore_fd = 0;
int SF_GLAD_GL_EXT_semaphore_win32 = 0;
int SF_GLAD_GL_EXT_separate_shader_objects = 0;
int SF_GLAD_GL_EXT_separate_specular_color = 0;
int SF_GLAD_GL_EXT_shader_framebuffer_fetch = 0;
int SF_GLAD_GL_EXT_shader_framebuffer_fetch_non_coherent = 0;
int SF_GLAD_GL_EXT_shader_image_load_formatted = 0;
int SF_GLAD_GL_EXT_shader_image_load_store = 0;
int SF_GLAD_GL_EXT_shader_integer_mix = 0;
int SF_GLAD_GL_EXT_shader_samples_identical = 0;
int SF_GLAD_GL_EXT_shadow_funcs = 0;
int SF_GLAD_GL_EXT_shared_texture_palette = 0;
int SF_GLAD_GL_EXT_sparse_texture2 = 0;
int SF_GLAD_GL_EXT_stencil_clear_tag = 0;
int SF_GLAD_GL_EXT_stencil_two_side = 0;
int SF_GLAD_GL_EXT_stencil_wrap = 0;
int SF_GLAD_GL_EXT_subtexture = 0;
int SF_GLAD_GL_EXT_texture = 0;
int SF_GLAD_GL_EXT_texture3D = 0;
int SF_GLAD_GL_EXT_texture_array = 0;
int SF_GLAD_GL_EXT_texture_buffer_object = 0;
int SF_GLAD_GL_EXT_texture_compression_latc = 0;
int SF_GLAD_GL_EXT_texture_compression_rgtc = 0;
int SF_GLAD_GL_EXT_texture_compression_s3tc = 0;
int SF_GLAD_GL_EXT_texture_cube_map = 0;
int SF_GLAD_GL_EXT_texture_env_add = 0;
int SF_GLAD_GL_EXT_texture_env_combine = 0;
int SF_GLAD_GL_EXT_texture_env_dot3 = 0;
int SF_GLAD_GL_EXT_texture_filter_anisotropic = 0;
int SF_GLAD_GL_EXT_texture_filter_minmax = 0;
int SF_GLAD_GL_EXT_texture_integer = 0;
int SF_GLAD_GL_EXT_texture_lod_bias = 0;
int SF_GLAD_GL_EXT_texture_mirror_clamp = 0;
int SF_GLAD_GL_EXT_texture_object = 0;
int SF_GLAD_GL_EXT_texture_perturb_normal = 0;
int SF_GLAD_GL_EXT_texture_sRGB = 0;
int SF_GLAD_GL_EXT_texture_sRGB_R8 = 0;
int SF_GLAD_GL_EXT_texture_sRGB_RG8 = 0;
int SF_GLAD_GL_EXT_texture_sRGB_decode = 0;
int SF_GLAD_GL_EXT_texture_shadow_lod = 0;
int SF_GLAD_GL_EXT_texture_shared_exponent = 0;
int SF_GLAD_GL_EXT_texture_snorm = 0;
int SF_GLAD_GL_EXT_texture_storage = 0;
int SF_GLAD_GL_EXT_texture_swizzle = 0;
int SF_GLAD_GL_EXT_timer_query = 0;
int SF_GLAD_GL_EXT_transform_feedback = 0;
int SF_GLAD_GL_EXT_vertex_array = 0;
int SF_GLAD_GL_EXT_vertex_array_bgra = 0;
int SF_GLAD_GL_EXT_vertex_attrib_64bit = 0;
int SF_GLAD_GL_EXT_vertex_shader = 0;
int SF_GLAD_GL_EXT_vertex_weighting = 0;
int SF_GLAD_GL_EXT_win32_keyed_mutex = 0;
int SF_GLAD_GL_EXT_window_rectangles = 0;
int SF_GLAD_GL_EXT_x11_sync_object = 0;
int SF_GLAD_GL_GREMEDY_frame_terminator = 0;
int SF_GLAD_GL_GREMEDY_string_marker = 0;
int SF_GLAD_GL_HP_convolution_border_modes = 0;
int SF_GLAD_GL_HP_image_transform = 0;
int SF_GLAD_GL_HP_occlusion_test = 0;
int SF_GLAD_GL_HP_texture_lighting = 0;
int SF_GLAD_GL_IBM_cull_vertex = 0;
int SF_GLAD_GL_IBM_multimode_draw_arrays = 0;
int SF_GLAD_GL_IBM_rasterpos_clip = 0;
int SF_GLAD_GL_IBM_static_data = 0;
int SF_GLAD_GL_IBM_texture_mirrored_repeat = 0;
int SF_GLAD_GL_IBM_vertex_array_lists = 0;
int SF_GLAD_GL_INGR_blend_func_separate = 0;
int SF_GLAD_GL_INGR_color_clamp = 0;
int SF_GLAD_GL_INGR_interlace_read = 0;
int SF_GLAD_GL_INTEL_blackhole_render = 0;
int SF_GLAD_GL_INTEL_conservative_rasterization = 0;
int SF_GLAD_GL_INTEL_fragment_shader_ordering = 0;
int SF_GLAD_GL_INTEL_framebuffer_CMAA = 0;
int SF_GLAD_GL_INTEL_map_texture = 0;
int SF_GLAD_GL_INTEL_parallel_arrays = 0;
int SF_GLAD_GL_INTEL_performance_query = 0;
int SF_GLAD_GL_KHR_blend_equation_advanced = 0;
int SF_GLAD_GL_KHR_blend_equation_advanced_coherent = 0;
int SF_GLAD_GL_KHR_context_flush_control = 0;
int SF_GLAD_GL_KHR_debug = 0;
int SF_GLAD_GL_KHR_no_error = 0;
int SF_GLAD_GL_KHR_parallel_shader_compile = 0;
int SF_GLAD_GL_KHR_robust_buffer_access_behavior = 0;
int SF_GLAD_GL_KHR_robustness = 0;
int SF_GLAD_GL_KHR_shader_subgroup = 0;
int SF_GLAD_GL_KHR_texture_compression_astc_hdr = 0;
int SF_GLAD_GL_KHR_texture_compression_astc_ldr = 0;
int SF_GLAD_GL_KHR_texture_compression_astc_sliced_3d = 0;
int SF_GLAD_GL_MESAX_texture_stack = 0;
int SF_GLAD_GL_MESA_framebuffer_flip_x = 0;
int SF_GLAD_GL_MESA_framebuffer_flip_y = 0;
int SF_GLAD_GL_MESA_framebuffer_swap_xy = 0;
int SF_GLAD_GL_MESA_pack_invert = 0;
int SF_GLAD_GL_MESA_program_binary_formats = 0;
int SF_GLAD_GL_MESA_resize_buffers = 0;
int SF_GLAD_GL_MESA_shader_integer_functions = 0;
int SF_GLAD_GL_MESA_texture_const_bandwidth = 0;
int SF_GLAD_GL_MESA_tile_raster_order = 0;
int SF_GLAD_GL_MESA_window_pos = 0;
int SF_GLAD_GL_MESA_ycbcr_texture = 0;
int SF_GLAD_GL_NVX_blend_equation_advanced_multi_draw_buffers = 0;
int SF_GLAD_GL_NVX_conditional_render = 0;
int SF_GLAD_GL_NVX_gpu_memory_info = 0;
int SF_GLAD_GL_NVX_gpu_multicast2 = 0;
int SF_GLAD_GL_NVX_linked_gpu_multicast = 0;
int SF_GLAD_GL_NVX_progress_fence = 0;
int SF_GLAD_GL_NV_alpha_to_coverage_dither_control = 0;
int SF_GLAD_GL_NV_bindless_multi_draw_indirect = 0;
int SF_GLAD_GL_NV_bindless_multi_draw_indirect_count = 0;
int SF_GLAD_GL_NV_bindless_texture = 0;
int SF_GLAD_GL_NV_blend_equation_advanced = 0;
int SF_GLAD_GL_NV_blend_equation_advanced_coherent = 0;
int SF_GLAD_GL_NV_blend_minmax_factor = 0;
int SF_GLAD_GL_NV_blend_square = 0;
int SF_GLAD_GL_NV_clip_space_w_scaling = 0;
int SF_GLAD_GL_NV_command_list = 0;
int SF_GLAD_GL_NV_compute_program5 = 0;
int SF_GLAD_GL_NV_compute_shader_derivatives = 0;
int SF_GLAD_GL_NV_conditional_render = 0;
int SF_GLAD_GL_NV_conservative_raster = 0;
int SF_GLAD_GL_NV_conservative_raster_dilate = 0;
int SF_GLAD_GL_NV_conservative_raster_pre_snap = 0;
int SF_GLAD_GL_NV_conservative_raster_pre_snap_triangles = 0;
int SF_GLAD_GL_NV_conservative_raster_underestimation = 0;
int SF_GLAD_GL_NV_copy_depth_to_color = 0;
int SF_GLAD_GL_NV_copy_image = 0;
int SF_GLAD_GL_NV_deep_texture3D = 0;
int SF_GLAD_GL_NV_depth_buffer_float = 0;
int SF_GLAD_GL_NV_depth_clamp = 0;
int SF_GLAD_GL_NV_draw_texture = 0;
int SF_GLAD_GL_NV_draw_vulkan_image = 0;
int SF_GLAD_GL_NV_evaluators = 0;
int SF_GLAD_GL_NV_explicit_multisample = 0;
int SF_GLAD_GL_NV_fence = 0;
int SF_GLAD_GL_NV_fill_rectangle = 0;
int SF_GLAD_GL_NV_float_buffer = 0;
int SF_GLAD_GL_NV_fog_distance = 0;
int SF_GLAD_GL_NV_fragment_coverage_to_color = 0;
int SF_GLAD_GL_NV_fragment_program = 0;
int SF_GLAD_GL_NV_fragment_program2 = 0;
int SF_GLAD_GL_NV_fragment_program4 = 0;
int SF_GLAD_GL_NV_fragment_program_option = 0;
int SF_GLAD_GL_NV_fragment_shader_barycentric = 0;
int SF_GLAD_GL_NV_fragment_shader_interlock = 0;
int SF_GLAD_GL_NV_framebuffer_mixed_samples = 0;
int SF_GLAD_GL_NV_framebuffer_multisample_coverage = 0;
int SF_GLAD_GL_NV_geometry_program4 = 0;
int SF_GLAD_GL_NV_geometry_shader4 = 0;
int SF_GLAD_GL_NV_geometry_shader_passthrough = 0;
int SF_GLAD_GL_NV_gpu_multicast = 0;
int SF_GLAD_GL_NV_gpu_program4 = 0;
int SF_GLAD_GL_NV_gpu_program5 = 0;
int SF_GLAD_GL_NV_gpu_program5_mem_extended = 0;
int SF_GLAD_GL_NV_gpu_shader5 = 0;
int SF_GLAD_GL_NV_half_float = 0;
int SF_GLAD_GL_NV_internalformat_sample_query = 0;
int SF_GLAD_GL_NV_light_max_exponent = 0;
int SF_GLAD_GL_NV_memory_attachment = 0;
int SF_GLAD_GL_NV_memory_object_sparse = 0;
int SF_GLAD_GL_NV_mesh_shader = 0;
int SF_GLAD_GL_NV_multisample_coverage = 0;
int SF_GLAD_GL_NV_multisample_filter_hint = 0;
int SF_GLAD_GL_NV_occlusion_query = 0;
int SF_GLAD_GL_NV_packed_depth_stencil = 0;
int SF_GLAD_GL_NV_parameter_buffer_object = 0;
int SF_GLAD_GL_NV_parameter_buffer_object2 = 0;
int SF_GLAD_GL_NV_path_rendering = 0;
int SF_GLAD_GL_NV_path_rendering_shared_edge = 0;
int SF_GLAD_GL_NV_pixel_data_range = 0;
int SF_GLAD_GL_NV_point_sprite = 0;
int SF_GLAD_GL_NV_present_video = 0;
int SF_GLAD_GL_NV_primitive_restart = 0;
int SF_GLAD_GL_NV_primitive_shading_rate = 0;
int SF_GLAD_GL_NV_query_resource = 0;
int SF_GLAD_GL_NV_query_resource_tag = 0;
int SF_GLAD_GL_NV_register_combiners = 0;
int SF_GLAD_GL_NV_register_combiners2 = 0;
int SF_GLAD_GL_NV_representative_fragment_test = 0;
int SF_GLAD_GL_NV_robustness_video_memory_purge = 0;
int SF_GLAD_GL_NV_sample_locations = 0;
int SF_GLAD_GL_NV_sample_mask_override_coverage = 0;
int SF_GLAD_GL_NV_scissor_exclusive = 0;
int SF_GLAD_GL_NV_shader_atomic_counters = 0;
int SF_GLAD_GL_NV_shader_atomic_float = 0;
int SF_GLAD_GL_NV_shader_atomic_float64 = 0;
int SF_GLAD_GL_NV_shader_atomic_fp16_vector = 0;
int SF_GLAD_GL_NV_shader_atomic_int64 = 0;
int SF_GLAD_GL_NV_shader_buffer_load = 0;
int SF_GLAD_GL_NV_shader_buffer_store = 0;
int SF_GLAD_GL_NV_shader_storage_buffer_object = 0;
int SF_GLAD_GL_NV_shader_subgroup_partitioned = 0;
int SF_GLAD_GL_NV_shader_texture_footprint = 0;
int SF_GLAD_GL_NV_shader_thread_group = 0;
int SF_GLAD_GL_NV_shader_thread_shuffle = 0;
int SF_GLAD_GL_NV_shading_rate_image = 0;
int SF_GLAD_GL_NV_stereo_view_rendering = 0;
int SF_GLAD_GL_NV_tessellation_program5 = 0;
int SF_GLAD_GL_NV_texgen_emboss = 0;
int SF_GLAD_GL_NV_texgen_reflection = 0;
int SF_GLAD_GL_NV_texture_barrier = 0;
int SF_GLAD_GL_NV_texture_compression_vtc = 0;
int SF_GLAD_GL_NV_texture_env_combine4 = 0;
int SF_GLAD_GL_NV_texture_expand_normal = 0;
int SF_GLAD_GL_NV_texture_multisample = 0;
int SF_GLAD_GL_NV_texture_rectangle = 0;
int SF_GLAD_GL_NV_texture_rectangle_compressed = 0;
int SF_GLAD_GL_NV_texture_shader = 0;
int SF_GLAD_GL_NV_texture_shader2 = 0;
int SF_GLAD_GL_NV_texture_shader3 = 0;
int SF_GLAD_GL_NV_timeline_semaphore = 0;
int SF_GLAD_GL_NV_transform_feedback = 0;
int SF_GLAD_GL_NV_transform_feedback2 = 0;
int SF_GLAD_GL_NV_uniform_buffer_std430_layout = 0;
int SF_GLAD_GL_NV_uniform_buffer_unified_memory = 0;
int SF_GLAD_GL_NV_vdpau_interop = 0;
int SF_GLAD_GL_NV_vdpau_interop2 = 0;
int SF_GLAD_GL_NV_vertex_array_range = 0;
int SF_GLAD_GL_NV_vertex_array_range2 = 0;
int SF_GLAD_GL_NV_vertex_attrib_integer_64bit = 0;
int SF_GLAD_GL_NV_vertex_buffer_unified_memory = 0;
int SF_GLAD_GL_NV_vertex_program = 0;
int SF_GLAD_GL_NV_vertex_program1_1 = 0;
int SF_GLAD_GL_NV_vertex_program2 = 0;
int SF_GLAD_GL_NV_vertex_program2_option = 0;
int SF_GLAD_GL_NV_vertex_program3 = 0;
int SF_GLAD_GL_NV_vertex_program4 = 0;
int SF_GLAD_GL_NV_video_capture = 0;
int SF_GLAD_GL_NV_viewport_array2 = 0;
int SF_GLAD_GL_NV_viewport_swizzle = 0;
int SF_GLAD_GL_OES_byte_coordinates = 0;
int SF_GLAD_GL_OES_compressed_paletted_texture = 0;
int SF_GLAD_GL_OES_fixed_point = 0;
int SF_GLAD_GL_OES_query_matrix = 0;
int SF_GLAD_GL_OES_read_format = 0;
int SF_GLAD_GL_OES_single_precision = 0;
int SF_GLAD_GL_OML_interlace = 0;
int SF_GLAD_GL_OML_resample = 0;
int SF_GLAD_GL_OML_subsample = 0;
int SF_GLAD_GL_OVR_multiview = 0;
int SF_GLAD_GL_OVR_multiview2 = 0;
int SF_GLAD_GL_PGI_misc_hints = 0;
int SF_GLAD_GL_PGI_vertex_hints = 0;
int SF_GLAD_GL_REND_screen_coordinates = 0;
int SF_GLAD_GL_S3_s3tc = 0;
int SF_GLAD_GL_SGIS_detail_texture = 0;
int SF_GLAD_GL_SGIS_fog_function = 0;
int SF_GLAD_GL_SGIS_generate_mipmap = 0;
int SF_GLAD_GL_SGIS_multisample = 0;
int SF_GLAD_GL_SGIS_pixel_texture = 0;
int SF_GLAD_GL_SGIS_point_line_texgen = 0;
int SF_GLAD_GL_SGIS_point_parameters = 0;
int SF_GLAD_GL_SGIS_sharpen_texture = 0;
int SF_GLAD_GL_SGIS_texture4D = 0;
int SF_GLAD_GL_SGIS_texture_border_clamp = 0;
int SF_GLAD_GL_SGIS_texture_color_mask = 0;
int SF_GLAD_GL_SGIS_texture_edge_clamp = 0;
int SF_GLAD_GL_SGIS_texture_filter4 = 0;
int SF_GLAD_GL_SGIS_texture_lod = 0;
int SF_GLAD_GL_SGIS_texture_select = 0;
int SF_GLAD_GL_SGIX_async = 0;
int SF_GLAD_GL_SGIX_async_histogram = 0;
int SF_GLAD_GL_SGIX_async_pixel = 0;
int SF_GLAD_GL_SGIX_blend_alpha_minmax = 0;
int SF_GLAD_GL_SGIX_calligraphic_fragment = 0;
int SF_GLAD_GL_SGIX_clipmap = 0;
int SF_GLAD_GL_SGIX_convolution_accuracy = 0;
int SF_GLAD_GL_SGIX_depth_pass_instrument = 0;
int SF_GLAD_GL_SGIX_depth_texture = 0;
int SF_GLAD_GL_SGIX_flush_raster = 0;
int SF_GLAD_GL_SGIX_fog_offset = 0;
int SF_GLAD_GL_SGIX_fragment_lighting = 0;
int SF_GLAD_GL_SGIX_framezoom = 0;
int SF_GLAD_GL_SGIX_igloo_interface = 0;
int SF_GLAD_GL_SGIX_instruments = 0;
int SF_GLAD_GL_SGIX_interlace = 0;
int SF_GLAD_GL_SGIX_ir_instrument1 = 0;
int SF_GLAD_GL_SGIX_list_priority = 0;
int SF_GLAD_GL_SGIX_pixel_texture = 0;
int SF_GLAD_GL_SGIX_pixel_tiles = 0;
int SF_GLAD_GL_SGIX_polynomial_ffd = 0;
int SF_GLAD_GL_SGIX_reference_plane = 0;
int SF_GLAD_GL_SGIX_resample = 0;
int SF_GLAD_GL_SGIX_scalebias_hint = 0;
int SF_GLAD_GL_SGIX_shadow = 0;
int SF_GLAD_GL_SGIX_shadow_ambient = 0;
int SF_GLAD_GL_SGIX_sprite = 0;
int SF_GLAD_GL_SGIX_subsample = 0;
int SF_GLAD_GL_SGIX_tag_sample_buffer = 0;
int SF_GLAD_GL_SGIX_texture_add_env = 0;
int SF_GLAD_GL_SGIX_texture_coordinate_clamp = 0;
int SF_GLAD_GL_SGIX_texture_lod_bias = 0;
int SF_GLAD_GL_SGIX_texture_multi_buffer = 0;
int SF_GLAD_GL_SGIX_texture_scale_bias = 0;
int SF_GLAD_GL_SGIX_vertex_preclip = 0;
int SF_GLAD_GL_SGIX_ycrcb = 0;
int SF_GLAD_GL_SGIX_ycrcb_subsample = 0;
int SF_GLAD_GL_SGIX_ycrcba = 0;
int SF_GLAD_GL_SGI_color_matrix = 0;
int SF_GLAD_GL_SGI_color_table = 0;
int SF_GLAD_GL_SGI_texture_color_table = 0;
int SF_GLAD_GL_SUNX_constant_data = 0;
int SF_GLAD_GL_SUN_convolution_border_modes = 0;
int SF_GLAD_GL_SUN_global_alpha = 0;
int SF_GLAD_GL_SUN_mesh_array = 0;
int SF_GLAD_GL_SUN_slice_accum = 0;
int SF_GLAD_GL_SUN_triangle_list = 0;
int SF_GLAD_GL_SUN_vertex = 0;
int SF_GLAD_GL_WIN_phong_shading = 0;
int SF_GLAD_GL_WIN_specular_fog = 0;
int SF_GLAD_GL_AMD_compressed_3DC_texture = 0;
int SF_GLAD_GL_AMD_compressed_ATC_texture = 0;
int SF_GLAD_GL_APPLE_copy_texture_levels = 0;
int SF_GLAD_GL_APPLE_framebuffer_multisample = 0;
int SF_GLAD_GL_APPLE_sync = 0;
int SF_GLAD_GL_APPLE_texture_2D_limited_npot = 0;
int SF_GLAD_GL_APPLE_texture_format_BGRA8888 = 0;
int SF_GLAD_GL_APPLE_texture_max_level = 0;
int SF_GLAD_GL_ARM_rgba8 = 0;
int SF_GLAD_GL_EXT_discard_framebuffer = 0;
int SF_GLAD_GL_EXT_map_buffer_range = 0;
int SF_GLAD_GL_EXT_multisampled_render_to_texture = 0;
int SF_GLAD_GL_EXT_read_format_bgra = 0;
int SF_GLAD_GL_EXT_robustness = 0;
int SF_GLAD_GL_EXT_sRGB = 0;
int SF_GLAD_GL_EXT_texture_compression_dxt1 = 0;
int SF_GLAD_GL_EXT_texture_format_BGRA8888 = 0;
int SF_GLAD_GL_IMG_multisampled_render_to_texture = 0;
int SF_GLAD_GL_IMG_read_format = 0;
int SF_GLAD_GL_IMG_texture_compression_pvrtc = 0;
int SF_GLAD_GL_IMG_texture_env_enhanced_fixed_function = 0;
int SF_GLAD_GL_IMG_user_clip_plane = 0;
int SF_GLAD_GL_OES_EGL_image = 0;
int SF_GLAD_GL_OES_EGL_image_external = 0;
int SF_GLAD_GL_OES_blend_equation_separate = 0;
int SF_GLAD_GL_OES_blend_func_separate = 0;
int SF_GLAD_GL_OES_blend_subtract = 0;
int SF_GLAD_GL_OES_compressed_ETC1_RGB8_sub_texture = 0;
int SF_GLAD_GL_OES_compressed_ETC1_RGB8_texture = 0;
int SF_GLAD_GL_OES_depth24 = 0;
int SF_GLAD_GL_OES_depth32 = 0;
int SF_GLAD_GL_OES_draw_texture = 0;
int SF_GLAD_GL_OES_element_index_uint = 0;
int SF_GLAD_GL_OES_extended_matrix_palette = 0;
int SF_GLAD_GL_OES_fbo_render_mipmap = 0;
int SF_GLAD_GL_OES_framebuffer_object = 0;
int SF_GLAD_GL_OES_mapbuffer = 0;
int SF_GLAD_GL_OES_matrix_get = 0;
int SF_GLAD_GL_OES_matrix_palette = 0;
int SF_GLAD_GL_OES_packed_depth_stencil = 0;
int SF_GLAD_GL_OES_point_size_array = 0;
int SF_GLAD_GL_OES_point_sprite = 0;
int SF_GLAD_GL_OES_required_internalformat = 0;
int SF_GLAD_GL_OES_rgb8_rgba8 = 0;
int SF_GLAD_GL_OES_stencil1 = 0;
int SF_GLAD_GL_OES_stencil4 = 0;
int SF_GLAD_GL_OES_stencil8 = 0;
int SF_GLAD_GL_OES_stencil_wrap = 0;
int SF_GLAD_GL_OES_surfaceless_context = 0;
int SF_GLAD_GL_OES_texture_cube_map = 0;
int SF_GLAD_GL_OES_texture_env_crossbar = 0;
int SF_GLAD_GL_OES_texture_mirrored_repeat = 0;
int SF_GLAD_GL_OES_texture_npot = 0;
int SF_GLAD_GL_OES_vertex_array_object = 0;
int SF_GLAD_GL_QCOM_driver_control = 0;
int SF_GLAD_GL_QCOM_extended_get = 0;
int SF_GLAD_GL_QCOM_extended_get2 = 0;
int SF_GLAD_GL_QCOM_perfmon_global_mode = 0;
int SF_GLAD_GL_QCOM_tiled_rendering = 0;
int SF_GLAD_GL_QCOM_writeonly_rendering = 0;



PFNGLACCUMPROC sf_glad_glAccum = NULL;
PFNGLACCUMXOESPROC sf_glad_glAccumxOES = NULL;
PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC sf_glad_glAcquireKeyedMutexWin32EXT = NULL;
PFNGLACTIVEPROGRAMEXTPROC sf_glad_glActiveProgramEXT = NULL;
PFNGLACTIVESHADERPROGRAMPROC sf_glad_glActiveShaderProgram = NULL;
PFNGLACTIVESTENCILFACEEXTPROC sf_glad_glActiveStencilFaceEXT = NULL;
PFNGLACTIVETEXTUREPROC sf_glad_glActiveTexture = NULL;
PFNGLACTIVETEXTUREARBPROC sf_glad_glActiveTextureARB = NULL;
PFNGLACTIVEVARYINGNVPROC sf_glad_glActiveVaryingNV = NULL;
PFNGLALPHAFRAGMENTOP1ATIPROC sf_glad_glAlphaFragmentOp1ATI = NULL;
PFNGLALPHAFRAGMENTOP2ATIPROC sf_glad_glAlphaFragmentOp2ATI = NULL;
PFNGLALPHAFRAGMENTOP3ATIPROC sf_glad_glAlphaFragmentOp3ATI = NULL;
PFNGLALPHAFUNCPROC sf_glad_glAlphaFunc = NULL;
PFNGLALPHAFUNCXOESPROC sf_glad_glAlphaFuncxOES = NULL;
PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC sf_glad_glAlphaToCoverageDitherControlNV = NULL;
PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC sf_glad_glApplyFramebufferAttachmentCMAAINTEL = NULL;
PFNGLAPPLYTEXTUREEXTPROC sf_glad_glApplyTextureEXT = NULL;
PFNGLAREPROGRAMSRESIDENTNVPROC sf_glad_glAreProgramsResidentNV = NULL;
PFNGLARETEXTURESRESIDENTPROC sf_glad_glAreTexturesResident = NULL;
PFNGLARETEXTURESRESIDENTEXTPROC sf_glad_glAreTexturesResidentEXT = NULL;
PFNGLARRAYELEMENTPROC sf_glad_glArrayElement = NULL;
PFNGLARRAYELEMENTEXTPROC sf_glad_glArrayElementEXT = NULL;
PFNGLARRAYOBJECTATIPROC sf_glad_glArrayObjectATI = NULL;
PFNGLASYNCCOPYBUFFERSUBDATANVXPROC sf_glad_glAsyncCopyBufferSubDataNVX = NULL;
PFNGLASYNCCOPYIMAGESUBDATANVXPROC sf_glad_glAsyncCopyImageSubDataNVX = NULL;
PFNGLASYNCMARKERSGIXPROC sf_glad_glAsyncMarkerSGIX = NULL;
PFNGLATTACHOBJECTARBPROC sf_glad_glAttachObjectARB = NULL;
PFNGLATTACHSHADERPROC sf_glad_glAttachShader = NULL;
PFNGLBEGINPROC sf_glad_glBegin = NULL;
PFNGLBEGINCONDITIONALRENDERPROC sf_glad_glBeginConditionalRender = NULL;
PFNGLBEGINCONDITIONALRENDERNVPROC sf_glad_glBeginConditionalRenderNV = NULL;
PFNGLBEGINCONDITIONALRENDERNVXPROC sf_glad_glBeginConditionalRenderNVX = NULL;
PFNGLBEGINFRAGMENTSHADERATIPROC sf_glad_glBeginFragmentShaderATI = NULL;
PFNGLBEGINOCCLUSIONQUERYNVPROC sf_glad_glBeginOcclusionQueryNV = NULL;
PFNGLBEGINPERFMONITORAMDPROC sf_glad_glBeginPerfMonitorAMD = NULL;
PFNGLBEGINPERFQUERYINTELPROC sf_glad_glBeginPerfQueryINTEL = NULL;
PFNGLBEGINQUERYPROC sf_glad_glBeginQuery = NULL;
PFNGLBEGINQUERYARBPROC sf_glad_glBeginQueryARB = NULL;
PFNGLBEGINQUERYINDEXEDPROC sf_glad_glBeginQueryIndexed = NULL;
PFNGLBEGINTRANSFORMFEEDBACKPROC sf_glad_glBeginTransformFeedback = NULL;
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC sf_glad_glBeginTransformFeedbackEXT = NULL;
PFNGLBEGINTRANSFORMFEEDBACKNVPROC sf_glad_glBeginTransformFeedbackNV = NULL;
PFNGLBEGINVERTEXSHADEREXTPROC sf_glad_glBeginVertexShaderEXT = NULL;
PFNGLBEGINVIDEOCAPTURENVPROC sf_glad_glBeginVideoCaptureNV = NULL;
PFNGLBINDATTRIBLOCATIONPROC sf_glad_glBindAttribLocation = NULL;
PFNGLBINDATTRIBLOCATIONARBPROC sf_glad_glBindAttribLocationARB = NULL;
PFNGLBINDBUFFERPROC sf_glad_glBindBuffer = NULL;
PFNGLBINDBUFFERARBPROC sf_glad_glBindBufferARB = NULL;
PFNGLBINDBUFFERBASEPROC sf_glad_glBindBufferBase = NULL;
PFNGLBINDBUFFERBASEEXTPROC sf_glad_glBindBufferBaseEXT = NULL;
PFNGLBINDBUFFERBASENVPROC sf_glad_glBindBufferBaseNV = NULL;
PFNGLBINDBUFFEROFFSETEXTPROC sf_glad_glBindBufferOffsetEXT = NULL;
PFNGLBINDBUFFEROFFSETNVPROC sf_glad_glBindBufferOffsetNV = NULL;
PFNGLBINDBUFFERRANGEPROC sf_glad_glBindBufferRange = NULL;
PFNGLBINDBUFFERRANGEEXTPROC sf_glad_glBindBufferRangeEXT = NULL;
PFNGLBINDBUFFERRANGENVPROC sf_glad_glBindBufferRangeNV = NULL;
PFNGLBINDBUFFERSBASEPROC sf_glad_glBindBuffersBase = NULL;
PFNGLBINDBUFFERSRANGEPROC sf_glad_glBindBuffersRange = NULL;
PFNGLBINDFRAGDATALOCATIONPROC sf_glad_glBindFragDataLocation = NULL;
PFNGLBINDFRAGDATALOCATIONEXTPROC sf_glad_glBindFragDataLocationEXT = NULL;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC sf_glad_glBindFragDataLocationIndexed = NULL;
PFNGLBINDFRAGMENTSHADERATIPROC sf_glad_glBindFragmentShaderATI = NULL;
PFNGLBINDFRAMEBUFFERPROC sf_glad_glBindFramebuffer = NULL;
PFNGLBINDFRAMEBUFFEREXTPROC sf_glad_glBindFramebufferEXT = NULL;
PFNGLBINDIMAGETEXTUREPROC sf_glad_glBindImageTexture = NULL;
PFNGLBINDIMAGETEXTUREEXTPROC sf_glad_glBindImageTextureEXT = NULL;
PFNGLBINDIMAGETEXTURESPROC sf_glad_glBindImageTextures = NULL;
PFNGLBINDLIGHTPARAMETEREXTPROC sf_glad_glBindLightParameterEXT = NULL;
PFNGLBINDMATERIALPARAMETEREXTPROC sf_glad_glBindMaterialParameterEXT = NULL;
PFNGLBINDMULTITEXTUREEXTPROC sf_glad_glBindMultiTextureEXT = NULL;
PFNGLBINDPARAMETEREXTPROC sf_glad_glBindParameterEXT = NULL;
PFNGLBINDPROGRAMARBPROC sf_glad_glBindProgramARB = NULL;
PFNGLBINDPROGRAMNVPROC sf_glad_glBindProgramNV = NULL;
PFNGLBINDPROGRAMPIPELINEPROC sf_glad_glBindProgramPipeline = NULL;
PFNGLBINDRENDERBUFFERPROC sf_glad_glBindRenderbuffer = NULL;
PFNGLBINDRENDERBUFFEREXTPROC sf_glad_glBindRenderbufferEXT = NULL;
PFNGLBINDSAMPLERPROC sf_glad_glBindSampler = NULL;
PFNGLBINDSAMPLERSPROC sf_glad_glBindSamplers = NULL;
PFNGLBINDSHADINGRATEIMAGENVPROC sf_glad_glBindShadingRateImageNV = NULL;
PFNGLBINDTEXGENPARAMETEREXTPROC sf_glad_glBindTexGenParameterEXT = NULL;
PFNGLBINDTEXTUREPROC sf_glad_glBindTexture = NULL;
PFNGLBINDTEXTUREEXTPROC sf_glad_glBindTextureEXT = NULL;
PFNGLBINDTEXTUREUNITPROC sf_glad_glBindTextureUnit = NULL;
PFNGLBINDTEXTUREUNITPARAMETEREXTPROC sf_glad_glBindTextureUnitParameterEXT = NULL;
PFNGLBINDTEXTURESPROC sf_glad_glBindTextures = NULL;
PFNGLBINDTRANSFORMFEEDBACKPROC sf_glad_glBindTransformFeedback = NULL;
PFNGLBINDTRANSFORMFEEDBACKNVPROC sf_glad_glBindTransformFeedbackNV = NULL;
PFNGLBINDVERTEXARRAYPROC sf_glad_glBindVertexArray = NULL;
PFNGLBINDVERTEXARRAYAPPLEPROC sf_glad_glBindVertexArrayAPPLE = NULL;
PFNGLBINDVERTEXBUFFERPROC sf_glad_glBindVertexBuffer = NULL;
PFNGLBINDVERTEXBUFFERSPROC sf_glad_glBindVertexBuffers = NULL;
PFNGLBINDVERTEXSHADEREXTPROC sf_glad_glBindVertexShaderEXT = NULL;
PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC sf_glad_glBindVideoCaptureStreamBufferNV = NULL;
PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC sf_glad_glBindVideoCaptureStreamTextureNV = NULL;
PFNGLBINORMAL3BEXTPROC sf_glad_glBinormal3bEXT = NULL;
PFNGLBINORMAL3BVEXTPROC sf_glad_glBinormal3bvEXT = NULL;
PFNGLBINORMAL3DEXTPROC sf_glad_glBinormal3dEXT = NULL;
PFNGLBINORMAL3DVEXTPROC sf_glad_glBinormal3dvEXT = NULL;
PFNGLBINORMAL3FEXTPROC sf_glad_glBinormal3fEXT = NULL;
PFNGLBINORMAL3FVEXTPROC sf_glad_glBinormal3fvEXT = NULL;
PFNGLBINORMAL3IEXTPROC sf_glad_glBinormal3iEXT = NULL;
PFNGLBINORMAL3IVEXTPROC sf_glad_glBinormal3ivEXT = NULL;
PFNGLBINORMAL3SEXTPROC sf_glad_glBinormal3sEXT = NULL;
PFNGLBINORMAL3SVEXTPROC sf_glad_glBinormal3svEXT = NULL;
PFNGLBINORMALPOINTEREXTPROC sf_glad_glBinormalPointerEXT = NULL;
PFNGLBITMAPPROC sf_glad_glBitmap = NULL;
PFNGLBITMAPXOESPROC sf_glad_glBitmapxOES = NULL;
PFNGLBLENDBARRIERKHRPROC sf_glad_glBlendBarrierKHR = NULL;
PFNGLBLENDBARRIERNVPROC sf_glad_glBlendBarrierNV = NULL;
PFNGLBLENDCOLORPROC sf_glad_glBlendColor = NULL;
PFNGLBLENDCOLOREXTPROC sf_glad_glBlendColorEXT = NULL;
PFNGLBLENDCOLORXOESPROC sf_glad_glBlendColorxOES = NULL;
PFNGLBLENDEQUATIONPROC sf_glad_glBlendEquation = NULL;
PFNGLBLENDEQUATIONEXTPROC sf_glad_glBlendEquationEXT = NULL;
PFNGLBLENDEQUATIONINDEXEDAMDPROC sf_glad_glBlendEquationIndexedAMD = NULL;
PFNGLBLENDEQUATIONSEPARATEPROC sf_glad_glBlendEquationSeparate = NULL;
PFNGLBLENDEQUATIONSEPARATEEXTPROC sf_glad_glBlendEquationSeparateEXT = NULL;
PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC sf_glad_glBlendEquationSeparateIndexedAMD = NULL;
PFNGLBLENDEQUATIONSEPARATEIPROC sf_glad_glBlendEquationSeparatei = NULL;
PFNGLBLENDEQUATIONSEPARATEIARBPROC sf_glad_glBlendEquationSeparateiARB = NULL;
PFNGLBLENDEQUATIONIPROC sf_glad_glBlendEquationi = NULL;
PFNGLBLENDEQUATIONIARBPROC sf_glad_glBlendEquationiARB = NULL;
PFNGLBLENDFUNCPROC sf_glad_glBlendFunc = NULL;
PFNGLBLENDFUNCINDEXEDAMDPROC sf_glad_glBlendFuncIndexedAMD = NULL;
PFNGLBLENDFUNCSEPARATEPROC sf_glad_glBlendFuncSeparate = NULL;
PFNGLBLENDFUNCSEPARATEEXTPROC sf_glad_glBlendFuncSeparateEXT = NULL;
PFNGLBLENDFUNCSEPARATEINGRPROC sf_glad_glBlendFuncSeparateINGR = NULL;
PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC sf_glad_glBlendFuncSeparateIndexedAMD = NULL;
PFNGLBLENDFUNCSEPARATEIPROC sf_glad_glBlendFuncSeparatei = NULL;
PFNGLBLENDFUNCSEPARATEIARBPROC sf_glad_glBlendFuncSeparateiARB = NULL;
PFNGLBLENDFUNCIPROC sf_glad_glBlendFunci = NULL;
PFNGLBLENDFUNCIARBPROC sf_glad_glBlendFunciARB = NULL;
PFNGLBLENDPARAMETERINVPROC sf_glad_glBlendParameteriNV = NULL;
PFNGLBLITFRAMEBUFFERPROC sf_glad_glBlitFramebuffer = NULL;
PFNGLBLITFRAMEBUFFEREXTPROC sf_glad_glBlitFramebufferEXT = NULL;
PFNGLBLITFRAMEBUFFERLAYEREXTPROC sf_glad_glBlitFramebufferLayerEXT = NULL;
PFNGLBLITFRAMEBUFFERLAYERSEXTPROC sf_glad_glBlitFramebufferLayersEXT = NULL;
PFNGLBLITNAMEDFRAMEBUFFERPROC sf_glad_glBlitNamedFramebuffer = NULL;
PFNGLBUFFERADDRESSRANGENVPROC sf_glad_glBufferAddressRangeNV = NULL;
PFNGLBUFFERATTACHMEMORYNVPROC sf_glad_glBufferAttachMemoryNV = NULL;
PFNGLBUFFERDATAPROC sf_glad_glBufferData = NULL;
PFNGLBUFFERDATAARBPROC sf_glad_glBufferDataARB = NULL;
PFNGLBUFFERPAGECOMMITMENTARBPROC sf_glad_glBufferPageCommitmentARB = NULL;
PFNGLBUFFERPAGECOMMITMENTMEMNVPROC sf_glad_glBufferPageCommitmentMemNV = NULL;
PFNGLBUFFERPARAMETERIAPPLEPROC sf_glad_glBufferParameteriAPPLE = NULL;
PFNGLBUFFERSTORAGEPROC sf_glad_glBufferStorage = NULL;
PFNGLBUFFERSTORAGEEXTERNALEXTPROC sf_glad_glBufferStorageExternalEXT = NULL;
PFNGLBUFFERSTORAGEMEMEXTPROC sf_glad_glBufferStorageMemEXT = NULL;
PFNGLBUFFERSUBDATAPROC sf_glad_glBufferSubData = NULL;
PFNGLBUFFERSUBDATAARBPROC sf_glad_glBufferSubDataARB = NULL;
PFNGLCALLCOMMANDLISTNVPROC sf_glad_glCallCommandListNV = NULL;
PFNGLCALLLISTPROC sf_glad_glCallList = NULL;
PFNGLCALLLISTSPROC sf_glad_glCallLists = NULL;
PFNGLCHECKFRAMEBUFFERSTATUSPROC sf_glad_glCheckFramebufferStatus = NULL;
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC sf_glad_glCheckFramebufferStatusEXT = NULL;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC sf_glad_glCheckNamedFramebufferStatus = NULL;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC sf_glad_glCheckNamedFramebufferStatusEXT = NULL;
PFNGLCLAMPCOLORPROC sf_glad_glClampColor = NULL;
PFNGLCLAMPCOLORARBPROC sf_glad_glClampColorARB = NULL;
PFNGLCLEARPROC sf_glad_glClear = NULL;
PFNGLCLEARACCUMPROC sf_glad_glClearAccum = NULL;
PFNGLCLEARACCUMXOESPROC sf_glad_glClearAccumxOES = NULL;
PFNGLCLEARBUFFERDATAPROC sf_glad_glClearBufferData = NULL;
PFNGLCLEARBUFFERSUBDATAPROC sf_glad_glClearBufferSubData = NULL;
PFNGLCLEARBUFFERFIPROC sf_glad_glClearBufferfi = NULL;
PFNGLCLEARBUFFERFVPROC sf_glad_glClearBufferfv = NULL;
PFNGLCLEARBUFFERIVPROC sf_glad_glClearBufferiv = NULL;
PFNGLCLEARBUFFERUIVPROC sf_glad_glClearBufferuiv = NULL;
PFNGLCLEARCOLORPROC sf_glad_glClearColor = NULL;
PFNGLCLEARCOLORIIEXTPROC sf_glad_glClearColorIiEXT = NULL;
PFNGLCLEARCOLORIUIEXTPROC sf_glad_glClearColorIuiEXT = NULL;
PFNGLCLEARCOLORXOESPROC sf_glad_glClearColorxOES = NULL;
PFNGLCLEARDEPTHPROC sf_glad_glClearDepth = NULL;
PFNGLCLEARDEPTHDNVPROC sf_glad_glClearDepthdNV = NULL;
PFNGLCLEARDEPTHFPROC sf_glad_glClearDepthf = NULL;
PFNGLCLEARDEPTHFOESPROC sf_glad_glClearDepthfOES = NULL;
PFNGLCLEARDEPTHXOESPROC sf_glad_glClearDepthxOES = NULL;
PFNGLCLEARINDEXPROC sf_glad_glClearIndex = NULL;
PFNGLCLEARNAMEDBUFFERDATAPROC sf_glad_glClearNamedBufferData = NULL;
PFNGLCLEARNAMEDBUFFERDATAEXTPROC sf_glad_glClearNamedBufferDataEXT = NULL;
PFNGLCLEARNAMEDBUFFERSUBDATAPROC sf_glad_glClearNamedBufferSubData = NULL;
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC sf_glad_glClearNamedBufferSubDataEXT = NULL;
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC sf_glad_glClearNamedFramebufferfi = NULL;
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC sf_glad_glClearNamedFramebufferfv = NULL;
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC sf_glad_glClearNamedFramebufferiv = NULL;
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC sf_glad_glClearNamedFramebufferuiv = NULL;
PFNGLCLEARSTENCILPROC sf_glad_glClearStencil = NULL;
PFNGLCLEARTEXIMAGEPROC sf_glad_glClearTexImage = NULL;
PFNGLCLEARTEXSUBIMAGEPROC sf_glad_glClearTexSubImage = NULL;
PFNGLCLIENTACTIVETEXTUREPROC sf_glad_glClientActiveTexture = NULL;
PFNGLCLIENTACTIVETEXTUREARBPROC sf_glad_glClientActiveTextureARB = NULL;
PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC sf_glad_glClientActiveVertexStreamATI = NULL;
PFNGLCLIENTATTRIBDEFAULTEXTPROC sf_glad_glClientAttribDefaultEXT = NULL;
PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC sf_glad_glClientWaitSemaphoreui64NVX = NULL;
PFNGLCLIENTWAITSYNCPROC sf_glad_glClientWaitSync = NULL;
PFNGLCLIPCONTROLPROC sf_glad_glClipControl = NULL;
PFNGLCLIPPLANEPROC sf_glad_glClipPlane = NULL;
PFNGLCLIPPLANEFOESPROC sf_glad_glClipPlanefOES = NULL;
PFNGLCLIPPLANEXOESPROC sf_glad_glClipPlanexOES = NULL;
PFNGLCOLOR3BPROC sf_glad_glColor3b = NULL;
PFNGLCOLOR3BVPROC sf_glad_glColor3bv = NULL;
PFNGLCOLOR3DPROC sf_glad_glColor3d = NULL;
PFNGLCOLOR3DVPROC sf_glad_glColor3dv = NULL;
PFNGLCOLOR3FPROC sf_glad_glColor3f = NULL;
PFNGLCOLOR3FVERTEX3FSUNPROC sf_glad_glColor3fVertex3fSUN = NULL;
PFNGLCOLOR3FVERTEX3FVSUNPROC sf_glad_glColor3fVertex3fvSUN = NULL;
PFNGLCOLOR3FVPROC sf_glad_glColor3fv = NULL;
PFNGLCOLOR3HNVPROC sf_glad_glColor3hNV = NULL;
PFNGLCOLOR3HVNVPROC sf_glad_glColor3hvNV = NULL;
PFNGLCOLOR3IPROC sf_glad_glColor3i = NULL;
PFNGLCOLOR3IVPROC sf_glad_glColor3iv = NULL;
PFNGLCOLOR3SPROC sf_glad_glColor3s = NULL;
PFNGLCOLOR3SVPROC sf_glad_glColor3sv = NULL;
PFNGLCOLOR3UBPROC sf_glad_glColor3ub = NULL;
PFNGLCOLOR3UBVPROC sf_glad_glColor3ubv = NULL;
PFNGLCOLOR3UIPROC sf_glad_glColor3ui = NULL;
PFNGLCOLOR3UIVPROC sf_glad_glColor3uiv = NULL;
PFNGLCOLOR3USPROC sf_glad_glColor3us = NULL;
PFNGLCOLOR3USVPROC sf_glad_glColor3usv = NULL;
PFNGLCOLOR3XOESPROC sf_glad_glColor3xOES = NULL;
PFNGLCOLOR3XVOESPROC sf_glad_glColor3xvOES = NULL;
PFNGLCOLOR4BPROC sf_glad_glColor4b = NULL;
PFNGLCOLOR4BVPROC sf_glad_glColor4bv = NULL;
PFNGLCOLOR4DPROC sf_glad_glColor4d = NULL;
PFNGLCOLOR4DVPROC sf_glad_glColor4dv = NULL;
PFNGLCOLOR4FPROC sf_glad_glColor4f = NULL;
PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC sf_glad_glColor4fNormal3fVertex3fSUN = NULL;
PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC sf_glad_glColor4fNormal3fVertex3fvSUN = NULL;
PFNGLCOLOR4FVPROC sf_glad_glColor4fv = NULL;
PFNGLCOLOR4HNVPROC sf_glad_glColor4hNV = NULL;
PFNGLCOLOR4HVNVPROC sf_glad_glColor4hvNV = NULL;
PFNGLCOLOR4IPROC sf_glad_glColor4i = NULL;
PFNGLCOLOR4IVPROC sf_glad_glColor4iv = NULL;
PFNGLCOLOR4SPROC sf_glad_glColor4s = NULL;
PFNGLCOLOR4SVPROC sf_glad_glColor4sv = NULL;
PFNGLCOLOR4UBPROC sf_glad_glColor4ub = NULL;
PFNGLCOLOR4UBVERTEX2FSUNPROC sf_glad_glColor4ubVertex2fSUN = NULL;
PFNGLCOLOR4UBVERTEX2FVSUNPROC sf_glad_glColor4ubVertex2fvSUN = NULL;
PFNGLCOLOR4UBVERTEX3FSUNPROC sf_glad_glColor4ubVertex3fSUN = NULL;
PFNGLCOLOR4UBVERTEX3FVSUNPROC sf_glad_glColor4ubVertex3fvSUN = NULL;
PFNGLCOLOR4UBVPROC sf_glad_glColor4ubv = NULL;
PFNGLCOLOR4UIPROC sf_glad_glColor4ui = NULL;
PFNGLCOLOR4UIVPROC sf_glad_glColor4uiv = NULL;
PFNGLCOLOR4USPROC sf_glad_glColor4us = NULL;
PFNGLCOLOR4USVPROC sf_glad_glColor4usv = NULL;
PFNGLCOLOR4XOESPROC sf_glad_glColor4xOES = NULL;
PFNGLCOLOR4XVOESPROC sf_glad_glColor4xvOES = NULL;
PFNGLCOLORFORMATNVPROC sf_glad_glColorFormatNV = NULL;
PFNGLCOLORFRAGMENTOP1ATIPROC sf_glad_glColorFragmentOp1ATI = NULL;
PFNGLCOLORFRAGMENTOP2ATIPROC sf_glad_glColorFragmentOp2ATI = NULL;
PFNGLCOLORFRAGMENTOP3ATIPROC sf_glad_glColorFragmentOp3ATI = NULL;
PFNGLCOLORMASKPROC sf_glad_glColorMask = NULL;
PFNGLCOLORMASKINDEXEDEXTPROC sf_glad_glColorMaskIndexedEXT = NULL;
PFNGLCOLORMASKIPROC sf_glad_glColorMaski = NULL;
PFNGLCOLORMATERIALPROC sf_glad_glColorMaterial = NULL;
PFNGLCOLORP3UIPROC sf_glad_glColorP3ui = NULL;
PFNGLCOLORP3UIVPROC sf_glad_glColorP3uiv = NULL;
PFNGLCOLORP4UIPROC sf_glad_glColorP4ui = NULL;
PFNGLCOLORP4UIVPROC sf_glad_glColorP4uiv = NULL;
PFNGLCOLORPOINTERPROC sf_glad_glColorPointer = NULL;
PFNGLCOLORPOINTEREXTPROC sf_glad_glColorPointerEXT = NULL;
PFNGLCOLORPOINTERLISTIBMPROC sf_glad_glColorPointerListIBM = NULL;
PFNGLCOLORPOINTERVINTELPROC sf_glad_glColorPointervINTEL = NULL;
PFNGLCOLORSUBTABLEPROC sf_glad_glColorSubTable = NULL;
PFNGLCOLORSUBTABLEEXTPROC sf_glad_glColorSubTableEXT = NULL;
PFNGLCOLORTABLEPROC sf_glad_glColorTable = NULL;
PFNGLCOLORTABLEEXTPROC sf_glad_glColorTableEXT = NULL;
PFNGLCOLORTABLEPARAMETERFVPROC sf_glad_glColorTableParameterfv = NULL;
PFNGLCOLORTABLEPARAMETERFVSGIPROC sf_glad_glColorTableParameterfvSGI = NULL;
PFNGLCOLORTABLEPARAMETERIVPROC sf_glad_glColorTableParameteriv = NULL;
PFNGLCOLORTABLEPARAMETERIVSGIPROC sf_glad_glColorTableParameterivSGI = NULL;
PFNGLCOLORTABLESGIPROC sf_glad_glColorTableSGI = NULL;
PFNGLCOMBINERINPUTNVPROC sf_glad_glCombinerInputNV = NULL;
PFNGLCOMBINEROUTPUTNVPROC sf_glad_glCombinerOutputNV = NULL;
PFNGLCOMBINERPARAMETERFNVPROC sf_glad_glCombinerParameterfNV = NULL;
PFNGLCOMBINERPARAMETERFVNVPROC sf_glad_glCombinerParameterfvNV = NULL;
PFNGLCOMBINERPARAMETERINVPROC sf_glad_glCombinerParameteriNV = NULL;
PFNGLCOMBINERPARAMETERIVNVPROC sf_glad_glCombinerParameterivNV = NULL;
PFNGLCOMBINERSTAGEPARAMETERFVNVPROC sf_glad_glCombinerStageParameterfvNV = NULL;
PFNGLCOMMANDLISTSEGMENTSNVPROC sf_glad_glCommandListSegmentsNV = NULL;
PFNGLCOMPILECOMMANDLISTNVPROC sf_glad_glCompileCommandListNV = NULL;
PFNGLCOMPILESHADERPROC sf_glad_glCompileShader = NULL;
PFNGLCOMPILESHADERARBPROC sf_glad_glCompileShaderARB = NULL;
PFNGLCOMPILESHADERINCLUDEARBPROC sf_glad_glCompileShaderIncludeARB = NULL;
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC sf_glad_glCompressedMultiTexImage1DEXT = NULL;
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC sf_glad_glCompressedMultiTexImage2DEXT = NULL;
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC sf_glad_glCompressedMultiTexImage3DEXT = NULL;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC sf_glad_glCompressedMultiTexSubImage1DEXT = NULL;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC sf_glad_glCompressedMultiTexSubImage2DEXT = NULL;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC sf_glad_glCompressedMultiTexSubImage3DEXT = NULL;
PFNGLCOMPRESSEDTEXIMAGE1DPROC sf_glad_glCompressedTexImage1D = NULL;
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC sf_glad_glCompressedTexImage1DARB = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DPROC sf_glad_glCompressedTexImage2D = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC sf_glad_glCompressedTexImage2DARB = NULL;
PFNGLCOMPRESSEDTEXIMAGE3DPROC sf_glad_glCompressedTexImage3D = NULL;
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC sf_glad_glCompressedTexImage3DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC sf_glad_glCompressedTexSubImage1D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC sf_glad_glCompressedTexSubImage1DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC sf_glad_glCompressedTexSubImage2D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC sf_glad_glCompressedTexSubImage2DARB = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC sf_glad_glCompressedTexSubImage3D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC sf_glad_glCompressedTexSubImage3DARB = NULL;
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC sf_glad_glCompressedTextureImage1DEXT = NULL;
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC sf_glad_glCompressedTextureImage2DEXT = NULL;
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC sf_glad_glCompressedTextureImage3DEXT = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC sf_glad_glCompressedTextureSubImage1D = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC sf_glad_glCompressedTextureSubImage1DEXT = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC sf_glad_glCompressedTextureSubImage2D = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC sf_glad_glCompressedTextureSubImage2DEXT = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC sf_glad_glCompressedTextureSubImage3D = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC sf_glad_glCompressedTextureSubImage3DEXT = NULL;
PFNGLCONSERVATIVERASTERPARAMETERFNVPROC sf_glad_glConservativeRasterParameterfNV = NULL;
PFNGLCONSERVATIVERASTERPARAMETERINVPROC sf_glad_glConservativeRasterParameteriNV = NULL;
PFNGLCONVOLUTIONFILTER1DPROC sf_glad_glConvolutionFilter1D = NULL;
PFNGLCONVOLUTIONFILTER1DEXTPROC sf_glad_glConvolutionFilter1DEXT = NULL;
PFNGLCONVOLUTIONFILTER2DPROC sf_glad_glConvolutionFilter2D = NULL;
PFNGLCONVOLUTIONFILTER2DEXTPROC sf_glad_glConvolutionFilter2DEXT = NULL;
PFNGLCONVOLUTIONPARAMETERFPROC sf_glad_glConvolutionParameterf = NULL;
PFNGLCONVOLUTIONPARAMETERFEXTPROC sf_glad_glConvolutionParameterfEXT = NULL;
PFNGLCONVOLUTIONPARAMETERFVPROC sf_glad_glConvolutionParameterfv = NULL;
PFNGLCONVOLUTIONPARAMETERFVEXTPROC sf_glad_glConvolutionParameterfvEXT = NULL;
PFNGLCONVOLUTIONPARAMETERIPROC sf_glad_glConvolutionParameteri = NULL;
PFNGLCONVOLUTIONPARAMETERIEXTPROC sf_glad_glConvolutionParameteriEXT = NULL;
PFNGLCONVOLUTIONPARAMETERIVPROC sf_glad_glConvolutionParameteriv = NULL;
PFNGLCONVOLUTIONPARAMETERIVEXTPROC sf_glad_glConvolutionParameterivEXT = NULL;
PFNGLCONVOLUTIONPARAMETERXOESPROC sf_glad_glConvolutionParameterxOES = NULL;
PFNGLCONVOLUTIONPARAMETERXVOESPROC sf_glad_glConvolutionParameterxvOES = NULL;
PFNGLCOPYBUFFERSUBDATAPROC sf_glad_glCopyBufferSubData = NULL;
PFNGLCOPYCOLORSUBTABLEPROC sf_glad_glCopyColorSubTable = NULL;
PFNGLCOPYCOLORSUBTABLEEXTPROC sf_glad_glCopyColorSubTableEXT = NULL;
PFNGLCOPYCOLORTABLEPROC sf_glad_glCopyColorTable = NULL;
PFNGLCOPYCOLORTABLESGIPROC sf_glad_glCopyColorTableSGI = NULL;
PFNGLCOPYCONVOLUTIONFILTER1DPROC sf_glad_glCopyConvolutionFilter1D = NULL;
PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC sf_glad_glCopyConvolutionFilter1DEXT = NULL;
PFNGLCOPYCONVOLUTIONFILTER2DPROC sf_glad_glCopyConvolutionFilter2D = NULL;
PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC sf_glad_glCopyConvolutionFilter2DEXT = NULL;
PFNGLCOPYIMAGESUBDATAPROC sf_glad_glCopyImageSubData = NULL;
PFNGLCOPYIMAGESUBDATANVPROC sf_glad_glCopyImageSubDataNV = NULL;
PFNGLCOPYMULTITEXIMAGE1DEXTPROC sf_glad_glCopyMultiTexImage1DEXT = NULL;
PFNGLCOPYMULTITEXIMAGE2DEXTPROC sf_glad_glCopyMultiTexImage2DEXT = NULL;
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC sf_glad_glCopyMultiTexSubImage1DEXT = NULL;
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC sf_glad_glCopyMultiTexSubImage2DEXT = NULL;
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC sf_glad_glCopyMultiTexSubImage3DEXT = NULL;
PFNGLCOPYNAMEDBUFFERSUBDATAPROC sf_glad_glCopyNamedBufferSubData = NULL;
PFNGLCOPYPATHNVPROC sf_glad_glCopyPathNV = NULL;
PFNGLCOPYPIXELSPROC sf_glad_glCopyPixels = NULL;
PFNGLCOPYTEXIMAGE1DPROC sf_glad_glCopyTexImage1D = NULL;
PFNGLCOPYTEXIMAGE1DEXTPROC sf_glad_glCopyTexImage1DEXT = NULL;
PFNGLCOPYTEXIMAGE2DPROC sf_glad_glCopyTexImage2D = NULL;
PFNGLCOPYTEXIMAGE2DEXTPROC sf_glad_glCopyTexImage2DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE1DPROC sf_glad_glCopyTexSubImage1D = NULL;
PFNGLCOPYTEXSUBIMAGE1DEXTPROC sf_glad_glCopyTexSubImage1DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE2DPROC sf_glad_glCopyTexSubImage2D = NULL;
PFNGLCOPYTEXSUBIMAGE2DEXTPROC sf_glad_glCopyTexSubImage2DEXT = NULL;
PFNGLCOPYTEXSUBIMAGE3DPROC sf_glad_glCopyTexSubImage3D = NULL;
PFNGLCOPYTEXSUBIMAGE3DEXTPROC sf_glad_glCopyTexSubImage3DEXT = NULL;
PFNGLCOPYTEXTUREIMAGE1DEXTPROC sf_glad_glCopyTextureImage1DEXT = NULL;
PFNGLCOPYTEXTUREIMAGE2DEXTPROC sf_glad_glCopyTextureImage2DEXT = NULL;
PFNGLCOPYTEXTURESUBIMAGE1DPROC sf_glad_glCopyTextureSubImage1D = NULL;
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC sf_glad_glCopyTextureSubImage1DEXT = NULL;
PFNGLCOPYTEXTURESUBIMAGE2DPROC sf_glad_glCopyTextureSubImage2D = NULL;
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC sf_glad_glCopyTextureSubImage2DEXT = NULL;
PFNGLCOPYTEXTURESUBIMAGE3DPROC sf_glad_glCopyTextureSubImage3D = NULL;
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC sf_glad_glCopyTextureSubImage3DEXT = NULL;
PFNGLCOVERFILLPATHINSTANCEDNVPROC sf_glad_glCoverFillPathInstancedNV = NULL;
PFNGLCOVERFILLPATHNVPROC sf_glad_glCoverFillPathNV = NULL;
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC sf_glad_glCoverStrokePathInstancedNV = NULL;
PFNGLCOVERSTROKEPATHNVPROC sf_glad_glCoverStrokePathNV = NULL;
PFNGLCOVERAGEMODULATIONNVPROC sf_glad_glCoverageModulationNV = NULL;
PFNGLCOVERAGEMODULATIONTABLENVPROC sf_glad_glCoverageModulationTableNV = NULL;
PFNGLCREATEBUFFERSPROC sf_glad_glCreateBuffers = NULL;
PFNGLCREATECOMMANDLISTSNVPROC sf_glad_glCreateCommandListsNV = NULL;
PFNGLCREATEFRAMEBUFFERSPROC sf_glad_glCreateFramebuffers = NULL;
PFNGLCREATEMEMORYOBJECTSEXTPROC sf_glad_glCreateMemoryObjectsEXT = NULL;
PFNGLCREATEPERFQUERYINTELPROC sf_glad_glCreatePerfQueryINTEL = NULL;
PFNGLCREATEPROGRAMPROC sf_glad_glCreateProgram = NULL;
PFNGLCREATEPROGRAMOBJECTARBPROC sf_glad_glCreateProgramObjectARB = NULL;
PFNGLCREATEPROGRAMPIPELINESPROC sf_glad_glCreateProgramPipelines = NULL;
PFNGLCREATEPROGRESSFENCENVXPROC sf_glad_glCreateProgressFenceNVX = NULL;
PFNGLCREATEQUERIESPROC sf_glad_glCreateQueries = NULL;
PFNGLCREATERENDERBUFFERSPROC sf_glad_glCreateRenderbuffers = NULL;
PFNGLCREATESAMPLERSPROC sf_glad_glCreateSamplers = NULL;
PFNGLCREATESEMAPHORESNVPROC sf_glad_glCreateSemaphoresNV = NULL;
PFNGLCREATESHADERPROC sf_glad_glCreateShader = NULL;
PFNGLCREATESHADEROBJECTARBPROC sf_glad_glCreateShaderObjectARB = NULL;
PFNGLCREATESHADERPROGRAMEXTPROC sf_glad_glCreateShaderProgramEXT = NULL;
PFNGLCREATESHADERPROGRAMVPROC sf_glad_glCreateShaderProgramv = NULL;
PFNGLCREATESTATESNVPROC sf_glad_glCreateStatesNV = NULL;
PFNGLCREATESYNCFROMCLEVENTARBPROC sf_glad_glCreateSyncFromCLeventARB = NULL;
PFNGLCREATETEXTURESPROC sf_glad_glCreateTextures = NULL;
PFNGLCREATETRANSFORMFEEDBACKSPROC sf_glad_glCreateTransformFeedbacks = NULL;
PFNGLCREATEVERTEXARRAYSPROC sf_glad_glCreateVertexArrays = NULL;
PFNGLCULLFACEPROC sf_glad_glCullFace = NULL;
PFNGLCULLPARAMETERDVEXTPROC sf_glad_glCullParameterdvEXT = NULL;
PFNGLCULLPARAMETERFVEXTPROC sf_glad_glCullParameterfvEXT = NULL;
PFNGLCURRENTPALETTEMATRIXARBPROC sf_glad_glCurrentPaletteMatrixARB = NULL;
PFNGLDEBUGMESSAGECALLBACKPROC sf_glad_glDebugMessageCallback = NULL;
PFNGLDEBUGMESSAGECALLBACKAMDPROC sf_glad_glDebugMessageCallbackAMD = NULL;
PFNGLDEBUGMESSAGECALLBACKARBPROC sf_glad_glDebugMessageCallbackARB = NULL;
PFNGLDEBUGMESSAGECONTROLPROC sf_glad_glDebugMessageControl = NULL;
PFNGLDEBUGMESSAGECONTROLARBPROC sf_glad_glDebugMessageControlARB = NULL;
PFNGLDEBUGMESSAGEENABLEAMDPROC sf_glad_glDebugMessageEnableAMD = NULL;
PFNGLDEBUGMESSAGEINSERTPROC sf_glad_glDebugMessageInsert = NULL;
PFNGLDEBUGMESSAGEINSERTAMDPROC sf_glad_glDebugMessageInsertAMD = NULL;
PFNGLDEBUGMESSAGEINSERTARBPROC sf_glad_glDebugMessageInsertARB = NULL;
PFNGLDEFORMSGIXPROC sf_glad_glDeformSGIX = NULL;
PFNGLDEFORMATIONMAP3DSGIXPROC sf_glad_glDeformationMap3dSGIX = NULL;
PFNGLDEFORMATIONMAP3FSGIXPROC sf_glad_glDeformationMap3fSGIX = NULL;
PFNGLDELETEASYNCMARKERSSGIXPROC sf_glad_glDeleteAsyncMarkersSGIX = NULL;
PFNGLDELETEBUFFERSPROC sf_glad_glDeleteBuffers = NULL;
PFNGLDELETEBUFFERSARBPROC sf_glad_glDeleteBuffersARB = NULL;
PFNGLDELETECOMMANDLISTSNVPROC sf_glad_glDeleteCommandListsNV = NULL;
PFNGLDELETEFENCESAPPLEPROC sf_glad_glDeleteFencesAPPLE = NULL;
PFNGLDELETEFENCESNVPROC sf_glad_glDeleteFencesNV = NULL;
PFNGLDELETEFRAGMENTSHADERATIPROC sf_glad_glDeleteFragmentShaderATI = NULL;
PFNGLDELETEFRAMEBUFFERSPROC sf_glad_glDeleteFramebuffers = NULL;
PFNGLDELETEFRAMEBUFFERSEXTPROC sf_glad_glDeleteFramebuffersEXT = NULL;
PFNGLDELETELISTSPROC sf_glad_glDeleteLists = NULL;
PFNGLDELETEMEMORYOBJECTSEXTPROC sf_glad_glDeleteMemoryObjectsEXT = NULL;
PFNGLDELETENAMEDSTRINGARBPROC sf_glad_glDeleteNamedStringARB = NULL;
PFNGLDELETENAMESAMDPROC sf_glad_glDeleteNamesAMD = NULL;
PFNGLDELETEOBJECTARBPROC sf_glad_glDeleteObjectARB = NULL;
PFNGLDELETEOCCLUSIONQUERIESNVPROC sf_glad_glDeleteOcclusionQueriesNV = NULL;
PFNGLDELETEPATHSNVPROC sf_glad_glDeletePathsNV = NULL;
PFNGLDELETEPERFMONITORSAMDPROC sf_glad_glDeletePerfMonitorsAMD = NULL;
PFNGLDELETEPERFQUERYINTELPROC sf_glad_glDeletePerfQueryINTEL = NULL;
PFNGLDELETEPROGRAMPROC sf_glad_glDeleteProgram = NULL;
PFNGLDELETEPROGRAMPIPELINESPROC sf_glad_glDeleteProgramPipelines = NULL;
PFNGLDELETEPROGRAMSARBPROC sf_glad_glDeleteProgramsARB = NULL;
PFNGLDELETEPROGRAMSNVPROC sf_glad_glDeleteProgramsNV = NULL;
PFNGLDELETEQUERIESPROC sf_glad_glDeleteQueries = NULL;
PFNGLDELETEQUERIESARBPROC sf_glad_glDeleteQueriesARB = NULL;
PFNGLDELETEQUERYRESOURCETAGNVPROC sf_glad_glDeleteQueryResourceTagNV = NULL;
PFNGLDELETERENDERBUFFERSPROC sf_glad_glDeleteRenderbuffers = NULL;
PFNGLDELETERENDERBUFFERSEXTPROC sf_glad_glDeleteRenderbuffersEXT = NULL;
PFNGLDELETESAMPLERSPROC sf_glad_glDeleteSamplers = NULL;
PFNGLDELETESEMAPHORESEXTPROC sf_glad_glDeleteSemaphoresEXT = NULL;
PFNGLDELETESHADERPROC sf_glad_glDeleteShader = NULL;
PFNGLDELETESTATESNVPROC sf_glad_glDeleteStatesNV = NULL;
PFNGLDELETESYNCPROC sf_glad_glDeleteSync = NULL;
PFNGLDELETETEXTURESPROC sf_glad_glDeleteTextures = NULL;
PFNGLDELETETEXTURESEXTPROC sf_glad_glDeleteTexturesEXT = NULL;
PFNGLDELETETRANSFORMFEEDBACKSPROC sf_glad_glDeleteTransformFeedbacks = NULL;
PFNGLDELETETRANSFORMFEEDBACKSNVPROC sf_glad_glDeleteTransformFeedbacksNV = NULL;
PFNGLDELETEVERTEXARRAYSPROC sf_glad_glDeleteVertexArrays = NULL;
PFNGLDELETEVERTEXARRAYSAPPLEPROC sf_glad_glDeleteVertexArraysAPPLE = NULL;
PFNGLDELETEVERTEXSHADEREXTPROC sf_glad_glDeleteVertexShaderEXT = NULL;
PFNGLDEPTHBOUNDSEXTPROC sf_glad_glDepthBoundsEXT = NULL;
PFNGLDEPTHBOUNDSDNVPROC sf_glad_glDepthBoundsdNV = NULL;
PFNGLDEPTHFUNCPROC sf_glad_glDepthFunc = NULL;
PFNGLDEPTHMASKPROC sf_glad_glDepthMask = NULL;
PFNGLDEPTHRANGEPROC sf_glad_glDepthRange = NULL;
PFNGLDEPTHRANGEARRAYDVNVPROC sf_glad_glDepthRangeArraydvNV = NULL;
PFNGLDEPTHRANGEARRAYVPROC sf_glad_glDepthRangeArrayv = NULL;
PFNGLDEPTHRANGEINDEXEDPROC sf_glad_glDepthRangeIndexed = NULL;
PFNGLDEPTHRANGEINDEXEDDNVPROC sf_glad_glDepthRangeIndexeddNV = NULL;
PFNGLDEPTHRANGEDNVPROC sf_glad_glDepthRangedNV = NULL;
PFNGLDEPTHRANGEFPROC sf_glad_glDepthRangef = NULL;
PFNGLDEPTHRANGEFOESPROC sf_glad_glDepthRangefOES = NULL;
PFNGLDEPTHRANGEXOESPROC sf_glad_glDepthRangexOES = NULL;
PFNGLDETACHOBJECTARBPROC sf_glad_glDetachObjectARB = NULL;
PFNGLDETACHSHADERPROC sf_glad_glDetachShader = NULL;
PFNGLDETAILTEXFUNCSGISPROC sf_glad_glDetailTexFuncSGIS = NULL;
PFNGLDISABLEPROC sf_glad_glDisable = NULL;
PFNGLDISABLECLIENTSTATEPROC sf_glad_glDisableClientState = NULL;
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC sf_glad_glDisableClientStateIndexedEXT = NULL;
PFNGLDISABLECLIENTSTATEIEXTPROC sf_glad_glDisableClientStateiEXT = NULL;
PFNGLDISABLEINDEXEDEXTPROC sf_glad_glDisableIndexedEXT = NULL;
PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC sf_glad_glDisableVariantClientStateEXT = NULL;
PFNGLDISABLEVERTEXARRAYATTRIBPROC sf_glad_glDisableVertexArrayAttrib = NULL;
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC sf_glad_glDisableVertexArrayAttribEXT = NULL;
PFNGLDISABLEVERTEXARRAYEXTPROC sf_glad_glDisableVertexArrayEXT = NULL;
PFNGLDISABLEVERTEXATTRIBAPPLEPROC sf_glad_glDisableVertexAttribAPPLE = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYPROC sf_glad_glDisableVertexAttribArray = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC sf_glad_glDisableVertexAttribArrayARB = NULL;
PFNGLDISABLEIPROC sf_glad_glDisablei = NULL;
PFNGLDISPATCHCOMPUTEPROC sf_glad_glDispatchCompute = NULL;
PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC sf_glad_glDispatchComputeGroupSizeARB = NULL;
PFNGLDISPATCHCOMPUTEINDIRECTPROC sf_glad_glDispatchComputeIndirect = NULL;
PFNGLDRAWARRAYSPROC sf_glad_glDrawArrays = NULL;
PFNGLDRAWARRAYSEXTPROC sf_glad_glDrawArraysEXT = NULL;
PFNGLDRAWARRAYSINDIRECTPROC sf_glad_glDrawArraysIndirect = NULL;
PFNGLDRAWARRAYSINSTANCEDPROC sf_glad_glDrawArraysInstanced = NULL;
PFNGLDRAWARRAYSINSTANCEDARBPROC sf_glad_glDrawArraysInstancedARB = NULL;
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC sf_glad_glDrawArraysInstancedBaseInstance = NULL;
PFNGLDRAWARRAYSINSTANCEDEXTPROC sf_glad_glDrawArraysInstancedEXT = NULL;
PFNGLDRAWBUFFERPROC sf_glad_glDrawBuffer = NULL;
PFNGLDRAWBUFFERSPROC sf_glad_glDrawBuffers = NULL;
PFNGLDRAWBUFFERSARBPROC sf_glad_glDrawBuffersARB = NULL;
PFNGLDRAWBUFFERSATIPROC sf_glad_glDrawBuffersATI = NULL;
PFNGLDRAWCOMMANDSADDRESSNVPROC sf_glad_glDrawCommandsAddressNV = NULL;
PFNGLDRAWCOMMANDSNVPROC sf_glad_glDrawCommandsNV = NULL;
PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC sf_glad_glDrawCommandsStatesAddressNV = NULL;
PFNGLDRAWCOMMANDSSTATESNVPROC sf_glad_glDrawCommandsStatesNV = NULL;
PFNGLDRAWELEMENTARRAYAPPLEPROC sf_glad_glDrawElementArrayAPPLE = NULL;
PFNGLDRAWELEMENTARRAYATIPROC sf_glad_glDrawElementArrayATI = NULL;
PFNGLDRAWELEMENTSPROC sf_glad_glDrawElements = NULL;
PFNGLDRAWELEMENTSBASEVERTEXPROC sf_glad_glDrawElementsBaseVertex = NULL;
PFNGLDRAWELEMENTSINDIRECTPROC sf_glad_glDrawElementsIndirect = NULL;
PFNGLDRAWELEMENTSINSTANCEDPROC sf_glad_glDrawElementsInstanced = NULL;
PFNGLDRAWELEMENTSINSTANCEDARBPROC sf_glad_glDrawElementsInstancedARB = NULL;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC sf_glad_glDrawElementsInstancedBaseInstance = NULL;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC sf_glad_glDrawElementsInstancedBaseVertex = NULL;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC sf_glad_glDrawElementsInstancedBaseVertexBaseInstance = NULL;
PFNGLDRAWELEMENTSINSTANCEDEXTPROC sf_glad_glDrawElementsInstancedEXT = NULL;
PFNGLDRAWMESHARRAYSSUNPROC sf_glad_glDrawMeshArraysSUN = NULL;
PFNGLDRAWMESHTASKSINDIRECTNVPROC sf_glad_glDrawMeshTasksIndirectNV = NULL;
PFNGLDRAWMESHTASKSNVPROC sf_glad_glDrawMeshTasksNV = NULL;
PFNGLDRAWPIXELSPROC sf_glad_glDrawPixels = NULL;
PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC sf_glad_glDrawRangeElementArrayAPPLE = NULL;
PFNGLDRAWRANGEELEMENTARRAYATIPROC sf_glad_glDrawRangeElementArrayATI = NULL;
PFNGLDRAWRANGEELEMENTSPROC sf_glad_glDrawRangeElements = NULL;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC sf_glad_glDrawRangeElementsBaseVertex = NULL;
PFNGLDRAWRANGEELEMENTSEXTPROC sf_glad_glDrawRangeElementsEXT = NULL;
PFNGLDRAWTEXTURENVPROC sf_glad_glDrawTextureNV = NULL;
PFNGLDRAWTRANSFORMFEEDBACKPROC sf_glad_glDrawTransformFeedback = NULL;
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC sf_glad_glDrawTransformFeedbackInstanced = NULL;
PFNGLDRAWTRANSFORMFEEDBACKNVPROC sf_glad_glDrawTransformFeedbackNV = NULL;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC sf_glad_glDrawTransformFeedbackStream = NULL;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC sf_glad_glDrawTransformFeedbackStreamInstanced = NULL;
PFNGLDRAWVKIMAGENVPROC sf_glad_glDrawVkImageNV = NULL;
PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC sf_glad_glEGLImageTargetTexStorageEXT = NULL;
PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC sf_glad_glEGLImageTargetTextureStorageEXT = NULL;
PFNGLEDGEFLAGPROC sf_glad_glEdgeFlag = NULL;
PFNGLEDGEFLAGFORMATNVPROC sf_glad_glEdgeFlagFormatNV = NULL;
PFNGLEDGEFLAGPOINTERPROC sf_glad_glEdgeFlagPointer = NULL;
PFNGLEDGEFLAGPOINTEREXTPROC sf_glad_glEdgeFlagPointerEXT = NULL;
PFNGLEDGEFLAGPOINTERLISTIBMPROC sf_glad_glEdgeFlagPointerListIBM = NULL;
PFNGLEDGEFLAGVPROC sf_glad_glEdgeFlagv = NULL;
PFNGLELEMENTPOINTERAPPLEPROC sf_glad_glElementPointerAPPLE = NULL;
PFNGLELEMENTPOINTERATIPROC sf_glad_glElementPointerATI = NULL;
PFNGLENABLEPROC sf_glad_glEnable = NULL;
PFNGLENABLECLIENTSTATEPROC sf_glad_glEnableClientState = NULL;
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC sf_glad_glEnableClientStateIndexedEXT = NULL;
PFNGLENABLECLIENTSTATEIEXTPROC sf_glad_glEnableClientStateiEXT = NULL;
PFNGLENABLEINDEXEDEXTPROC sf_glad_glEnableIndexedEXT = NULL;
PFNGLENABLEVARIANTCLIENTSTATEEXTPROC sf_glad_glEnableVariantClientStateEXT = NULL;
PFNGLENABLEVERTEXARRAYATTRIBPROC sf_glad_glEnableVertexArrayAttrib = NULL;
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC sf_glad_glEnableVertexArrayAttribEXT = NULL;
PFNGLENABLEVERTEXARRAYEXTPROC sf_glad_glEnableVertexArrayEXT = NULL;
PFNGLENABLEVERTEXATTRIBAPPLEPROC sf_glad_glEnableVertexAttribAPPLE = NULL;
PFNGLENABLEVERTEXATTRIBARRAYPROC sf_glad_glEnableVertexAttribArray = NULL;
PFNGLENABLEVERTEXATTRIBARRAYARBPROC sf_glad_glEnableVertexAttribArrayARB = NULL;
PFNGLENABLEIPROC sf_glad_glEnablei = NULL;
PFNGLENDPROC sf_glad_glEnd = NULL;
PFNGLENDCONDITIONALRENDERPROC sf_glad_glEndConditionalRender = NULL;
PFNGLENDCONDITIONALRENDERNVPROC sf_glad_glEndConditionalRenderNV = NULL;
PFNGLENDCONDITIONALRENDERNVXPROC sf_glad_glEndConditionalRenderNVX = NULL;
PFNGLENDFRAGMENTSHADERATIPROC sf_glad_glEndFragmentShaderATI = NULL;
PFNGLENDLISTPROC sf_glad_glEndList = NULL;
PFNGLENDOCCLUSIONQUERYNVPROC sf_glad_glEndOcclusionQueryNV = NULL;
PFNGLENDPERFMONITORAMDPROC sf_glad_glEndPerfMonitorAMD = NULL;
PFNGLENDPERFQUERYINTELPROC sf_glad_glEndPerfQueryINTEL = NULL;
PFNGLENDQUERYPROC sf_glad_glEndQuery = NULL;
PFNGLENDQUERYARBPROC sf_glad_glEndQueryARB = NULL;
PFNGLENDQUERYINDEXEDPROC sf_glad_glEndQueryIndexed = NULL;
PFNGLENDTRANSFORMFEEDBACKPROC sf_glad_glEndTransformFeedback = NULL;
PFNGLENDTRANSFORMFEEDBACKEXTPROC sf_glad_glEndTransformFeedbackEXT = NULL;
PFNGLENDTRANSFORMFEEDBACKNVPROC sf_glad_glEndTransformFeedbackNV = NULL;
PFNGLENDVERTEXSHADEREXTPROC sf_glad_glEndVertexShaderEXT = NULL;
PFNGLENDVIDEOCAPTURENVPROC sf_glad_glEndVideoCaptureNV = NULL;
PFNGLEVALCOORD1DPROC sf_glad_glEvalCoord1d = NULL;
PFNGLEVALCOORD1DVPROC sf_glad_glEvalCoord1dv = NULL;
PFNGLEVALCOORD1FPROC sf_glad_glEvalCoord1f = NULL;
PFNGLEVALCOORD1FVPROC sf_glad_glEvalCoord1fv = NULL;
PFNGLEVALCOORD1XOESPROC sf_glad_glEvalCoord1xOES = NULL;
PFNGLEVALCOORD1XVOESPROC sf_glad_glEvalCoord1xvOES = NULL;
PFNGLEVALCOORD2DPROC sf_glad_glEvalCoord2d = NULL;
PFNGLEVALCOORD2DVPROC sf_glad_glEvalCoord2dv = NULL;
PFNGLEVALCOORD2FPROC sf_glad_glEvalCoord2f = NULL;
PFNGLEVALCOORD2FVPROC sf_glad_glEvalCoord2fv = NULL;
PFNGLEVALCOORD2XOESPROC sf_glad_glEvalCoord2xOES = NULL;
PFNGLEVALCOORD2XVOESPROC sf_glad_glEvalCoord2xvOES = NULL;
PFNGLEVALMAPSNVPROC sf_glad_glEvalMapsNV = NULL;
PFNGLEVALMESH1PROC sf_glad_glEvalMesh1 = NULL;
PFNGLEVALMESH2PROC sf_glad_glEvalMesh2 = NULL;
PFNGLEVALPOINT1PROC sf_glad_glEvalPoint1 = NULL;
PFNGLEVALPOINT2PROC sf_glad_glEvalPoint2 = NULL;
PFNGLEVALUATEDEPTHVALUESARBPROC sf_glad_glEvaluateDepthValuesARB = NULL;
PFNGLEXECUTEPROGRAMNVPROC sf_glad_glExecuteProgramNV = NULL;
PFNGLEXTRACTCOMPONENTEXTPROC sf_glad_glExtractComponentEXT = NULL;
PFNGLFEEDBACKBUFFERPROC sf_glad_glFeedbackBuffer = NULL;
PFNGLFEEDBACKBUFFERXOESPROC sf_glad_glFeedbackBufferxOES = NULL;
PFNGLFENCESYNCPROC sf_glad_glFenceSync = NULL;
PFNGLFINALCOMBINERINPUTNVPROC sf_glad_glFinalCombinerInputNV = NULL;
PFNGLFINISHPROC sf_glad_glFinish = NULL;
PFNGLFINISHASYNCSGIXPROC sf_glad_glFinishAsyncSGIX = NULL;
PFNGLFINISHFENCEAPPLEPROC sf_glad_glFinishFenceAPPLE = NULL;
PFNGLFINISHFENCENVPROC sf_glad_glFinishFenceNV = NULL;
PFNGLFINISHOBJECTAPPLEPROC sf_glad_glFinishObjectAPPLE = NULL;
PFNGLFINISHTEXTURESUNXPROC sf_glad_glFinishTextureSUNX = NULL;
PFNGLFLUSHPROC sf_glad_glFlush = NULL;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC sf_glad_glFlushMappedBufferRange = NULL;
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC sf_glad_glFlushMappedBufferRangeAPPLE = NULL;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC sf_glad_glFlushMappedNamedBufferRange = NULL;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC sf_glad_glFlushMappedNamedBufferRangeEXT = NULL;
PFNGLFLUSHPIXELDATARANGENVPROC sf_glad_glFlushPixelDataRangeNV = NULL;
PFNGLFLUSHRASTERSGIXPROC sf_glad_glFlushRasterSGIX = NULL;
PFNGLFLUSHSTATICDATAIBMPROC sf_glad_glFlushStaticDataIBM = NULL;
PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC sf_glad_glFlushVertexArrayRangeAPPLE = NULL;
PFNGLFLUSHVERTEXARRAYRANGENVPROC sf_glad_glFlushVertexArrayRangeNV = NULL;
PFNGLFOGCOORDFORMATNVPROC sf_glad_glFogCoordFormatNV = NULL;
PFNGLFOGCOORDPOINTERPROC sf_glad_glFogCoordPointer = NULL;
PFNGLFOGCOORDPOINTEREXTPROC sf_glad_glFogCoordPointerEXT = NULL;
PFNGLFOGCOORDPOINTERLISTIBMPROC sf_glad_glFogCoordPointerListIBM = NULL;
PFNGLFOGCOORDDPROC sf_glad_glFogCoordd = NULL;
PFNGLFOGCOORDDEXTPROC sf_glad_glFogCoorddEXT = NULL;
PFNGLFOGCOORDDVPROC sf_glad_glFogCoorddv = NULL;
PFNGLFOGCOORDDVEXTPROC sf_glad_glFogCoorddvEXT = NULL;
PFNGLFOGCOORDFPROC sf_glad_glFogCoordf = NULL;
PFNGLFOGCOORDFEXTPROC sf_glad_glFogCoordfEXT = NULL;
PFNGLFOGCOORDFVPROC sf_glad_glFogCoordfv = NULL;
PFNGLFOGCOORDFVEXTPROC sf_glad_glFogCoordfvEXT = NULL;
PFNGLFOGCOORDHNVPROC sf_glad_glFogCoordhNV = NULL;
PFNGLFOGCOORDHVNVPROC sf_glad_glFogCoordhvNV = NULL;
PFNGLFOGFUNCSGISPROC sf_glad_glFogFuncSGIS = NULL;
PFNGLFOGFPROC sf_glad_glFogf = NULL;
PFNGLFOGFVPROC sf_glad_glFogfv = NULL;
PFNGLFOGIPROC sf_glad_glFogi = NULL;
PFNGLFOGIVPROC sf_glad_glFogiv = NULL;
PFNGLFOGXOESPROC sf_glad_glFogxOES = NULL;
PFNGLFOGXVOESPROC sf_glad_glFogxvOES = NULL;
PFNGLFRAGMENTCOLORMATERIALSGIXPROC sf_glad_glFragmentColorMaterialSGIX = NULL;
PFNGLFRAGMENTCOVERAGECOLORNVPROC sf_glad_glFragmentCoverageColorNV = NULL;
PFNGLFRAGMENTLIGHTMODELFSGIXPROC sf_glad_glFragmentLightModelfSGIX = NULL;
PFNGLFRAGMENTLIGHTMODELFVSGIXPROC sf_glad_glFragmentLightModelfvSGIX = NULL;
PFNGLFRAGMENTLIGHTMODELISGIXPROC sf_glad_glFragmentLightModeliSGIX = NULL;
PFNGLFRAGMENTLIGHTMODELIVSGIXPROC sf_glad_glFragmentLightModelivSGIX = NULL;
PFNGLFRAGMENTLIGHTFSGIXPROC sf_glad_glFragmentLightfSGIX = NULL;
PFNGLFRAGMENTLIGHTFVSGIXPROC sf_glad_glFragmentLightfvSGIX = NULL;
PFNGLFRAGMENTLIGHTISGIXPROC sf_glad_glFragmentLightiSGIX = NULL;
PFNGLFRAGMENTLIGHTIVSGIXPROC sf_glad_glFragmentLightivSGIX = NULL;
PFNGLFRAGMENTMATERIALFSGIXPROC sf_glad_glFragmentMaterialfSGIX = NULL;
PFNGLFRAGMENTMATERIALFVSGIXPROC sf_glad_glFragmentMaterialfvSGIX = NULL;
PFNGLFRAGMENTMATERIALISGIXPROC sf_glad_glFragmentMaterialiSGIX = NULL;
PFNGLFRAGMENTMATERIALIVSGIXPROC sf_glad_glFragmentMaterialivSGIX = NULL;
PFNGLFRAMETERMINATORGREMEDYPROC sf_glad_glFrameTerminatorGREMEDY = NULL;
PFNGLFRAMEZOOMSGIXPROC sf_glad_glFrameZoomSGIX = NULL;
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC sf_glad_glFramebufferDrawBufferEXT = NULL;
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC sf_glad_glFramebufferDrawBuffersEXT = NULL;
PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC sf_glad_glFramebufferFetchBarrierEXT = NULL;
PFNGLFRAMEBUFFERPARAMETERIPROC sf_glad_glFramebufferParameteri = NULL;
PFNGLFRAMEBUFFERPARAMETERIMESAPROC sf_glad_glFramebufferParameteriMESA = NULL;
PFNGLFRAMEBUFFERREADBUFFEREXTPROC sf_glad_glFramebufferReadBufferEXT = NULL;
PFNGLFRAMEBUFFERRENDERBUFFERPROC sf_glad_glFramebufferRenderbuffer = NULL;
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC sf_glad_glFramebufferRenderbufferEXT = NULL;
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC sf_glad_glFramebufferSampleLocationsfvARB = NULL;
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC sf_glad_glFramebufferSampleLocationsfvNV = NULL;
PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC sf_glad_glFramebufferSamplePositionsfvAMD = NULL;
PFNGLFRAMEBUFFERTEXTUREPROC sf_glad_glFramebufferTexture = NULL;
PFNGLFRAMEBUFFERTEXTURE1DPROC sf_glad_glFramebufferTexture1D = NULL;
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC sf_glad_glFramebufferTexture1DEXT = NULL;
PFNGLFRAMEBUFFERTEXTURE2DPROC sf_glad_glFramebufferTexture2D = NULL;
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC sf_glad_glFramebufferTexture2DEXT = NULL;
PFNGLFRAMEBUFFERTEXTURE3DPROC sf_glad_glFramebufferTexture3D = NULL;
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC sf_glad_glFramebufferTexture3DEXT = NULL;
PFNGLFRAMEBUFFERTEXTUREARBPROC sf_glad_glFramebufferTextureARB = NULL;
PFNGLFRAMEBUFFERTEXTUREEXTPROC sf_glad_glFramebufferTextureEXT = NULL;
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC sf_glad_glFramebufferTextureFaceARB = NULL;
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC sf_glad_glFramebufferTextureFaceEXT = NULL;
PFNGLFRAMEBUFFERTEXTURELAYERPROC sf_glad_glFramebufferTextureLayer = NULL;
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC sf_glad_glFramebufferTextureLayerARB = NULL;
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC sf_glad_glFramebufferTextureLayerEXT = NULL;
PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC sf_glad_glFramebufferTextureMultiviewOVR = NULL;
PFNGLFREEOBJECTBUFFERATIPROC sf_glad_glFreeObjectBufferATI = NULL;
PFNGLFRONTFACEPROC sf_glad_glFrontFace = NULL;
PFNGLFRUSTUMPROC sf_glad_glFrustum = NULL;
PFNGLFRUSTUMFOESPROC sf_glad_glFrustumfOES = NULL;
PFNGLFRUSTUMXOESPROC sf_glad_glFrustumxOES = NULL;
PFNGLGENASYNCMARKERSSGIXPROC sf_glad_glGenAsyncMarkersSGIX = NULL;
PFNGLGENBUFFERSPROC sf_glad_glGenBuffers = NULL;
PFNGLGENBUFFERSARBPROC sf_glad_glGenBuffersARB = NULL;
PFNGLGENFENCESAPPLEPROC sf_glad_glGenFencesAPPLE = NULL;
PFNGLGENFENCESNVPROC sf_glad_glGenFencesNV = NULL;
PFNGLGENFRAGMENTSHADERSATIPROC sf_glad_glGenFragmentShadersATI = NULL;
PFNGLGENFRAMEBUFFERSPROC sf_glad_glGenFramebuffers = NULL;
PFNGLGENFRAMEBUFFERSEXTPROC sf_glad_glGenFramebuffersEXT = NULL;
PFNGLGENLISTSPROC sf_glad_glGenLists = NULL;
PFNGLGENNAMESAMDPROC sf_glad_glGenNamesAMD = NULL;
PFNGLGENOCCLUSIONQUERIESNVPROC sf_glad_glGenOcclusionQueriesNV = NULL;
PFNGLGENPATHSNVPROC sf_glad_glGenPathsNV = NULL;
PFNGLGENPERFMONITORSAMDPROC sf_glad_glGenPerfMonitorsAMD = NULL;
PFNGLGENPROGRAMPIPELINESPROC sf_glad_glGenProgramPipelines = NULL;
PFNGLGENPROGRAMSARBPROC sf_glad_glGenProgramsARB = NULL;
PFNGLGENPROGRAMSNVPROC sf_glad_glGenProgramsNV = NULL;
PFNGLGENQUERIESPROC sf_glad_glGenQueries = NULL;
PFNGLGENQUERIESARBPROC sf_glad_glGenQueriesARB = NULL;
PFNGLGENQUERYRESOURCETAGNVPROC sf_glad_glGenQueryResourceTagNV = NULL;
PFNGLGENRENDERBUFFERSPROC sf_glad_glGenRenderbuffers = NULL;
PFNGLGENRENDERBUFFERSEXTPROC sf_glad_glGenRenderbuffersEXT = NULL;
PFNGLGENSAMPLERSPROC sf_glad_glGenSamplers = NULL;
PFNGLGENSEMAPHORESEXTPROC sf_glad_glGenSemaphoresEXT = NULL;
PFNGLGENSYMBOLSEXTPROC sf_glad_glGenSymbolsEXT = NULL;
PFNGLGENTEXTURESPROC sf_glad_glGenTextures = NULL;
PFNGLGENTEXTURESEXTPROC sf_glad_glGenTexturesEXT = NULL;
PFNGLGENTRANSFORMFEEDBACKSPROC sf_glad_glGenTransformFeedbacks = NULL;
PFNGLGENTRANSFORMFEEDBACKSNVPROC sf_glad_glGenTransformFeedbacksNV = NULL;
PFNGLGENVERTEXARRAYSPROC sf_glad_glGenVertexArrays = NULL;
PFNGLGENVERTEXARRAYSAPPLEPROC sf_glad_glGenVertexArraysAPPLE = NULL;
PFNGLGENVERTEXSHADERSEXTPROC sf_glad_glGenVertexShadersEXT = NULL;
PFNGLGENERATEMIPMAPPROC sf_glad_glGenerateMipmap = NULL;
PFNGLGENERATEMIPMAPEXTPROC sf_glad_glGenerateMipmapEXT = NULL;
PFNGLGENERATEMULTITEXMIPMAPEXTPROC sf_glad_glGenerateMultiTexMipmapEXT = NULL;
PFNGLGENERATETEXTUREMIPMAPPROC sf_glad_glGenerateTextureMipmap = NULL;
PFNGLGENERATETEXTUREMIPMAPEXTPROC sf_glad_glGenerateTextureMipmapEXT = NULL;
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC sf_glad_glGetActiveAtomicCounterBufferiv = NULL;
PFNGLGETACTIVEATTRIBPROC sf_glad_glGetActiveAttrib = NULL;
PFNGLGETACTIVEATTRIBARBPROC sf_glad_glGetActiveAttribARB = NULL;
PFNGLGETACTIVESUBROUTINENAMEPROC sf_glad_glGetActiveSubroutineName = NULL;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC sf_glad_glGetActiveSubroutineUniformName = NULL;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC sf_glad_glGetActiveSubroutineUniformiv = NULL;
PFNGLGETACTIVEUNIFORMPROC sf_glad_glGetActiveUniform = NULL;
PFNGLGETACTIVEUNIFORMARBPROC sf_glad_glGetActiveUniformARB = NULL;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC sf_glad_glGetActiveUniformBlockName = NULL;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC sf_glad_glGetActiveUniformBlockiv = NULL;
PFNGLGETACTIVEUNIFORMNAMEPROC sf_glad_glGetActiveUniformName = NULL;
PFNGLGETACTIVEUNIFORMSIVPROC sf_glad_glGetActiveUniformsiv = NULL;
PFNGLGETACTIVEVARYINGNVPROC sf_glad_glGetActiveVaryingNV = NULL;
PFNGLGETARRAYOBJECTFVATIPROC sf_glad_glGetArrayObjectfvATI = NULL;
PFNGLGETARRAYOBJECTIVATIPROC sf_glad_glGetArrayObjectivATI = NULL;
PFNGLGETATTACHEDOBJECTSARBPROC sf_glad_glGetAttachedObjectsARB = NULL;
PFNGLGETATTACHEDSHADERSPROC sf_glad_glGetAttachedShaders = NULL;
PFNGLGETATTRIBLOCATIONPROC sf_glad_glGetAttribLocation = NULL;
PFNGLGETATTRIBLOCATIONARBPROC sf_glad_glGetAttribLocationARB = NULL;
PFNGLGETBOOLEANINDEXEDVEXTPROC sf_glad_glGetBooleanIndexedvEXT = NULL;
PFNGLGETBOOLEANI_VPROC sf_glad_glGetBooleani_v = NULL;
PFNGLGETBOOLEANVPROC sf_glad_glGetBooleanv = NULL;
PFNGLGETBUFFERPARAMETERI64VPROC sf_glad_glGetBufferParameteri64v = NULL;
PFNGLGETBUFFERPARAMETERIVPROC sf_glad_glGetBufferParameteriv = NULL;
PFNGLGETBUFFERPARAMETERIVARBPROC sf_glad_glGetBufferParameterivARB = NULL;
PFNGLGETBUFFERPARAMETERUI64VNVPROC sf_glad_glGetBufferParameterui64vNV = NULL;
PFNGLGETBUFFERPOINTERVPROC sf_glad_glGetBufferPointerv = NULL;
PFNGLGETBUFFERPOINTERVARBPROC sf_glad_glGetBufferPointervARB = NULL;
PFNGLGETBUFFERSUBDATAPROC sf_glad_glGetBufferSubData = NULL;
PFNGLGETBUFFERSUBDATAARBPROC sf_glad_glGetBufferSubDataARB = NULL;
PFNGLGETCLIPPLANEPROC sf_glad_glGetClipPlane = NULL;
PFNGLGETCLIPPLANEFOESPROC sf_glad_glGetClipPlanefOES = NULL;
PFNGLGETCLIPPLANEXOESPROC sf_glad_glGetClipPlanexOES = NULL;
PFNGLGETCOLORTABLEPROC sf_glad_glGetColorTable = NULL;
PFNGLGETCOLORTABLEEXTPROC sf_glad_glGetColorTableEXT = NULL;
PFNGLGETCOLORTABLEPARAMETERFVPROC sf_glad_glGetColorTableParameterfv = NULL;
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC sf_glad_glGetColorTableParameterfvEXT = NULL;
PFNGLGETCOLORTABLEPARAMETERFVSGIPROC sf_glad_glGetColorTableParameterfvSGI = NULL;
PFNGLGETCOLORTABLEPARAMETERIVPROC sf_glad_glGetColorTableParameteriv = NULL;
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC sf_glad_glGetColorTableParameterivEXT = NULL;
PFNGLGETCOLORTABLEPARAMETERIVSGIPROC sf_glad_glGetColorTableParameterivSGI = NULL;
PFNGLGETCOLORTABLESGIPROC sf_glad_glGetColorTableSGI = NULL;
PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC sf_glad_glGetCombinerInputParameterfvNV = NULL;
PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC sf_glad_glGetCombinerInputParameterivNV = NULL;
PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC sf_glad_glGetCombinerOutputParameterfvNV = NULL;
PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC sf_glad_glGetCombinerOutputParameterivNV = NULL;
PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC sf_glad_glGetCombinerStageParameterfvNV = NULL;
PFNGLGETCOMMANDHEADERNVPROC sf_glad_glGetCommandHeaderNV = NULL;
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC sf_glad_glGetCompressedMultiTexImageEXT = NULL;
PFNGLGETCOMPRESSEDTEXIMAGEPROC sf_glad_glGetCompressedTexImage = NULL;
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC sf_glad_glGetCompressedTexImageARB = NULL;
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC sf_glad_glGetCompressedTextureImage = NULL;
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC sf_glad_glGetCompressedTextureImageEXT = NULL;
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC sf_glad_glGetCompressedTextureSubImage = NULL;
PFNGLGETCONVOLUTIONFILTERPROC sf_glad_glGetConvolutionFilter = NULL;
PFNGLGETCONVOLUTIONFILTEREXTPROC sf_glad_glGetConvolutionFilterEXT = NULL;
PFNGLGETCONVOLUTIONPARAMETERFVPROC sf_glad_glGetConvolutionParameterfv = NULL;
PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC sf_glad_glGetConvolutionParameterfvEXT = NULL;
PFNGLGETCONVOLUTIONPARAMETERIVPROC sf_glad_glGetConvolutionParameteriv = NULL;
PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC sf_glad_glGetConvolutionParameterivEXT = NULL;
PFNGLGETCONVOLUTIONPARAMETERXVOESPROC sf_glad_glGetConvolutionParameterxvOES = NULL;
PFNGLGETCOVERAGEMODULATIONTABLENVPROC sf_glad_glGetCoverageModulationTableNV = NULL;
PFNGLGETDEBUGMESSAGELOGPROC sf_glad_glGetDebugMessageLog = NULL;
PFNGLGETDEBUGMESSAGELOGAMDPROC sf_glad_glGetDebugMessageLogAMD = NULL;
PFNGLGETDEBUGMESSAGELOGARBPROC sf_glad_glGetDebugMessageLogARB = NULL;
PFNGLGETDETAILTEXFUNCSGISPROC sf_glad_glGetDetailTexFuncSGIS = NULL;
PFNGLGETDOUBLEINDEXEDVEXTPROC sf_glad_glGetDoubleIndexedvEXT = NULL;
PFNGLGETDOUBLEI_VPROC sf_glad_glGetDoublei_v = NULL;
PFNGLGETDOUBLEI_VEXTPROC sf_glad_glGetDoublei_vEXT = NULL;
PFNGLGETDOUBLEVPROC sf_glad_glGetDoublev = NULL;
PFNGLGETERRORPROC sf_glad_glGetError = NULL;
PFNGLGETFENCEIVNVPROC sf_glad_glGetFenceivNV = NULL;
PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC sf_glad_glGetFinalCombinerInputParameterfvNV = NULL;
PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC sf_glad_glGetFinalCombinerInputParameterivNV = NULL;
PFNGLGETFIRSTPERFQUERYIDINTELPROC sf_glad_glGetFirstPerfQueryIdINTEL = NULL;
PFNGLGETFIXEDVOESPROC sf_glad_glGetFixedvOES = NULL;
PFNGLGETFLOATINDEXEDVEXTPROC sf_glad_glGetFloatIndexedvEXT = NULL;
PFNGLGETFLOATI_VPROC sf_glad_glGetFloati_v = NULL;
PFNGLGETFLOATI_VEXTPROC sf_glad_glGetFloati_vEXT = NULL;
PFNGLGETFLOATVPROC sf_glad_glGetFloatv = NULL;
PFNGLGETFOGFUNCSGISPROC sf_glad_glGetFogFuncSGIS = NULL;
PFNGLGETFRAGDATAINDEXPROC sf_glad_glGetFragDataIndex = NULL;
PFNGLGETFRAGDATALOCATIONPROC sf_glad_glGetFragDataLocation = NULL;
PFNGLGETFRAGDATALOCATIONEXTPROC sf_glad_glGetFragDataLocationEXT = NULL;
PFNGLGETFRAGMENTLIGHTFVSGIXPROC sf_glad_glGetFragmentLightfvSGIX = NULL;
PFNGLGETFRAGMENTLIGHTIVSGIXPROC sf_glad_glGetFragmentLightivSGIX = NULL;
PFNGLGETFRAGMENTMATERIALFVSGIXPROC sf_glad_glGetFragmentMaterialfvSGIX = NULL;
PFNGLGETFRAGMENTMATERIALIVSGIXPROC sf_glad_glGetFragmentMaterialivSGIX = NULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC sf_glad_glGetFramebufferAttachmentParameteriv = NULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC sf_glad_glGetFramebufferAttachmentParameterivEXT = NULL;
PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC sf_glad_glGetFramebufferParameterfvAMD = NULL;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC sf_glad_glGetFramebufferParameteriv = NULL;
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC sf_glad_glGetFramebufferParameterivEXT = NULL;
PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC sf_glad_glGetFramebufferParameterivMESA = NULL;
PFNGLGETGRAPHICSRESETSTATUSPROC sf_glad_glGetGraphicsResetStatus = NULL;
PFNGLGETGRAPHICSRESETSTATUSARBPROC sf_glad_glGetGraphicsResetStatusARB = NULL;
PFNGLGETHANDLEARBPROC sf_glad_glGetHandleARB = NULL;
PFNGLGETHISTOGRAMPROC sf_glad_glGetHistogram = NULL;
PFNGLGETHISTOGRAMEXTPROC sf_glad_glGetHistogramEXT = NULL;
PFNGLGETHISTOGRAMPARAMETERFVPROC sf_glad_glGetHistogramParameterfv = NULL;
PFNGLGETHISTOGRAMPARAMETERFVEXTPROC sf_glad_glGetHistogramParameterfvEXT = NULL;
PFNGLGETHISTOGRAMPARAMETERIVPROC sf_glad_glGetHistogramParameteriv = NULL;
PFNGLGETHISTOGRAMPARAMETERIVEXTPROC sf_glad_glGetHistogramParameterivEXT = NULL;
PFNGLGETHISTOGRAMPARAMETERXVOESPROC sf_glad_glGetHistogramParameterxvOES = NULL;
PFNGLGETIMAGEHANDLEARBPROC sf_glad_glGetImageHandleARB = NULL;
PFNGLGETIMAGEHANDLENVPROC sf_glad_glGetImageHandleNV = NULL;
PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC sf_glad_glGetImageTransformParameterfvHP = NULL;
PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC sf_glad_glGetImageTransformParameterivHP = NULL;
PFNGLGETINFOLOGARBPROC sf_glad_glGetInfoLogARB = NULL;
PFNGLGETINSTRUMENTSSGIXPROC sf_glad_glGetInstrumentsSGIX = NULL;
PFNGLGETINTEGER64I_VPROC sf_glad_glGetInteger64i_v = NULL;
PFNGLGETINTEGER64VPROC sf_glad_glGetInteger64v = NULL;
PFNGLGETINTEGERINDEXEDVEXTPROC sf_glad_glGetIntegerIndexedvEXT = NULL;
PFNGLGETINTEGERI_VPROC sf_glad_glGetIntegeri_v = NULL;
PFNGLGETINTEGERUI64I_VNVPROC sf_glad_glGetIntegerui64i_vNV = NULL;
PFNGLGETINTEGERUI64VNVPROC sf_glad_glGetIntegerui64vNV = NULL;
PFNGLGETINTEGERVPROC sf_glad_glGetIntegerv = NULL;
PFNGLGETINTERNALFORMATSAMPLEIVNVPROC sf_glad_glGetInternalformatSampleivNV = NULL;
PFNGLGETINTERNALFORMATI64VPROC sf_glad_glGetInternalformati64v = NULL;
PFNGLGETINTERNALFORMATIVPROC sf_glad_glGetInternalformativ = NULL;
PFNGLGETINVARIANTBOOLEANVEXTPROC sf_glad_glGetInvariantBooleanvEXT = NULL;
PFNGLGETINVARIANTFLOATVEXTPROC sf_glad_glGetInvariantFloatvEXT = NULL;
PFNGLGETINVARIANTINTEGERVEXTPROC sf_glad_glGetInvariantIntegervEXT = NULL;
PFNGLGETLIGHTFVPROC sf_glad_glGetLightfv = NULL;
PFNGLGETLIGHTIVPROC sf_glad_glGetLightiv = NULL;
PFNGLGETLIGHTXOESPROC sf_glad_glGetLightxOES = NULL;
PFNGLGETLISTPARAMETERFVSGIXPROC sf_glad_glGetListParameterfvSGIX = NULL;
PFNGLGETLISTPARAMETERIVSGIXPROC sf_glad_glGetListParameterivSGIX = NULL;
PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC sf_glad_glGetLocalConstantBooleanvEXT = NULL;
PFNGLGETLOCALCONSTANTFLOATVEXTPROC sf_glad_glGetLocalConstantFloatvEXT = NULL;
PFNGLGETLOCALCONSTANTINTEGERVEXTPROC sf_glad_glGetLocalConstantIntegervEXT = NULL;
PFNGLGETMAPATTRIBPARAMETERFVNVPROC sf_glad_glGetMapAttribParameterfvNV = NULL;
PFNGLGETMAPATTRIBPARAMETERIVNVPROC sf_glad_glGetMapAttribParameterivNV = NULL;
PFNGLGETMAPCONTROLPOINTSNVPROC sf_glad_glGetMapControlPointsNV = NULL;
PFNGLGETMAPPARAMETERFVNVPROC sf_glad_glGetMapParameterfvNV = NULL;
PFNGLGETMAPPARAMETERIVNVPROC sf_glad_glGetMapParameterivNV = NULL;
PFNGLGETMAPDVPROC sf_glad_glGetMapdv = NULL;
PFNGLGETMAPFVPROC sf_glad_glGetMapfv = NULL;
PFNGLGETMAPIVPROC sf_glad_glGetMapiv = NULL;
PFNGLGETMAPXVOESPROC sf_glad_glGetMapxvOES = NULL;
PFNGLGETMATERIALFVPROC sf_glad_glGetMaterialfv = NULL;
PFNGLGETMATERIALIVPROC sf_glad_glGetMaterialiv = NULL;
PFNGLGETMATERIALXOESPROC sf_glad_glGetMaterialxOES = NULL;
PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC sf_glad_glGetMemoryObjectDetachedResourcesuivNV = NULL;
PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC sf_glad_glGetMemoryObjectParameterivEXT = NULL;
PFNGLGETMINMAXPROC sf_glad_glGetMinmax = NULL;
PFNGLGETMINMAXEXTPROC sf_glad_glGetMinmaxEXT = NULL;
PFNGLGETMINMAXPARAMETERFVPROC sf_glad_glGetMinmaxParameterfv = NULL;
PFNGLGETMINMAXPARAMETERFVEXTPROC sf_glad_glGetMinmaxParameterfvEXT = NULL;
PFNGLGETMINMAXPARAMETERIVPROC sf_glad_glGetMinmaxParameteriv = NULL;
PFNGLGETMINMAXPARAMETERIVEXTPROC sf_glad_glGetMinmaxParameterivEXT = NULL;
PFNGLGETMULTITEXENVFVEXTPROC sf_glad_glGetMultiTexEnvfvEXT = NULL;
PFNGLGETMULTITEXENVIVEXTPROC sf_glad_glGetMultiTexEnvivEXT = NULL;
PFNGLGETMULTITEXGENDVEXTPROC sf_glad_glGetMultiTexGendvEXT = NULL;
PFNGLGETMULTITEXGENFVEXTPROC sf_glad_glGetMultiTexGenfvEXT = NULL;
PFNGLGETMULTITEXGENIVEXTPROC sf_glad_glGetMultiTexGenivEXT = NULL;
PFNGLGETMULTITEXIMAGEEXTPROC sf_glad_glGetMultiTexImageEXT = NULL;
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC sf_glad_glGetMultiTexLevelParameterfvEXT = NULL;
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC sf_glad_glGetMultiTexLevelParameterivEXT = NULL;
PFNGLGETMULTITEXPARAMETERIIVEXTPROC sf_glad_glGetMultiTexParameterIivEXT = NULL;
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC sf_glad_glGetMultiTexParameterIuivEXT = NULL;
PFNGLGETMULTITEXPARAMETERFVEXTPROC sf_glad_glGetMultiTexParameterfvEXT = NULL;
PFNGLGETMULTITEXPARAMETERIVEXTPROC sf_glad_glGetMultiTexParameterivEXT = NULL;
PFNGLGETMULTISAMPLEFVPROC sf_glad_glGetMultisamplefv = NULL;
PFNGLGETMULTISAMPLEFVNVPROC sf_glad_glGetMultisamplefvNV = NULL;
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC sf_glad_glGetNamedBufferParameteri64v = NULL;
PFNGLGETNAMEDBUFFERPARAMETERIVPROC sf_glad_glGetNamedBufferParameteriv = NULL;
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedBufferParameterivEXT = NULL;
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC sf_glad_glGetNamedBufferParameterui64vNV = NULL;
PFNGLGETNAMEDBUFFERPOINTERVPROC sf_glad_glGetNamedBufferPointerv = NULL;
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC sf_glad_glGetNamedBufferPointervEXT = NULL;
PFNGLGETNAMEDBUFFERSUBDATAPROC sf_glad_glGetNamedBufferSubData = NULL;
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC sf_glad_glGetNamedBufferSubDataEXT = NULL;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC sf_glad_glGetNamedFramebufferAttachmentParameteriv = NULL;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC sf_glad_glGetNamedFramebufferAttachmentParameterivEXT = NULL;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC sf_glad_glGetNamedFramebufferParameterfvAMD = NULL;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC sf_glad_glGetNamedFramebufferParameteriv = NULL;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedFramebufferParameterivEXT = NULL;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC sf_glad_glGetNamedProgramLocalParameterIivEXT = NULL;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC sf_glad_glGetNamedProgramLocalParameterIuivEXT = NULL;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC sf_glad_glGetNamedProgramLocalParameterdvEXT = NULL;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC sf_glad_glGetNamedProgramLocalParameterfvEXT = NULL;
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC sf_glad_glGetNamedProgramStringEXT = NULL;
PFNGLGETNAMEDPROGRAMIVEXTPROC sf_glad_glGetNamedProgramivEXT = NULL;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC sf_glad_glGetNamedRenderbufferParameteriv = NULL;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC sf_glad_glGetNamedRenderbufferParameterivEXT = NULL;
PFNGLGETNAMEDSTRINGARBPROC sf_glad_glGetNamedStringARB = NULL;
PFNGLGETNAMEDSTRINGIVARBPROC sf_glad_glGetNamedStringivARB = NULL;
PFNGLGETNEXTPERFQUERYIDINTELPROC sf_glad_glGetNextPerfQueryIdINTEL = NULL;
PFNGLGETOBJECTBUFFERFVATIPROC sf_glad_glGetObjectBufferfvATI = NULL;
PFNGLGETOBJECTBUFFERIVATIPROC sf_glad_glGetObjectBufferivATI = NULL;
PFNGLGETOBJECTLABELPROC sf_glad_glGetObjectLabel = NULL;
PFNGLGETOBJECTLABELEXTPROC sf_glad_glGetObjectLabelEXT = NULL;
PFNGLGETOBJECTPARAMETERFVARBPROC sf_glad_glGetObjectParameterfvARB = NULL;
PFNGLGETOBJECTPARAMETERIVAPPLEPROC sf_glad_glGetObjectParameterivAPPLE = NULL;
PFNGLGETOBJECTPARAMETERIVARBPROC sf_glad_glGetObjectParameterivARB = NULL;
PFNGLGETOBJECTPTRLABELPROC sf_glad_glGetObjectPtrLabel = NULL;
PFNGLGETOCCLUSIONQUERYIVNVPROC sf_glad_glGetOcclusionQueryivNV = NULL;
PFNGLGETOCCLUSIONQUERYUIVNVPROC sf_glad_glGetOcclusionQueryuivNV = NULL;
PFNGLGETPATHCOLORGENFVNVPROC sf_glad_glGetPathColorGenfvNV = NULL;
PFNGLGETPATHCOLORGENIVNVPROC sf_glad_glGetPathColorGenivNV = NULL;
PFNGLGETPATHCOMMANDSNVPROC sf_glad_glGetPathCommandsNV = NULL;
PFNGLGETPATHCOORDSNVPROC sf_glad_glGetPathCoordsNV = NULL;
PFNGLGETPATHDASHARRAYNVPROC sf_glad_glGetPathDashArrayNV = NULL;
PFNGLGETPATHLENGTHNVPROC sf_glad_glGetPathLengthNV = NULL;
PFNGLGETPATHMETRICRANGENVPROC sf_glad_glGetPathMetricRangeNV = NULL;
PFNGLGETPATHMETRICSNVPROC sf_glad_glGetPathMetricsNV = NULL;
PFNGLGETPATHPARAMETERFVNVPROC sf_glad_glGetPathParameterfvNV = NULL;
PFNGLGETPATHPARAMETERIVNVPROC sf_glad_glGetPathParameterivNV = NULL;
PFNGLGETPATHSPACINGNVPROC sf_glad_glGetPathSpacingNV = NULL;
PFNGLGETPATHTEXGENFVNVPROC sf_glad_glGetPathTexGenfvNV = NULL;
PFNGLGETPATHTEXGENIVNVPROC sf_glad_glGetPathTexGenivNV = NULL;
PFNGLGETPERFCOUNTERINFOINTELPROC sf_glad_glGetPerfCounterInfoINTEL = NULL;
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC sf_glad_glGetPerfMonitorCounterDataAMD = NULL;
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC sf_glad_glGetPerfMonitorCounterInfoAMD = NULL;
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC sf_glad_glGetPerfMonitorCounterStringAMD = NULL;
PFNGLGETPERFMONITORCOUNTERSAMDPROC sf_glad_glGetPerfMonitorCountersAMD = NULL;
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC sf_glad_glGetPerfMonitorGroupStringAMD = NULL;
PFNGLGETPERFMONITORGROUPSAMDPROC sf_glad_glGetPerfMonitorGroupsAMD = NULL;
PFNGLGETPERFQUERYDATAINTELPROC sf_glad_glGetPerfQueryDataINTEL = NULL;
PFNGLGETPERFQUERYIDBYNAMEINTELPROC sf_glad_glGetPerfQueryIdByNameINTEL = NULL;
PFNGLGETPERFQUERYINFOINTELPROC sf_glad_glGetPerfQueryInfoINTEL = NULL;
PFNGLGETPIXELMAPFVPROC sf_glad_glGetPixelMapfv = NULL;
PFNGLGETPIXELMAPUIVPROC sf_glad_glGetPixelMapuiv = NULL;
PFNGLGETPIXELMAPUSVPROC sf_glad_glGetPixelMapusv = NULL;
PFNGLGETPIXELMAPXVPROC sf_glad_glGetPixelMapxv = NULL;
PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC sf_glad_glGetPixelTexGenParameterfvSGIS = NULL;
PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC sf_glad_glGetPixelTexGenParameterivSGIS = NULL;
PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC sf_glad_glGetPixelTransformParameterfvEXT = NULL;
PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC sf_glad_glGetPixelTransformParameterivEXT = NULL;
PFNGLGETPOINTERINDEXEDVEXTPROC sf_glad_glGetPointerIndexedvEXT = NULL;
PFNGLGETPOINTERI_VEXTPROC sf_glad_glGetPointeri_vEXT = NULL;
PFNGLGETPOINTERVPROC sf_glad_glGetPointerv = NULL;
PFNGLGETPOINTERVEXTPROC sf_glad_glGetPointervEXT = NULL;
PFNGLGETPOLYGONSTIPPLEPROC sf_glad_glGetPolygonStipple = NULL;
PFNGLGETPROGRAMBINARYPROC sf_glad_glGetProgramBinary = NULL;
PFNGLGETPROGRAMENVPARAMETERIIVNVPROC sf_glad_glGetProgramEnvParameterIivNV = NULL;
PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC sf_glad_glGetProgramEnvParameterIuivNV = NULL;
PFNGLGETPROGRAMENVPARAMETERDVARBPROC sf_glad_glGetProgramEnvParameterdvARB = NULL;
PFNGLGETPROGRAMENVPARAMETERFVARBPROC sf_glad_glGetProgramEnvParameterfvARB = NULL;
PFNGLGETPROGRAMINFOLOGPROC sf_glad_glGetProgramInfoLog = NULL;
PFNGLGETPROGRAMINTERFACEIVPROC sf_glad_glGetProgramInterfaceiv = NULL;
PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC sf_glad_glGetProgramLocalParameterIivNV = NULL;
PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC sf_glad_glGetProgramLocalParameterIuivNV = NULL;
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC sf_glad_glGetProgramLocalParameterdvARB = NULL;
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC sf_glad_glGetProgramLocalParameterfvARB = NULL;
PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC sf_glad_glGetProgramNamedParameterdvNV = NULL;
PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC sf_glad_glGetProgramNamedParameterfvNV = NULL;
PFNGLGETPROGRAMPARAMETERDVNVPROC sf_glad_glGetProgramParameterdvNV = NULL;
PFNGLGETPROGRAMPARAMETERFVNVPROC sf_glad_glGetProgramParameterfvNV = NULL;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC sf_glad_glGetProgramPipelineInfoLog = NULL;
PFNGLGETPROGRAMPIPELINEIVPROC sf_glad_glGetProgramPipelineiv = NULL;
PFNGLGETPROGRAMRESOURCEINDEXPROC sf_glad_glGetProgramResourceIndex = NULL;
PFNGLGETPROGRAMRESOURCELOCATIONPROC sf_glad_glGetProgramResourceLocation = NULL;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC sf_glad_glGetProgramResourceLocationIndex = NULL;
PFNGLGETPROGRAMRESOURCENAMEPROC sf_glad_glGetProgramResourceName = NULL;
PFNGLGETPROGRAMRESOURCEFVNVPROC sf_glad_glGetProgramResourcefvNV = NULL;
PFNGLGETPROGRAMRESOURCEIVPROC sf_glad_glGetProgramResourceiv = NULL;
PFNGLGETPROGRAMSTAGEIVPROC sf_glad_glGetProgramStageiv = NULL;
PFNGLGETPROGRAMSTRINGARBPROC sf_glad_glGetProgramStringARB = NULL;
PFNGLGETPROGRAMSTRINGNVPROC sf_glad_glGetProgramStringNV = NULL;
PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC sf_glad_glGetProgramSubroutineParameteruivNV = NULL;
PFNGLGETPROGRAMIVPROC sf_glad_glGetProgramiv = NULL;
PFNGLGETPROGRAMIVARBPROC sf_glad_glGetProgramivARB = NULL;
PFNGLGETPROGRAMIVNVPROC sf_glad_glGetProgramivNV = NULL;
PFNGLGETQUERYBUFFEROBJECTI64VPROC sf_glad_glGetQueryBufferObjecti64v = NULL;
PFNGLGETQUERYBUFFEROBJECTIVPROC sf_glad_glGetQueryBufferObjectiv = NULL;
PFNGLGETQUERYBUFFEROBJECTUI64VPROC sf_glad_glGetQueryBufferObjectui64v = NULL;
PFNGLGETQUERYBUFFEROBJECTUIVPROC sf_glad_glGetQueryBufferObjectuiv = NULL;
PFNGLGETQUERYINDEXEDIVPROC sf_glad_glGetQueryIndexediv = NULL;
PFNGLGETQUERYOBJECTI64VPROC sf_glad_glGetQueryObjecti64v = NULL;
PFNGLGETQUERYOBJECTI64VEXTPROC sf_glad_glGetQueryObjecti64vEXT = NULL;
PFNGLGETQUERYOBJECTIVPROC sf_glad_glGetQueryObjectiv = NULL;
PFNGLGETQUERYOBJECTIVARBPROC sf_glad_glGetQueryObjectivARB = NULL;
PFNGLGETQUERYOBJECTUI64VPROC sf_glad_glGetQueryObjectui64v = NULL;
PFNGLGETQUERYOBJECTUI64VEXTPROC sf_glad_glGetQueryObjectui64vEXT = NULL;
PFNGLGETQUERYOBJECTUIVPROC sf_glad_glGetQueryObjectuiv = NULL;
PFNGLGETQUERYOBJECTUIVARBPROC sf_glad_glGetQueryObjectuivARB = NULL;
PFNGLGETQUERYIVPROC sf_glad_glGetQueryiv = NULL;
PFNGLGETQUERYIVARBPROC sf_glad_glGetQueryivARB = NULL;
PFNGLGETRENDERBUFFERPARAMETERIVPROC sf_glad_glGetRenderbufferParameteriv = NULL;
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC sf_glad_glGetRenderbufferParameterivEXT = NULL;
PFNGLGETSAMPLERPARAMETERIIVPROC sf_glad_glGetSamplerParameterIiv = NULL;
PFNGLGETSAMPLERPARAMETERIUIVPROC sf_glad_glGetSamplerParameterIuiv = NULL;
PFNGLGETSAMPLERPARAMETERFVPROC sf_glad_glGetSamplerParameterfv = NULL;
PFNGLGETSAMPLERPARAMETERIVPROC sf_glad_glGetSamplerParameteriv = NULL;
PFNGLGETSEMAPHOREPARAMETERIVNVPROC sf_glad_glGetSemaphoreParameterivNV = NULL;
PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC sf_glad_glGetSemaphoreParameterui64vEXT = NULL;
PFNGLGETSEPARABLEFILTERPROC sf_glad_glGetSeparableFilter = NULL;
PFNGLGETSEPARABLEFILTEREXTPROC sf_glad_glGetSeparableFilterEXT = NULL;
PFNGLGETSHADERINFOLOGPROC sf_glad_glGetShaderInfoLog = NULL;
PFNGLGETSHADERPRECISIONFORMATPROC sf_glad_glGetShaderPrecisionFormat = NULL;
PFNGLGETSHADERSOURCEPROC sf_glad_glGetShaderSource = NULL;
PFNGLGETSHADERSOURCEARBPROC sf_glad_glGetShaderSourceARB = NULL;
PFNGLGETSHADERIVPROC sf_glad_glGetShaderiv = NULL;
PFNGLGETSHADINGRATEIMAGEPALETTENVPROC sf_glad_glGetShadingRateImagePaletteNV = NULL;
PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC sf_glad_glGetShadingRateSampleLocationivNV = NULL;
PFNGLGETSHARPENTEXFUNCSGISPROC sf_glad_glGetSharpenTexFuncSGIS = NULL;
PFNGLGETSTAGEINDEXNVPROC sf_glad_glGetStageIndexNV = NULL;
PFNGLGETSTRINGPROC sf_glad_glGetString = NULL;
PFNGLGETSTRINGIPROC sf_glad_glGetStringi = NULL;
PFNGLGETSUBROUTINEINDEXPROC sf_glad_glGetSubroutineIndex = NULL;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC sf_glad_glGetSubroutineUniformLocation = NULL;
PFNGLGETSYNCIVPROC sf_glad_glGetSynciv = NULL;
PFNGLGETTEXBUMPPARAMETERFVATIPROC sf_glad_glGetTexBumpParameterfvATI = NULL;
PFNGLGETTEXBUMPPARAMETERIVATIPROC sf_glad_glGetTexBumpParameterivATI = NULL;
PFNGLGETTEXENVFVPROC sf_glad_glGetTexEnvfv = NULL;
PFNGLGETTEXENVIVPROC sf_glad_glGetTexEnviv = NULL;
PFNGLGETTEXENVXVOESPROC sf_glad_glGetTexEnvxvOES = NULL;
PFNGLGETTEXFILTERFUNCSGISPROC sf_glad_glGetTexFilterFuncSGIS = NULL;
PFNGLGETTEXGENDVPROC sf_glad_glGetTexGendv = NULL;
PFNGLGETTEXGENFVPROC sf_glad_glGetTexGenfv = NULL;
PFNGLGETTEXGENIVPROC sf_glad_glGetTexGeniv = NULL;
PFNGLGETTEXGENXVOESPROC sf_glad_glGetTexGenxvOES = NULL;
PFNGLGETTEXIMAGEPROC sf_glad_glGetTexImage = NULL;
PFNGLGETTEXLEVELPARAMETERFVPROC sf_glad_glGetTexLevelParameterfv = NULL;
PFNGLGETTEXLEVELPARAMETERIVPROC sf_glad_glGetTexLevelParameteriv = NULL;
PFNGLGETTEXLEVELPARAMETERXVOESPROC sf_glad_glGetTexLevelParameterxvOES = NULL;
PFNGLGETTEXPARAMETERIIVPROC sf_glad_glGetTexParameterIiv = NULL;
PFNGLGETTEXPARAMETERIIVEXTPROC sf_glad_glGetTexParameterIivEXT = NULL;
PFNGLGETTEXPARAMETERIUIVPROC sf_glad_glGetTexParameterIuiv = NULL;
PFNGLGETTEXPARAMETERIUIVEXTPROC sf_glad_glGetTexParameterIuivEXT = NULL;
PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC sf_glad_glGetTexParameterPointervAPPLE = NULL;
PFNGLGETTEXPARAMETERFVPROC sf_glad_glGetTexParameterfv = NULL;
PFNGLGETTEXPARAMETERIVPROC sf_glad_glGetTexParameteriv = NULL;
PFNGLGETTEXPARAMETERXVOESPROC sf_glad_glGetTexParameterxvOES = NULL;
PFNGLGETTEXTUREHANDLEARBPROC sf_glad_glGetTextureHandleARB = NULL;
PFNGLGETTEXTUREHANDLENVPROC sf_glad_glGetTextureHandleNV = NULL;
PFNGLGETTEXTUREIMAGEPROC sf_glad_glGetTextureImage = NULL;
PFNGLGETTEXTUREIMAGEEXTPROC sf_glad_glGetTextureImageEXT = NULL;
PFNGLGETTEXTURELEVELPARAMETERFVPROC sf_glad_glGetTextureLevelParameterfv = NULL;
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC sf_glad_glGetTextureLevelParameterfvEXT = NULL;
PFNGLGETTEXTURELEVELPARAMETERIVPROC sf_glad_glGetTextureLevelParameteriv = NULL;
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC sf_glad_glGetTextureLevelParameterivEXT = NULL;
PFNGLGETTEXTUREPARAMETERIIVPROC sf_glad_glGetTextureParameterIiv = NULL;
PFNGLGETTEXTUREPARAMETERIIVEXTPROC sf_glad_glGetTextureParameterIivEXT = NULL;
PFNGLGETTEXTUREPARAMETERIUIVPROC sf_glad_glGetTextureParameterIuiv = NULL;
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC sf_glad_glGetTextureParameterIuivEXT = NULL;
PFNGLGETTEXTUREPARAMETERFVPROC sf_glad_glGetTextureParameterfv = NULL;
PFNGLGETTEXTUREPARAMETERFVEXTPROC sf_glad_glGetTextureParameterfvEXT = NULL;
PFNGLGETTEXTUREPARAMETERIVPROC sf_glad_glGetTextureParameteriv = NULL;
PFNGLGETTEXTUREPARAMETERIVEXTPROC sf_glad_glGetTextureParameterivEXT = NULL;
PFNGLGETTEXTURESAMPLERHANDLEARBPROC sf_glad_glGetTextureSamplerHandleARB = NULL;
PFNGLGETTEXTURESAMPLERHANDLENVPROC sf_glad_glGetTextureSamplerHandleNV = NULL;
PFNGLGETTEXTURESUBIMAGEPROC sf_glad_glGetTextureSubImage = NULL;
PFNGLGETTRACKMATRIXIVNVPROC sf_glad_glGetTrackMatrixivNV = NULL;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC sf_glad_glGetTransformFeedbackVarying = NULL;
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC sf_glad_glGetTransformFeedbackVaryingEXT = NULL;
PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC sf_glad_glGetTransformFeedbackVaryingNV = NULL;
PFNGLGETTRANSFORMFEEDBACKI64_VPROC sf_glad_glGetTransformFeedbacki64_v = NULL;
PFNGLGETTRANSFORMFEEDBACKI_VPROC sf_glad_glGetTransformFeedbacki_v = NULL;
PFNGLGETTRANSFORMFEEDBACKIVPROC sf_glad_glGetTransformFeedbackiv = NULL;
PFNGLGETUNIFORMBLOCKINDEXPROC sf_glad_glGetUniformBlockIndex = NULL;
PFNGLGETUNIFORMBUFFERSIZEEXTPROC sf_glad_glGetUniformBufferSizeEXT = NULL;
PFNGLGETUNIFORMINDICESPROC sf_glad_glGetUniformIndices = NULL;
PFNGLGETUNIFORMLOCATIONPROC sf_glad_glGetUniformLocation = NULL;
PFNGLGETUNIFORMLOCATIONARBPROC sf_glad_glGetUniformLocationARB = NULL;
PFNGLGETUNIFORMOFFSETEXTPROC sf_glad_glGetUniformOffsetEXT = NULL;
PFNGLGETUNIFORMSUBROUTINEUIVPROC sf_glad_glGetUniformSubroutineuiv = NULL;
PFNGLGETUNIFORMDVPROC sf_glad_glGetUniformdv = NULL;
PFNGLGETUNIFORMFVPROC sf_glad_glGetUniformfv = NULL;
PFNGLGETUNIFORMFVARBPROC sf_glad_glGetUniformfvARB = NULL;
PFNGLGETUNIFORMI64VARBPROC sf_glad_glGetUniformi64vARB = NULL;
PFNGLGETUNIFORMI64VNVPROC sf_glad_glGetUniformi64vNV = NULL;
PFNGLGETUNIFORMIVPROC sf_glad_glGetUniformiv = NULL;
PFNGLGETUNIFORMIVARBPROC sf_glad_glGetUniformivARB = NULL;
PFNGLGETUNIFORMUI64VARBPROC sf_glad_glGetUniformui64vARB = NULL;
PFNGLGETUNIFORMUI64VNVPROC sf_glad_glGetUniformui64vNV = NULL;
PFNGLGETUNIFORMUIVPROC sf_glad_glGetUniformuiv = NULL;
PFNGLGETUNIFORMUIVEXTPROC sf_glad_glGetUniformuivEXT = NULL;
PFNGLGETUNSIGNEDBYTEI_VEXTPROC sf_glad_glGetUnsignedBytei_vEXT = NULL;
PFNGLGETUNSIGNEDBYTEVEXTPROC sf_glad_glGetUnsignedBytevEXT = NULL;
PFNGLGETVARIANTARRAYOBJECTFVATIPROC sf_glad_glGetVariantArrayObjectfvATI = NULL;
PFNGLGETVARIANTARRAYOBJECTIVATIPROC sf_glad_glGetVariantArrayObjectivATI = NULL;
PFNGLGETVARIANTBOOLEANVEXTPROC sf_glad_glGetVariantBooleanvEXT = NULL;
PFNGLGETVARIANTFLOATVEXTPROC sf_glad_glGetVariantFloatvEXT = NULL;
PFNGLGETVARIANTINTEGERVEXTPROC sf_glad_glGetVariantIntegervEXT = NULL;
PFNGLGETVARIANTPOINTERVEXTPROC sf_glad_glGetVariantPointervEXT = NULL;
PFNGLGETVARYINGLOCATIONNVPROC sf_glad_glGetVaryingLocationNV = NULL;
PFNGLGETVERTEXARRAYINDEXED64IVPROC sf_glad_glGetVertexArrayIndexed64iv = NULL;
PFNGLGETVERTEXARRAYINDEXEDIVPROC sf_glad_glGetVertexArrayIndexediv = NULL;
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC sf_glad_glGetVertexArrayIntegeri_vEXT = NULL;
PFNGLGETVERTEXARRAYINTEGERVEXTPROC sf_glad_glGetVertexArrayIntegervEXT = NULL;
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC sf_glad_glGetVertexArrayPointeri_vEXT = NULL;
PFNGLGETVERTEXARRAYPOINTERVEXTPROC sf_glad_glGetVertexArrayPointervEXT = NULL;
PFNGLGETVERTEXARRAYIVPROC sf_glad_glGetVertexArrayiv = NULL;
PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC sf_glad_glGetVertexAttribArrayObjectfvATI = NULL;
PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC sf_glad_glGetVertexAttribArrayObjectivATI = NULL;
PFNGLGETVERTEXATTRIBIIVPROC sf_glad_glGetVertexAttribIiv = NULL;
PFNGLGETVERTEXATTRIBIIVEXTPROC sf_glad_glGetVertexAttribIivEXT = NULL;
PFNGLGETVERTEXATTRIBIUIVPROC sf_glad_glGetVertexAttribIuiv = NULL;
PFNGLGETVERTEXATTRIBIUIVEXTPROC sf_glad_glGetVertexAttribIuivEXT = NULL;
PFNGLGETVERTEXATTRIBLDVPROC sf_glad_glGetVertexAttribLdv = NULL;
PFNGLGETVERTEXATTRIBLDVEXTPROC sf_glad_glGetVertexAttribLdvEXT = NULL;
PFNGLGETVERTEXATTRIBLI64VNVPROC sf_glad_glGetVertexAttribLi64vNV = NULL;
PFNGLGETVERTEXATTRIBLUI64VARBPROC sf_glad_glGetVertexAttribLui64vARB = NULL;
PFNGLGETVERTEXATTRIBLUI64VNVPROC sf_glad_glGetVertexAttribLui64vNV = NULL;
PFNGLGETVERTEXATTRIBPOINTERVPROC sf_glad_glGetVertexAttribPointerv = NULL;
PFNGLGETVERTEXATTRIBPOINTERVARBPROC sf_glad_glGetVertexAttribPointervARB = NULL;
PFNGLGETVERTEXATTRIBPOINTERVNVPROC sf_glad_glGetVertexAttribPointervNV = NULL;
PFNGLGETVERTEXATTRIBDVPROC sf_glad_glGetVertexAttribdv = NULL;
PFNGLGETVERTEXATTRIBDVARBPROC sf_glad_glGetVertexAttribdvARB = NULL;
PFNGLGETVERTEXATTRIBDVNVPROC sf_glad_glGetVertexAttribdvNV = NULL;
PFNGLGETVERTEXATTRIBFVPROC sf_glad_glGetVertexAttribfv = NULL;
PFNGLGETVERTEXATTRIBFVARBPROC sf_glad_glGetVertexAttribfvARB = NULL;
PFNGLGETVERTEXATTRIBFVNVPROC sf_glad_glGetVertexAttribfvNV = NULL;
PFNGLGETVERTEXATTRIBIVPROC sf_glad_glGetVertexAttribiv = NULL;
PFNGLGETVERTEXATTRIBIVARBPROC sf_glad_glGetVertexAttribivARB = NULL;
PFNGLGETVERTEXATTRIBIVNVPROC sf_glad_glGetVertexAttribivNV = NULL;
PFNGLGETVIDEOCAPTURESTREAMDVNVPROC sf_glad_glGetVideoCaptureStreamdvNV = NULL;
PFNGLGETVIDEOCAPTURESTREAMFVNVPROC sf_glad_glGetVideoCaptureStreamfvNV = NULL;
PFNGLGETVIDEOCAPTURESTREAMIVNVPROC sf_glad_glGetVideoCaptureStreamivNV = NULL;
PFNGLGETVIDEOCAPTUREIVNVPROC sf_glad_glGetVideoCaptureivNV = NULL;
PFNGLGETVIDEOI64VNVPROC sf_glad_glGetVideoi64vNV = NULL;
PFNGLGETVIDEOIVNVPROC sf_glad_glGetVideoivNV = NULL;
PFNGLGETVIDEOUI64VNVPROC sf_glad_glGetVideoui64vNV = NULL;
PFNGLGETVIDEOUIVNVPROC sf_glad_glGetVideouivNV = NULL;
PFNGLGETVKPROCADDRNVPROC sf_glad_glGetVkProcAddrNV = NULL;
PFNGLGETNCOLORTABLEPROC sf_glad_glGetnColorTable = NULL;
PFNGLGETNCOLORTABLEARBPROC sf_glad_glGetnColorTableARB = NULL;
PFNGLGETNCOMPRESSEDTEXIMAGEPROC sf_glad_glGetnCompressedTexImage = NULL;
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC sf_glad_glGetnCompressedTexImageARB = NULL;
PFNGLGETNCONVOLUTIONFILTERPROC sf_glad_glGetnConvolutionFilter = NULL;
PFNGLGETNCONVOLUTIONFILTERARBPROC sf_glad_glGetnConvolutionFilterARB = NULL;
PFNGLGETNHISTOGRAMPROC sf_glad_glGetnHistogram = NULL;
PFNGLGETNHISTOGRAMARBPROC sf_glad_glGetnHistogramARB = NULL;
PFNGLGETNMAPDVPROC sf_glad_glGetnMapdv = NULL;
PFNGLGETNMAPDVARBPROC sf_glad_glGetnMapdvARB = NULL;
PFNGLGETNMAPFVPROC sf_glad_glGetnMapfv = NULL;
PFNGLGETNMAPFVARBPROC sf_glad_glGetnMapfvARB = NULL;
PFNGLGETNMAPIVPROC sf_glad_glGetnMapiv = NULL;
PFNGLGETNMAPIVARBPROC sf_glad_glGetnMapivARB = NULL;
PFNGLGETNMINMAXPROC sf_glad_glGetnMinmax = NULL;
PFNGLGETNMINMAXARBPROC sf_glad_glGetnMinmaxARB = NULL;
PFNGLGETNPIXELMAPFVPROC sf_glad_glGetnPixelMapfv = NULL;
PFNGLGETNPIXELMAPFVARBPROC sf_glad_glGetnPixelMapfvARB = NULL;
PFNGLGETNPIXELMAPUIVPROC sf_glad_glGetnPixelMapuiv = NULL;
PFNGLGETNPIXELMAPUIVARBPROC sf_glad_glGetnPixelMapuivARB = NULL;
PFNGLGETNPIXELMAPUSVPROC sf_glad_glGetnPixelMapusv = NULL;
PFNGLGETNPIXELMAPUSVARBPROC sf_glad_glGetnPixelMapusvARB = NULL;
PFNGLGETNPOLYGONSTIPPLEPROC sf_glad_glGetnPolygonStipple = NULL;
PFNGLGETNPOLYGONSTIPPLEARBPROC sf_glad_glGetnPolygonStippleARB = NULL;
PFNGLGETNSEPARABLEFILTERPROC sf_glad_glGetnSeparableFilter = NULL;
PFNGLGETNSEPARABLEFILTERARBPROC sf_glad_glGetnSeparableFilterARB = NULL;
PFNGLGETNTEXIMAGEPROC sf_glad_glGetnTexImage = NULL;
PFNGLGETNTEXIMAGEARBPROC sf_glad_glGetnTexImageARB = NULL;
PFNGLGETNUNIFORMDVPROC sf_glad_glGetnUniformdv = NULL;
PFNGLGETNUNIFORMDVARBPROC sf_glad_glGetnUniformdvARB = NULL;
PFNGLGETNUNIFORMFVPROC sf_glad_glGetnUniformfv = NULL;
PFNGLGETNUNIFORMFVARBPROC sf_glad_glGetnUniformfvARB = NULL;
PFNGLGETNUNIFORMI64VARBPROC sf_glad_glGetnUniformi64vARB = NULL;
PFNGLGETNUNIFORMIVPROC sf_glad_glGetnUniformiv = NULL;
PFNGLGETNUNIFORMIVARBPROC sf_glad_glGetnUniformivARB = NULL;
PFNGLGETNUNIFORMUI64VARBPROC sf_glad_glGetnUniformui64vARB = NULL;
PFNGLGETNUNIFORMUIVPROC sf_glad_glGetnUniformuiv = NULL;
PFNGLGETNUNIFORMUIVARBPROC sf_glad_glGetnUniformuivARB = NULL;
PFNGLGLOBALALPHAFACTORBSUNPROC sf_glad_glGlobalAlphaFactorbSUN = NULL;
PFNGLGLOBALALPHAFACTORDSUNPROC sf_glad_glGlobalAlphaFactordSUN = NULL;
PFNGLGLOBALALPHAFACTORFSUNPROC sf_glad_glGlobalAlphaFactorfSUN = NULL;
PFNGLGLOBALALPHAFACTORISUNPROC sf_glad_glGlobalAlphaFactoriSUN = NULL;
PFNGLGLOBALALPHAFACTORSSUNPROC sf_glad_glGlobalAlphaFactorsSUN = NULL;
PFNGLGLOBALALPHAFACTORUBSUNPROC sf_glad_glGlobalAlphaFactorubSUN = NULL;
PFNGLGLOBALALPHAFACTORUISUNPROC sf_glad_glGlobalAlphaFactoruiSUN = NULL;
PFNGLGLOBALALPHAFACTORUSSUNPROC sf_glad_glGlobalAlphaFactorusSUN = NULL;
PFNGLHINTPROC sf_glad_glHint = NULL;
PFNGLHINTPGIPROC sf_glad_glHintPGI = NULL;
PFNGLHISTOGRAMPROC sf_glad_glHistogram = NULL;
PFNGLHISTOGRAMEXTPROC sf_glad_glHistogramEXT = NULL;
PFNGLIGLOOINTERFACESGIXPROC sf_glad_glIglooInterfaceSGIX = NULL;
PFNGLIMAGETRANSFORMPARAMETERFHPPROC sf_glad_glImageTransformParameterfHP = NULL;
PFNGLIMAGETRANSFORMPARAMETERFVHPPROC sf_glad_glImageTransformParameterfvHP = NULL;
PFNGLIMAGETRANSFORMPARAMETERIHPPROC sf_glad_glImageTransformParameteriHP = NULL;
PFNGLIMAGETRANSFORMPARAMETERIVHPPROC sf_glad_glImageTransformParameterivHP = NULL;
PFNGLIMPORTMEMORYFDEXTPROC sf_glad_glImportMemoryFdEXT = NULL;
PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC sf_glad_glImportMemoryWin32HandleEXT = NULL;
PFNGLIMPORTMEMORYWIN32NAMEEXTPROC sf_glad_glImportMemoryWin32NameEXT = NULL;
PFNGLIMPORTSEMAPHOREFDEXTPROC sf_glad_glImportSemaphoreFdEXT = NULL;
PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC sf_glad_glImportSemaphoreWin32HandleEXT = NULL;
PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC sf_glad_glImportSemaphoreWin32NameEXT = NULL;
PFNGLIMPORTSYNCEXTPROC sf_glad_glImportSyncEXT = NULL;
PFNGLINDEXFORMATNVPROC sf_glad_glIndexFormatNV = NULL;
PFNGLINDEXFUNCEXTPROC sf_glad_glIndexFuncEXT = NULL;
PFNGLINDEXMASKPROC sf_glad_glIndexMask = NULL;
PFNGLINDEXMATERIALEXTPROC sf_glad_glIndexMaterialEXT = NULL;
PFNGLINDEXPOINTERPROC sf_glad_glIndexPointer = NULL;
PFNGLINDEXPOINTEREXTPROC sf_glad_glIndexPointerEXT = NULL;
PFNGLINDEXPOINTERLISTIBMPROC sf_glad_glIndexPointerListIBM = NULL;
PFNGLINDEXDPROC sf_glad_glIndexd = NULL;
PFNGLINDEXDVPROC sf_glad_glIndexdv = NULL;
PFNGLINDEXFPROC sf_glad_glIndexf = NULL;
PFNGLINDEXFVPROC sf_glad_glIndexfv = NULL;
PFNGLINDEXIPROC sf_glad_glIndexi = NULL;
PFNGLINDEXIVPROC sf_glad_glIndexiv = NULL;
PFNGLINDEXSPROC sf_glad_glIndexs = NULL;
PFNGLINDEXSVPROC sf_glad_glIndexsv = NULL;
PFNGLINDEXUBPROC sf_glad_glIndexub = NULL;
PFNGLINDEXUBVPROC sf_glad_glIndexubv = NULL;
PFNGLINDEXXOESPROC sf_glad_glIndexxOES = NULL;
PFNGLINDEXXVOESPROC sf_glad_glIndexxvOES = NULL;
PFNGLINITNAMESPROC sf_glad_glInitNames = NULL;
PFNGLINSERTCOMPONENTEXTPROC sf_glad_glInsertComponentEXT = NULL;
PFNGLINSERTEVENTMARKEREXTPROC sf_glad_glInsertEventMarkerEXT = NULL;
PFNGLINSTRUMENTSBUFFERSGIXPROC sf_glad_glInstrumentsBufferSGIX = NULL;
PFNGLINTERLEAVEDARRAYSPROC sf_glad_glInterleavedArrays = NULL;
PFNGLINTERPOLATEPATHSNVPROC sf_glad_glInterpolatePathsNV = NULL;
PFNGLINVALIDATEBUFFERDATAPROC sf_glad_glInvalidateBufferData = NULL;
PFNGLINVALIDATEBUFFERSUBDATAPROC sf_glad_glInvalidateBufferSubData = NULL;
PFNGLINVALIDATEFRAMEBUFFERPROC sf_glad_glInvalidateFramebuffer = NULL;
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC sf_glad_glInvalidateNamedFramebufferData = NULL;
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC sf_glad_glInvalidateNamedFramebufferSubData = NULL;
PFNGLINVALIDATESUBFRAMEBUFFERPROC sf_glad_glInvalidateSubFramebuffer = NULL;
PFNGLINVALIDATETEXIMAGEPROC sf_glad_glInvalidateTexImage = NULL;
PFNGLINVALIDATETEXSUBIMAGEPROC sf_glad_glInvalidateTexSubImage = NULL;
PFNGLISASYNCMARKERSGIXPROC sf_glad_glIsAsyncMarkerSGIX = NULL;
PFNGLISBUFFERPROC sf_glad_glIsBuffer = NULL;
PFNGLISBUFFERARBPROC sf_glad_glIsBufferARB = NULL;
PFNGLISBUFFERRESIDENTNVPROC sf_glad_glIsBufferResidentNV = NULL;
PFNGLISCOMMANDLISTNVPROC sf_glad_glIsCommandListNV = NULL;
PFNGLISENABLEDPROC sf_glad_glIsEnabled = NULL;
PFNGLISENABLEDINDEXEDEXTPROC sf_glad_glIsEnabledIndexedEXT = NULL;
PFNGLISENABLEDIPROC sf_glad_glIsEnabledi = NULL;
PFNGLISFENCEAPPLEPROC sf_glad_glIsFenceAPPLE = NULL;
PFNGLISFENCENVPROC sf_glad_glIsFenceNV = NULL;
PFNGLISFRAMEBUFFERPROC sf_glad_glIsFramebuffer = NULL;
PFNGLISFRAMEBUFFEREXTPROC sf_glad_glIsFramebufferEXT = NULL;
PFNGLISIMAGEHANDLERESIDENTARBPROC sf_glad_glIsImageHandleResidentARB = NULL;
PFNGLISIMAGEHANDLERESIDENTNVPROC sf_glad_glIsImageHandleResidentNV = NULL;
PFNGLISLISTPROC sf_glad_glIsList = NULL;
PFNGLISMEMORYOBJECTEXTPROC sf_glad_glIsMemoryObjectEXT = NULL;
PFNGLISNAMEAMDPROC sf_glad_glIsNameAMD = NULL;
PFNGLISNAMEDBUFFERRESIDENTNVPROC sf_glad_glIsNamedBufferResidentNV = NULL;
PFNGLISNAMEDSTRINGARBPROC sf_glad_glIsNamedStringARB = NULL;
PFNGLISOBJECTBUFFERATIPROC sf_glad_glIsObjectBufferATI = NULL;
PFNGLISOCCLUSIONQUERYNVPROC sf_glad_glIsOcclusionQueryNV = NULL;
PFNGLISPATHNVPROC sf_glad_glIsPathNV = NULL;
PFNGLISPOINTINFILLPATHNVPROC sf_glad_glIsPointInFillPathNV = NULL;
PFNGLISPOINTINSTROKEPATHNVPROC sf_glad_glIsPointInStrokePathNV = NULL;
PFNGLISPROGRAMPROC sf_glad_glIsProgram = NULL;
PFNGLISPROGRAMARBPROC sf_glad_glIsProgramARB = NULL;
PFNGLISPROGRAMNVPROC sf_glad_glIsProgramNV = NULL;
PFNGLISPROGRAMPIPELINEPROC sf_glad_glIsProgramPipeline = NULL;
PFNGLISQUERYPROC sf_glad_glIsQuery = NULL;
PFNGLISQUERYARBPROC sf_glad_glIsQueryARB = NULL;
PFNGLISRENDERBUFFERPROC sf_glad_glIsRenderbuffer = NULL;
PFNGLISRENDERBUFFEREXTPROC sf_glad_glIsRenderbufferEXT = NULL;
PFNGLISSAMPLERPROC sf_glad_glIsSampler = NULL;
PFNGLISSEMAPHOREEXTPROC sf_glad_glIsSemaphoreEXT = NULL;
PFNGLISSHADERPROC sf_glad_glIsShader = NULL;
PFNGLISSTATENVPROC sf_glad_glIsStateNV = NULL;
PFNGLISSYNCPROC sf_glad_glIsSync = NULL;
PFNGLISTEXTUREPROC sf_glad_glIsTexture = NULL;
PFNGLISTEXTUREEXTPROC sf_glad_glIsTextureEXT = NULL;
PFNGLISTEXTUREHANDLERESIDENTARBPROC sf_glad_glIsTextureHandleResidentARB = NULL;
PFNGLISTEXTUREHANDLERESIDENTNVPROC sf_glad_glIsTextureHandleResidentNV = NULL;
PFNGLISTRANSFORMFEEDBACKPROC sf_glad_glIsTransformFeedback = NULL;
PFNGLISTRANSFORMFEEDBACKNVPROC sf_glad_glIsTransformFeedbackNV = NULL;
PFNGLISVARIANTENABLEDEXTPROC sf_glad_glIsVariantEnabledEXT = NULL;
PFNGLISVERTEXARRAYPROC sf_glad_glIsVertexArray = NULL;
PFNGLISVERTEXARRAYAPPLEPROC sf_glad_glIsVertexArrayAPPLE = NULL;
PFNGLISVERTEXATTRIBENABLEDAPPLEPROC sf_glad_glIsVertexAttribEnabledAPPLE = NULL;
PFNGLLGPUCOPYIMAGESUBDATANVXPROC sf_glad_glLGPUCopyImageSubDataNVX = NULL;
PFNGLLGPUINTERLOCKNVXPROC sf_glad_glLGPUInterlockNVX = NULL;
PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC sf_glad_glLGPUNamedBufferSubDataNVX = NULL;
PFNGLLABELOBJECTEXTPROC sf_glad_glLabelObjectEXT = NULL;
PFNGLLIGHTENVISGIXPROC sf_glad_glLightEnviSGIX = NULL;
PFNGLLIGHTMODELFPROC sf_glad_glLightModelf = NULL;
PFNGLLIGHTMODELFVPROC sf_glad_glLightModelfv = NULL;
PFNGLLIGHTMODELIPROC sf_glad_glLightModeli = NULL;
PFNGLLIGHTMODELIVPROC sf_glad_glLightModeliv = NULL;
PFNGLLIGHTMODELXOESPROC sf_glad_glLightModelxOES = NULL;
PFNGLLIGHTMODELXVOESPROC sf_glad_glLightModelxvOES = NULL;
PFNGLLIGHTFPROC sf_glad_glLightf = NULL;
PFNGLLIGHTFVPROC sf_glad_glLightfv = NULL;
PFNGLLIGHTIPROC sf_glad_glLighti = NULL;
PFNGLLIGHTIVPROC sf_glad_glLightiv = NULL;
PFNGLLIGHTXOESPROC sf_glad_glLightxOES = NULL;
PFNGLLIGHTXVOESPROC sf_glad_glLightxvOES = NULL;
PFNGLLINESTIPPLEPROC sf_glad_glLineStipple = NULL;
PFNGLLINEWIDTHPROC sf_glad_glLineWidth = NULL;
PFNGLLINEWIDTHXOESPROC sf_glad_glLineWidthxOES = NULL;
PFNGLLINKPROGRAMPROC sf_glad_glLinkProgram = NULL;
PFNGLLINKPROGRAMARBPROC sf_glad_glLinkProgramARB = NULL;
PFNGLLISTBASEPROC sf_glad_glListBase = NULL;
PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC sf_glad_glListDrawCommandsStatesClientNV = NULL;
PFNGLLISTPARAMETERFSGIXPROC sf_glad_glListParameterfSGIX = NULL;
PFNGLLISTPARAMETERFVSGIXPROC sf_glad_glListParameterfvSGIX = NULL;
PFNGLLISTPARAMETERISGIXPROC sf_glad_glListParameteriSGIX = NULL;
PFNGLLISTPARAMETERIVSGIXPROC sf_glad_glListParameterivSGIX = NULL;
PFNGLLOADIDENTITYPROC sf_glad_glLoadIdentity = NULL;
PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC sf_glad_glLoadIdentityDeformationMapSGIX = NULL;
PFNGLLOADMATRIXDPROC sf_glad_glLoadMatrixd = NULL;
PFNGLLOADMATRIXFPROC sf_glad_glLoadMatrixf = NULL;
PFNGLLOADMATRIXXOESPROC sf_glad_glLoadMatrixxOES = NULL;
PFNGLLOADNAMEPROC sf_glad_glLoadName = NULL;
PFNGLLOADPROGRAMNVPROC sf_glad_glLoadProgramNV = NULL;
PFNGLLOADTRANSPOSEMATRIXDPROC sf_glad_glLoadTransposeMatrixd = NULL;
PFNGLLOADTRANSPOSEMATRIXDARBPROC sf_glad_glLoadTransposeMatrixdARB = NULL;
PFNGLLOADTRANSPOSEMATRIXFPROC sf_glad_glLoadTransposeMatrixf = NULL;
PFNGLLOADTRANSPOSEMATRIXFARBPROC sf_glad_glLoadTransposeMatrixfARB = NULL;
PFNGLLOADTRANSPOSEMATRIXXOESPROC sf_glad_glLoadTransposeMatrixxOES = NULL;
PFNGLLOCKARRAYSEXTPROC sf_glad_glLockArraysEXT = NULL;
PFNGLLOGICOPPROC sf_glad_glLogicOp = NULL;
PFNGLMAKEBUFFERNONRESIDENTNVPROC sf_glad_glMakeBufferNonResidentNV = NULL;
PFNGLMAKEBUFFERRESIDENTNVPROC sf_glad_glMakeBufferResidentNV = NULL;
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC sf_glad_glMakeImageHandleNonResidentARB = NULL;
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC sf_glad_glMakeImageHandleNonResidentNV = NULL;
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC sf_glad_glMakeImageHandleResidentARB = NULL;
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC sf_glad_glMakeImageHandleResidentNV = NULL;
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC sf_glad_glMakeNamedBufferNonResidentNV = NULL;
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC sf_glad_glMakeNamedBufferResidentNV = NULL;
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC sf_glad_glMakeTextureHandleNonResidentARB = NULL;
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC sf_glad_glMakeTextureHandleNonResidentNV = NULL;
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC sf_glad_glMakeTextureHandleResidentARB = NULL;
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC sf_glad_glMakeTextureHandleResidentNV = NULL;
PFNGLMAP1DPROC sf_glad_glMap1d = NULL;
PFNGLMAP1FPROC sf_glad_glMap1f = NULL;
PFNGLMAP1XOESPROC sf_glad_glMap1xOES = NULL;
PFNGLMAP2DPROC sf_glad_glMap2d = NULL;
PFNGLMAP2FPROC sf_glad_glMap2f = NULL;
PFNGLMAP2XOESPROC sf_glad_glMap2xOES = NULL;
PFNGLMAPBUFFERPROC sf_glad_glMapBuffer = NULL;
PFNGLMAPBUFFERARBPROC sf_glad_glMapBufferARB = NULL;
PFNGLMAPBUFFERRANGEPROC sf_glad_glMapBufferRange = NULL;
PFNGLMAPCONTROLPOINTSNVPROC sf_glad_glMapControlPointsNV = NULL;
PFNGLMAPGRID1DPROC sf_glad_glMapGrid1d = NULL;
PFNGLMAPGRID1FPROC sf_glad_glMapGrid1f = NULL;
PFNGLMAPGRID1XOESPROC sf_glad_glMapGrid1xOES = NULL;
PFNGLMAPGRID2DPROC sf_glad_glMapGrid2d = NULL;
PFNGLMAPGRID2FPROC sf_glad_glMapGrid2f = NULL;
PFNGLMAPGRID2XOESPROC sf_glad_glMapGrid2xOES = NULL;
PFNGLMAPNAMEDBUFFERPROC sf_glad_glMapNamedBuffer = NULL;
PFNGLMAPNAMEDBUFFEREXTPROC sf_glad_glMapNamedBufferEXT = NULL;
PFNGLMAPNAMEDBUFFERRANGEPROC sf_glad_glMapNamedBufferRange = NULL;
PFNGLMAPNAMEDBUFFERRANGEEXTPROC sf_glad_glMapNamedBufferRangeEXT = NULL;
PFNGLMAPOBJECTBUFFERATIPROC sf_glad_glMapObjectBufferATI = NULL;
PFNGLMAPPARAMETERFVNVPROC sf_glad_glMapParameterfvNV = NULL;
PFNGLMAPPARAMETERIVNVPROC sf_glad_glMapParameterivNV = NULL;
PFNGLMAPTEXTURE2DINTELPROC sf_glad_glMapTexture2DINTEL = NULL;
PFNGLMAPVERTEXATTRIB1DAPPLEPROC sf_glad_glMapVertexAttrib1dAPPLE = NULL;
PFNGLMAPVERTEXATTRIB1FAPPLEPROC sf_glad_glMapVertexAttrib1fAPPLE = NULL;
PFNGLMAPVERTEXATTRIB2DAPPLEPROC sf_glad_glMapVertexAttrib2dAPPLE = NULL;
PFNGLMAPVERTEXATTRIB2FAPPLEPROC sf_glad_glMapVertexAttrib2fAPPLE = NULL;
PFNGLMATERIALFPROC sf_glad_glMaterialf = NULL;
PFNGLMATERIALFVPROC sf_glad_glMaterialfv = NULL;
PFNGLMATERIALIPROC sf_glad_glMateriali = NULL;
PFNGLMATERIALIVPROC sf_glad_glMaterialiv = NULL;
PFNGLMATERIALXOESPROC sf_glad_glMaterialxOES = NULL;
PFNGLMATERIALXVOESPROC sf_glad_glMaterialxvOES = NULL;
PFNGLMATRIXFRUSTUMEXTPROC sf_glad_glMatrixFrustumEXT = NULL;
PFNGLMATRIXINDEXPOINTERARBPROC sf_glad_glMatrixIndexPointerARB = NULL;
PFNGLMATRIXINDEXUBVARBPROC sf_glad_glMatrixIndexubvARB = NULL;
PFNGLMATRIXINDEXUIVARBPROC sf_glad_glMatrixIndexuivARB = NULL;
PFNGLMATRIXINDEXUSVARBPROC sf_glad_glMatrixIndexusvARB = NULL;
PFNGLMATRIXLOAD3X2FNVPROC sf_glad_glMatrixLoad3x2fNV = NULL;
PFNGLMATRIXLOAD3X3FNVPROC sf_glad_glMatrixLoad3x3fNV = NULL;
PFNGLMATRIXLOADIDENTITYEXTPROC sf_glad_glMatrixLoadIdentityEXT = NULL;
PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC sf_glad_glMatrixLoadTranspose3x3fNV = NULL;
PFNGLMATRIXLOADTRANSPOSEDEXTPROC sf_glad_glMatrixLoadTransposedEXT = NULL;
PFNGLMATRIXLOADTRANSPOSEFEXTPROC sf_glad_glMatrixLoadTransposefEXT = NULL;
PFNGLMATRIXLOADDEXTPROC sf_glad_glMatrixLoaddEXT = NULL;
PFNGLMATRIXLOADFEXTPROC sf_glad_glMatrixLoadfEXT = NULL;
PFNGLMATRIXMODEPROC sf_glad_glMatrixMode = NULL;
PFNGLMATRIXMULT3X2FNVPROC sf_glad_glMatrixMult3x2fNV = NULL;
PFNGLMATRIXMULT3X3FNVPROC sf_glad_glMatrixMult3x3fNV = NULL;
PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC sf_glad_glMatrixMultTranspose3x3fNV = NULL;
PFNGLMATRIXMULTTRANSPOSEDEXTPROC sf_glad_glMatrixMultTransposedEXT = NULL;
PFNGLMATRIXMULTTRANSPOSEFEXTPROC sf_glad_glMatrixMultTransposefEXT = NULL;
PFNGLMATRIXMULTDEXTPROC sf_glad_glMatrixMultdEXT = NULL;
PFNGLMATRIXMULTFEXTPROC sf_glad_glMatrixMultfEXT = NULL;
PFNGLMATRIXORTHOEXTPROC sf_glad_glMatrixOrthoEXT = NULL;
PFNGLMATRIXPOPEXTPROC sf_glad_glMatrixPopEXT = NULL;
PFNGLMATRIXPUSHEXTPROC sf_glad_glMatrixPushEXT = NULL;
PFNGLMATRIXROTATEDEXTPROC sf_glad_glMatrixRotatedEXT = NULL;
PFNGLMATRIXROTATEFEXTPROC sf_glad_glMatrixRotatefEXT = NULL;
PFNGLMATRIXSCALEDEXTPROC sf_glad_glMatrixScaledEXT = NULL;
PFNGLMATRIXSCALEFEXTPROC sf_glad_glMatrixScalefEXT = NULL;
PFNGLMATRIXTRANSLATEDEXTPROC sf_glad_glMatrixTranslatedEXT = NULL;
PFNGLMATRIXTRANSLATEFEXTPROC sf_glad_glMatrixTranslatefEXT = NULL;
PFNGLMAXSHADERCOMPILERTHREADSARBPROC sf_glad_glMaxShaderCompilerThreadsARB = NULL;
PFNGLMAXSHADERCOMPILERTHREADSKHRPROC sf_glad_glMaxShaderCompilerThreadsKHR = NULL;
PFNGLMEMORYBARRIERPROC sf_glad_glMemoryBarrier = NULL;
PFNGLMEMORYBARRIERBYREGIONPROC sf_glad_glMemoryBarrierByRegion = NULL;
PFNGLMEMORYBARRIEREXTPROC sf_glad_glMemoryBarrierEXT = NULL;
PFNGLMEMORYOBJECTPARAMETERIVEXTPROC sf_glad_glMemoryObjectParameterivEXT = NULL;
PFNGLMINSAMPLESHADINGPROC sf_glad_glMinSampleShading = NULL;
PFNGLMINSAMPLESHADINGARBPROC sf_glad_glMinSampleShadingARB = NULL;
PFNGLMINMAXPROC sf_glad_glMinmax = NULL;
PFNGLMINMAXEXTPROC sf_glad_glMinmaxEXT = NULL;
PFNGLMULTMATRIXDPROC sf_glad_glMultMatrixd = NULL;
PFNGLMULTMATRIXFPROC sf_glad_glMultMatrixf = NULL;
PFNGLMULTMATRIXXOESPROC sf_glad_glMultMatrixxOES = NULL;
PFNGLMULTTRANSPOSEMATRIXDPROC sf_glad_glMultTransposeMatrixd = NULL;
PFNGLMULTTRANSPOSEMATRIXDARBPROC sf_glad_glMultTransposeMatrixdARB = NULL;
PFNGLMULTTRANSPOSEMATRIXFPROC sf_glad_glMultTransposeMatrixf = NULL;
PFNGLMULTTRANSPOSEMATRIXFARBPROC sf_glad_glMultTransposeMatrixfARB = NULL;
PFNGLMULTTRANSPOSEMATRIXXOESPROC sf_glad_glMultTransposeMatrixxOES = NULL;
PFNGLMULTIDRAWARRAYSPROC sf_glad_glMultiDrawArrays = NULL;
PFNGLMULTIDRAWARRAYSEXTPROC sf_glad_glMultiDrawArraysEXT = NULL;
PFNGLMULTIDRAWARRAYSINDIRECTPROC sf_glad_glMultiDrawArraysIndirect = NULL;
PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC sf_glad_glMultiDrawArraysIndirectAMD = NULL;
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC sf_glad_glMultiDrawArraysIndirectBindlessCountNV = NULL;
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC sf_glad_glMultiDrawArraysIndirectBindlessNV = NULL;
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC sf_glad_glMultiDrawArraysIndirectCount = NULL;
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC sf_glad_glMultiDrawArraysIndirectCountARB = NULL;
PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC sf_glad_glMultiDrawElementArrayAPPLE = NULL;
PFNGLMULTIDRAWELEMENTSPROC sf_glad_glMultiDrawElements = NULL;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC sf_glad_glMultiDrawElementsBaseVertex = NULL;
PFNGLMULTIDRAWELEMENTSEXTPROC sf_glad_glMultiDrawElementsEXT = NULL;
PFNGLMULTIDRAWELEMENTSINDIRECTPROC sf_glad_glMultiDrawElementsIndirect = NULL;
PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC sf_glad_glMultiDrawElementsIndirectAMD = NULL;
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC sf_glad_glMultiDrawElementsIndirectBindlessCountNV = NULL;
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC sf_glad_glMultiDrawElementsIndirectBindlessNV = NULL;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC sf_glad_glMultiDrawElementsIndirectCount = NULL;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC sf_glad_glMultiDrawElementsIndirectCountARB = NULL;
PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC sf_glad_glMultiDrawMeshTasksIndirectCountNV = NULL;
PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC sf_glad_glMultiDrawMeshTasksIndirectNV = NULL;
PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC sf_glad_glMultiDrawRangeElementArrayAPPLE = NULL;
PFNGLMULTIMODEDRAWARRAYSIBMPROC sf_glad_glMultiModeDrawArraysIBM = NULL;
PFNGLMULTIMODEDRAWELEMENTSIBMPROC sf_glad_glMultiModeDrawElementsIBM = NULL;
PFNGLMULTITEXBUFFEREXTPROC sf_glad_glMultiTexBufferEXT = NULL;
PFNGLMULTITEXCOORD1BOESPROC sf_glad_glMultiTexCoord1bOES = NULL;
PFNGLMULTITEXCOORD1BVOESPROC sf_glad_glMultiTexCoord1bvOES = NULL;
PFNGLMULTITEXCOORD1DPROC sf_glad_glMultiTexCoord1d = NULL;
PFNGLMULTITEXCOORD1DARBPROC sf_glad_glMultiTexCoord1dARB = NULL;
PFNGLMULTITEXCOORD1DVPROC sf_glad_glMultiTexCoord1dv = NULL;
PFNGLMULTITEXCOORD1DVARBPROC sf_glad_glMultiTexCoord1dvARB = NULL;
PFNGLMULTITEXCOORD1FPROC sf_glad_glMultiTexCoord1f = NULL;
PFNGLMULTITEXCOORD1FARBPROC sf_glad_glMultiTexCoord1fARB = NULL;
PFNGLMULTITEXCOORD1FVPROC sf_glad_glMultiTexCoord1fv = NULL;
PFNGLMULTITEXCOORD1FVARBPROC sf_glad_glMultiTexCoord1fvARB = NULL;
PFNGLMULTITEXCOORD1HNVPROC sf_glad_glMultiTexCoord1hNV = NULL;
PFNGLMULTITEXCOORD1HVNVPROC sf_glad_glMultiTexCoord1hvNV = NULL;
PFNGLMULTITEXCOORD1IPROC sf_glad_glMultiTexCoord1i = NULL;
PFNGLMULTITEXCOORD1IARBPROC sf_glad_glMultiTexCoord1iARB = NULL;
PFNGLMULTITEXCOORD1IVPROC sf_glad_glMultiTexCoord1iv = NULL;
PFNGLMULTITEXCOORD1IVARBPROC sf_glad_glMultiTexCoord1ivARB = NULL;
PFNGLMULTITEXCOORD1SPROC sf_glad_glMultiTexCoord1s = NULL;
PFNGLMULTITEXCOORD1SARBPROC sf_glad_glMultiTexCoord1sARB = NULL;
PFNGLMULTITEXCOORD1SVPROC sf_glad_glMultiTexCoord1sv = NULL;
PFNGLMULTITEXCOORD1SVARBPROC sf_glad_glMultiTexCoord1svARB = NULL;
PFNGLMULTITEXCOORD1XOESPROC sf_glad_glMultiTexCoord1xOES = NULL;
PFNGLMULTITEXCOORD1XVOESPROC sf_glad_glMultiTexCoord1xvOES = NULL;
PFNGLMULTITEXCOORD2BOESPROC sf_glad_glMultiTexCoord2bOES = NULL;
PFNGLMULTITEXCOORD2BVOESPROC sf_glad_glMultiTexCoord2bvOES = NULL;
PFNGLMULTITEXCOORD2DPROC sf_glad_glMultiTexCoord2d = NULL;
PFNGLMULTITEXCOORD2DARBPROC sf_glad_glMultiTexCoord2dARB = NULL;
PFNGLMULTITEXCOORD2DVPROC sf_glad_glMultiTexCoord2dv = NULL;
PFNGLMULTITEXCOORD2DVARBPROC sf_glad_glMultiTexCoord2dvARB = NULL;
PFNGLMULTITEXCOORD2FPROC sf_glad_glMultiTexCoord2f = NULL;
PFNGLMULTITEXCOORD2FARBPROC sf_glad_glMultiTexCoord2fARB = NULL;
PFNGLMULTITEXCOORD2FVPROC sf_glad_glMultiTexCoord2fv = NULL;
PFNGLMULTITEXCOORD2FVARBPROC sf_glad_glMultiTexCoord2fvARB = NULL;
PFNGLMULTITEXCOORD2HNVPROC sf_glad_glMultiTexCoord2hNV = NULL;
PFNGLMULTITEXCOORD2HVNVPROC sf_glad_glMultiTexCoord2hvNV = NULL;
PFNGLMULTITEXCOORD2IPROC sf_glad_glMultiTexCoord2i = NULL;
PFNGLMULTITEXCOORD2IARBPROC sf_glad_glMultiTexCoord2iARB = NULL;
PFNGLMULTITEXCOORD2IVPROC sf_glad_glMultiTexCoord2iv = NULL;
PFNGLMULTITEXCOORD2IVARBPROC sf_glad_glMultiTexCoord2ivARB = NULL;
PFNGLMULTITEXCOORD2SPROC sf_glad_glMultiTexCoord2s = NULL;
PFNGLMULTITEXCOORD2SARBPROC sf_glad_glMultiTexCoord2sARB = NULL;
PFNGLMULTITEXCOORD2SVPROC sf_glad_glMultiTexCoord2sv = NULL;
PFNGLMULTITEXCOORD2SVARBPROC sf_glad_glMultiTexCoord2svARB = NULL;
PFNGLMULTITEXCOORD2XOESPROC sf_glad_glMultiTexCoord2xOES = NULL;
PFNGLMULTITEXCOORD2XVOESPROC sf_glad_glMultiTexCoord2xvOES = NULL;
PFNGLMULTITEXCOORD3BOESPROC sf_glad_glMultiTexCoord3bOES = NULL;
PFNGLMULTITEXCOORD3BVOESPROC sf_glad_glMultiTexCoord3bvOES = NULL;
PFNGLMULTITEXCOORD3DPROC sf_glad_glMultiTexCoord3d = NULL;
PFNGLMULTITEXCOORD3DARBPROC sf_glad_glMultiTexCoord3dARB = NULL;
PFNGLMULTITEXCOORD3DVPROC sf_glad_glMultiTexCoord3dv = NULL;
PFNGLMULTITEXCOORD3DVARBPROC sf_glad_glMultiTexCoord3dvARB = NULL;
PFNGLMULTITEXCOORD3FPROC sf_glad_glMultiTexCoord3f = NULL;
PFNGLMULTITEXCOORD3FARBPROC sf_glad_glMultiTexCoord3fARB = NULL;
PFNGLMULTITEXCOORD3FVPROC sf_glad_glMultiTexCoord3fv = NULL;
PFNGLMULTITEXCOORD3FVARBPROC sf_glad_glMultiTexCoord3fvARB = NULL;
PFNGLMULTITEXCOORD3HNVPROC sf_glad_glMultiTexCoord3hNV = NULL;
PFNGLMULTITEXCOORD3HVNVPROC sf_glad_glMultiTexCoord3hvNV = NULL;
PFNGLMULTITEXCOORD3IPROC sf_glad_glMultiTexCoord3i = NULL;
PFNGLMULTITEXCOORD3IARBPROC sf_glad_glMultiTexCoord3iARB = NULL;
PFNGLMULTITEXCOORD3IVPROC sf_glad_glMultiTexCoord3iv = NULL;
PFNGLMULTITEXCOORD3IVARBPROC sf_glad_glMultiTexCoord3ivARB = NULL;
PFNGLMULTITEXCOORD3SPROC sf_glad_glMultiTexCoord3s = NULL;
PFNGLMULTITEXCOORD3SARBPROC sf_glad_glMultiTexCoord3sARB = NULL;
PFNGLMULTITEXCOORD3SVPROC sf_glad_glMultiTexCoord3sv = NULL;
PFNGLMULTITEXCOORD3SVARBPROC sf_glad_glMultiTexCoord3svARB = NULL;
PFNGLMULTITEXCOORD3XOESPROC sf_glad_glMultiTexCoord3xOES = NULL;
PFNGLMULTITEXCOORD3XVOESPROC sf_glad_glMultiTexCoord3xvOES = NULL;
PFNGLMULTITEXCOORD4BOESPROC sf_glad_glMultiTexCoord4bOES = NULL;
PFNGLMULTITEXCOORD4BVOESPROC sf_glad_glMultiTexCoord4bvOES = NULL;
PFNGLMULTITEXCOORD4DPROC sf_glad_glMultiTexCoord4d = NULL;
PFNGLMULTITEXCOORD4DARBPROC sf_glad_glMultiTexCoord4dARB = NULL;
PFNGLMULTITEXCOORD4DVPROC sf_glad_glMultiTexCoord4dv = NULL;
PFNGLMULTITEXCOORD4DVARBPROC sf_glad_glMultiTexCoord4dvARB = NULL;
PFNGLMULTITEXCOORD4FPROC sf_glad_glMultiTexCoord4f = NULL;
PFNGLMULTITEXCOORD4FARBPROC sf_glad_glMultiTexCoord4fARB = NULL;
PFNGLMULTITEXCOORD4FVPROC sf_glad_glMultiTexCoord4fv = NULL;
PFNGLMULTITEXCOORD4FVARBPROC sf_glad_glMultiTexCoord4fvARB = NULL;
PFNGLMULTITEXCOORD4HNVPROC sf_glad_glMultiTexCoord4hNV = NULL;
PFNGLMULTITEXCOORD4HVNVPROC sf_glad_glMultiTexCoord4hvNV = NULL;
PFNGLMULTITEXCOORD4IPROC sf_glad_glMultiTexCoord4i = NULL;
PFNGLMULTITEXCOORD4IARBPROC sf_glad_glMultiTexCoord4iARB = NULL;
PFNGLMULTITEXCOORD4IVPROC sf_glad_glMultiTexCoord4iv = NULL;
PFNGLMULTITEXCOORD4IVARBPROC sf_glad_glMultiTexCoord4ivARB = NULL;
PFNGLMULTITEXCOORD4SPROC sf_glad_glMultiTexCoord4s = NULL;
PFNGLMULTITEXCOORD4SARBPROC sf_glad_glMultiTexCoord4sARB = NULL;
PFNGLMULTITEXCOORD4SVPROC sf_glad_glMultiTexCoord4sv = NULL;
PFNGLMULTITEXCOORD4SVARBPROC sf_glad_glMultiTexCoord4svARB = NULL;
PFNGLMULTITEXCOORD4XOESPROC sf_glad_glMultiTexCoord4xOES = NULL;
PFNGLMULTITEXCOORD4XVOESPROC sf_glad_glMultiTexCoord4xvOES = NULL;
PFNGLMULTITEXCOORDP1UIPROC sf_glad_glMultiTexCoordP1ui = NULL;
PFNGLMULTITEXCOORDP1UIVPROC sf_glad_glMultiTexCoordP1uiv = NULL;
PFNGLMULTITEXCOORDP2UIPROC sf_glad_glMultiTexCoordP2ui = NULL;
PFNGLMULTITEXCOORDP2UIVPROC sf_glad_glMultiTexCoordP2uiv = NULL;
PFNGLMULTITEXCOORDP3UIPROC sf_glad_glMultiTexCoordP3ui = NULL;
PFNGLMULTITEXCOORDP3UIVPROC sf_glad_glMultiTexCoordP3uiv = NULL;
PFNGLMULTITEXCOORDP4UIPROC sf_glad_glMultiTexCoordP4ui = NULL;
PFNGLMULTITEXCOORDP4UIVPROC sf_glad_glMultiTexCoordP4uiv = NULL;
PFNGLMULTITEXCOORDPOINTEREXTPROC sf_glad_glMultiTexCoordPointerEXT = NULL;
PFNGLMULTITEXENVFEXTPROC sf_glad_glMultiTexEnvfEXT = NULL;
PFNGLMULTITEXENVFVEXTPROC sf_glad_glMultiTexEnvfvEXT = NULL;
PFNGLMULTITEXENVIEXTPROC sf_glad_glMultiTexEnviEXT = NULL;
PFNGLMULTITEXENVIVEXTPROC sf_glad_glMultiTexEnvivEXT = NULL;
PFNGLMULTITEXGENDEXTPROC sf_glad_glMultiTexGendEXT = NULL;
PFNGLMULTITEXGENDVEXTPROC sf_glad_glMultiTexGendvEXT = NULL;
PFNGLMULTITEXGENFEXTPROC sf_glad_glMultiTexGenfEXT = NULL;
PFNGLMULTITEXGENFVEXTPROC sf_glad_glMultiTexGenfvEXT = NULL;
PFNGLMULTITEXGENIEXTPROC sf_glad_glMultiTexGeniEXT = NULL;
PFNGLMULTITEXGENIVEXTPROC sf_glad_glMultiTexGenivEXT = NULL;
PFNGLMULTITEXIMAGE1DEXTPROC sf_glad_glMultiTexImage1DEXT = NULL;
PFNGLMULTITEXIMAGE2DEXTPROC sf_glad_glMultiTexImage2DEXT = NULL;
PFNGLMULTITEXIMAGE3DEXTPROC sf_glad_glMultiTexImage3DEXT = NULL;
PFNGLMULTITEXPARAMETERIIVEXTPROC sf_glad_glMultiTexParameterIivEXT = NULL;
PFNGLMULTITEXPARAMETERIUIVEXTPROC sf_glad_glMultiTexParameterIuivEXT = NULL;
PFNGLMULTITEXPARAMETERFEXTPROC sf_glad_glMultiTexParameterfEXT = NULL;
PFNGLMULTITEXPARAMETERFVEXTPROC sf_glad_glMultiTexParameterfvEXT = NULL;
PFNGLMULTITEXPARAMETERIEXTPROC sf_glad_glMultiTexParameteriEXT = NULL;
PFNGLMULTITEXPARAMETERIVEXTPROC sf_glad_glMultiTexParameterivEXT = NULL;
PFNGLMULTITEXRENDERBUFFEREXTPROC sf_glad_glMultiTexRenderbufferEXT = NULL;
PFNGLMULTITEXSUBIMAGE1DEXTPROC sf_glad_glMultiTexSubImage1DEXT = NULL;
PFNGLMULTITEXSUBIMAGE2DEXTPROC sf_glad_glMultiTexSubImage2DEXT = NULL;
PFNGLMULTITEXSUBIMAGE3DEXTPROC sf_glad_glMultiTexSubImage3DEXT = NULL;
PFNGLMULTICASTBARRIERNVPROC sf_glad_glMulticastBarrierNV = NULL;
PFNGLMULTICASTBLITFRAMEBUFFERNVPROC sf_glad_glMulticastBlitFramebufferNV = NULL;
PFNGLMULTICASTBUFFERSUBDATANVPROC sf_glad_glMulticastBufferSubDataNV = NULL;
PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC sf_glad_glMulticastCopyBufferSubDataNV = NULL;
PFNGLMULTICASTCOPYIMAGESUBDATANVPROC sf_glad_glMulticastCopyImageSubDataNV = NULL;
PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC sf_glad_glMulticastFramebufferSampleLocationsfvNV = NULL;
PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC sf_glad_glMulticastGetQueryObjecti64vNV = NULL;
PFNGLMULTICASTGETQUERYOBJECTIVNVPROC sf_glad_glMulticastGetQueryObjectivNV = NULL;
PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC sf_glad_glMulticastGetQueryObjectui64vNV = NULL;
PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC sf_glad_glMulticastGetQueryObjectuivNV = NULL;
PFNGLMULTICASTSCISSORARRAYVNVXPROC sf_glad_glMulticastScissorArrayvNVX = NULL;
PFNGLMULTICASTVIEWPORTARRAYVNVXPROC sf_glad_glMulticastViewportArrayvNVX = NULL;
PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC sf_glad_glMulticastViewportPositionWScaleNVX = NULL;
PFNGLMULTICASTWAITSYNCNVPROC sf_glad_glMulticastWaitSyncNV = NULL;
PFNGLNAMEDBUFFERATTACHMEMORYNVPROC sf_glad_glNamedBufferAttachMemoryNV = NULL;
PFNGLNAMEDBUFFERDATAPROC sf_glad_glNamedBufferData = NULL;
PFNGLNAMEDBUFFERDATAEXTPROC sf_glad_glNamedBufferDataEXT = NULL;
PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC sf_glad_glNamedBufferPageCommitmentARB = NULL;
PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC sf_glad_glNamedBufferPageCommitmentEXT = NULL;
PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC sf_glad_glNamedBufferPageCommitmentMemNV = NULL;
PFNGLNAMEDBUFFERSTORAGEPROC sf_glad_glNamedBufferStorage = NULL;
PFNGLNAMEDBUFFERSTORAGEEXTPROC sf_glad_glNamedBufferStorageEXT = NULL;
PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC sf_glad_glNamedBufferStorageExternalEXT = NULL;
PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC sf_glad_glNamedBufferStorageMemEXT = NULL;
PFNGLNAMEDBUFFERSUBDATAPROC sf_glad_glNamedBufferSubData = NULL;
PFNGLNAMEDBUFFERSUBDATAEXTPROC sf_glad_glNamedBufferSubDataEXT = NULL;
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC sf_glad_glNamedCopyBufferSubDataEXT = NULL;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC sf_glad_glNamedFramebufferDrawBuffer = NULL;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC sf_glad_glNamedFramebufferDrawBuffers = NULL;
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC sf_glad_glNamedFramebufferParameteri = NULL;
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC sf_glad_glNamedFramebufferParameteriEXT = NULL;
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC sf_glad_glNamedFramebufferReadBuffer = NULL;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC sf_glad_glNamedFramebufferRenderbuffer = NULL;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC sf_glad_glNamedFramebufferRenderbufferEXT = NULL;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC sf_glad_glNamedFramebufferSampleLocationsfvARB = NULL;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC sf_glad_glNamedFramebufferSampleLocationsfvNV = NULL;
PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC sf_glad_glNamedFramebufferSamplePositionsfvAMD = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC sf_glad_glNamedFramebufferTexture = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC sf_glad_glNamedFramebufferTexture1DEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC sf_glad_glNamedFramebufferTexture2DEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC sf_glad_glNamedFramebufferTexture3DEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC sf_glad_glNamedFramebufferTextureEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC sf_glad_glNamedFramebufferTextureFaceEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC sf_glad_glNamedFramebufferTextureLayer = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC sf_glad_glNamedFramebufferTextureLayerEXT = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC sf_glad_glNamedFramebufferTextureMultiviewOVR = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC sf_glad_glNamedProgramLocalParameter4dEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC sf_glad_glNamedProgramLocalParameter4dvEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC sf_glad_glNamedProgramLocalParameter4fEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC sf_glad_glNamedProgramLocalParameter4fvEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC sf_glad_glNamedProgramLocalParameterI4iEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC sf_glad_glNamedProgramLocalParameterI4ivEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC sf_glad_glNamedProgramLocalParameterI4uiEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC sf_glad_glNamedProgramLocalParameterI4uivEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC sf_glad_glNamedProgramLocalParameters4fvEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC sf_glad_glNamedProgramLocalParametersI4ivEXT = NULL;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC sf_glad_glNamedProgramLocalParametersI4uivEXT = NULL;
PFNGLNAMEDPROGRAMSTRINGEXTPROC sf_glad_glNamedProgramStringEXT = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEPROC sf_glad_glNamedRenderbufferStorage = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC sf_glad_glNamedRenderbufferStorageEXT = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC sf_glad_glNamedRenderbufferStorageMultisample = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC sf_glad_glNamedRenderbufferStorageMultisampleAdvancedAMD = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC sf_glad_glNamedRenderbufferStorageMultisampleCoverageEXT = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC sf_glad_glNamedRenderbufferStorageMultisampleEXT = NULL;
PFNGLNAMEDSTRINGARBPROC sf_glad_glNamedStringARB = NULL;
PFNGLNEWLISTPROC sf_glad_glNewList = NULL;
PFNGLNEWOBJECTBUFFERATIPROC sf_glad_glNewObjectBufferATI = NULL;
PFNGLNORMAL3BPROC sf_glad_glNormal3b = NULL;
PFNGLNORMAL3BVPROC sf_glad_glNormal3bv = NULL;
PFNGLNORMAL3DPROC sf_glad_glNormal3d = NULL;
PFNGLNORMAL3DVPROC sf_glad_glNormal3dv = NULL;
PFNGLNORMAL3FPROC sf_glad_glNormal3f = NULL;
PFNGLNORMAL3FVERTEX3FSUNPROC sf_glad_glNormal3fVertex3fSUN = NULL;
PFNGLNORMAL3FVERTEX3FVSUNPROC sf_glad_glNormal3fVertex3fvSUN = NULL;
PFNGLNORMAL3FVPROC sf_glad_glNormal3fv = NULL;
PFNGLNORMAL3HNVPROC sf_glad_glNormal3hNV = NULL;
PFNGLNORMAL3HVNVPROC sf_glad_glNormal3hvNV = NULL;
PFNGLNORMAL3IPROC sf_glad_glNormal3i = NULL;
PFNGLNORMAL3IVPROC sf_glad_glNormal3iv = NULL;
PFNGLNORMAL3SPROC sf_glad_glNormal3s = NULL;
PFNGLNORMAL3SVPROC sf_glad_glNormal3sv = NULL;
PFNGLNORMAL3XOESPROC sf_glad_glNormal3xOES = NULL;
PFNGLNORMAL3XVOESPROC sf_glad_glNormal3xvOES = NULL;
PFNGLNORMALFORMATNVPROC sf_glad_glNormalFormatNV = NULL;
PFNGLNORMALP3UIPROC sf_glad_glNormalP3ui = NULL;
PFNGLNORMALP3UIVPROC sf_glad_glNormalP3uiv = NULL;
PFNGLNORMALPOINTERPROC sf_glad_glNormalPointer = NULL;
PFNGLNORMALPOINTEREXTPROC sf_glad_glNormalPointerEXT = NULL;
PFNGLNORMALPOINTERLISTIBMPROC sf_glad_glNormalPointerListIBM = NULL;
PFNGLNORMALPOINTERVINTELPROC sf_glad_glNormalPointervINTEL = NULL;
PFNGLNORMALSTREAM3BATIPROC sf_glad_glNormalStream3bATI = NULL;
PFNGLNORMALSTREAM3BVATIPROC sf_glad_glNormalStream3bvATI = NULL;
PFNGLNORMALSTREAM3DATIPROC sf_glad_glNormalStream3dATI = NULL;
PFNGLNORMALSTREAM3DVATIPROC sf_glad_glNormalStream3dvATI = NULL;
PFNGLNORMALSTREAM3FATIPROC sf_glad_glNormalStream3fATI = NULL;
PFNGLNORMALSTREAM3FVATIPROC sf_glad_glNormalStream3fvATI = NULL;
PFNGLNORMALSTREAM3IATIPROC sf_glad_glNormalStream3iATI = NULL;
PFNGLNORMALSTREAM3IVATIPROC sf_glad_glNormalStream3ivATI = NULL;
PFNGLNORMALSTREAM3SATIPROC sf_glad_glNormalStream3sATI = NULL;
PFNGLNORMALSTREAM3SVATIPROC sf_glad_glNormalStream3svATI = NULL;
PFNGLOBJECTLABELPROC sf_glad_glObjectLabel = NULL;
PFNGLOBJECTPTRLABELPROC sf_glad_glObjectPtrLabel = NULL;
PFNGLOBJECTPURGEABLEAPPLEPROC sf_glad_glObjectPurgeableAPPLE = NULL;
PFNGLOBJECTUNPURGEABLEAPPLEPROC sf_glad_glObjectUnpurgeableAPPLE = NULL;
PFNGLORTHOPROC sf_glad_glOrtho = NULL;
PFNGLORTHOFOESPROC sf_glad_glOrthofOES = NULL;
PFNGLORTHOXOESPROC sf_glad_glOrthoxOES = NULL;
PFNGLPNTRIANGLESFATIPROC sf_glad_glPNTrianglesfATI = NULL;
PFNGLPNTRIANGLESIATIPROC sf_glad_glPNTrianglesiATI = NULL;
PFNGLPASSTEXCOORDATIPROC sf_glad_glPassTexCoordATI = NULL;
PFNGLPASSTHROUGHPROC sf_glad_glPassThrough = NULL;
PFNGLPASSTHROUGHXOESPROC sf_glad_glPassThroughxOES = NULL;
PFNGLPATCHPARAMETERFVPROC sf_glad_glPatchParameterfv = NULL;
PFNGLPATCHPARAMETERIPROC sf_glad_glPatchParameteri = NULL;
PFNGLPATHCOLORGENNVPROC sf_glad_glPathColorGenNV = NULL;
PFNGLPATHCOMMANDSNVPROC sf_glad_glPathCommandsNV = NULL;
PFNGLPATHCOORDSNVPROC sf_glad_glPathCoordsNV = NULL;
PFNGLPATHCOVERDEPTHFUNCNVPROC sf_glad_glPathCoverDepthFuncNV = NULL;
PFNGLPATHDASHARRAYNVPROC sf_glad_glPathDashArrayNV = NULL;
PFNGLPATHFOGGENNVPROC sf_glad_glPathFogGenNV = NULL;
PFNGLPATHGLYPHINDEXARRAYNVPROC sf_glad_glPathGlyphIndexArrayNV = NULL;
PFNGLPATHGLYPHINDEXRANGENVPROC sf_glad_glPathGlyphIndexRangeNV = NULL;
PFNGLPATHGLYPHRANGENVPROC sf_glad_glPathGlyphRangeNV = NULL;
PFNGLPATHGLYPHSNVPROC sf_glad_glPathGlyphsNV = NULL;
PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC sf_glad_glPathMemoryGlyphIndexArrayNV = NULL;
PFNGLPATHPARAMETERFNVPROC sf_glad_glPathParameterfNV = NULL;
PFNGLPATHPARAMETERFVNVPROC sf_glad_glPathParameterfvNV = NULL;
PFNGLPATHPARAMETERINVPROC sf_glad_glPathParameteriNV = NULL;
PFNGLPATHPARAMETERIVNVPROC sf_glad_glPathParameterivNV = NULL;
PFNGLPATHSTENCILDEPTHOFFSETNVPROC sf_glad_glPathStencilDepthOffsetNV = NULL;
PFNGLPATHSTENCILFUNCNVPROC sf_glad_glPathStencilFuncNV = NULL;
PFNGLPATHSTRINGNVPROC sf_glad_glPathStringNV = NULL;
PFNGLPATHSUBCOMMANDSNVPROC sf_glad_glPathSubCommandsNV = NULL;
PFNGLPATHSUBCOORDSNVPROC sf_glad_glPathSubCoordsNV = NULL;
PFNGLPATHTEXGENNVPROC sf_glad_glPathTexGenNV = NULL;
PFNGLPAUSETRANSFORMFEEDBACKPROC sf_glad_glPauseTransformFeedback = NULL;
PFNGLPAUSETRANSFORMFEEDBACKNVPROC sf_glad_glPauseTransformFeedbackNV = NULL;
PFNGLPIXELDATARANGENVPROC sf_glad_glPixelDataRangeNV = NULL;
PFNGLPIXELMAPFVPROC sf_glad_glPixelMapfv = NULL;
PFNGLPIXELMAPUIVPROC sf_glad_glPixelMapuiv = NULL;
PFNGLPIXELMAPUSVPROC sf_glad_glPixelMapusv = NULL;
PFNGLPIXELMAPXPROC sf_glad_glPixelMapx = NULL;
PFNGLPIXELSTOREFPROC sf_glad_glPixelStoref = NULL;
PFNGLPIXELSTOREIPROC sf_glad_glPixelStorei = NULL;
PFNGLPIXELSTOREXPROC sf_glad_glPixelStorex = NULL;
PFNGLPIXELTEXGENPARAMETERFSGISPROC sf_glad_glPixelTexGenParameterfSGIS = NULL;
PFNGLPIXELTEXGENPARAMETERFVSGISPROC sf_glad_glPixelTexGenParameterfvSGIS = NULL;
PFNGLPIXELTEXGENPARAMETERISGISPROC sf_glad_glPixelTexGenParameteriSGIS = NULL;
PFNGLPIXELTEXGENPARAMETERIVSGISPROC sf_glad_glPixelTexGenParameterivSGIS = NULL;
PFNGLPIXELTEXGENSGIXPROC sf_glad_glPixelTexGenSGIX = NULL;
PFNGLPIXELTRANSFERFPROC sf_glad_glPixelTransferf = NULL;
PFNGLPIXELTRANSFERIPROC sf_glad_glPixelTransferi = NULL;
PFNGLPIXELTRANSFERXOESPROC sf_glad_glPixelTransferxOES = NULL;
PFNGLPIXELTRANSFORMPARAMETERFEXTPROC sf_glad_glPixelTransformParameterfEXT = NULL;
PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC sf_glad_glPixelTransformParameterfvEXT = NULL;
PFNGLPIXELTRANSFORMPARAMETERIEXTPROC sf_glad_glPixelTransformParameteriEXT = NULL;
PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC sf_glad_glPixelTransformParameterivEXT = NULL;
PFNGLPIXELZOOMPROC sf_glad_glPixelZoom = NULL;
PFNGLPIXELZOOMXOESPROC sf_glad_glPixelZoomxOES = NULL;
PFNGLPOINTALONGPATHNVPROC sf_glad_glPointAlongPathNV = NULL;
PFNGLPOINTPARAMETERFPROC sf_glad_glPointParameterf = NULL;
PFNGLPOINTPARAMETERFARBPROC sf_glad_glPointParameterfARB = NULL;
PFNGLPOINTPARAMETERFEXTPROC sf_glad_glPointParameterfEXT = NULL;
PFNGLPOINTPARAMETERFSGISPROC sf_glad_glPointParameterfSGIS = NULL;
PFNGLPOINTPARAMETERFVPROC sf_glad_glPointParameterfv = NULL;
PFNGLPOINTPARAMETERFVARBPROC sf_glad_glPointParameterfvARB = NULL;
PFNGLPOINTPARAMETERFVEXTPROC sf_glad_glPointParameterfvEXT = NULL;
PFNGLPOINTPARAMETERFVSGISPROC sf_glad_glPointParameterfvSGIS = NULL;
PFNGLPOINTPARAMETERIPROC sf_glad_glPointParameteri = NULL;
PFNGLPOINTPARAMETERINVPROC sf_glad_glPointParameteriNV = NULL;
PFNGLPOINTPARAMETERIVPROC sf_glad_glPointParameteriv = NULL;
PFNGLPOINTPARAMETERIVNVPROC sf_glad_glPointParameterivNV = NULL;
PFNGLPOINTPARAMETERXVOESPROC sf_glad_glPointParameterxvOES = NULL;
PFNGLPOINTSIZEPROC sf_glad_glPointSize = NULL;
PFNGLPOINTSIZEXOESPROC sf_glad_glPointSizexOES = NULL;
PFNGLPOLLASYNCSGIXPROC sf_glad_glPollAsyncSGIX = NULL;
PFNGLPOLLINSTRUMENTSSGIXPROC sf_glad_glPollInstrumentsSGIX = NULL;
PFNGLPOLYGONMODEPROC sf_glad_glPolygonMode = NULL;
PFNGLPOLYGONOFFSETPROC sf_glad_glPolygonOffset = NULL;
PFNGLPOLYGONOFFSETCLAMPPROC sf_glad_glPolygonOffsetClamp = NULL;
PFNGLPOLYGONOFFSETCLAMPEXTPROC sf_glad_glPolygonOffsetClampEXT = NULL;
PFNGLPOLYGONOFFSETEXTPROC sf_glad_glPolygonOffsetEXT = NULL;
PFNGLPOLYGONOFFSETXOESPROC sf_glad_glPolygonOffsetxOES = NULL;
PFNGLPOLYGONSTIPPLEPROC sf_glad_glPolygonStipple = NULL;
PFNGLPOPATTRIBPROC sf_glad_glPopAttrib = NULL;
PFNGLPOPCLIENTATTRIBPROC sf_glad_glPopClientAttrib = NULL;
PFNGLPOPDEBUGGROUPPROC sf_glad_glPopDebugGroup = NULL;
PFNGLPOPGROUPMARKEREXTPROC sf_glad_glPopGroupMarkerEXT = NULL;
PFNGLPOPMATRIXPROC sf_glad_glPopMatrix = NULL;
PFNGLPOPNAMEPROC sf_glad_glPopName = NULL;
PFNGLPRESENTFRAMEDUALFILLNVPROC sf_glad_glPresentFrameDualFillNV = NULL;
PFNGLPRESENTFRAMEKEYEDNVPROC sf_glad_glPresentFrameKeyedNV = NULL;
PFNGLPRIMITIVEBOUNDINGBOXARBPROC sf_glad_glPrimitiveBoundingBoxARB = NULL;
PFNGLPRIMITIVERESTARTINDEXPROC sf_glad_glPrimitiveRestartIndex = NULL;
PFNGLPRIMITIVERESTARTINDEXNVPROC sf_glad_glPrimitiveRestartIndexNV = NULL;
PFNGLPRIMITIVERESTARTNVPROC sf_glad_glPrimitiveRestartNV = NULL;
PFNGLPRIORITIZETEXTURESPROC sf_glad_glPrioritizeTextures = NULL;
PFNGLPRIORITIZETEXTURESEXTPROC sf_glad_glPrioritizeTexturesEXT = NULL;
PFNGLPRIORITIZETEXTURESXOESPROC sf_glad_glPrioritizeTexturesxOES = NULL;
PFNGLPROGRAMBINARYPROC sf_glad_glProgramBinary = NULL;
PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC sf_glad_glProgramBufferParametersIivNV = NULL;
PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC sf_glad_glProgramBufferParametersIuivNV = NULL;
PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC sf_glad_glProgramBufferParametersfvNV = NULL;
PFNGLPROGRAMENVPARAMETER4DARBPROC sf_glad_glProgramEnvParameter4dARB = NULL;
PFNGLPROGRAMENVPARAMETER4DVARBPROC sf_glad_glProgramEnvParameter4dvARB = NULL;
PFNGLPROGRAMENVPARAMETER4FARBPROC sf_glad_glProgramEnvParameter4fARB = NULL;
PFNGLPROGRAMENVPARAMETER4FVARBPROC sf_glad_glProgramEnvParameter4fvARB = NULL;
PFNGLPROGRAMENVPARAMETERI4INVPROC sf_glad_glProgramEnvParameterI4iNV = NULL;
PFNGLPROGRAMENVPARAMETERI4IVNVPROC sf_glad_glProgramEnvParameterI4ivNV = NULL;
PFNGLPROGRAMENVPARAMETERI4UINVPROC sf_glad_glProgramEnvParameterI4uiNV = NULL;
PFNGLPROGRAMENVPARAMETERI4UIVNVPROC sf_glad_glProgramEnvParameterI4uivNV = NULL;
PFNGLPROGRAMENVPARAMETERS4FVEXTPROC sf_glad_glProgramEnvParameters4fvEXT = NULL;
PFNGLPROGRAMENVPARAMETERSI4IVNVPROC sf_glad_glProgramEnvParametersI4ivNV = NULL;
PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC sf_glad_glProgramEnvParametersI4uivNV = NULL;
PFNGLPROGRAMLOCALPARAMETER4DARBPROC sf_glad_glProgramLocalParameter4dARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC sf_glad_glProgramLocalParameter4dvARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FARBPROC sf_glad_glProgramLocalParameter4fARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC sf_glad_glProgramLocalParameter4fvARB = NULL;
PFNGLPROGRAMLOCALPARAMETERI4INVPROC sf_glad_glProgramLocalParameterI4iNV = NULL;
PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC sf_glad_glProgramLocalParameterI4ivNV = NULL;
PFNGLPROGRAMLOCALPARAMETERI4UINVPROC sf_glad_glProgramLocalParameterI4uiNV = NULL;
PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC sf_glad_glProgramLocalParameterI4uivNV = NULL;
PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC sf_glad_glProgramLocalParameters4fvEXT = NULL;
PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC sf_glad_glProgramLocalParametersI4ivNV = NULL;
PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC sf_glad_glProgramLocalParametersI4uivNV = NULL;
PFNGLPROGRAMNAMEDPARAMETER4DNVPROC sf_glad_glProgramNamedParameter4dNV = NULL;
PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC sf_glad_glProgramNamedParameter4dvNV = NULL;
PFNGLPROGRAMNAMEDPARAMETER4FNVPROC sf_glad_glProgramNamedParameter4fNV = NULL;
PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC sf_glad_glProgramNamedParameter4fvNV = NULL;
PFNGLPROGRAMPARAMETER4DNVPROC sf_glad_glProgramParameter4dNV = NULL;
PFNGLPROGRAMPARAMETER4DVNVPROC sf_glad_glProgramParameter4dvNV = NULL;
PFNGLPROGRAMPARAMETER4FNVPROC sf_glad_glProgramParameter4fNV = NULL;
PFNGLPROGRAMPARAMETER4FVNVPROC sf_glad_glProgramParameter4fvNV = NULL;
PFNGLPROGRAMPARAMETERIPROC sf_glad_glProgramParameteri = NULL;
PFNGLPROGRAMPARAMETERIARBPROC sf_glad_glProgramParameteriARB = NULL;
PFNGLPROGRAMPARAMETERIEXTPROC sf_glad_glProgramParameteriEXT = NULL;
PFNGLPROGRAMPARAMETERS4DVNVPROC sf_glad_glProgramParameters4dvNV = NULL;
PFNGLPROGRAMPARAMETERS4FVNVPROC sf_glad_glProgramParameters4fvNV = NULL;
PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC sf_glad_glProgramPathFragmentInputGenNV = NULL;
PFNGLPROGRAMSTRINGARBPROC sf_glad_glProgramStringARB = NULL;
PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC sf_glad_glProgramSubroutineParametersuivNV = NULL;
PFNGLPROGRAMUNIFORM1DPROC sf_glad_glProgramUniform1d = NULL;
PFNGLPROGRAMUNIFORM1DEXTPROC sf_glad_glProgramUniform1dEXT = NULL;
PFNGLPROGRAMUNIFORM1DVPROC sf_glad_glProgramUniform1dv = NULL;
PFNGLPROGRAMUNIFORM1DVEXTPROC sf_glad_glProgramUniform1dvEXT = NULL;
PFNGLPROGRAMUNIFORM1FPROC sf_glad_glProgramUniform1f = NULL;
PFNGLPROGRAMUNIFORM1FEXTPROC sf_glad_glProgramUniform1fEXT = NULL;
PFNGLPROGRAMUNIFORM1FVPROC sf_glad_glProgramUniform1fv = NULL;
PFNGLPROGRAMUNIFORM1FVEXTPROC sf_glad_glProgramUniform1fvEXT = NULL;
PFNGLPROGRAMUNIFORM1IPROC sf_glad_glProgramUniform1i = NULL;
PFNGLPROGRAMUNIFORM1I64ARBPROC sf_glad_glProgramUniform1i64ARB = NULL;
PFNGLPROGRAMUNIFORM1I64NVPROC sf_glad_glProgramUniform1i64NV = NULL;
PFNGLPROGRAMUNIFORM1I64VARBPROC sf_glad_glProgramUniform1i64vARB = NULL;
PFNGLPROGRAMUNIFORM1I64VNVPROC sf_glad_glProgramUniform1i64vNV = NULL;
PFNGLPROGRAMUNIFORM1IEXTPROC sf_glad_glProgramUniform1iEXT = NULL;
PFNGLPROGRAMUNIFORM1IVPROC sf_glad_glProgramUniform1iv = NULL;
PFNGLPROGRAMUNIFORM1IVEXTPROC sf_glad_glProgramUniform1ivEXT = NULL;
PFNGLPROGRAMUNIFORM1UIPROC sf_glad_glProgramUniform1ui = NULL;
PFNGLPROGRAMUNIFORM1UI64ARBPROC sf_glad_glProgramUniform1ui64ARB = NULL;
PFNGLPROGRAMUNIFORM1UI64NVPROC sf_glad_glProgramUniform1ui64NV = NULL;
PFNGLPROGRAMUNIFORM1UI64VARBPROC sf_glad_glProgramUniform1ui64vARB = NULL;
PFNGLPROGRAMUNIFORM1UI64VNVPROC sf_glad_glProgramUniform1ui64vNV = NULL;
PFNGLPROGRAMUNIFORM1UIEXTPROC sf_glad_glProgramUniform1uiEXT = NULL;
PFNGLPROGRAMUNIFORM1UIVPROC sf_glad_glProgramUniform1uiv = NULL;
PFNGLPROGRAMUNIFORM1UIVEXTPROC sf_glad_glProgramUniform1uivEXT = NULL;
PFNGLPROGRAMUNIFORM2DPROC sf_glad_glProgramUniform2d = NULL;
PFNGLPROGRAMUNIFORM2DEXTPROC sf_glad_glProgramUniform2dEXT = NULL;
PFNGLPROGRAMUNIFORM2DVPROC sf_glad_glProgramUniform2dv = NULL;
PFNGLPROGRAMUNIFORM2DVEXTPROC sf_glad_glProgramUniform2dvEXT = NULL;
PFNGLPROGRAMUNIFORM2FPROC sf_glad_glProgramUniform2f = NULL;
PFNGLPROGRAMUNIFORM2FEXTPROC sf_glad_glProgramUniform2fEXT = NULL;
PFNGLPROGRAMUNIFORM2FVPROC sf_glad_glProgramUniform2fv = NULL;
PFNGLPROGRAMUNIFORM2FVEXTPROC sf_glad_glProgramUniform2fvEXT = NULL;
PFNGLPROGRAMUNIFORM2IPROC sf_glad_glProgramUniform2i = NULL;
PFNGLPROGRAMUNIFORM2I64ARBPROC sf_glad_glProgramUniform2i64ARB = NULL;
PFNGLPROGRAMUNIFORM2I64NVPROC sf_glad_glProgramUniform2i64NV = NULL;
PFNGLPROGRAMUNIFORM2I64VARBPROC sf_glad_glProgramUniform2i64vARB = NULL;
PFNGLPROGRAMUNIFORM2I64VNVPROC sf_glad_glProgramUniform2i64vNV = NULL;
PFNGLPROGRAMUNIFORM2IEXTPROC sf_glad_glProgramUniform2iEXT = NULL;
PFNGLPROGRAMUNIFORM2IVPROC sf_glad_glProgramUniform2iv = NULL;
PFNGLPROGRAMUNIFORM2IVEXTPROC sf_glad_glProgramUniform2ivEXT = NULL;
PFNGLPROGRAMUNIFORM2UIPROC sf_glad_glProgramUniform2ui = NULL;
PFNGLPROGRAMUNIFORM2UI64ARBPROC sf_glad_glProgramUniform2ui64ARB = NULL;
PFNGLPROGRAMUNIFORM2UI64NVPROC sf_glad_glProgramUniform2ui64NV = NULL;
PFNGLPROGRAMUNIFORM2UI64VARBPROC sf_glad_glProgramUniform2ui64vARB = NULL;
PFNGLPROGRAMUNIFORM2UI64VNVPROC sf_glad_glProgramUniform2ui64vNV = NULL;
PFNGLPROGRAMUNIFORM2UIEXTPROC sf_glad_glProgramUniform2uiEXT = NULL;
PFNGLPROGRAMUNIFORM2UIVPROC sf_glad_glProgramUniform2uiv = NULL;
PFNGLPROGRAMUNIFORM2UIVEXTPROC sf_glad_glProgramUniform2uivEXT = NULL;
PFNGLPROGRAMUNIFORM3DPROC sf_glad_glProgramUniform3d = NULL;
PFNGLPROGRAMUNIFORM3DEXTPROC sf_glad_glProgramUniform3dEXT = NULL;
PFNGLPROGRAMUNIFORM3DVPROC sf_glad_glProgramUniform3dv = NULL;
PFNGLPROGRAMUNIFORM3DVEXTPROC sf_glad_glProgramUniform3dvEXT = NULL;
PFNGLPROGRAMUNIFORM3FPROC sf_glad_glProgramUniform3f = NULL;
PFNGLPROGRAMUNIFORM3FEXTPROC sf_glad_glProgramUniform3fEXT = NULL;
PFNGLPROGRAMUNIFORM3FVPROC sf_glad_glProgramUniform3fv = NULL;
PFNGLPROGRAMUNIFORM3FVEXTPROC sf_glad_glProgramUniform3fvEXT = NULL;
PFNGLPROGRAMUNIFORM3IPROC sf_glad_glProgramUniform3i = NULL;
PFNGLPROGRAMUNIFORM3I64ARBPROC sf_glad_glProgramUniform3i64ARB = NULL;
PFNGLPROGRAMUNIFORM3I64NVPROC sf_glad_glProgramUniform3i64NV = NULL;
PFNGLPROGRAMUNIFORM3I64VARBPROC sf_glad_glProgramUniform3i64vARB = NULL;
PFNGLPROGRAMUNIFORM3I64VNVPROC sf_glad_glProgramUniform3i64vNV = NULL;
PFNGLPROGRAMUNIFORM3IEXTPROC sf_glad_glProgramUniform3iEXT = NULL;
PFNGLPROGRAMUNIFORM3IVPROC sf_glad_glProgramUniform3iv = NULL;
PFNGLPROGRAMUNIFORM3IVEXTPROC sf_glad_glProgramUniform3ivEXT = NULL;
PFNGLPROGRAMUNIFORM3UIPROC sf_glad_glProgramUniform3ui = NULL;
PFNGLPROGRAMUNIFORM3UI64ARBPROC sf_glad_glProgramUniform3ui64ARB = NULL;
PFNGLPROGRAMUNIFORM3UI64NVPROC sf_glad_glProgramUniform3ui64NV = NULL;
PFNGLPROGRAMUNIFORM3UI64VARBPROC sf_glad_glProgramUniform3ui64vARB = NULL;
PFNGLPROGRAMUNIFORM3UI64VNVPROC sf_glad_glProgramUniform3ui64vNV = NULL;
PFNGLPROGRAMUNIFORM3UIEXTPROC sf_glad_glProgramUniform3uiEXT = NULL;
PFNGLPROGRAMUNIFORM3UIVPROC sf_glad_glProgramUniform3uiv = NULL;
PFNGLPROGRAMUNIFORM3UIVEXTPROC sf_glad_glProgramUniform3uivEXT = NULL;
PFNGLPROGRAMUNIFORM4DPROC sf_glad_glProgramUniform4d = NULL;
PFNGLPROGRAMUNIFORM4DEXTPROC sf_glad_glProgramUniform4dEXT = NULL;
PFNGLPROGRAMUNIFORM4DVPROC sf_glad_glProgramUniform4dv = NULL;
PFNGLPROGRAMUNIFORM4DVEXTPROC sf_glad_glProgramUniform4dvEXT = NULL;
PFNGLPROGRAMUNIFORM4FPROC sf_glad_glProgramUniform4f = NULL;
PFNGLPROGRAMUNIFORM4FEXTPROC sf_glad_glProgramUniform4fEXT = NULL;
PFNGLPROGRAMUNIFORM4FVPROC sf_glad_glProgramUniform4fv = NULL;
PFNGLPROGRAMUNIFORM4FVEXTPROC sf_glad_glProgramUniform4fvEXT = NULL;
PFNGLPROGRAMUNIFORM4IPROC sf_glad_glProgramUniform4i = NULL;
PFNGLPROGRAMUNIFORM4I64ARBPROC sf_glad_glProgramUniform4i64ARB = NULL;
PFNGLPROGRAMUNIFORM4I64NVPROC sf_glad_glProgramUniform4i64NV = NULL;
PFNGLPROGRAMUNIFORM4I64VARBPROC sf_glad_glProgramUniform4i64vARB = NULL;
PFNGLPROGRAMUNIFORM4I64VNVPROC sf_glad_glProgramUniform4i64vNV = NULL;
PFNGLPROGRAMUNIFORM4IEXTPROC sf_glad_glProgramUniform4iEXT = NULL;
PFNGLPROGRAMUNIFORM4IVPROC sf_glad_glProgramUniform4iv = NULL;
PFNGLPROGRAMUNIFORM4IVEXTPROC sf_glad_glProgramUniform4ivEXT = NULL;
PFNGLPROGRAMUNIFORM4UIPROC sf_glad_glProgramUniform4ui = NULL;
PFNGLPROGRAMUNIFORM4UI64ARBPROC sf_glad_glProgramUniform4ui64ARB = NULL;
PFNGLPROGRAMUNIFORM4UI64NVPROC sf_glad_glProgramUniform4ui64NV = NULL;
PFNGLPROGRAMUNIFORM4UI64VARBPROC sf_glad_glProgramUniform4ui64vARB = NULL;
PFNGLPROGRAMUNIFORM4UI64VNVPROC sf_glad_glProgramUniform4ui64vNV = NULL;
PFNGLPROGRAMUNIFORM4UIEXTPROC sf_glad_glProgramUniform4uiEXT = NULL;
PFNGLPROGRAMUNIFORM4UIVPROC sf_glad_glProgramUniform4uiv = NULL;
PFNGLPROGRAMUNIFORM4UIVEXTPROC sf_glad_glProgramUniform4uivEXT = NULL;
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC sf_glad_glProgramUniformHandleui64ARB = NULL;
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC sf_glad_glProgramUniformHandleui64NV = NULL;
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC sf_glad_glProgramUniformHandleui64vARB = NULL;
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC sf_glad_glProgramUniformHandleui64vNV = NULL;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC sf_glad_glProgramUniformMatrix2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC sf_glad_glProgramUniformMatrix2dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC sf_glad_glProgramUniformMatrix2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC sf_glad_glProgramUniformMatrix2fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC sf_glad_glProgramUniformMatrix2x3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC sf_glad_glProgramUniformMatrix2x3dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC sf_glad_glProgramUniformMatrix2x3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC sf_glad_glProgramUniformMatrix2x3fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC sf_glad_glProgramUniformMatrix2x4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC sf_glad_glProgramUniformMatrix2x4dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC sf_glad_glProgramUniformMatrix2x4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC sf_glad_glProgramUniformMatrix2x4fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC sf_glad_glProgramUniformMatrix3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC sf_glad_glProgramUniformMatrix3dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC sf_glad_glProgramUniformMatrix3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC sf_glad_glProgramUniformMatrix3fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC sf_glad_glProgramUniformMatrix3x2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC sf_glad_glProgramUniformMatrix3x2dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC sf_glad_glProgramUniformMatrix3x2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC sf_glad_glProgramUniformMatrix3x2fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC sf_glad_glProgramUniformMatrix3x4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC sf_glad_glProgramUniformMatrix3x4dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC sf_glad_glProgramUniformMatrix3x4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC sf_glad_glProgramUniformMatrix3x4fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC sf_glad_glProgramUniformMatrix4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC sf_glad_glProgramUniformMatrix4dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC sf_glad_glProgramUniformMatrix4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC sf_glad_glProgramUniformMatrix4fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC sf_glad_glProgramUniformMatrix4x2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC sf_glad_glProgramUniformMatrix4x2dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC sf_glad_glProgramUniformMatrix4x2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC sf_glad_glProgramUniformMatrix4x2fvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC sf_glad_glProgramUniformMatrix4x3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC sf_glad_glProgramUniformMatrix4x3dvEXT = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC sf_glad_glProgramUniformMatrix4x3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC sf_glad_glProgramUniformMatrix4x3fvEXT = NULL;
PFNGLPROGRAMUNIFORMUI64NVPROC sf_glad_glProgramUniformui64NV = NULL;
PFNGLPROGRAMUNIFORMUI64VNVPROC sf_glad_glProgramUniformui64vNV = NULL;
PFNGLPROGRAMVERTEXLIMITNVPROC sf_glad_glProgramVertexLimitNV = NULL;
PFNGLPROVOKINGVERTEXPROC sf_glad_glProvokingVertex = NULL;
PFNGLPROVOKINGVERTEXEXTPROC sf_glad_glProvokingVertexEXT = NULL;
PFNGLPUSHATTRIBPROC sf_glad_glPushAttrib = NULL;
PFNGLPUSHCLIENTATTRIBPROC sf_glad_glPushClientAttrib = NULL;
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC sf_glad_glPushClientAttribDefaultEXT = NULL;
PFNGLPUSHDEBUGGROUPPROC sf_glad_glPushDebugGroup = NULL;
PFNGLPUSHGROUPMARKEREXTPROC sf_glad_glPushGroupMarkerEXT = NULL;
PFNGLPUSHMATRIXPROC sf_glad_glPushMatrix = NULL;
PFNGLPUSHNAMEPROC sf_glad_glPushName = NULL;
PFNGLQUERYCOUNTERPROC sf_glad_glQueryCounter = NULL;
PFNGLQUERYMATRIXXOESPROC sf_glad_glQueryMatrixxOES = NULL;
PFNGLQUERYOBJECTPARAMETERUIAMDPROC sf_glad_glQueryObjectParameteruiAMD = NULL;
PFNGLQUERYRESOURCENVPROC sf_glad_glQueryResourceNV = NULL;
PFNGLQUERYRESOURCETAGNVPROC sf_glad_glQueryResourceTagNV = NULL;
PFNGLRASTERPOS2DPROC sf_glad_glRasterPos2d = NULL;
PFNGLRASTERPOS2DVPROC sf_glad_glRasterPos2dv = NULL;
PFNGLRASTERPOS2FPROC sf_glad_glRasterPos2f = NULL;
PFNGLRASTERPOS2FVPROC sf_glad_glRasterPos2fv = NULL;
PFNGLRASTERPOS2IPROC sf_glad_glRasterPos2i = NULL;
PFNGLRASTERPOS2IVPROC sf_glad_glRasterPos2iv = NULL;
PFNGLRASTERPOS2SPROC sf_glad_glRasterPos2s = NULL;
PFNGLRASTERPOS2SVPROC sf_glad_glRasterPos2sv = NULL;
PFNGLRASTERPOS2XOESPROC sf_glad_glRasterPos2xOES = NULL;
PFNGLRASTERPOS2XVOESPROC sf_glad_glRasterPos2xvOES = NULL;
PFNGLRASTERPOS3DPROC sf_glad_glRasterPos3d = NULL;
PFNGLRASTERPOS3DVPROC sf_glad_glRasterPos3dv = NULL;
PFNGLRASTERPOS3FPROC sf_glad_glRasterPos3f = NULL;
PFNGLRASTERPOS3FVPROC sf_glad_glRasterPos3fv = NULL;
PFNGLRASTERPOS3IPROC sf_glad_glRasterPos3i = NULL;
PFNGLRASTERPOS3IVPROC sf_glad_glRasterPos3iv = NULL;
PFNGLRASTERPOS3SPROC sf_glad_glRasterPos3s = NULL;
PFNGLRASTERPOS3SVPROC sf_glad_glRasterPos3sv = NULL;
PFNGLRASTERPOS3XOESPROC sf_glad_glRasterPos3xOES = NULL;
PFNGLRASTERPOS3XVOESPROC sf_glad_glRasterPos3xvOES = NULL;
PFNGLRASTERPOS4DPROC sf_glad_glRasterPos4d = NULL;
PFNGLRASTERPOS4DVPROC sf_glad_glRasterPos4dv = NULL;
PFNGLRASTERPOS4FPROC sf_glad_glRasterPos4f = NULL;
PFNGLRASTERPOS4FVPROC sf_glad_glRasterPos4fv = NULL;
PFNGLRASTERPOS4IPROC sf_glad_glRasterPos4i = NULL;
PFNGLRASTERPOS4IVPROC sf_glad_glRasterPos4iv = NULL;
PFNGLRASTERPOS4SPROC sf_glad_glRasterPos4s = NULL;
PFNGLRASTERPOS4SVPROC sf_glad_glRasterPos4sv = NULL;
PFNGLRASTERPOS4XOESPROC sf_glad_glRasterPos4xOES = NULL;
PFNGLRASTERPOS4XVOESPROC sf_glad_glRasterPos4xvOES = NULL;
PFNGLRASTERSAMPLESEXTPROC sf_glad_glRasterSamplesEXT = NULL;
PFNGLREADBUFFERPROC sf_glad_glReadBuffer = NULL;
PFNGLREADINSTRUMENTSSGIXPROC sf_glad_glReadInstrumentsSGIX = NULL;
PFNGLREADPIXELSPROC sf_glad_glReadPixels = NULL;
PFNGLREADNPIXELSPROC sf_glad_glReadnPixels = NULL;
PFNGLREADNPIXELSARBPROC sf_glad_glReadnPixelsARB = NULL;
PFNGLRECTDPROC sf_glad_glRectd = NULL;
PFNGLRECTDVPROC sf_glad_glRectdv = NULL;
PFNGLRECTFPROC sf_glad_glRectf = NULL;
PFNGLRECTFVPROC sf_glad_glRectfv = NULL;
PFNGLRECTIPROC sf_glad_glRecti = NULL;
PFNGLRECTIVPROC sf_glad_glRectiv = NULL;
PFNGLRECTSPROC sf_glad_glRects = NULL;
PFNGLRECTSVPROC sf_glad_glRectsv = NULL;
PFNGLRECTXOESPROC sf_glad_glRectxOES = NULL;
PFNGLRECTXVOESPROC sf_glad_glRectxvOES = NULL;
PFNGLREFERENCEPLANESGIXPROC sf_glad_glReferencePlaneSGIX = NULL;
PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC sf_glad_glReleaseKeyedMutexWin32EXT = NULL;
PFNGLRELEASESHADERCOMPILERPROC sf_glad_glReleaseShaderCompiler = NULL;
PFNGLRENDERGPUMASKNVPROC sf_glad_glRenderGpuMaskNV = NULL;
PFNGLRENDERMODEPROC sf_glad_glRenderMode = NULL;
PFNGLRENDERBUFFERSTORAGEPROC sf_glad_glRenderbufferStorage = NULL;
PFNGLRENDERBUFFERSTORAGEEXTPROC sf_glad_glRenderbufferStorageEXT = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC sf_glad_glRenderbufferStorageMultisample = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC sf_glad_glRenderbufferStorageMultisampleAdvancedAMD = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC sf_glad_glRenderbufferStorageMultisampleCoverageNV = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC sf_glad_glRenderbufferStorageMultisampleEXT = NULL;
PFNGLREPLACEMENTCODEPOINTERSUNPROC sf_glad_glReplacementCodePointerSUN = NULL;
PFNGLREPLACEMENTCODEUBSUNPROC sf_glad_glReplacementCodeubSUN = NULL;
PFNGLREPLACEMENTCODEUBVSUNPROC sf_glad_glReplacementCodeubvSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiColor3fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiColor3fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC sf_glad_glReplacementCodeuiColor4ubVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiColor4ubVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiNormal3fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiNormal3fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUISUNPROC sf_glad_glReplacementCodeuiSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC sf_glad_glReplacementCodeuiTexCoord2fVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiTexCoord2fVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC sf_glad_glReplacementCodeuiVertex3fSUN = NULL;
PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC sf_glad_glReplacementCodeuiVertex3fvSUN = NULL;
PFNGLREPLACEMENTCODEUIVSUNPROC sf_glad_glReplacementCodeuivSUN = NULL;
PFNGLREPLACEMENTCODEUSSUNPROC sf_glad_glReplacementCodeusSUN = NULL;
PFNGLREPLACEMENTCODEUSVSUNPROC sf_glad_glReplacementCodeusvSUN = NULL;
PFNGLREQUESTRESIDENTPROGRAMSNVPROC sf_glad_glRequestResidentProgramsNV = NULL;
PFNGLRESETHISTOGRAMPROC sf_glad_glResetHistogram = NULL;
PFNGLRESETHISTOGRAMEXTPROC sf_glad_glResetHistogramEXT = NULL;
PFNGLRESETMEMORYOBJECTPARAMETERNVPROC sf_glad_glResetMemoryObjectParameterNV = NULL;
PFNGLRESETMINMAXPROC sf_glad_glResetMinmax = NULL;
PFNGLRESETMINMAXEXTPROC sf_glad_glResetMinmaxEXT = NULL;
PFNGLRESIZEBUFFERSMESAPROC sf_glad_glResizeBuffersMESA = NULL;
PFNGLRESOLVEDEPTHVALUESNVPROC sf_glad_glResolveDepthValuesNV = NULL;
PFNGLRESUMETRANSFORMFEEDBACKPROC sf_glad_glResumeTransformFeedback = NULL;
PFNGLRESUMETRANSFORMFEEDBACKNVPROC sf_glad_glResumeTransformFeedbackNV = NULL;
PFNGLROTATEDPROC sf_glad_glRotated = NULL;
PFNGLROTATEFPROC sf_glad_glRotatef = NULL;
PFNGLROTATEXOESPROC sf_glad_glRotatexOES = NULL;
PFNGLSAMPLECOVERAGEPROC sf_glad_glSampleCoverage = NULL;
PFNGLSAMPLECOVERAGEARBPROC sf_glad_glSampleCoverageARB = NULL;
PFNGLSAMPLEMAPATIPROC sf_glad_glSampleMapATI = NULL;
PFNGLSAMPLEMASKEXTPROC sf_glad_glSampleMaskEXT = NULL;
PFNGLSAMPLEMASKINDEXEDNVPROC sf_glad_glSampleMaskIndexedNV = NULL;
PFNGLSAMPLEMASKSGISPROC sf_glad_glSampleMaskSGIS = NULL;
PFNGLSAMPLEMASKIPROC sf_glad_glSampleMaski = NULL;
PFNGLSAMPLEPATTERNEXTPROC sf_glad_glSamplePatternEXT = NULL;
PFNGLSAMPLEPATTERNSGISPROC sf_glad_glSamplePatternSGIS = NULL;
PFNGLSAMPLERPARAMETERIIVPROC sf_glad_glSamplerParameterIiv = NULL;
PFNGLSAMPLERPARAMETERIUIVPROC sf_glad_glSamplerParameterIuiv = NULL;
PFNGLSAMPLERPARAMETERFPROC sf_glad_glSamplerParameterf = NULL;
PFNGLSAMPLERPARAMETERFVPROC sf_glad_glSamplerParameterfv = NULL;
PFNGLSAMPLERPARAMETERIPROC sf_glad_glSamplerParameteri = NULL;
PFNGLSAMPLERPARAMETERIVPROC sf_glad_glSamplerParameteriv = NULL;
PFNGLSCALEDPROC sf_glad_glScaled = NULL;
PFNGLSCALEFPROC sf_glad_glScalef = NULL;
PFNGLSCALEXOESPROC sf_glad_glScalexOES = NULL;
PFNGLSCISSORPROC sf_glad_glScissor = NULL;
PFNGLSCISSORARRAYVPROC sf_glad_glScissorArrayv = NULL;
PFNGLSCISSOREXCLUSIVEARRAYVNVPROC sf_glad_glScissorExclusiveArrayvNV = NULL;
PFNGLSCISSOREXCLUSIVENVPROC sf_glad_glScissorExclusiveNV = NULL;
PFNGLSCISSORINDEXEDPROC sf_glad_glScissorIndexed = NULL;
PFNGLSCISSORINDEXEDVPROC sf_glad_glScissorIndexedv = NULL;
PFNGLSECONDARYCOLOR3BPROC sf_glad_glSecondaryColor3b = NULL;
PFNGLSECONDARYCOLOR3BEXTPROC sf_glad_glSecondaryColor3bEXT = NULL;
PFNGLSECONDARYCOLOR3BVPROC sf_glad_glSecondaryColor3bv = NULL;
PFNGLSECONDARYCOLOR3BVEXTPROC sf_glad_glSecondaryColor3bvEXT = NULL;
PFNGLSECONDARYCOLOR3DPROC sf_glad_glSecondaryColor3d = NULL;
PFNGLSECONDARYCOLOR3DEXTPROC sf_glad_glSecondaryColor3dEXT = NULL;
PFNGLSECONDARYCOLOR3DVPROC sf_glad_glSecondaryColor3dv = NULL;
PFNGLSECONDARYCOLOR3DVEXTPROC sf_glad_glSecondaryColor3dvEXT = NULL;
PFNGLSECONDARYCOLOR3FPROC sf_glad_glSecondaryColor3f = NULL;
PFNGLSECONDARYCOLOR3FEXTPROC sf_glad_glSecondaryColor3fEXT = NULL;
PFNGLSECONDARYCOLOR3FVPROC sf_glad_glSecondaryColor3fv = NULL;
PFNGLSECONDARYCOLOR3FVEXTPROC sf_glad_glSecondaryColor3fvEXT = NULL;
PFNGLSECONDARYCOLOR3HNVPROC sf_glad_glSecondaryColor3hNV = NULL;
PFNGLSECONDARYCOLOR3HVNVPROC sf_glad_glSecondaryColor3hvNV = NULL;
PFNGLSECONDARYCOLOR3IPROC sf_glad_glSecondaryColor3i = NULL;
PFNGLSECONDARYCOLOR3IEXTPROC sf_glad_glSecondaryColor3iEXT = NULL;
PFNGLSECONDARYCOLOR3IVPROC sf_glad_glSecondaryColor3iv = NULL;
PFNGLSECONDARYCOLOR3IVEXTPROC sf_glad_glSecondaryColor3ivEXT = NULL;
PFNGLSECONDARYCOLOR3SPROC sf_glad_glSecondaryColor3s = NULL;
PFNGLSECONDARYCOLOR3SEXTPROC sf_glad_glSecondaryColor3sEXT = NULL;
PFNGLSECONDARYCOLOR3SVPROC sf_glad_glSecondaryColor3sv = NULL;
PFNGLSECONDARYCOLOR3SVEXTPROC sf_glad_glSecondaryColor3svEXT = NULL;
PFNGLSECONDARYCOLOR3UBPROC sf_glad_glSecondaryColor3ub = NULL;
PFNGLSECONDARYCOLOR3UBEXTPROC sf_glad_glSecondaryColor3ubEXT = NULL;
PFNGLSECONDARYCOLOR3UBVPROC sf_glad_glSecondaryColor3ubv = NULL;
PFNGLSECONDARYCOLOR3UBVEXTPROC sf_glad_glSecondaryColor3ubvEXT = NULL;
PFNGLSECONDARYCOLOR3UIPROC sf_glad_glSecondaryColor3ui = NULL;
PFNGLSECONDARYCOLOR3UIEXTPROC sf_glad_glSecondaryColor3uiEXT = NULL;
PFNGLSECONDARYCOLOR3UIVPROC sf_glad_glSecondaryColor3uiv = NULL;
PFNGLSECONDARYCOLOR3UIVEXTPROC sf_glad_glSecondaryColor3uivEXT = NULL;
PFNGLSECONDARYCOLOR3USPROC sf_glad_glSecondaryColor3us = NULL;
PFNGLSECONDARYCOLOR3USEXTPROC sf_glad_glSecondaryColor3usEXT = NULL;
PFNGLSECONDARYCOLOR3USVPROC sf_glad_glSecondaryColor3usv = NULL;
PFNGLSECONDARYCOLOR3USVEXTPROC sf_glad_glSecondaryColor3usvEXT = NULL;
PFNGLSECONDARYCOLORFORMATNVPROC sf_glad_glSecondaryColorFormatNV = NULL;
PFNGLSECONDARYCOLORP3UIPROC sf_glad_glSecondaryColorP3ui = NULL;
PFNGLSECONDARYCOLORP3UIVPROC sf_glad_glSecondaryColorP3uiv = NULL;
PFNGLSECONDARYCOLORPOINTERPROC sf_glad_glSecondaryColorPointer = NULL;
PFNGLSECONDARYCOLORPOINTEREXTPROC sf_glad_glSecondaryColorPointerEXT = NULL;
PFNGLSECONDARYCOLORPOINTERLISTIBMPROC sf_glad_glSecondaryColorPointerListIBM = NULL;
PFNGLSELECTBUFFERPROC sf_glad_glSelectBuffer = NULL;
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC sf_glad_glSelectPerfMonitorCountersAMD = NULL;
PFNGLSEMAPHOREPARAMETERIVNVPROC sf_glad_glSemaphoreParameterivNV = NULL;
PFNGLSEMAPHOREPARAMETERUI64VEXTPROC sf_glad_glSemaphoreParameterui64vEXT = NULL;
PFNGLSEPARABLEFILTER2DPROC sf_glad_glSeparableFilter2D = NULL;
PFNGLSEPARABLEFILTER2DEXTPROC sf_glad_glSeparableFilter2DEXT = NULL;
PFNGLSETFENCEAPPLEPROC sf_glad_glSetFenceAPPLE = NULL;
PFNGLSETFENCENVPROC sf_glad_glSetFenceNV = NULL;
PFNGLSETFRAGMENTSHADERCONSTANTATIPROC sf_glad_glSetFragmentShaderConstantATI = NULL;
PFNGLSETINVARIANTEXTPROC sf_glad_glSetInvariantEXT = NULL;
PFNGLSETLOCALCONSTANTEXTPROC sf_glad_glSetLocalConstantEXT = NULL;
PFNGLSETMULTISAMPLEFVAMDPROC sf_glad_glSetMultisamplefvAMD = NULL;
PFNGLSHADEMODELPROC sf_glad_glShadeModel = NULL;
PFNGLSHADERBINARYPROC sf_glad_glShaderBinary = NULL;
PFNGLSHADEROP1EXTPROC sf_glad_glShaderOp1EXT = NULL;
PFNGLSHADEROP2EXTPROC sf_glad_glShaderOp2EXT = NULL;
PFNGLSHADEROP3EXTPROC sf_glad_glShaderOp3EXT = NULL;
PFNGLSHADERSOURCEPROC sf_glad_glShaderSource = NULL;
PFNGLSHADERSOURCEARBPROC sf_glad_glShaderSourceARB = NULL;
PFNGLSHADERSTORAGEBLOCKBINDINGPROC sf_glad_glShaderStorageBlockBinding = NULL;
PFNGLSHADINGRATEIMAGEBARRIERNVPROC sf_glad_glShadingRateImageBarrierNV = NULL;
PFNGLSHADINGRATEIMAGEPALETTENVPROC sf_glad_glShadingRateImagePaletteNV = NULL;
PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC sf_glad_glShadingRateSampleOrderCustomNV = NULL;
PFNGLSHADINGRATESAMPLEORDERNVPROC sf_glad_glShadingRateSampleOrderNV = NULL;
PFNGLSHARPENTEXFUNCSGISPROC sf_glad_glSharpenTexFuncSGIS = NULL;
PFNGLSIGNALSEMAPHOREEXTPROC sf_glad_glSignalSemaphoreEXT = NULL;
PFNGLSIGNALSEMAPHOREUI64NVXPROC sf_glad_glSignalSemaphoreui64NVX = NULL;
PFNGLSIGNALVKFENCENVPROC sf_glad_glSignalVkFenceNV = NULL;
PFNGLSIGNALVKSEMAPHORENVPROC sf_glad_glSignalVkSemaphoreNV = NULL;
PFNGLSPECIALIZESHADERPROC sf_glad_glSpecializeShader = NULL;
PFNGLSPECIALIZESHADERARBPROC sf_glad_glSpecializeShaderARB = NULL;
PFNGLSPRITEPARAMETERFSGIXPROC sf_glad_glSpriteParameterfSGIX = NULL;
PFNGLSPRITEPARAMETERFVSGIXPROC sf_glad_glSpriteParameterfvSGIX = NULL;
PFNGLSPRITEPARAMETERISGIXPROC sf_glad_glSpriteParameteriSGIX = NULL;
PFNGLSPRITEPARAMETERIVSGIXPROC sf_glad_glSpriteParameterivSGIX = NULL;
PFNGLSTARTINSTRUMENTSSGIXPROC sf_glad_glStartInstrumentsSGIX = NULL;
PFNGLSTATECAPTURENVPROC sf_glad_glStateCaptureNV = NULL;
PFNGLSTENCILCLEARTAGEXTPROC sf_glad_glStencilClearTagEXT = NULL;
PFNGLSTENCILFILLPATHINSTANCEDNVPROC sf_glad_glStencilFillPathInstancedNV = NULL;
PFNGLSTENCILFILLPATHNVPROC sf_glad_glStencilFillPathNV = NULL;
PFNGLSTENCILFUNCPROC sf_glad_glStencilFunc = NULL;
PFNGLSTENCILFUNCSEPARATEPROC sf_glad_glStencilFuncSeparate = NULL;
PFNGLSTENCILFUNCSEPARATEATIPROC sf_glad_glStencilFuncSeparateATI = NULL;
PFNGLSTENCILMASKPROC sf_glad_glStencilMask = NULL;
PFNGLSTENCILMASKSEPARATEPROC sf_glad_glStencilMaskSeparate = NULL;
PFNGLSTENCILOPPROC sf_glad_glStencilOp = NULL;
PFNGLSTENCILOPSEPARATEPROC sf_glad_glStencilOpSeparate = NULL;
PFNGLSTENCILOPSEPARATEATIPROC sf_glad_glStencilOpSeparateATI = NULL;
PFNGLSTENCILOPVALUEAMDPROC sf_glad_glStencilOpValueAMD = NULL;
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC sf_glad_glStencilStrokePathInstancedNV = NULL;
PFNGLSTENCILSTROKEPATHNVPROC sf_glad_glStencilStrokePathNV = NULL;
PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC sf_glad_glStencilThenCoverFillPathInstancedNV = NULL;
PFNGLSTENCILTHENCOVERFILLPATHNVPROC sf_glad_glStencilThenCoverFillPathNV = NULL;
PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC sf_glad_glStencilThenCoverStrokePathInstancedNV = NULL;
PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC sf_glad_glStencilThenCoverStrokePathNV = NULL;
PFNGLSTOPINSTRUMENTSSGIXPROC sf_glad_glStopInstrumentsSGIX = NULL;
PFNGLSTRINGMARKERGREMEDYPROC sf_glad_glStringMarkerGREMEDY = NULL;
PFNGLSUBPIXELPRECISIONBIASNVPROC sf_glad_glSubpixelPrecisionBiasNV = NULL;
PFNGLSWIZZLEEXTPROC sf_glad_glSwizzleEXT = NULL;
PFNGLSYNCTEXTUREINTELPROC sf_glad_glSyncTextureINTEL = NULL;
PFNGLTAGSAMPLEBUFFERSGIXPROC sf_glad_glTagSampleBufferSGIX = NULL;
PFNGLTANGENT3BEXTPROC sf_glad_glTangent3bEXT = NULL;
PFNGLTANGENT3BVEXTPROC sf_glad_glTangent3bvEXT = NULL;
PFNGLTANGENT3DEXTPROC sf_glad_glTangent3dEXT = NULL;
PFNGLTANGENT3DVEXTPROC sf_glad_glTangent3dvEXT = NULL;
PFNGLTANGENT3FEXTPROC sf_glad_glTangent3fEXT = NULL;
PFNGLTANGENT3FVEXTPROC sf_glad_glTangent3fvEXT = NULL;
PFNGLTANGENT3IEXTPROC sf_glad_glTangent3iEXT = NULL;
PFNGLTANGENT3IVEXTPROC sf_glad_glTangent3ivEXT = NULL;
PFNGLTANGENT3SEXTPROC sf_glad_glTangent3sEXT = NULL;
PFNGLTANGENT3SVEXTPROC sf_glad_glTangent3svEXT = NULL;
PFNGLTANGENTPOINTEREXTPROC sf_glad_glTangentPointerEXT = NULL;
PFNGLTBUFFERMASK3DFXPROC sf_glad_glTbufferMask3DFX = NULL;
PFNGLTESSELLATIONFACTORAMDPROC sf_glad_glTessellationFactorAMD = NULL;
PFNGLTESSELLATIONMODEAMDPROC sf_glad_glTessellationModeAMD = NULL;
PFNGLTESTFENCEAPPLEPROC sf_glad_glTestFenceAPPLE = NULL;
PFNGLTESTFENCENVPROC sf_glad_glTestFenceNV = NULL;
PFNGLTESTOBJECTAPPLEPROC sf_glad_glTestObjectAPPLE = NULL;
PFNGLTEXATTACHMEMORYNVPROC sf_glad_glTexAttachMemoryNV = NULL;
PFNGLTEXBUFFERPROC sf_glad_glTexBuffer = NULL;
PFNGLTEXBUFFERARBPROC sf_glad_glTexBufferARB = NULL;
PFNGLTEXBUFFEREXTPROC sf_glad_glTexBufferEXT = NULL;
PFNGLTEXBUFFERRANGEPROC sf_glad_glTexBufferRange = NULL;
PFNGLTEXBUMPPARAMETERFVATIPROC sf_glad_glTexBumpParameterfvATI = NULL;
PFNGLTEXBUMPPARAMETERIVATIPROC sf_glad_glTexBumpParameterivATI = NULL;
PFNGLTEXCOORD1BOESPROC sf_glad_glTexCoord1bOES = NULL;
PFNGLTEXCOORD1BVOESPROC sf_glad_glTexCoord1bvOES = NULL;
PFNGLTEXCOORD1DPROC sf_glad_glTexCoord1d = NULL;
PFNGLTEXCOORD1DVPROC sf_glad_glTexCoord1dv = NULL;
PFNGLTEXCOORD1FPROC sf_glad_glTexCoord1f = NULL;
PFNGLTEXCOORD1FVPROC sf_glad_glTexCoord1fv = NULL;
PFNGLTEXCOORD1HNVPROC sf_glad_glTexCoord1hNV = NULL;
PFNGLTEXCOORD1HVNVPROC sf_glad_glTexCoord1hvNV = NULL;
PFNGLTEXCOORD1IPROC sf_glad_glTexCoord1i = NULL;
PFNGLTEXCOORD1IVPROC sf_glad_glTexCoord1iv = NULL;
PFNGLTEXCOORD1SPROC sf_glad_glTexCoord1s = NULL;
PFNGLTEXCOORD1SVPROC sf_glad_glTexCoord1sv = NULL;
PFNGLTEXCOORD1XOESPROC sf_glad_glTexCoord1xOES = NULL;
PFNGLTEXCOORD1XVOESPROC sf_glad_glTexCoord1xvOES = NULL;
PFNGLTEXCOORD2BOESPROC sf_glad_glTexCoord2bOES = NULL;
PFNGLTEXCOORD2BVOESPROC sf_glad_glTexCoord2bvOES = NULL;
PFNGLTEXCOORD2DPROC sf_glad_glTexCoord2d = NULL;
PFNGLTEXCOORD2DVPROC sf_glad_glTexCoord2dv = NULL;
PFNGLTEXCOORD2FPROC sf_glad_glTexCoord2f = NULL;
PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC sf_glad_glTexCoord2fColor3fVertex3fSUN = NULL;
PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC sf_glad_glTexCoord2fColor3fVertex3fvSUN = NULL;
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC sf_glad_glTexCoord2fColor4fNormal3fVertex3fSUN = NULL;
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC sf_glad_glTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC sf_glad_glTexCoord2fColor4ubVertex3fSUN = NULL;
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC sf_glad_glTexCoord2fColor4ubVertex3fvSUN = NULL;
PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC sf_glad_glTexCoord2fNormal3fVertex3fSUN = NULL;
PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC sf_glad_glTexCoord2fNormal3fVertex3fvSUN = NULL;
PFNGLTEXCOORD2FVERTEX3FSUNPROC sf_glad_glTexCoord2fVertex3fSUN = NULL;
PFNGLTEXCOORD2FVERTEX3FVSUNPROC sf_glad_glTexCoord2fVertex3fvSUN = NULL;
PFNGLTEXCOORD2FVPROC sf_glad_glTexCoord2fv = NULL;
PFNGLTEXCOORD2HNVPROC sf_glad_glTexCoord2hNV = NULL;
PFNGLTEXCOORD2HVNVPROC sf_glad_glTexCoord2hvNV = NULL;
PFNGLTEXCOORD2IPROC sf_glad_glTexCoord2i = NULL;
PFNGLTEXCOORD2IVPROC sf_glad_glTexCoord2iv = NULL;
PFNGLTEXCOORD2SPROC sf_glad_glTexCoord2s = NULL;
PFNGLTEXCOORD2SVPROC sf_glad_glTexCoord2sv = NULL;
PFNGLTEXCOORD2XOESPROC sf_glad_glTexCoord2xOES = NULL;
PFNGLTEXCOORD2XVOESPROC sf_glad_glTexCoord2xvOES = NULL;
PFNGLTEXCOORD3BOESPROC sf_glad_glTexCoord3bOES = NULL;
PFNGLTEXCOORD3BVOESPROC sf_glad_glTexCoord3bvOES = NULL;
PFNGLTEXCOORD3DPROC sf_glad_glTexCoord3d = NULL;
PFNGLTEXCOORD3DVPROC sf_glad_glTexCoord3dv = NULL;
PFNGLTEXCOORD3FPROC sf_glad_glTexCoord3f = NULL;
PFNGLTEXCOORD3FVPROC sf_glad_glTexCoord3fv = NULL;
PFNGLTEXCOORD3HNVPROC sf_glad_glTexCoord3hNV = NULL;
PFNGLTEXCOORD3HVNVPROC sf_glad_glTexCoord3hvNV = NULL;
PFNGLTEXCOORD3IPROC sf_glad_glTexCoord3i = NULL;
PFNGLTEXCOORD3IVPROC sf_glad_glTexCoord3iv = NULL;
PFNGLTEXCOORD3SPROC sf_glad_glTexCoord3s = NULL;
PFNGLTEXCOORD3SVPROC sf_glad_glTexCoord3sv = NULL;
PFNGLTEXCOORD3XOESPROC sf_glad_glTexCoord3xOES = NULL;
PFNGLTEXCOORD3XVOESPROC sf_glad_glTexCoord3xvOES = NULL;
PFNGLTEXCOORD4BOESPROC sf_glad_glTexCoord4bOES = NULL;
PFNGLTEXCOORD4BVOESPROC sf_glad_glTexCoord4bvOES = NULL;
PFNGLTEXCOORD4DPROC sf_glad_glTexCoord4d = NULL;
PFNGLTEXCOORD4DVPROC sf_glad_glTexCoord4dv = NULL;
PFNGLTEXCOORD4FPROC sf_glad_glTexCoord4f = NULL;
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC sf_glad_glTexCoord4fColor4fNormal3fVertex4fSUN = NULL;
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC sf_glad_glTexCoord4fColor4fNormal3fVertex4fvSUN = NULL;
PFNGLTEXCOORD4FVERTEX4FSUNPROC sf_glad_glTexCoord4fVertex4fSUN = NULL;
PFNGLTEXCOORD4FVERTEX4FVSUNPROC sf_glad_glTexCoord4fVertex4fvSUN = NULL;
PFNGLTEXCOORD4FVPROC sf_glad_glTexCoord4fv = NULL;
PFNGLTEXCOORD4HNVPROC sf_glad_glTexCoord4hNV = NULL;
PFNGLTEXCOORD4HVNVPROC sf_glad_glTexCoord4hvNV = NULL;
PFNGLTEXCOORD4IPROC sf_glad_glTexCoord4i = NULL;
PFNGLTEXCOORD4IVPROC sf_glad_glTexCoord4iv = NULL;
PFNGLTEXCOORD4SPROC sf_glad_glTexCoord4s = NULL;
PFNGLTEXCOORD4SVPROC sf_glad_glTexCoord4sv = NULL;
PFNGLTEXCOORD4XOESPROC sf_glad_glTexCoord4xOES = NULL;
PFNGLTEXCOORD4XVOESPROC sf_glad_glTexCoord4xvOES = NULL;
PFNGLTEXCOORDFORMATNVPROC sf_glad_glTexCoordFormatNV = NULL;
PFNGLTEXCOORDP1UIPROC sf_glad_glTexCoordP1ui = NULL;
PFNGLTEXCOORDP1UIVPROC sf_glad_glTexCoordP1uiv = NULL;
PFNGLTEXCOORDP2UIPROC sf_glad_glTexCoordP2ui = NULL;
PFNGLTEXCOORDP2UIVPROC sf_glad_glTexCoordP2uiv = NULL;
PFNGLTEXCOORDP3UIPROC sf_glad_glTexCoordP3ui = NULL;
PFNGLTEXCOORDP3UIVPROC sf_glad_glTexCoordP3uiv = NULL;
PFNGLTEXCOORDP4UIPROC sf_glad_glTexCoordP4ui = NULL;
PFNGLTEXCOORDP4UIVPROC sf_glad_glTexCoordP4uiv = NULL;
PFNGLTEXCOORDPOINTERPROC sf_glad_glTexCoordPointer = NULL;
PFNGLTEXCOORDPOINTEREXTPROC sf_glad_glTexCoordPointerEXT = NULL;
PFNGLTEXCOORDPOINTERLISTIBMPROC sf_glad_glTexCoordPointerListIBM = NULL;
PFNGLTEXCOORDPOINTERVINTELPROC sf_glad_glTexCoordPointervINTEL = NULL;
PFNGLTEXENVFPROC sf_glad_glTexEnvf = NULL;
PFNGLTEXENVFVPROC sf_glad_glTexEnvfv = NULL;
PFNGLTEXENVIPROC sf_glad_glTexEnvi = NULL;
PFNGLTEXENVIVPROC sf_glad_glTexEnviv = NULL;
PFNGLTEXENVXOESPROC sf_glad_glTexEnvxOES = NULL;
PFNGLTEXENVXVOESPROC sf_glad_glTexEnvxvOES = NULL;
PFNGLTEXFILTERFUNCSGISPROC sf_glad_glTexFilterFuncSGIS = NULL;
PFNGLTEXGENDPROC sf_glad_glTexGend = NULL;
PFNGLTEXGENDVPROC sf_glad_glTexGendv = NULL;
PFNGLTEXGENFPROC sf_glad_glTexGenf = NULL;
PFNGLTEXGENFVPROC sf_glad_glTexGenfv = NULL;
PFNGLTEXGENIPROC sf_glad_glTexGeni = NULL;
PFNGLTEXGENIVPROC sf_glad_glTexGeniv = NULL;
PFNGLTEXGENXOESPROC sf_glad_glTexGenxOES = NULL;
PFNGLTEXGENXVOESPROC sf_glad_glTexGenxvOES = NULL;
PFNGLTEXIMAGE1DPROC sf_glad_glTexImage1D = NULL;
PFNGLTEXIMAGE2DPROC sf_glad_glTexImage2D = NULL;
PFNGLTEXIMAGE2DMULTISAMPLEPROC sf_glad_glTexImage2DMultisample = NULL;
PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC sf_glad_glTexImage2DMultisampleCoverageNV = NULL;
PFNGLTEXIMAGE3DPROC sf_glad_glTexImage3D = NULL;
PFNGLTEXIMAGE3DEXTPROC sf_glad_glTexImage3DEXT = NULL;
PFNGLTEXIMAGE3DMULTISAMPLEPROC sf_glad_glTexImage3DMultisample = NULL;
PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC sf_glad_glTexImage3DMultisampleCoverageNV = NULL;
PFNGLTEXIMAGE4DSGISPROC sf_glad_glTexImage4DSGIS = NULL;
PFNGLTEXPAGECOMMITMENTARBPROC sf_glad_glTexPageCommitmentARB = NULL;
PFNGLTEXPAGECOMMITMENTMEMNVPROC sf_glad_glTexPageCommitmentMemNV = NULL;
PFNGLTEXPARAMETERIIVPROC sf_glad_glTexParameterIiv = NULL;
PFNGLTEXPARAMETERIIVEXTPROC sf_glad_glTexParameterIivEXT = NULL;
PFNGLTEXPARAMETERIUIVPROC sf_glad_glTexParameterIuiv = NULL;
PFNGLTEXPARAMETERIUIVEXTPROC sf_glad_glTexParameterIuivEXT = NULL;
PFNGLTEXPARAMETERFPROC sf_glad_glTexParameterf = NULL;
PFNGLTEXPARAMETERFVPROC sf_glad_glTexParameterfv = NULL;
PFNGLTEXPARAMETERIPROC sf_glad_glTexParameteri = NULL;
PFNGLTEXPARAMETERIVPROC sf_glad_glTexParameteriv = NULL;
PFNGLTEXPARAMETERXOESPROC sf_glad_glTexParameterxOES = NULL;
PFNGLTEXPARAMETERXVOESPROC sf_glad_glTexParameterxvOES = NULL;
PFNGLTEXRENDERBUFFERNVPROC sf_glad_glTexRenderbufferNV = NULL;
PFNGLTEXSTORAGE1DPROC sf_glad_glTexStorage1D = NULL;
PFNGLTEXSTORAGE1DEXTPROC sf_glad_glTexStorage1DEXT = NULL;
PFNGLTEXSTORAGE2DPROC sf_glad_glTexStorage2D = NULL;
PFNGLTEXSTORAGE2DEXTPROC sf_glad_glTexStorage2DEXT = NULL;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC sf_glad_glTexStorage2DMultisample = NULL;
PFNGLTEXSTORAGE3DPROC sf_glad_glTexStorage3D = NULL;
PFNGLTEXSTORAGE3DEXTPROC sf_glad_glTexStorage3DEXT = NULL;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC sf_glad_glTexStorage3DMultisample = NULL;
PFNGLTEXSTORAGEMEM1DEXTPROC sf_glad_glTexStorageMem1DEXT = NULL;
PFNGLTEXSTORAGEMEM2DEXTPROC sf_glad_glTexStorageMem2DEXT = NULL;
PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC sf_glad_glTexStorageMem2DMultisampleEXT = NULL;
PFNGLTEXSTORAGEMEM3DEXTPROC sf_glad_glTexStorageMem3DEXT = NULL;
PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC sf_glad_glTexStorageMem3DMultisampleEXT = NULL;
PFNGLTEXSTORAGESPARSEAMDPROC sf_glad_glTexStorageSparseAMD = NULL;
PFNGLTEXSUBIMAGE1DPROC sf_glad_glTexSubImage1D = NULL;
PFNGLTEXSUBIMAGE1DEXTPROC sf_glad_glTexSubImage1DEXT = NULL;
PFNGLTEXSUBIMAGE2DPROC sf_glad_glTexSubImage2D = NULL;
PFNGLTEXSUBIMAGE2DEXTPROC sf_glad_glTexSubImage2DEXT = NULL;
PFNGLTEXSUBIMAGE3DPROC sf_glad_glTexSubImage3D = NULL;
PFNGLTEXSUBIMAGE3DEXTPROC sf_glad_glTexSubImage3DEXT = NULL;
PFNGLTEXSUBIMAGE4DSGISPROC sf_glad_glTexSubImage4DSGIS = NULL;
PFNGLTEXTUREATTACHMEMORYNVPROC sf_glad_glTextureAttachMemoryNV = NULL;
PFNGLTEXTUREBARRIERPROC sf_glad_glTextureBarrier = NULL;
PFNGLTEXTUREBARRIERNVPROC sf_glad_glTextureBarrierNV = NULL;
PFNGLTEXTUREBUFFERPROC sf_glad_glTextureBuffer = NULL;
PFNGLTEXTUREBUFFEREXTPROC sf_glad_glTextureBufferEXT = NULL;
PFNGLTEXTUREBUFFERRANGEPROC sf_glad_glTextureBufferRange = NULL;
PFNGLTEXTUREBUFFERRANGEEXTPROC sf_glad_glTextureBufferRangeEXT = NULL;
PFNGLTEXTURECOLORMASKSGISPROC sf_glad_glTextureColorMaskSGIS = NULL;
PFNGLTEXTUREIMAGE1DEXTPROC sf_glad_glTextureImage1DEXT = NULL;
PFNGLTEXTUREIMAGE2DEXTPROC sf_glad_glTextureImage2DEXT = NULL;
PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC sf_glad_glTextureImage2DMultisampleCoverageNV = NULL;
PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC sf_glad_glTextureImage2DMultisampleNV = NULL;
PFNGLTEXTUREIMAGE3DEXTPROC sf_glad_glTextureImage3DEXT = NULL;
PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC sf_glad_glTextureImage3DMultisampleCoverageNV = NULL;
PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC sf_glad_glTextureImage3DMultisampleNV = NULL;
PFNGLTEXTURELIGHTEXTPROC sf_glad_glTextureLightEXT = NULL;
PFNGLTEXTUREMATERIALEXTPROC sf_glad_glTextureMaterialEXT = NULL;
PFNGLTEXTURENORMALEXTPROC sf_glad_glTextureNormalEXT = NULL;
PFNGLTEXTUREPAGECOMMITMENTEXTPROC sf_glad_glTexturePageCommitmentEXT = NULL;
PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC sf_glad_glTexturePageCommitmentMemNV = NULL;
PFNGLTEXTUREPARAMETERIIVPROC sf_glad_glTextureParameterIiv = NULL;
PFNGLTEXTUREPARAMETERIIVEXTPROC sf_glad_glTextureParameterIivEXT = NULL;
PFNGLTEXTUREPARAMETERIUIVPROC sf_glad_glTextureParameterIuiv = NULL;
PFNGLTEXTUREPARAMETERIUIVEXTPROC sf_glad_glTextureParameterIuivEXT = NULL;
PFNGLTEXTUREPARAMETERFPROC sf_glad_glTextureParameterf = NULL;
PFNGLTEXTUREPARAMETERFEXTPROC sf_glad_glTextureParameterfEXT = NULL;
PFNGLTEXTUREPARAMETERFVPROC sf_glad_glTextureParameterfv = NULL;
PFNGLTEXTUREPARAMETERFVEXTPROC sf_glad_glTextureParameterfvEXT = NULL;
PFNGLTEXTUREPARAMETERIPROC sf_glad_glTextureParameteri = NULL;
PFNGLTEXTUREPARAMETERIEXTPROC sf_glad_glTextureParameteriEXT = NULL;
PFNGLTEXTUREPARAMETERIVPROC sf_glad_glTextureParameteriv = NULL;
PFNGLTEXTUREPARAMETERIVEXTPROC sf_glad_glTextureParameterivEXT = NULL;
PFNGLTEXTURERANGEAPPLEPROC sf_glad_glTextureRangeAPPLE = NULL;
PFNGLTEXTURERENDERBUFFEREXTPROC sf_glad_glTextureRenderbufferEXT = NULL;
PFNGLTEXTURESTORAGE1DPROC sf_glad_glTextureStorage1D = NULL;
PFNGLTEXTURESTORAGE1DEXTPROC sf_glad_glTextureStorage1DEXT = NULL;
PFNGLTEXTURESTORAGE2DPROC sf_glad_glTextureStorage2D = NULL;
PFNGLTEXTURESTORAGE2DEXTPROC sf_glad_glTextureStorage2DEXT = NULL;
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC sf_glad_glTextureStorage2DMultisample = NULL;
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC sf_glad_glTextureStorage2DMultisampleEXT = NULL;
PFNGLTEXTURESTORAGE3DPROC sf_glad_glTextureStorage3D = NULL;
PFNGLTEXTURESTORAGE3DEXTPROC sf_glad_glTextureStorage3DEXT = NULL;
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC sf_glad_glTextureStorage3DMultisample = NULL;
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC sf_glad_glTextureStorage3DMultisampleEXT = NULL;
PFNGLTEXTURESTORAGEMEM1DEXTPROC sf_glad_glTextureStorageMem1DEXT = NULL;
PFNGLTEXTURESTORAGEMEM2DEXTPROC sf_glad_glTextureStorageMem2DEXT = NULL;
PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC sf_glad_glTextureStorageMem2DMultisampleEXT = NULL;
PFNGLTEXTURESTORAGEMEM3DEXTPROC sf_glad_glTextureStorageMem3DEXT = NULL;
PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC sf_glad_glTextureStorageMem3DMultisampleEXT = NULL;
PFNGLTEXTURESTORAGESPARSEAMDPROC sf_glad_glTextureStorageSparseAMD = NULL;
PFNGLTEXTURESUBIMAGE1DPROC sf_glad_glTextureSubImage1D = NULL;
PFNGLTEXTURESUBIMAGE1DEXTPROC sf_glad_glTextureSubImage1DEXT = NULL;
PFNGLTEXTURESUBIMAGE2DPROC sf_glad_glTextureSubImage2D = NULL;
PFNGLTEXTURESUBIMAGE2DEXTPROC sf_glad_glTextureSubImage2DEXT = NULL;
PFNGLTEXTURESUBIMAGE3DPROC sf_glad_glTextureSubImage3D = NULL;
PFNGLTEXTURESUBIMAGE3DEXTPROC sf_glad_glTextureSubImage3DEXT = NULL;
PFNGLTEXTUREVIEWPROC sf_glad_glTextureView = NULL;
PFNGLTRACKMATRIXNVPROC sf_glad_glTrackMatrixNV = NULL;
PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC sf_glad_glTransformFeedbackAttribsNV = NULL;
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC sf_glad_glTransformFeedbackBufferBase = NULL;
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC sf_glad_glTransformFeedbackBufferRange = NULL;
PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC sf_glad_glTransformFeedbackStreamAttribsNV = NULL;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC sf_glad_glTransformFeedbackVaryings = NULL;
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC sf_glad_glTransformFeedbackVaryingsEXT = NULL;
PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC sf_glad_glTransformFeedbackVaryingsNV = NULL;
PFNGLTRANSFORMPATHNVPROC sf_glad_glTransformPathNV = NULL;
PFNGLTRANSLATEDPROC sf_glad_glTranslated = NULL;
PFNGLTRANSLATEFPROC sf_glad_glTranslatef = NULL;
PFNGLTRANSLATEXOESPROC sf_glad_glTranslatexOES = NULL;
PFNGLUNIFORM1DPROC sf_glad_glUniform1d = NULL;
PFNGLUNIFORM1DVPROC sf_glad_glUniform1dv = NULL;
PFNGLUNIFORM1FPROC sf_glad_glUniform1f = NULL;
PFNGLUNIFORM1FARBPROC sf_glad_glUniform1fARB = NULL;
PFNGLUNIFORM1FVPROC sf_glad_glUniform1fv = NULL;
PFNGLUNIFORM1FVARBPROC sf_glad_glUniform1fvARB = NULL;
PFNGLUNIFORM1IPROC sf_glad_glUniform1i = NULL;
PFNGLUNIFORM1I64ARBPROC sf_glad_glUniform1i64ARB = NULL;
PFNGLUNIFORM1I64NVPROC sf_glad_glUniform1i64NV = NULL;
PFNGLUNIFORM1I64VARBPROC sf_glad_glUniform1i64vARB = NULL;
PFNGLUNIFORM1I64VNVPROC sf_glad_glUniform1i64vNV = NULL;
PFNGLUNIFORM1IARBPROC sf_glad_glUniform1iARB = NULL;
PFNGLUNIFORM1IVPROC sf_glad_glUniform1iv = NULL;
PFNGLUNIFORM1IVARBPROC sf_glad_glUniform1ivARB = NULL;
PFNGLUNIFORM1UIPROC sf_glad_glUniform1ui = NULL;
PFNGLUNIFORM1UI64ARBPROC sf_glad_glUniform1ui64ARB = NULL;
PFNGLUNIFORM1UI64NVPROC sf_glad_glUniform1ui64NV = NULL;
PFNGLUNIFORM1UI64VARBPROC sf_glad_glUniform1ui64vARB = NULL;
PFNGLUNIFORM1UI64VNVPROC sf_glad_glUniform1ui64vNV = NULL;
PFNGLUNIFORM1UIEXTPROC sf_glad_glUniform1uiEXT = NULL;
PFNGLUNIFORM1UIVPROC sf_glad_glUniform1uiv = NULL;
PFNGLUNIFORM1UIVEXTPROC sf_glad_glUniform1uivEXT = NULL;
PFNGLUNIFORM2DPROC sf_glad_glUniform2d = NULL;
PFNGLUNIFORM2DVPROC sf_glad_glUniform2dv = NULL;
PFNGLUNIFORM2FPROC sf_glad_glUniform2f = NULL;
PFNGLUNIFORM2FARBPROC sf_glad_glUniform2fARB = NULL;
PFNGLUNIFORM2FVPROC sf_glad_glUniform2fv = NULL;
PFNGLUNIFORM2FVARBPROC sf_glad_glUniform2fvARB = NULL;
PFNGLUNIFORM2IPROC sf_glad_glUniform2i = NULL;
PFNGLUNIFORM2I64ARBPROC sf_glad_glUniform2i64ARB = NULL;
PFNGLUNIFORM2I64NVPROC sf_glad_glUniform2i64NV = NULL;
PFNGLUNIFORM2I64VARBPROC sf_glad_glUniform2i64vARB = NULL;
PFNGLUNIFORM2I64VNVPROC sf_glad_glUniform2i64vNV = NULL;
PFNGLUNIFORM2IARBPROC sf_glad_glUniform2iARB = NULL;
PFNGLUNIFORM2IVPROC sf_glad_glUniform2iv = NULL;
PFNGLUNIFORM2IVARBPROC sf_glad_glUniform2ivARB = NULL;
PFNGLUNIFORM2UIPROC sf_glad_glUniform2ui = NULL;
PFNGLUNIFORM2UI64ARBPROC sf_glad_glUniform2ui64ARB = NULL;
PFNGLUNIFORM2UI64NVPROC sf_glad_glUniform2ui64NV = NULL;
PFNGLUNIFORM2UI64VARBPROC sf_glad_glUniform2ui64vARB = NULL;
PFNGLUNIFORM2UI64VNVPROC sf_glad_glUniform2ui64vNV = NULL;
PFNGLUNIFORM2UIEXTPROC sf_glad_glUniform2uiEXT = NULL;
PFNGLUNIFORM2UIVPROC sf_glad_glUniform2uiv = NULL;
PFNGLUNIFORM2UIVEXTPROC sf_glad_glUniform2uivEXT = NULL;
PFNGLUNIFORM3DPROC sf_glad_glUniform3d = NULL;
PFNGLUNIFORM3DVPROC sf_glad_glUniform3dv = NULL;
PFNGLUNIFORM3FPROC sf_glad_glUniform3f = NULL;
PFNGLUNIFORM3FARBPROC sf_glad_glUniform3fARB = NULL;
PFNGLUNIFORM3FVPROC sf_glad_glUniform3fv = NULL;
PFNGLUNIFORM3FVARBPROC sf_glad_glUniform3fvARB = NULL;
PFNGLUNIFORM3IPROC sf_glad_glUniform3i = NULL;
PFNGLUNIFORM3I64ARBPROC sf_glad_glUniform3i64ARB = NULL;
PFNGLUNIFORM3I64NVPROC sf_glad_glUniform3i64NV = NULL;
PFNGLUNIFORM3I64VARBPROC sf_glad_glUniform3i64vARB = NULL;
PFNGLUNIFORM3I64VNVPROC sf_glad_glUniform3i64vNV = NULL;
PFNGLUNIFORM3IARBPROC sf_glad_glUniform3iARB = NULL;
PFNGLUNIFORM3IVPROC sf_glad_glUniform3iv = NULL;
PFNGLUNIFORM3IVARBPROC sf_glad_glUniform3ivARB = NULL;
PFNGLUNIFORM3UIPROC sf_glad_glUniform3ui = NULL;
PFNGLUNIFORM3UI64ARBPROC sf_glad_glUniform3ui64ARB = NULL;
PFNGLUNIFORM3UI64NVPROC sf_glad_glUniform3ui64NV = NULL;
PFNGLUNIFORM3UI64VARBPROC sf_glad_glUniform3ui64vARB = NULL;
PFNGLUNIFORM3UI64VNVPROC sf_glad_glUniform3ui64vNV = NULL;
PFNGLUNIFORM3UIEXTPROC sf_glad_glUniform3uiEXT = NULL;
PFNGLUNIFORM3UIVPROC sf_glad_glUniform3uiv = NULL;
PFNGLUNIFORM3UIVEXTPROC sf_glad_glUniform3uivEXT = NULL;
PFNGLUNIFORM4DPROC sf_glad_glUniform4d = NULL;
PFNGLUNIFORM4DVPROC sf_glad_glUniform4dv = NULL;
PFNGLUNIFORM4FPROC sf_glad_glUniform4f = NULL;
PFNGLUNIFORM4FARBPROC sf_glad_glUniform4fARB = NULL;
PFNGLUNIFORM4FVPROC sf_glad_glUniform4fv = NULL;
PFNGLUNIFORM4FVARBPROC sf_glad_glUniform4fvARB = NULL;
PFNGLUNIFORM4IPROC sf_glad_glUniform4i = NULL;
PFNGLUNIFORM4I64ARBPROC sf_glad_glUniform4i64ARB = NULL;
PFNGLUNIFORM4I64NVPROC sf_glad_glUniform4i64NV = NULL;
PFNGLUNIFORM4I64VARBPROC sf_glad_glUniform4i64vARB = NULL;
PFNGLUNIFORM4I64VNVPROC sf_glad_glUniform4i64vNV = NULL;
PFNGLUNIFORM4IARBPROC sf_glad_glUniform4iARB = NULL;
PFNGLUNIFORM4IVPROC sf_glad_glUniform4iv = NULL;
PFNGLUNIFORM4IVARBPROC sf_glad_glUniform4ivARB = NULL;
PFNGLUNIFORM4UIPROC sf_glad_glUniform4ui = NULL;
PFNGLUNIFORM4UI64ARBPROC sf_glad_glUniform4ui64ARB = NULL;
PFNGLUNIFORM4UI64NVPROC sf_glad_glUniform4ui64NV = NULL;
PFNGLUNIFORM4UI64VARBPROC sf_glad_glUniform4ui64vARB = NULL;
PFNGLUNIFORM4UI64VNVPROC sf_glad_glUniform4ui64vNV = NULL;
PFNGLUNIFORM4UIEXTPROC sf_glad_glUniform4uiEXT = NULL;
PFNGLUNIFORM4UIVPROC sf_glad_glUniform4uiv = NULL;
PFNGLUNIFORM4UIVEXTPROC sf_glad_glUniform4uivEXT = NULL;
PFNGLUNIFORMBLOCKBINDINGPROC sf_glad_glUniformBlockBinding = NULL;
PFNGLUNIFORMBUFFEREXTPROC sf_glad_glUniformBufferEXT = NULL;
PFNGLUNIFORMHANDLEUI64ARBPROC sf_glad_glUniformHandleui64ARB = NULL;
PFNGLUNIFORMHANDLEUI64NVPROC sf_glad_glUniformHandleui64NV = NULL;
PFNGLUNIFORMHANDLEUI64VARBPROC sf_glad_glUniformHandleui64vARB = NULL;
PFNGLUNIFORMHANDLEUI64VNVPROC sf_glad_glUniformHandleui64vNV = NULL;
PFNGLUNIFORMMATRIX2DVPROC sf_glad_glUniformMatrix2dv = NULL;
PFNGLUNIFORMMATRIX2FVPROC sf_glad_glUniformMatrix2fv = NULL;
PFNGLUNIFORMMATRIX2FVARBPROC sf_glad_glUniformMatrix2fvARB = NULL;
PFNGLUNIFORMMATRIX2X3DVPROC sf_glad_glUniformMatrix2x3dv = NULL;
PFNGLUNIFORMMATRIX2X3FVPROC sf_glad_glUniformMatrix2x3fv = NULL;
PFNGLUNIFORMMATRIX2X4DVPROC sf_glad_glUniformMatrix2x4dv = NULL;
PFNGLUNIFORMMATRIX2X4FVPROC sf_glad_glUniformMatrix2x4fv = NULL;
PFNGLUNIFORMMATRIX3DVPROC sf_glad_glUniformMatrix3dv = NULL;
PFNGLUNIFORMMATRIX3FVPROC sf_glad_glUniformMatrix3fv = NULL;
PFNGLUNIFORMMATRIX3FVARBPROC sf_glad_glUniformMatrix3fvARB = NULL;
PFNGLUNIFORMMATRIX3X2DVPROC sf_glad_glUniformMatrix3x2dv = NULL;
PFNGLUNIFORMMATRIX3X2FVPROC sf_glad_glUniformMatrix3x2fv = NULL;
PFNGLUNIFORMMATRIX3X4DVPROC sf_glad_glUniformMatrix3x4dv = NULL;
PFNGLUNIFORMMATRIX3X4FVPROC sf_glad_glUniformMatrix3x4fv = NULL;
PFNGLUNIFORMMATRIX4DVPROC sf_glad_glUniformMatrix4dv = NULL;
PFNGLUNIFORMMATRIX4FVPROC sf_glad_glUniformMatrix4fv = NULL;
PFNGLUNIFORMMATRIX4FVARBPROC sf_glad_glUniformMatrix4fvARB = NULL;
PFNGLUNIFORMMATRIX4X2DVPROC sf_glad_glUniformMatrix4x2dv = NULL;
PFNGLUNIFORMMATRIX4X2FVPROC sf_glad_glUniformMatrix4x2fv = NULL;
PFNGLUNIFORMMATRIX4X3DVPROC sf_glad_glUniformMatrix4x3dv = NULL;
PFNGLUNIFORMMATRIX4X3FVPROC sf_glad_glUniformMatrix4x3fv = NULL;
PFNGLUNIFORMSUBROUTINESUIVPROC sf_glad_glUniformSubroutinesuiv = NULL;
PFNGLUNIFORMUI64NVPROC sf_glad_glUniformui64NV = NULL;
PFNGLUNIFORMUI64VNVPROC sf_glad_glUniformui64vNV = NULL;
PFNGLUNLOCKARRAYSEXTPROC sf_glad_glUnlockArraysEXT = NULL;
PFNGLUNMAPBUFFERPROC sf_glad_glUnmapBuffer = NULL;
PFNGLUNMAPBUFFERARBPROC sf_glad_glUnmapBufferARB = NULL;
PFNGLUNMAPNAMEDBUFFERPROC sf_glad_glUnmapNamedBuffer = NULL;
PFNGLUNMAPNAMEDBUFFEREXTPROC sf_glad_glUnmapNamedBufferEXT = NULL;
PFNGLUNMAPOBJECTBUFFERATIPROC sf_glad_glUnmapObjectBufferATI = NULL;
PFNGLUNMAPTEXTURE2DINTELPROC sf_glad_glUnmapTexture2DINTEL = NULL;
PFNGLUPDATEOBJECTBUFFERATIPROC sf_glad_glUpdateObjectBufferATI = NULL;
PFNGLUPLOADGPUMASKNVXPROC sf_glad_glUploadGpuMaskNVX = NULL;
PFNGLUSEPROGRAMPROC sf_glad_glUseProgram = NULL;
PFNGLUSEPROGRAMOBJECTARBPROC sf_glad_glUseProgramObjectARB = NULL;
PFNGLUSEPROGRAMSTAGESPROC sf_glad_glUseProgramStages = NULL;
PFNGLUSESHADERPROGRAMEXTPROC sf_glad_glUseShaderProgramEXT = NULL;
PFNGLVDPAUFININVPROC sf_glad_glVDPAUFiniNV = NULL;
PFNGLVDPAUGETSURFACEIVNVPROC sf_glad_glVDPAUGetSurfaceivNV = NULL;
PFNGLVDPAUINITNVPROC sf_glad_glVDPAUInitNV = NULL;
PFNGLVDPAUISSURFACENVPROC sf_glad_glVDPAUIsSurfaceNV = NULL;
PFNGLVDPAUMAPSURFACESNVPROC sf_glad_glVDPAUMapSurfacesNV = NULL;
PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC sf_glad_glVDPAURegisterOutputSurfaceNV = NULL;
PFNGLVDPAUREGISTERVIDEOSURFACENVPROC sf_glad_glVDPAURegisterVideoSurfaceNV = NULL;
PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC sf_glad_glVDPAURegisterVideoSurfaceWithPictureStructureNV = NULL;
PFNGLVDPAUSURFACEACCESSNVPROC sf_glad_glVDPAUSurfaceAccessNV = NULL;
PFNGLVDPAUUNMAPSURFACESNVPROC sf_glad_glVDPAUUnmapSurfacesNV = NULL;
PFNGLVDPAUUNREGISTERSURFACENVPROC sf_glad_glVDPAUUnregisterSurfaceNV = NULL;
PFNGLVALIDATEPROGRAMPROC sf_glad_glValidateProgram = NULL;
PFNGLVALIDATEPROGRAMARBPROC sf_glad_glValidateProgramARB = NULL;
PFNGLVALIDATEPROGRAMPIPELINEPROC sf_glad_glValidateProgramPipeline = NULL;
PFNGLVARIANTARRAYOBJECTATIPROC sf_glad_glVariantArrayObjectATI = NULL;
PFNGLVARIANTPOINTEREXTPROC sf_glad_glVariantPointerEXT = NULL;
PFNGLVARIANTBVEXTPROC sf_glad_glVariantbvEXT = NULL;
PFNGLVARIANTDVEXTPROC sf_glad_glVariantdvEXT = NULL;
PFNGLVARIANTFVEXTPROC sf_glad_glVariantfvEXT = NULL;
PFNGLVARIANTIVEXTPROC sf_glad_glVariantivEXT = NULL;
PFNGLVARIANTSVEXTPROC sf_glad_glVariantsvEXT = NULL;
PFNGLVARIANTUBVEXTPROC sf_glad_glVariantubvEXT = NULL;
PFNGLVARIANTUIVEXTPROC sf_glad_glVariantuivEXT = NULL;
PFNGLVARIANTUSVEXTPROC sf_glad_glVariantusvEXT = NULL;
PFNGLVERTEX2BOESPROC sf_glad_glVertex2bOES = NULL;
PFNGLVERTEX2BVOESPROC sf_glad_glVertex2bvOES = NULL;
PFNGLVERTEX2DPROC sf_glad_glVertex2d = NULL;
PFNGLVERTEX2DVPROC sf_glad_glVertex2dv = NULL;
PFNGLVERTEX2FPROC sf_glad_glVertex2f = NULL;
PFNGLVERTEX2FVPROC sf_glad_glVertex2fv = NULL;
PFNGLVERTEX2HNVPROC sf_glad_glVertex2hNV = NULL;
PFNGLVERTEX2HVNVPROC sf_glad_glVertex2hvNV = NULL;
PFNGLVERTEX2IPROC sf_glad_glVertex2i = NULL;
PFNGLVERTEX2IVPROC sf_glad_glVertex2iv = NULL;
PFNGLVERTEX2SPROC sf_glad_glVertex2s = NULL;
PFNGLVERTEX2SVPROC sf_glad_glVertex2sv = NULL;
PFNGLVERTEX2XOESPROC sf_glad_glVertex2xOES = NULL;
PFNGLVERTEX2XVOESPROC sf_glad_glVertex2xvOES = NULL;
PFNGLVERTEX3BOESPROC sf_glad_glVertex3bOES = NULL;
PFNGLVERTEX3BVOESPROC sf_glad_glVertex3bvOES = NULL;
PFNGLVERTEX3DPROC sf_glad_glVertex3d = NULL;
PFNGLVERTEX3DVPROC sf_glad_glVertex3dv = NULL;
PFNGLVERTEX3FPROC sf_glad_glVertex3f = NULL;
PFNGLVERTEX3FVPROC sf_glad_glVertex3fv = NULL;
PFNGLVERTEX3HNVPROC sf_glad_glVertex3hNV = NULL;
PFNGLVERTEX3HVNVPROC sf_glad_glVertex3hvNV = NULL;
PFNGLVERTEX3IPROC sf_glad_glVertex3i = NULL;
PFNGLVERTEX3IVPROC sf_glad_glVertex3iv = NULL;
PFNGLVERTEX3SPROC sf_glad_glVertex3s = NULL;
PFNGLVERTEX3SVPROC sf_glad_glVertex3sv = NULL;
PFNGLVERTEX3XOESPROC sf_glad_glVertex3xOES = NULL;
PFNGLVERTEX3XVOESPROC sf_glad_glVertex3xvOES = NULL;
PFNGLVERTEX4BOESPROC sf_glad_glVertex4bOES = NULL;
PFNGLVERTEX4BVOESPROC sf_glad_glVertex4bvOES = NULL;
PFNGLVERTEX4DPROC sf_glad_glVertex4d = NULL;
PFNGLVERTEX4DVPROC sf_glad_glVertex4dv = NULL;
PFNGLVERTEX4FPROC sf_glad_glVertex4f = NULL;
PFNGLVERTEX4FVPROC sf_glad_glVertex4fv = NULL;
PFNGLVERTEX4HNVPROC sf_glad_glVertex4hNV = NULL;
PFNGLVERTEX4HVNVPROC sf_glad_glVertex4hvNV = NULL;
PFNGLVERTEX4IPROC sf_glad_glVertex4i = NULL;
PFNGLVERTEX4IVPROC sf_glad_glVertex4iv = NULL;
PFNGLVERTEX4SPROC sf_glad_glVertex4s = NULL;
PFNGLVERTEX4SVPROC sf_glad_glVertex4sv = NULL;
PFNGLVERTEX4XOESPROC sf_glad_glVertex4xOES = NULL;
PFNGLVERTEX4XVOESPROC sf_glad_glVertex4xvOES = NULL;
PFNGLVERTEXARRAYATTRIBBINDINGPROC sf_glad_glVertexArrayAttribBinding = NULL;
PFNGLVERTEXARRAYATTRIBFORMATPROC sf_glad_glVertexArrayAttribFormat = NULL;
PFNGLVERTEXARRAYATTRIBIFORMATPROC sf_glad_glVertexArrayAttribIFormat = NULL;
PFNGLVERTEXARRAYATTRIBLFORMATPROC sf_glad_glVertexArrayAttribLFormat = NULL;
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC sf_glad_glVertexArrayBindVertexBufferEXT = NULL;
PFNGLVERTEXARRAYBINDINGDIVISORPROC sf_glad_glVertexArrayBindingDivisor = NULL;
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC sf_glad_glVertexArrayColorOffsetEXT = NULL;
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC sf_glad_glVertexArrayEdgeFlagOffsetEXT = NULL;
PFNGLVERTEXARRAYELEMENTBUFFERPROC sf_glad_glVertexArrayElementBuffer = NULL;
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC sf_glad_glVertexArrayFogCoordOffsetEXT = NULL;
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC sf_glad_glVertexArrayIndexOffsetEXT = NULL;
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC sf_glad_glVertexArrayMultiTexCoordOffsetEXT = NULL;
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC sf_glad_glVertexArrayNormalOffsetEXT = NULL;
PFNGLVERTEXARRAYPARAMETERIAPPLEPROC sf_glad_glVertexArrayParameteriAPPLE = NULL;
PFNGLVERTEXARRAYRANGEAPPLEPROC sf_glad_glVertexArrayRangeAPPLE = NULL;
PFNGLVERTEXARRAYRANGENVPROC sf_glad_glVertexArrayRangeNV = NULL;
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC sf_glad_glVertexArraySecondaryColorOffsetEXT = NULL;
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC sf_glad_glVertexArrayTexCoordOffsetEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC sf_glad_glVertexArrayVertexAttribBindingEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC sf_glad_glVertexArrayVertexAttribDivisorEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC sf_glad_glVertexArrayVertexAttribFormatEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC sf_glad_glVertexArrayVertexAttribIFormatEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribIOffsetEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC sf_glad_glVertexArrayVertexAttribLFormatEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribLOffsetEXT = NULL;
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC sf_glad_glVertexArrayVertexAttribOffsetEXT = NULL;
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC sf_glad_glVertexArrayVertexBindingDivisorEXT = NULL;
PFNGLVERTEXARRAYVERTEXBUFFERPROC sf_glad_glVertexArrayVertexBuffer = NULL;
PFNGLVERTEXARRAYVERTEXBUFFERSPROC sf_glad_glVertexArrayVertexBuffers = NULL;
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC sf_glad_glVertexArrayVertexOffsetEXT = NULL;
PFNGLVERTEXATTRIB1DPROC sf_glad_glVertexAttrib1d = NULL;
PFNGLVERTEXATTRIB1DARBPROC sf_glad_glVertexAttrib1dARB = NULL;
PFNGLVERTEXATTRIB1DNVPROC sf_glad_glVertexAttrib1dNV = NULL;
PFNGLVERTEXATTRIB1DVPROC sf_glad_glVertexAttrib1dv = NULL;
PFNGLVERTEXATTRIB1DVARBPROC sf_glad_glVertexAttrib1dvARB = NULL;
PFNGLVERTEXATTRIB1DVNVPROC sf_glad_glVertexAttrib1dvNV = NULL;
PFNGLVERTEXATTRIB1FPROC sf_glad_glVertexAttrib1f = NULL;
PFNGLVERTEXATTRIB1FARBPROC sf_glad_glVertexAttrib1fARB = NULL;
PFNGLVERTEXATTRIB1FNVPROC sf_glad_glVertexAttrib1fNV = NULL;
PFNGLVERTEXATTRIB1FVPROC sf_glad_glVertexAttrib1fv = NULL;
PFNGLVERTEXATTRIB1FVARBPROC sf_glad_glVertexAttrib1fvARB = NULL;
PFNGLVERTEXATTRIB1FVNVPROC sf_glad_glVertexAttrib1fvNV = NULL;
PFNGLVERTEXATTRIB1HNVPROC sf_glad_glVertexAttrib1hNV = NULL;
PFNGLVERTEXATTRIB1HVNVPROC sf_glad_glVertexAttrib1hvNV = NULL;
PFNGLVERTEXATTRIB1SPROC sf_glad_glVertexAttrib1s = NULL;
PFNGLVERTEXATTRIB1SARBPROC sf_glad_glVertexAttrib1sARB = NULL;
PFNGLVERTEXATTRIB1SNVPROC sf_glad_glVertexAttrib1sNV = NULL;
PFNGLVERTEXATTRIB1SVPROC sf_glad_glVertexAttrib1sv = NULL;
PFNGLVERTEXATTRIB1SVARBPROC sf_glad_glVertexAttrib1svARB = NULL;
PFNGLVERTEXATTRIB1SVNVPROC sf_glad_glVertexAttrib1svNV = NULL;
PFNGLVERTEXATTRIB2DPROC sf_glad_glVertexAttrib2d = NULL;
PFNGLVERTEXATTRIB2DARBPROC sf_glad_glVertexAttrib2dARB = NULL;
PFNGLVERTEXATTRIB2DNVPROC sf_glad_glVertexAttrib2dNV = NULL;
PFNGLVERTEXATTRIB2DVPROC sf_glad_glVertexAttrib2dv = NULL;
PFNGLVERTEXATTRIB2DVARBPROC sf_glad_glVertexAttrib2dvARB = NULL;
PFNGLVERTEXATTRIB2DVNVPROC sf_glad_glVertexAttrib2dvNV = NULL;
PFNGLVERTEXATTRIB2FPROC sf_glad_glVertexAttrib2f = NULL;
PFNGLVERTEXATTRIB2FARBPROC sf_glad_glVertexAttrib2fARB = NULL;
PFNGLVERTEXATTRIB2FNVPROC sf_glad_glVertexAttrib2fNV = NULL;
PFNGLVERTEXATTRIB2FVPROC sf_glad_glVertexAttrib2fv = NULL;
PFNGLVERTEXATTRIB2FVARBPROC sf_glad_glVertexAttrib2fvARB = NULL;
PFNGLVERTEXATTRIB2FVNVPROC sf_glad_glVertexAttrib2fvNV = NULL;
PFNGLVERTEXATTRIB2HNVPROC sf_glad_glVertexAttrib2hNV = NULL;
PFNGLVERTEXATTRIB2HVNVPROC sf_glad_glVertexAttrib2hvNV = NULL;
PFNGLVERTEXATTRIB2SPROC sf_glad_glVertexAttrib2s = NULL;
PFNGLVERTEXATTRIB2SARBPROC sf_glad_glVertexAttrib2sARB = NULL;
PFNGLVERTEXATTRIB2SNVPROC sf_glad_glVertexAttrib2sNV = NULL;
PFNGLVERTEXATTRIB2SVPROC sf_glad_glVertexAttrib2sv = NULL;
PFNGLVERTEXATTRIB2SVARBPROC sf_glad_glVertexAttrib2svARB = NULL;
PFNGLVERTEXATTRIB2SVNVPROC sf_glad_glVertexAttrib2svNV = NULL;
PFNGLVERTEXATTRIB3DPROC sf_glad_glVertexAttrib3d = NULL;
PFNGLVERTEXATTRIB3DARBPROC sf_glad_glVertexAttrib3dARB = NULL;
PFNGLVERTEXATTRIB3DNVPROC sf_glad_glVertexAttrib3dNV = NULL;
PFNGLVERTEXATTRIB3DVPROC sf_glad_glVertexAttrib3dv = NULL;
PFNGLVERTEXATTRIB3DVARBPROC sf_glad_glVertexAttrib3dvARB = NULL;
PFNGLVERTEXATTRIB3DVNVPROC sf_glad_glVertexAttrib3dvNV = NULL;
PFNGLVERTEXATTRIB3FPROC sf_glad_glVertexAttrib3f = NULL;
PFNGLVERTEXATTRIB3FARBPROC sf_glad_glVertexAttrib3fARB = NULL;
PFNGLVERTEXATTRIB3FNVPROC sf_glad_glVertexAttrib3fNV = NULL;
PFNGLVERTEXATTRIB3FVPROC sf_glad_glVertexAttrib3fv = NULL;
PFNGLVERTEXATTRIB3FVARBPROC sf_glad_glVertexAttrib3fvARB = NULL;
PFNGLVERTEXATTRIB3FVNVPROC sf_glad_glVertexAttrib3fvNV = NULL;
PFNGLVERTEXATTRIB3HNVPROC sf_glad_glVertexAttrib3hNV = NULL;
PFNGLVERTEXATTRIB3HVNVPROC sf_glad_glVertexAttrib3hvNV = NULL;
PFNGLVERTEXATTRIB3SPROC sf_glad_glVertexAttrib3s = NULL;
PFNGLVERTEXATTRIB3SARBPROC sf_glad_glVertexAttrib3sARB = NULL;
PFNGLVERTEXATTRIB3SNVPROC sf_glad_glVertexAttrib3sNV = NULL;
PFNGLVERTEXATTRIB3SVPROC sf_glad_glVertexAttrib3sv = NULL;
PFNGLVERTEXATTRIB3SVARBPROC sf_glad_glVertexAttrib3svARB = NULL;
PFNGLVERTEXATTRIB3SVNVPROC sf_glad_glVertexAttrib3svNV = NULL;
PFNGLVERTEXATTRIB4NBVPROC sf_glad_glVertexAttrib4Nbv = NULL;
PFNGLVERTEXATTRIB4NBVARBPROC sf_glad_glVertexAttrib4NbvARB = NULL;
PFNGLVERTEXATTRIB4NIVPROC sf_glad_glVertexAttrib4Niv = NULL;
PFNGLVERTEXATTRIB4NIVARBPROC sf_glad_glVertexAttrib4NivARB = NULL;
PFNGLVERTEXATTRIB4NSVPROC sf_glad_glVertexAttrib4Nsv = NULL;
PFNGLVERTEXATTRIB4NSVARBPROC sf_glad_glVertexAttrib4NsvARB = NULL;
PFNGLVERTEXATTRIB4NUBPROC sf_glad_glVertexAttrib4Nub = NULL;
PFNGLVERTEXATTRIB4NUBARBPROC sf_glad_glVertexAttrib4NubARB = NULL;
PFNGLVERTEXATTRIB4NUBVPROC sf_glad_glVertexAttrib4Nubv = NULL;
PFNGLVERTEXATTRIB4NUBVARBPROC sf_glad_glVertexAttrib4NubvARB = NULL;
PFNGLVERTEXATTRIB4NUIVPROC sf_glad_glVertexAttrib4Nuiv = NULL;
PFNGLVERTEXATTRIB4NUIVARBPROC sf_glad_glVertexAttrib4NuivARB = NULL;
PFNGLVERTEXATTRIB4NUSVPROC sf_glad_glVertexAttrib4Nusv = NULL;
PFNGLVERTEXATTRIB4NUSVARBPROC sf_glad_glVertexAttrib4NusvARB = NULL;
PFNGLVERTEXATTRIB4BVPROC sf_glad_glVertexAttrib4bv = NULL;
PFNGLVERTEXATTRIB4BVARBPROC sf_glad_glVertexAttrib4bvARB = NULL;
PFNGLVERTEXATTRIB4DPROC sf_glad_glVertexAttrib4d = NULL;
PFNGLVERTEXATTRIB4DARBPROC sf_glad_glVertexAttrib4dARB = NULL;
PFNGLVERTEXATTRIB4DNVPROC sf_glad_glVertexAttrib4dNV = NULL;
PFNGLVERTEXATTRIB4DVPROC sf_glad_glVertexAttrib4dv = NULL;
PFNGLVERTEXATTRIB4DVARBPROC sf_glad_glVertexAttrib4dvARB = NULL;
PFNGLVERTEXATTRIB4DVNVPROC sf_glad_glVertexAttrib4dvNV = NULL;
PFNGLVERTEXATTRIB4FPROC sf_glad_glVertexAttrib4f = NULL;
PFNGLVERTEXATTRIB4FARBPROC sf_glad_glVertexAttrib4fARB = NULL;
PFNGLVERTEXATTRIB4FNVPROC sf_glad_glVertexAttrib4fNV = NULL;
PFNGLVERTEXATTRIB4FVPROC sf_glad_glVertexAttrib4fv = NULL;
PFNGLVERTEXATTRIB4FVARBPROC sf_glad_glVertexAttrib4fvARB = NULL;
PFNGLVERTEXATTRIB4FVNVPROC sf_glad_glVertexAttrib4fvNV = NULL;
PFNGLVERTEXATTRIB4HNVPROC sf_glad_glVertexAttrib4hNV = NULL;
PFNGLVERTEXATTRIB4HVNVPROC sf_glad_glVertexAttrib4hvNV = NULL;
PFNGLVERTEXATTRIB4IVPROC sf_glad_glVertexAttrib4iv = NULL;
PFNGLVERTEXATTRIB4IVARBPROC sf_glad_glVertexAttrib4ivARB = NULL;
PFNGLVERTEXATTRIB4SPROC sf_glad_glVertexAttrib4s = NULL;
PFNGLVERTEXATTRIB4SARBPROC sf_glad_glVertexAttrib4sARB = NULL;
PFNGLVERTEXATTRIB4SNVPROC sf_glad_glVertexAttrib4sNV = NULL;
PFNGLVERTEXATTRIB4SVPROC sf_glad_glVertexAttrib4sv = NULL;
PFNGLVERTEXATTRIB4SVARBPROC sf_glad_glVertexAttrib4svARB = NULL;
PFNGLVERTEXATTRIB4SVNVPROC sf_glad_glVertexAttrib4svNV = NULL;
PFNGLVERTEXATTRIB4UBNVPROC sf_glad_glVertexAttrib4ubNV = NULL;
PFNGLVERTEXATTRIB4UBVPROC sf_glad_glVertexAttrib4ubv = NULL;
PFNGLVERTEXATTRIB4UBVARBPROC sf_glad_glVertexAttrib4ubvARB = NULL;
PFNGLVERTEXATTRIB4UBVNVPROC sf_glad_glVertexAttrib4ubvNV = NULL;
PFNGLVERTEXATTRIB4UIVPROC sf_glad_glVertexAttrib4uiv = NULL;
PFNGLVERTEXATTRIB4UIVARBPROC sf_glad_glVertexAttrib4uivARB = NULL;
PFNGLVERTEXATTRIB4USVPROC sf_glad_glVertexAttrib4usv = NULL;
PFNGLVERTEXATTRIB4USVARBPROC sf_glad_glVertexAttrib4usvARB = NULL;
PFNGLVERTEXATTRIBARRAYOBJECTATIPROC sf_glad_glVertexAttribArrayObjectATI = NULL;
PFNGLVERTEXATTRIBBINDINGPROC sf_glad_glVertexAttribBinding = NULL;
PFNGLVERTEXATTRIBDIVISORPROC sf_glad_glVertexAttribDivisor = NULL;
PFNGLVERTEXATTRIBDIVISORARBPROC sf_glad_glVertexAttribDivisorARB = NULL;
PFNGLVERTEXATTRIBFORMATPROC sf_glad_glVertexAttribFormat = NULL;
PFNGLVERTEXATTRIBFORMATNVPROC sf_glad_glVertexAttribFormatNV = NULL;
PFNGLVERTEXATTRIBI1IPROC sf_glad_glVertexAttribI1i = NULL;
PFNGLVERTEXATTRIBI1IEXTPROC sf_glad_glVertexAttribI1iEXT = NULL;
PFNGLVERTEXATTRIBI1IVPROC sf_glad_glVertexAttribI1iv = NULL;
PFNGLVERTEXATTRIBI1IVEXTPROC sf_glad_glVertexAttribI1ivEXT = NULL;
PFNGLVERTEXATTRIBI1UIPROC sf_glad_glVertexAttribI1ui = NULL;
PFNGLVERTEXATTRIBI1UIEXTPROC sf_glad_glVertexAttribI1uiEXT = NULL;
PFNGLVERTEXATTRIBI1UIVPROC sf_glad_glVertexAttribI1uiv = NULL;
PFNGLVERTEXATTRIBI1UIVEXTPROC sf_glad_glVertexAttribI1uivEXT = NULL;
PFNGLVERTEXATTRIBI2IPROC sf_glad_glVertexAttribI2i = NULL;
PFNGLVERTEXATTRIBI2IEXTPROC sf_glad_glVertexAttribI2iEXT = NULL;
PFNGLVERTEXATTRIBI2IVPROC sf_glad_glVertexAttribI2iv = NULL;
PFNGLVERTEXATTRIBI2IVEXTPROC sf_glad_glVertexAttribI2ivEXT = NULL;
PFNGLVERTEXATTRIBI2UIPROC sf_glad_glVertexAttribI2ui = NULL;
PFNGLVERTEXATTRIBI2UIEXTPROC sf_glad_glVertexAttribI2uiEXT = NULL;
PFNGLVERTEXATTRIBI2UIVPROC sf_glad_glVertexAttribI2uiv = NULL;
PFNGLVERTEXATTRIBI2UIVEXTPROC sf_glad_glVertexAttribI2uivEXT = NULL;
PFNGLVERTEXATTRIBI3IPROC sf_glad_glVertexAttribI3i = NULL;
PFNGLVERTEXATTRIBI3IEXTPROC sf_glad_glVertexAttribI3iEXT = NULL;
PFNGLVERTEXATTRIBI3IVPROC sf_glad_glVertexAttribI3iv = NULL;
PFNGLVERTEXATTRIBI3IVEXTPROC sf_glad_glVertexAttribI3ivEXT = NULL;
PFNGLVERTEXATTRIBI3UIPROC sf_glad_glVertexAttribI3ui = NULL;
PFNGLVERTEXATTRIBI3UIEXTPROC sf_glad_glVertexAttribI3uiEXT = NULL;
PFNGLVERTEXATTRIBI3UIVPROC sf_glad_glVertexAttribI3uiv = NULL;
PFNGLVERTEXATTRIBI3UIVEXTPROC sf_glad_glVertexAttribI3uivEXT = NULL;
PFNGLVERTEXATTRIBI4BVPROC sf_glad_glVertexAttribI4bv = NULL;
PFNGLVERTEXATTRIBI4BVEXTPROC sf_glad_glVertexAttribI4bvEXT = NULL;
PFNGLVERTEXATTRIBI4IPROC sf_glad_glVertexAttribI4i = NULL;
PFNGLVERTEXATTRIBI4IEXTPROC sf_glad_glVertexAttribI4iEXT = NULL;
PFNGLVERTEXATTRIBI4IVPROC sf_glad_glVertexAttribI4iv = NULL;
PFNGLVERTEXATTRIBI4IVEXTPROC sf_glad_glVertexAttribI4ivEXT = NULL;
PFNGLVERTEXATTRIBI4SVPROC sf_glad_glVertexAttribI4sv = NULL;
PFNGLVERTEXATTRIBI4SVEXTPROC sf_glad_glVertexAttribI4svEXT = NULL;
PFNGLVERTEXATTRIBI4UBVPROC sf_glad_glVertexAttribI4ubv = NULL;
PFNGLVERTEXATTRIBI4UBVEXTPROC sf_glad_glVertexAttribI4ubvEXT = NULL;
PFNGLVERTEXATTRIBI4UIPROC sf_glad_glVertexAttribI4ui = NULL;
PFNGLVERTEXATTRIBI4UIEXTPROC sf_glad_glVertexAttribI4uiEXT = NULL;
PFNGLVERTEXATTRIBI4UIVPROC sf_glad_glVertexAttribI4uiv = NULL;
PFNGLVERTEXATTRIBI4UIVEXTPROC sf_glad_glVertexAttribI4uivEXT = NULL;
PFNGLVERTEXATTRIBI4USVPROC sf_glad_glVertexAttribI4usv = NULL;
PFNGLVERTEXATTRIBI4USVEXTPROC sf_glad_glVertexAttribI4usvEXT = NULL;
PFNGLVERTEXATTRIBIFORMATPROC sf_glad_glVertexAttribIFormat = NULL;
PFNGLVERTEXATTRIBIFORMATNVPROC sf_glad_glVertexAttribIFormatNV = NULL;
PFNGLVERTEXATTRIBIPOINTERPROC sf_glad_glVertexAttribIPointer = NULL;
PFNGLVERTEXATTRIBIPOINTEREXTPROC sf_glad_glVertexAttribIPointerEXT = NULL;
PFNGLVERTEXATTRIBL1DPROC sf_glad_glVertexAttribL1d = NULL;
PFNGLVERTEXATTRIBL1DEXTPROC sf_glad_glVertexAttribL1dEXT = NULL;
PFNGLVERTEXATTRIBL1DVPROC sf_glad_glVertexAttribL1dv = NULL;
PFNGLVERTEXATTRIBL1DVEXTPROC sf_glad_glVertexAttribL1dvEXT = NULL;
PFNGLVERTEXATTRIBL1I64NVPROC sf_glad_glVertexAttribL1i64NV = NULL;
PFNGLVERTEXATTRIBL1I64VNVPROC sf_glad_glVertexAttribL1i64vNV = NULL;
PFNGLVERTEXATTRIBL1UI64ARBPROC sf_glad_glVertexAttribL1ui64ARB = NULL;
PFNGLVERTEXATTRIBL1UI64NVPROC sf_glad_glVertexAttribL1ui64NV = NULL;
PFNGLVERTEXATTRIBL1UI64VARBPROC sf_glad_glVertexAttribL1ui64vARB = NULL;
PFNGLVERTEXATTRIBL1UI64VNVPROC sf_glad_glVertexAttribL1ui64vNV = NULL;
PFNGLVERTEXATTRIBL2DPROC sf_glad_glVertexAttribL2d = NULL;
PFNGLVERTEXATTRIBL2DEXTPROC sf_glad_glVertexAttribL2dEXT = NULL;
PFNGLVERTEXATTRIBL2DVPROC sf_glad_glVertexAttribL2dv = NULL;
PFNGLVERTEXATTRIBL2DVEXTPROC sf_glad_glVertexAttribL2dvEXT = NULL;
PFNGLVERTEXATTRIBL2I64NVPROC sf_glad_glVertexAttribL2i64NV = NULL;
PFNGLVERTEXATTRIBL2I64VNVPROC sf_glad_glVertexAttribL2i64vNV = NULL;
PFNGLVERTEXATTRIBL2UI64NVPROC sf_glad_glVertexAttribL2ui64NV = NULL;
PFNGLVERTEXATTRIBL2UI64VNVPROC sf_glad_glVertexAttribL2ui64vNV = NULL;
PFNGLVERTEXATTRIBL3DPROC sf_glad_glVertexAttribL3d = NULL;
PFNGLVERTEXATTRIBL3DEXTPROC sf_glad_glVertexAttribL3dEXT = NULL;
PFNGLVERTEXATTRIBL3DVPROC sf_glad_glVertexAttribL3dv = NULL;
PFNGLVERTEXATTRIBL3DVEXTPROC sf_glad_glVertexAttribL3dvEXT = NULL;
PFNGLVERTEXATTRIBL3I64NVPROC sf_glad_glVertexAttribL3i64NV = NULL;
PFNGLVERTEXATTRIBL3I64VNVPROC sf_glad_glVertexAttribL3i64vNV = NULL;
PFNGLVERTEXATTRIBL3UI64NVPROC sf_glad_glVertexAttribL3ui64NV = NULL;
PFNGLVERTEXATTRIBL3UI64VNVPROC sf_glad_glVertexAttribL3ui64vNV = NULL;
PFNGLVERTEXATTRIBL4DPROC sf_glad_glVertexAttribL4d = NULL;
PFNGLVERTEXATTRIBL4DEXTPROC sf_glad_glVertexAttribL4dEXT = NULL;
PFNGLVERTEXATTRIBL4DVPROC sf_glad_glVertexAttribL4dv = NULL;
PFNGLVERTEXATTRIBL4DVEXTPROC sf_glad_glVertexAttribL4dvEXT = NULL;
PFNGLVERTEXATTRIBL4I64NVPROC sf_glad_glVertexAttribL4i64NV = NULL;
PFNGLVERTEXATTRIBL4I64VNVPROC sf_glad_glVertexAttribL4i64vNV = NULL;
PFNGLVERTEXATTRIBL4UI64NVPROC sf_glad_glVertexAttribL4ui64NV = NULL;
PFNGLVERTEXATTRIBL4UI64VNVPROC sf_glad_glVertexAttribL4ui64vNV = NULL;
PFNGLVERTEXATTRIBLFORMATPROC sf_glad_glVertexAttribLFormat = NULL;
PFNGLVERTEXATTRIBLFORMATNVPROC sf_glad_glVertexAttribLFormatNV = NULL;
PFNGLVERTEXATTRIBLPOINTERPROC sf_glad_glVertexAttribLPointer = NULL;
PFNGLVERTEXATTRIBLPOINTEREXTPROC sf_glad_glVertexAttribLPointerEXT = NULL;
PFNGLVERTEXATTRIBP1UIPROC sf_glad_glVertexAttribP1ui = NULL;
PFNGLVERTEXATTRIBP1UIVPROC sf_glad_glVertexAttribP1uiv = NULL;
PFNGLVERTEXATTRIBP2UIPROC sf_glad_glVertexAttribP2ui = NULL;
PFNGLVERTEXATTRIBP2UIVPROC sf_glad_glVertexAttribP2uiv = NULL;
PFNGLVERTEXATTRIBP3UIPROC sf_glad_glVertexAttribP3ui = NULL;
PFNGLVERTEXATTRIBP3UIVPROC sf_glad_glVertexAttribP3uiv = NULL;
PFNGLVERTEXATTRIBP4UIPROC sf_glad_glVertexAttribP4ui = NULL;
PFNGLVERTEXATTRIBP4UIVPROC sf_glad_glVertexAttribP4uiv = NULL;
PFNGLVERTEXATTRIBPARAMETERIAMDPROC sf_glad_glVertexAttribParameteriAMD = NULL;
PFNGLVERTEXATTRIBPOINTERPROC sf_glad_glVertexAttribPointer = NULL;
PFNGLVERTEXATTRIBPOINTERARBPROC sf_glad_glVertexAttribPointerARB = NULL;
PFNGLVERTEXATTRIBPOINTERNVPROC sf_glad_glVertexAttribPointerNV = NULL;
PFNGLVERTEXATTRIBS1DVNVPROC sf_glad_glVertexAttribs1dvNV = NULL;
PFNGLVERTEXATTRIBS1FVNVPROC sf_glad_glVertexAttribs1fvNV = NULL;
PFNGLVERTEXATTRIBS1HVNVPROC sf_glad_glVertexAttribs1hvNV = NULL;
PFNGLVERTEXATTRIBS1SVNVPROC sf_glad_glVertexAttribs1svNV = NULL;
PFNGLVERTEXATTRIBS2DVNVPROC sf_glad_glVertexAttribs2dvNV = NULL;
PFNGLVERTEXATTRIBS2FVNVPROC sf_glad_glVertexAttribs2fvNV = NULL;
PFNGLVERTEXATTRIBS2HVNVPROC sf_glad_glVertexAttribs2hvNV = NULL;
PFNGLVERTEXATTRIBS2SVNVPROC sf_glad_glVertexAttribs2svNV = NULL;
PFNGLVERTEXATTRIBS3DVNVPROC sf_glad_glVertexAttribs3dvNV = NULL;
PFNGLVERTEXATTRIBS3FVNVPROC sf_glad_glVertexAttribs3fvNV = NULL;
PFNGLVERTEXATTRIBS3HVNVPROC sf_glad_glVertexAttribs3hvNV = NULL;
PFNGLVERTEXATTRIBS3SVNVPROC sf_glad_glVertexAttribs3svNV = NULL;
PFNGLVERTEXATTRIBS4DVNVPROC sf_glad_glVertexAttribs4dvNV = NULL;
PFNGLVERTEXATTRIBS4FVNVPROC sf_glad_glVertexAttribs4fvNV = NULL;
PFNGLVERTEXATTRIBS4HVNVPROC sf_glad_glVertexAttribs4hvNV = NULL;
PFNGLVERTEXATTRIBS4SVNVPROC sf_glad_glVertexAttribs4svNV = NULL;
PFNGLVERTEXATTRIBS4UBVNVPROC sf_glad_glVertexAttribs4ubvNV = NULL;
PFNGLVERTEXBINDINGDIVISORPROC sf_glad_glVertexBindingDivisor = NULL;
PFNGLVERTEXBLENDARBPROC sf_glad_glVertexBlendARB = NULL;
PFNGLVERTEXBLENDENVFATIPROC sf_glad_glVertexBlendEnvfATI = NULL;
PFNGLVERTEXBLENDENVIATIPROC sf_glad_glVertexBlendEnviATI = NULL;
PFNGLVERTEXFORMATNVPROC sf_glad_glVertexFormatNV = NULL;
PFNGLVERTEXP2UIPROC sf_glad_glVertexP2ui = NULL;
PFNGLVERTEXP2UIVPROC sf_glad_glVertexP2uiv = NULL;
PFNGLVERTEXP3UIPROC sf_glad_glVertexP3ui = NULL;
PFNGLVERTEXP3UIVPROC sf_glad_glVertexP3uiv = NULL;
PFNGLVERTEXP4UIPROC sf_glad_glVertexP4ui = NULL;
PFNGLVERTEXP4UIVPROC sf_glad_glVertexP4uiv = NULL;
PFNGLVERTEXPOINTERPROC sf_glad_glVertexPointer = NULL;
PFNGLVERTEXPOINTEREXTPROC sf_glad_glVertexPointerEXT = NULL;
PFNGLVERTEXPOINTERLISTIBMPROC sf_glad_glVertexPointerListIBM = NULL;
PFNGLVERTEXPOINTERVINTELPROC sf_glad_glVertexPointervINTEL = NULL;
PFNGLVERTEXSTREAM1DATIPROC sf_glad_glVertexStream1dATI = NULL;
PFNGLVERTEXSTREAM1DVATIPROC sf_glad_glVertexStream1dvATI = NULL;
PFNGLVERTEXSTREAM1FATIPROC sf_glad_glVertexStream1fATI = NULL;
PFNGLVERTEXSTREAM1FVATIPROC sf_glad_glVertexStream1fvATI = NULL;
PFNGLVERTEXSTREAM1IATIPROC sf_glad_glVertexStream1iATI = NULL;
PFNGLVERTEXSTREAM1IVATIPROC sf_glad_glVertexStream1ivATI = NULL;
PFNGLVERTEXSTREAM1SATIPROC sf_glad_glVertexStream1sATI = NULL;
PFNGLVERTEXSTREAM1SVATIPROC sf_glad_glVertexStream1svATI = NULL;
PFNGLVERTEXSTREAM2DATIPROC sf_glad_glVertexStream2dATI = NULL;
PFNGLVERTEXSTREAM2DVATIPROC sf_glad_glVertexStream2dvATI = NULL;
PFNGLVERTEXSTREAM2FATIPROC sf_glad_glVertexStream2fATI = NULL;
PFNGLVERTEXSTREAM2FVATIPROC sf_glad_glVertexStream2fvATI = NULL;
PFNGLVERTEXSTREAM2IATIPROC sf_glad_glVertexStream2iATI = NULL;
PFNGLVERTEXSTREAM2IVATIPROC sf_glad_glVertexStream2ivATI = NULL;
PFNGLVERTEXSTREAM2SATIPROC sf_glad_glVertexStream2sATI = NULL;
PFNGLVERTEXSTREAM2SVATIPROC sf_glad_glVertexStream2svATI = NULL;
PFNGLVERTEXSTREAM3DATIPROC sf_glad_glVertexStream3dATI = NULL;
PFNGLVERTEXSTREAM3DVATIPROC sf_glad_glVertexStream3dvATI = NULL;
PFNGLVERTEXSTREAM3FATIPROC sf_glad_glVertexStream3fATI = NULL;
PFNGLVERTEXSTREAM3FVATIPROC sf_glad_glVertexStream3fvATI = NULL;
PFNGLVERTEXSTREAM3IATIPROC sf_glad_glVertexStream3iATI = NULL;
PFNGLVERTEXSTREAM3IVATIPROC sf_glad_glVertexStream3ivATI = NULL;
PFNGLVERTEXSTREAM3SATIPROC sf_glad_glVertexStream3sATI = NULL;
PFNGLVERTEXSTREAM3SVATIPROC sf_glad_glVertexStream3svATI = NULL;
PFNGLVERTEXSTREAM4DATIPROC sf_glad_glVertexStream4dATI = NULL;
PFNGLVERTEXSTREAM4DVATIPROC sf_glad_glVertexStream4dvATI = NULL;
PFNGLVERTEXSTREAM4FATIPROC sf_glad_glVertexStream4fATI = NULL;
PFNGLVERTEXSTREAM4FVATIPROC sf_glad_glVertexStream4fvATI = NULL;
PFNGLVERTEXSTREAM4IATIPROC sf_glad_glVertexStream4iATI = NULL;
PFNGLVERTEXSTREAM4IVATIPROC sf_glad_glVertexStream4ivATI = NULL;
PFNGLVERTEXSTREAM4SATIPROC sf_glad_glVertexStream4sATI = NULL;
PFNGLVERTEXSTREAM4SVATIPROC sf_glad_glVertexStream4svATI = NULL;
PFNGLVERTEXWEIGHTPOINTEREXTPROC sf_glad_glVertexWeightPointerEXT = NULL;
PFNGLVERTEXWEIGHTFEXTPROC sf_glad_glVertexWeightfEXT = NULL;
PFNGLVERTEXWEIGHTFVEXTPROC sf_glad_glVertexWeightfvEXT = NULL;
PFNGLVERTEXWEIGHTHNVPROC sf_glad_glVertexWeighthNV = NULL;
PFNGLVERTEXWEIGHTHVNVPROC sf_glad_glVertexWeighthvNV = NULL;
PFNGLVIDEOCAPTURENVPROC sf_glad_glVideoCaptureNV = NULL;
PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC sf_glad_glVideoCaptureStreamParameterdvNV = NULL;
PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC sf_glad_glVideoCaptureStreamParameterfvNV = NULL;
PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC sf_glad_glVideoCaptureStreamParameterivNV = NULL;
PFNGLVIEWPORTPROC sf_glad_glViewport = NULL;
PFNGLVIEWPORTARRAYVPROC sf_glad_glViewportArrayv = NULL;
PFNGLVIEWPORTINDEXEDFPROC sf_glad_glViewportIndexedf = NULL;
PFNGLVIEWPORTINDEXEDFVPROC sf_glad_glViewportIndexedfv = NULL;
PFNGLVIEWPORTPOSITIONWSCALENVPROC sf_glad_glViewportPositionWScaleNV = NULL;
PFNGLVIEWPORTSWIZZLENVPROC sf_glad_glViewportSwizzleNV = NULL;
PFNGLWAITSEMAPHOREEXTPROC sf_glad_glWaitSemaphoreEXT = NULL;
PFNGLWAITSEMAPHOREUI64NVXPROC sf_glad_glWaitSemaphoreui64NVX = NULL;
PFNGLWAITSYNCPROC sf_glad_glWaitSync = NULL;
PFNGLWAITVKSEMAPHORENVPROC sf_glad_glWaitVkSemaphoreNV = NULL;
PFNGLWEIGHTPATHSNVPROC sf_glad_glWeightPathsNV = NULL;
PFNGLWEIGHTPOINTERARBPROC sf_glad_glWeightPointerARB = NULL;
PFNGLWEIGHTBVARBPROC sf_glad_glWeightbvARB = NULL;
PFNGLWEIGHTDVARBPROC sf_glad_glWeightdvARB = NULL;
PFNGLWEIGHTFVARBPROC sf_glad_glWeightfvARB = NULL;
PFNGLWEIGHTIVARBPROC sf_glad_glWeightivARB = NULL;
PFNGLWEIGHTSVARBPROC sf_glad_glWeightsvARB = NULL;
PFNGLWEIGHTUBVARBPROC sf_glad_glWeightubvARB = NULL;
PFNGLWEIGHTUIVARBPROC sf_glad_glWeightuivARB = NULL;
PFNGLWEIGHTUSVARBPROC sf_glad_glWeightusvARB = NULL;
PFNGLWINDOWPOS2DPROC sf_glad_glWindowPos2d = NULL;
PFNGLWINDOWPOS2DARBPROC sf_glad_glWindowPos2dARB = NULL;
PFNGLWINDOWPOS2DMESAPROC sf_glad_glWindowPos2dMESA = NULL;
PFNGLWINDOWPOS2DVPROC sf_glad_glWindowPos2dv = NULL;
PFNGLWINDOWPOS2DVARBPROC sf_glad_glWindowPos2dvARB = NULL;
PFNGLWINDOWPOS2DVMESAPROC sf_glad_glWindowPos2dvMESA = NULL;
PFNGLWINDOWPOS2FPROC sf_glad_glWindowPos2f = NULL;
PFNGLWINDOWPOS2FARBPROC sf_glad_glWindowPos2fARB = NULL;
PFNGLWINDOWPOS2FMESAPROC sf_glad_glWindowPos2fMESA = NULL;
PFNGLWINDOWPOS2FVPROC sf_glad_glWindowPos2fv = NULL;
PFNGLWINDOWPOS2FVARBPROC sf_glad_glWindowPos2fvARB = NULL;
PFNGLWINDOWPOS2FVMESAPROC sf_glad_glWindowPos2fvMESA = NULL;
PFNGLWINDOWPOS2IPROC sf_glad_glWindowPos2i = NULL;
PFNGLWINDOWPOS2IARBPROC sf_glad_glWindowPos2iARB = NULL;
PFNGLWINDOWPOS2IMESAPROC sf_glad_glWindowPos2iMESA = NULL;
PFNGLWINDOWPOS2IVPROC sf_glad_glWindowPos2iv = NULL;
PFNGLWINDOWPOS2IVARBPROC sf_glad_glWindowPos2ivARB = NULL;
PFNGLWINDOWPOS2IVMESAPROC sf_glad_glWindowPos2ivMESA = NULL;
PFNGLWINDOWPOS2SPROC sf_glad_glWindowPos2s = NULL;
PFNGLWINDOWPOS2SARBPROC sf_glad_glWindowPos2sARB = NULL;
PFNGLWINDOWPOS2SMESAPROC sf_glad_glWindowPos2sMESA = NULL;
PFNGLWINDOWPOS2SVPROC sf_glad_glWindowPos2sv = NULL;
PFNGLWINDOWPOS2SVARBPROC sf_glad_glWindowPos2svARB = NULL;
PFNGLWINDOWPOS2SVMESAPROC sf_glad_glWindowPos2svMESA = NULL;
PFNGLWINDOWPOS3DPROC sf_glad_glWindowPos3d = NULL;
PFNGLWINDOWPOS3DARBPROC sf_glad_glWindowPos3dARB = NULL;
PFNGLWINDOWPOS3DMESAPROC sf_glad_glWindowPos3dMESA = NULL;
PFNGLWINDOWPOS3DVPROC sf_glad_glWindowPos3dv = NULL;
PFNGLWINDOWPOS3DVARBPROC sf_glad_glWindowPos3dvARB = NULL;
PFNGLWINDOWPOS3DVMESAPROC sf_glad_glWindowPos3dvMESA = NULL;
PFNGLWINDOWPOS3FPROC sf_glad_glWindowPos3f = NULL;
PFNGLWINDOWPOS3FARBPROC sf_glad_glWindowPos3fARB = NULL;
PFNGLWINDOWPOS3FMESAPROC sf_glad_glWindowPos3fMESA = NULL;
PFNGLWINDOWPOS3FVPROC sf_glad_glWindowPos3fv = NULL;
PFNGLWINDOWPOS3FVARBPROC sf_glad_glWindowPos3fvARB = NULL;
PFNGLWINDOWPOS3FVMESAPROC sf_glad_glWindowPos3fvMESA = NULL;
PFNGLWINDOWPOS3IPROC sf_glad_glWindowPos3i = NULL;
PFNGLWINDOWPOS3IARBPROC sf_glad_glWindowPos3iARB = NULL;
PFNGLWINDOWPOS3IMESAPROC sf_glad_glWindowPos3iMESA = NULL;
PFNGLWINDOWPOS3IVPROC sf_glad_glWindowPos3iv = NULL;
PFNGLWINDOWPOS3IVARBPROC sf_glad_glWindowPos3ivARB = NULL;
PFNGLWINDOWPOS3IVMESAPROC sf_glad_glWindowPos3ivMESA = NULL;
PFNGLWINDOWPOS3SPROC sf_glad_glWindowPos3s = NULL;
PFNGLWINDOWPOS3SARBPROC sf_glad_glWindowPos3sARB = NULL;
PFNGLWINDOWPOS3SMESAPROC sf_glad_glWindowPos3sMESA = NULL;
PFNGLWINDOWPOS3SVPROC sf_glad_glWindowPos3sv = NULL;
PFNGLWINDOWPOS3SVARBPROC sf_glad_glWindowPos3svARB = NULL;
PFNGLWINDOWPOS3SVMESAPROC sf_glad_glWindowPos3svMESA = NULL;
PFNGLWINDOWPOS4DMESAPROC sf_glad_glWindowPos4dMESA = NULL;
PFNGLWINDOWPOS4DVMESAPROC sf_glad_glWindowPos4dvMESA = NULL;
PFNGLWINDOWPOS4FMESAPROC sf_glad_glWindowPos4fMESA = NULL;
PFNGLWINDOWPOS4FVMESAPROC sf_glad_glWindowPos4fvMESA = NULL;
PFNGLWINDOWPOS4IMESAPROC sf_glad_glWindowPos4iMESA = NULL;
PFNGLWINDOWPOS4IVMESAPROC sf_glad_glWindowPos4ivMESA = NULL;
PFNGLWINDOWPOS4SMESAPROC sf_glad_glWindowPos4sMESA = NULL;
PFNGLWINDOWPOS4SVMESAPROC sf_glad_glWindowPos4svMESA = NULL;
PFNGLWINDOWRECTANGLESEXTPROC sf_glad_glWindowRectanglesEXT = NULL;
PFNGLWRITEMASKEXTPROC sf_glad_glWriteMaskEXT = NULL;
PFNGLALPHAFUNCXPROC sf_glad_glAlphaFuncx = NULL;
PFNGLBINDFRAMEBUFFEROESPROC sf_glad_glBindFramebufferOES = NULL;
PFNGLBINDRENDERBUFFEROESPROC sf_glad_glBindRenderbufferOES = NULL;
PFNGLBINDVERTEXARRAYOESPROC sf_glad_glBindVertexArrayOES = NULL;
PFNGLBLENDEQUATIONOESPROC sf_glad_glBlendEquationOES = NULL;
PFNGLBLENDEQUATIONSEPARATEOESPROC sf_glad_glBlendEquationSeparateOES = NULL;
PFNGLBLENDFUNCSEPARATEOESPROC sf_glad_glBlendFuncSeparateOES = NULL;
PFNGLCHECKFRAMEBUFFERSTATUSOESPROC sf_glad_glCheckFramebufferStatusOES = NULL;
PFNGLCLEARCOLORXPROC sf_glad_glClearColorx = NULL;
PFNGLCLEARDEPTHXPROC sf_glad_glClearDepthx = NULL;
PFNGLCLIENTWAITSYNCAPPLEPROC sf_glad_glClientWaitSyncAPPLE = NULL;
PFNGLCLIPPLANEFPROC sf_glad_glClipPlanef = NULL;
PFNGLCLIPPLANEFIMGPROC sf_glad_glClipPlanefIMG = NULL;
PFNGLCLIPPLANEXPROC sf_glad_glClipPlanex = NULL;
PFNGLCLIPPLANEXIMGPROC sf_glad_glClipPlanexIMG = NULL;
PFNGLCOLOR4XPROC sf_glad_glColor4x = NULL;
PFNGLCOPYTEXTURELEVELSAPPLEPROC sf_glad_glCopyTextureLevelsAPPLE = NULL;
PFNGLCURRENTPALETTEMATRIXOESPROC sf_glad_glCurrentPaletteMatrixOES = NULL;
PFNGLDELETEFRAMEBUFFERSOESPROC sf_glad_glDeleteFramebuffersOES = NULL;
PFNGLDELETERENDERBUFFERSOESPROC sf_glad_glDeleteRenderbuffersOES = NULL;
PFNGLDELETESYNCAPPLEPROC sf_glad_glDeleteSyncAPPLE = NULL;
PFNGLDELETEVERTEXARRAYSOESPROC sf_glad_glDeleteVertexArraysOES = NULL;
PFNGLDEPTHRANGEXPROC sf_glad_glDepthRangex = NULL;
PFNGLDISABLEDRIVERCONTROLQCOMPROC sf_glad_glDisableDriverControlQCOM = NULL;
PFNGLDISCARDFRAMEBUFFEREXTPROC sf_glad_glDiscardFramebufferEXT = NULL;
PFNGLDRAWTEXFOESPROC sf_glad_glDrawTexfOES = NULL;
PFNGLDRAWTEXFVOESPROC sf_glad_glDrawTexfvOES = NULL;
PFNGLDRAWTEXIOESPROC sf_glad_glDrawTexiOES = NULL;
PFNGLDRAWTEXIVOESPROC sf_glad_glDrawTexivOES = NULL;
PFNGLDRAWTEXSOESPROC sf_glad_glDrawTexsOES = NULL;
PFNGLDRAWTEXSVOESPROC sf_glad_glDrawTexsvOES = NULL;
PFNGLDRAWTEXXOESPROC sf_glad_glDrawTexxOES = NULL;
PFNGLDRAWTEXXVOESPROC sf_glad_glDrawTexxvOES = NULL;
PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC sf_glad_glEGLImageTargetRenderbufferStorageOES = NULL;
PFNGLEGLIMAGETARGETTEXTURE2DOESPROC sf_glad_glEGLImageTargetTexture2DOES = NULL;
PFNGLENABLEDRIVERCONTROLQCOMPROC sf_glad_glEnableDriverControlQCOM = NULL;
PFNGLENDTILINGQCOMPROC sf_glad_glEndTilingQCOM = NULL;
PFNGLEXTGETBUFFERPOINTERVQCOMPROC sf_glad_glExtGetBufferPointervQCOM = NULL;
PFNGLEXTGETBUFFERSQCOMPROC sf_glad_glExtGetBuffersQCOM = NULL;
PFNGLEXTGETFRAMEBUFFERSQCOMPROC sf_glad_glExtGetFramebuffersQCOM = NULL;
PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC sf_glad_glExtGetProgramBinarySourceQCOM = NULL;
PFNGLEXTGETPROGRAMSQCOMPROC sf_glad_glExtGetProgramsQCOM = NULL;
PFNGLEXTGETRENDERBUFFERSQCOMPROC sf_glad_glExtGetRenderbuffersQCOM = NULL;
PFNGLEXTGETSHADERSQCOMPROC sf_glad_glExtGetShadersQCOM = NULL;
PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC sf_glad_glExtGetTexLevelParameterivQCOM = NULL;
PFNGLEXTGETTEXSUBIMAGEQCOMPROC sf_glad_glExtGetTexSubImageQCOM = NULL;
PFNGLEXTGETTEXTURESQCOMPROC sf_glad_glExtGetTexturesQCOM = NULL;
PFNGLEXTISPROGRAMBINARYQCOMPROC sf_glad_glExtIsProgramBinaryQCOM = NULL;
PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC sf_glad_glExtTexObjectStateOverrideiQCOM = NULL;
PFNGLFENCESYNCAPPLEPROC sf_glad_glFenceSyncAPPLE = NULL;
PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC sf_glad_glFlushMappedBufferRangeEXT = NULL;
PFNGLFOGXPROC sf_glad_glFogx = NULL;
PFNGLFOGXVPROC sf_glad_glFogxv = NULL;
PFNGLFRAMEBUFFERRENDERBUFFEROESPROC sf_glad_glFramebufferRenderbufferOES = NULL;
PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC sf_glad_glFramebufferTexture2DMultisampleEXT = NULL;
PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC sf_glad_glFramebufferTexture2DMultisampleIMG = NULL;
PFNGLFRAMEBUFFERTEXTURE2DOESPROC sf_glad_glFramebufferTexture2DOES = NULL;
PFNGLFRUSTUMFPROC sf_glad_glFrustumf = NULL;
PFNGLFRUSTUMXPROC sf_glad_glFrustumx = NULL;
PFNGLGENFRAMEBUFFERSOESPROC sf_glad_glGenFramebuffersOES = NULL;
PFNGLGENRENDERBUFFERSOESPROC sf_glad_glGenRenderbuffersOES = NULL;
PFNGLGENVERTEXARRAYSOESPROC sf_glad_glGenVertexArraysOES = NULL;
PFNGLGENERATEMIPMAPOESPROC sf_glad_glGenerateMipmapOES = NULL;
PFNGLGETBUFFERPOINTERVOESPROC sf_glad_glGetBufferPointervOES = NULL;
PFNGLGETCLIPPLANEFPROC sf_glad_glGetClipPlanef = NULL;
PFNGLGETCLIPPLANEXPROC sf_glad_glGetClipPlanex = NULL;
PFNGLGETDRIVERCONTROLSTRINGQCOMPROC sf_glad_glGetDriverControlStringQCOM = NULL;
PFNGLGETDRIVERCONTROLSQCOMPROC sf_glad_glGetDriverControlsQCOM = NULL;
PFNGLGETFIXEDVPROC sf_glad_glGetFixedv = NULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC sf_glad_glGetFramebufferAttachmentParameterivOES = NULL;
PFNGLGETGRAPHICSRESETSTATUSEXTPROC sf_glad_glGetGraphicsResetStatusEXT = NULL;
PFNGLGETINTEGER64VAPPLEPROC sf_glad_glGetInteger64vAPPLE = NULL;
PFNGLGETLIGHTXVPROC sf_glad_glGetLightxv = NULL;
PFNGLGETLIGHTXVOESPROC sf_glad_glGetLightxvOES = NULL;
PFNGLGETMATERIALXVPROC sf_glad_glGetMaterialxv = NULL;
PFNGLGETMATERIALXVOESPROC sf_glad_glGetMaterialxvOES = NULL;
PFNGLGETRENDERBUFFERPARAMETERIVOESPROC sf_glad_glGetRenderbufferParameterivOES = NULL;
PFNGLGETSYNCIVAPPLEPROC sf_glad_glGetSyncivAPPLE = NULL;
PFNGLGETTEXENVXVPROC sf_glad_glGetTexEnvxv = NULL;
PFNGLGETTEXGENFVOESPROC sf_glad_glGetTexGenfvOES = NULL;
PFNGLGETTEXGENIVOESPROC sf_glad_glGetTexGenivOES = NULL;
PFNGLGETTEXPARAMETERXVPROC sf_glad_glGetTexParameterxv = NULL;
PFNGLGETNUNIFORMFVEXTPROC sf_glad_glGetnUniformfvEXT = NULL;
PFNGLGETNUNIFORMIVEXTPROC sf_glad_glGetnUniformivEXT = NULL;
PFNGLISFRAMEBUFFEROESPROC sf_glad_glIsFramebufferOES = NULL;
PFNGLISRENDERBUFFEROESPROC sf_glad_glIsRenderbufferOES = NULL;
PFNGLISSYNCAPPLEPROC sf_glad_glIsSyncAPPLE = NULL;
PFNGLISVERTEXARRAYOESPROC sf_glad_glIsVertexArrayOES = NULL;
PFNGLLIGHTMODELXPROC sf_glad_glLightModelx = NULL;
PFNGLLIGHTMODELXVPROC sf_glad_glLightModelxv = NULL;
PFNGLLIGHTXPROC sf_glad_glLightx = NULL;
PFNGLLIGHTXVPROC sf_glad_glLightxv = NULL;
PFNGLLINEWIDTHXPROC sf_glad_glLineWidthx = NULL;
PFNGLLOADMATRIXXPROC sf_glad_glLoadMatrixx = NULL;
PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC sf_glad_glLoadPaletteFromModelViewMatrixOES = NULL;
PFNGLMAPBUFFEROESPROC sf_glad_glMapBufferOES = NULL;
PFNGLMAPBUFFERRANGEEXTPROC sf_glad_glMapBufferRangeEXT = NULL;
PFNGLMATERIALXPROC sf_glad_glMaterialx = NULL;
PFNGLMATERIALXVPROC sf_glad_glMaterialxv = NULL;
PFNGLMATRIXINDEXPOINTEROESPROC sf_glad_glMatrixIndexPointerOES = NULL;
PFNGLMULTMATRIXXPROC sf_glad_glMultMatrixx = NULL;
PFNGLMULTITEXCOORD4XPROC sf_glad_glMultiTexCoord4x = NULL;
PFNGLNORMAL3XPROC sf_glad_glNormal3x = NULL;
PFNGLORTHOFPROC sf_glad_glOrthof = NULL;
PFNGLORTHOXPROC sf_glad_glOrthox = NULL;
PFNGLPOINTPARAMETERXPROC sf_glad_glPointParameterx = NULL;
PFNGLPOINTPARAMETERXOESPROC sf_glad_glPointParameterxOES = NULL;
PFNGLPOINTPARAMETERXVPROC sf_glad_glPointParameterxv = NULL;
PFNGLPOINTSIZEPOINTEROESPROC sf_glad_glPointSizePointerOES = NULL;
PFNGLPOINTSIZEXPROC sf_glad_glPointSizex = NULL;
PFNGLPOLYGONOFFSETXPROC sf_glad_glPolygonOffsetx = NULL;
PFNGLREADNPIXELSEXTPROC sf_glad_glReadnPixelsEXT = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC sf_glad_glRenderbufferStorageMultisampleAPPLE = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC sf_glad_glRenderbufferStorageMultisampleIMG = NULL;
PFNGLRENDERBUFFERSTORAGEOESPROC sf_glad_glRenderbufferStorageOES = NULL;
PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC sf_glad_glResolveMultisampleFramebufferAPPLE = NULL;
PFNGLROTATEXPROC sf_glad_glRotatex = NULL;
PFNGLSAMPLECOVERAGEXPROC sf_glad_glSampleCoveragex = NULL;
PFNGLSAMPLECOVERAGEXOESPROC sf_glad_glSampleCoveragexOES = NULL;
PFNGLSCALEXPROC sf_glad_glScalex = NULL;
PFNGLSTARTTILINGQCOMPROC sf_glad_glStartTilingQCOM = NULL;
PFNGLTEXENVXPROC sf_glad_glTexEnvx = NULL;
PFNGLTEXENVXVPROC sf_glad_glTexEnvxv = NULL;
PFNGLTEXGENFOESPROC sf_glad_glTexGenfOES = NULL;
PFNGLTEXGENFVOESPROC sf_glad_glTexGenfvOES = NULL;
PFNGLTEXGENIOESPROC sf_glad_glTexGeniOES = NULL;
PFNGLTEXGENIVOESPROC sf_glad_glTexGenivOES = NULL;
PFNGLTEXPARAMETERXPROC sf_glad_glTexParameterx = NULL;
PFNGLTEXPARAMETERXVPROC sf_glad_glTexParameterxv = NULL;
PFNGLTRANSLATEXPROC sf_glad_glTranslatex = NULL;
PFNGLUNMAPBUFFEROESPROC sf_glad_glUnmapBufferOES = NULL;
PFNGLWAITSYNCAPPLEPROC sf_glad_glWaitSyncAPPLE = NULL;
PFNGLWEIGHTPOINTEROESPROC sf_glad_glWeightPointerOES = NULL;


static void sf_glad_gl_load_GL_VERSION_1_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_0) return;
    sf_glad_glAccum = (PFNGLACCUMPROC) load(userptr, "glAccum");
    sf_glad_glAlphaFunc = (PFNGLALPHAFUNCPROC) load(userptr, "glAlphaFunc");
    sf_glad_glBegin = (PFNGLBEGINPROC) load(userptr, "glBegin");
    sf_glad_glBitmap = (PFNGLBITMAPPROC) load(userptr, "glBitmap");
    sf_glad_glBlendFunc = (PFNGLBLENDFUNCPROC) load(userptr, "glBlendFunc");
    sf_glad_glCallList = (PFNGLCALLLISTPROC) load(userptr, "glCallList");
    sf_glad_glCallLists = (PFNGLCALLLISTSPROC) load(userptr, "glCallLists");
    sf_glad_glClear = (PFNGLCLEARPROC) load(userptr, "glClear");
    sf_glad_glClearAccum = (PFNGLCLEARACCUMPROC) load(userptr, "glClearAccum");
    sf_glad_glClearColor = (PFNGLCLEARCOLORPROC) load(userptr, "glClearColor");
    sf_glad_glClearDepth = (PFNGLCLEARDEPTHPROC) load(userptr, "glClearDepth");
    sf_glad_glClearIndex = (PFNGLCLEARINDEXPROC) load(userptr, "glClearIndex");
    sf_glad_glClearStencil = (PFNGLCLEARSTENCILPROC) load(userptr, "glClearStencil");
    sf_glad_glClipPlane = (PFNGLCLIPPLANEPROC) load(userptr, "glClipPlane");
    sf_glad_glColor3b = (PFNGLCOLOR3BPROC) load(userptr, "glColor3b");
    sf_glad_glColor3bv = (PFNGLCOLOR3BVPROC) load(userptr, "glColor3bv");
    sf_glad_glColor3d = (PFNGLCOLOR3DPROC) load(userptr, "glColor3d");
    sf_glad_glColor3dv = (PFNGLCOLOR3DVPROC) load(userptr, "glColor3dv");
    sf_glad_glColor3f = (PFNGLCOLOR3FPROC) load(userptr, "glColor3f");
    sf_glad_glColor3fv = (PFNGLCOLOR3FVPROC) load(userptr, "glColor3fv");
    sf_glad_glColor3i = (PFNGLCOLOR3IPROC) load(userptr, "glColor3i");
    sf_glad_glColor3iv = (PFNGLCOLOR3IVPROC) load(userptr, "glColor3iv");
    sf_glad_glColor3s = (PFNGLCOLOR3SPROC) load(userptr, "glColor3s");
    sf_glad_glColor3sv = (PFNGLCOLOR3SVPROC) load(userptr, "glColor3sv");
    sf_glad_glColor3ub = (PFNGLCOLOR3UBPROC) load(userptr, "glColor3ub");
    sf_glad_glColor3ubv = (PFNGLCOLOR3UBVPROC) load(userptr, "glColor3ubv");
    sf_glad_glColor3ui = (PFNGLCOLOR3UIPROC) load(userptr, "glColor3ui");
    sf_glad_glColor3uiv = (PFNGLCOLOR3UIVPROC) load(userptr, "glColor3uiv");
    sf_glad_glColor3us = (PFNGLCOLOR3USPROC) load(userptr, "glColor3us");
    sf_glad_glColor3usv = (PFNGLCOLOR3USVPROC) load(userptr, "glColor3usv");
    sf_glad_glColor4b = (PFNGLCOLOR4BPROC) load(userptr, "glColor4b");
    sf_glad_glColor4bv = (PFNGLCOLOR4BVPROC) load(userptr, "glColor4bv");
    sf_glad_glColor4d = (PFNGLCOLOR4DPROC) load(userptr, "glColor4d");
    sf_glad_glColor4dv = (PFNGLCOLOR4DVPROC) load(userptr, "glColor4dv");
    sf_glad_glColor4f = (PFNGLCOLOR4FPROC) load(userptr, "glColor4f");
    sf_glad_glColor4fv = (PFNGLCOLOR4FVPROC) load(userptr, "glColor4fv");
    sf_glad_glColor4i = (PFNGLCOLOR4IPROC) load(userptr, "glColor4i");
    sf_glad_glColor4iv = (PFNGLCOLOR4IVPROC) load(userptr, "glColor4iv");
    sf_glad_glColor4s = (PFNGLCOLOR4SPROC) load(userptr, "glColor4s");
    sf_glad_glColor4sv = (PFNGLCOLOR4SVPROC) load(userptr, "glColor4sv");
    sf_glad_glColor4ub = (PFNGLCOLOR4UBPROC) load(userptr, "glColor4ub");
    sf_glad_glColor4ubv = (PFNGLCOLOR4UBVPROC) load(userptr, "glColor4ubv");
    sf_glad_glColor4ui = (PFNGLCOLOR4UIPROC) load(userptr, "glColor4ui");
    sf_glad_glColor4uiv = (PFNGLCOLOR4UIVPROC) load(userptr, "glColor4uiv");
    sf_glad_glColor4us = (PFNGLCOLOR4USPROC) load(userptr, "glColor4us");
    sf_glad_glColor4usv = (PFNGLCOLOR4USVPROC) load(userptr, "glColor4usv");
    sf_glad_glColorMask = (PFNGLCOLORMASKPROC) load(userptr, "glColorMask");
    sf_glad_glColorMaterial = (PFNGLCOLORMATERIALPROC) load(userptr, "glColorMaterial");
    sf_glad_glCopyPixels = (PFNGLCOPYPIXELSPROC) load(userptr, "glCopyPixels");
    sf_glad_glCullFace = (PFNGLCULLFACEPROC) load(userptr, "glCullFace");
    sf_glad_glDeleteLists = (PFNGLDELETELISTSPROC) load(userptr, "glDeleteLists");
    sf_glad_glDepthFunc = (PFNGLDEPTHFUNCPROC) load(userptr, "glDepthFunc");
    sf_glad_glDepthMask = (PFNGLDEPTHMASKPROC) load(userptr, "glDepthMask");
    sf_glad_glDepthRange = (PFNGLDEPTHRANGEPROC) load(userptr, "glDepthRange");
    sf_glad_glDisable = (PFNGLDISABLEPROC) load(userptr, "glDisable");
    sf_glad_glDrawBuffer = (PFNGLDRAWBUFFERPROC) load(userptr, "glDrawBuffer");
    sf_glad_glDrawPixels = (PFNGLDRAWPIXELSPROC) load(userptr, "glDrawPixels");
    sf_glad_glEdgeFlag = (PFNGLEDGEFLAGPROC) load(userptr, "glEdgeFlag");
    sf_glad_glEdgeFlagv = (PFNGLEDGEFLAGVPROC) load(userptr, "glEdgeFlagv");
    sf_glad_glEnable = (PFNGLENABLEPROC) load(userptr, "glEnable");
    sf_glad_glEnd = (PFNGLENDPROC) load(userptr, "glEnd");
    sf_glad_glEndList = (PFNGLENDLISTPROC) load(userptr, "glEndList");
    sf_glad_glEvalCoord1d = (PFNGLEVALCOORD1DPROC) load(userptr, "glEvalCoord1d");
    sf_glad_glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC) load(userptr, "glEvalCoord1dv");
    sf_glad_glEvalCoord1f = (PFNGLEVALCOORD1FPROC) load(userptr, "glEvalCoord1f");
    sf_glad_glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC) load(userptr, "glEvalCoord1fv");
    sf_glad_glEvalCoord2d = (PFNGLEVALCOORD2DPROC) load(userptr, "glEvalCoord2d");
    sf_glad_glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC) load(userptr, "glEvalCoord2dv");
    sf_glad_glEvalCoord2f = (PFNGLEVALCOORD2FPROC) load(userptr, "glEvalCoord2f");
    sf_glad_glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC) load(userptr, "glEvalCoord2fv");
    sf_glad_glEvalMesh1 = (PFNGLEVALMESH1PROC) load(userptr, "glEvalMesh1");
    sf_glad_glEvalMesh2 = (PFNGLEVALMESH2PROC) load(userptr, "glEvalMesh2");
    sf_glad_glEvalPoint1 = (PFNGLEVALPOINT1PROC) load(userptr, "glEvalPoint1");
    sf_glad_glEvalPoint2 = (PFNGLEVALPOINT2PROC) load(userptr, "glEvalPoint2");
    sf_glad_glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC) load(userptr, "glFeedbackBuffer");
    sf_glad_glFinish = (PFNGLFINISHPROC) load(userptr, "glFinish");
    sf_glad_glFlush = (PFNGLFLUSHPROC) load(userptr, "glFlush");
    sf_glad_glFogf = (PFNGLFOGFPROC) load(userptr, "glFogf");
    sf_glad_glFogfv = (PFNGLFOGFVPROC) load(userptr, "glFogfv");
    sf_glad_glFogi = (PFNGLFOGIPROC) load(userptr, "glFogi");
    sf_glad_glFogiv = (PFNGLFOGIVPROC) load(userptr, "glFogiv");
    sf_glad_glFrontFace = (PFNGLFRONTFACEPROC) load(userptr, "glFrontFace");
    sf_glad_glFrustum = (PFNGLFRUSTUMPROC) load(userptr, "glFrustum");
    sf_glad_glGenLists = (PFNGLGENLISTSPROC) load(userptr, "glGenLists");
    sf_glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC) load(userptr, "glGetBooleanv");
    sf_glad_glGetClipPlane = (PFNGLGETCLIPPLANEPROC) load(userptr, "glGetClipPlane");
    sf_glad_glGetDoublev = (PFNGLGETDOUBLEVPROC) load(userptr, "glGetDoublev");
    sf_glad_glGetError = (PFNGLGETERRORPROC) load(userptr, "glGetError");
    sf_glad_glGetFloatv = (PFNGLGETFLOATVPROC) load(userptr, "glGetFloatv");
    sf_glad_glGetIntegerv = (PFNGLGETINTEGERVPROC) load(userptr, "glGetIntegerv");
    sf_glad_glGetLightfv = (PFNGLGETLIGHTFVPROC) load(userptr, "glGetLightfv");
    sf_glad_glGetLightiv = (PFNGLGETLIGHTIVPROC) load(userptr, "glGetLightiv");
    sf_glad_glGetMapdv = (PFNGLGETMAPDVPROC) load(userptr, "glGetMapdv");
    sf_glad_glGetMapfv = (PFNGLGETMAPFVPROC) load(userptr, "glGetMapfv");
    sf_glad_glGetMapiv = (PFNGLGETMAPIVPROC) load(userptr, "glGetMapiv");
    sf_glad_glGetMaterialfv = (PFNGLGETMATERIALFVPROC) load(userptr, "glGetMaterialfv");
    sf_glad_glGetMaterialiv = (PFNGLGETMATERIALIVPROC) load(userptr, "glGetMaterialiv");
    sf_glad_glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC) load(userptr, "glGetPixelMapfv");
    sf_glad_glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC) load(userptr, "glGetPixelMapuiv");
    sf_glad_glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC) load(userptr, "glGetPixelMapusv");
    sf_glad_glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC) load(userptr, "glGetPolygonStipple");
    sf_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    sf_glad_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC) load(userptr, "glGetTexEnvfv");
    sf_glad_glGetTexEnviv = (PFNGLGETTEXENVIVPROC) load(userptr, "glGetTexEnviv");
    sf_glad_glGetTexGendv = (PFNGLGETTEXGENDVPROC) load(userptr, "glGetTexGendv");
    sf_glad_glGetTexGenfv = (PFNGLGETTEXGENFVPROC) load(userptr, "glGetTexGenfv");
    sf_glad_glGetTexGeniv = (PFNGLGETTEXGENIVPROC) load(userptr, "glGetTexGeniv");
    sf_glad_glGetTexImage = (PFNGLGETTEXIMAGEPROC) load(userptr, "glGetTexImage");
    sf_glad_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) load(userptr, "glGetTexLevelParameterfv");
    sf_glad_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) load(userptr, "glGetTexLevelParameteriv");
    sf_glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load(userptr, "glGetTexParameterfv");
    sf_glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load(userptr, "glGetTexParameteriv");
    sf_glad_glHint = (PFNGLHINTPROC) load(userptr, "glHint");
    sf_glad_glIndexMask = (PFNGLINDEXMASKPROC) load(userptr, "glIndexMask");
    sf_glad_glIndexd = (PFNGLINDEXDPROC) load(userptr, "glIndexd");
    sf_glad_glIndexdv = (PFNGLINDEXDVPROC) load(userptr, "glIndexdv");
    sf_glad_glIndexf = (PFNGLINDEXFPROC) load(userptr, "glIndexf");
    sf_glad_glIndexfv = (PFNGLINDEXFVPROC) load(userptr, "glIndexfv");
    sf_glad_glIndexi = (PFNGLINDEXIPROC) load(userptr, "glIndexi");
    sf_glad_glIndexiv = (PFNGLINDEXIVPROC) load(userptr, "glIndexiv");
    sf_glad_glIndexs = (PFNGLINDEXSPROC) load(userptr, "glIndexs");
    sf_glad_glIndexsv = (PFNGLINDEXSVPROC) load(userptr, "glIndexsv");
    sf_glad_glInitNames = (PFNGLINITNAMESPROC) load(userptr, "glInitNames");
    sf_glad_glIsEnabled = (PFNGLISENABLEDPROC) load(userptr, "glIsEnabled");
    sf_glad_glIsList = (PFNGLISLISTPROC) load(userptr, "glIsList");
    sf_glad_glLightModelf = (PFNGLLIGHTMODELFPROC) load(userptr, "glLightModelf");
    sf_glad_glLightModelfv = (PFNGLLIGHTMODELFVPROC) load(userptr, "glLightModelfv");
    sf_glad_glLightModeli = (PFNGLLIGHTMODELIPROC) load(userptr, "glLightModeli");
    sf_glad_glLightModeliv = (PFNGLLIGHTMODELIVPROC) load(userptr, "glLightModeliv");
    sf_glad_glLightf = (PFNGLLIGHTFPROC) load(userptr, "glLightf");
    sf_glad_glLightfv = (PFNGLLIGHTFVPROC) load(userptr, "glLightfv");
    sf_glad_glLighti = (PFNGLLIGHTIPROC) load(userptr, "glLighti");
    sf_glad_glLightiv = (PFNGLLIGHTIVPROC) load(userptr, "glLightiv");
    sf_glad_glLineStipple = (PFNGLLINESTIPPLEPROC) load(userptr, "glLineStipple");
    sf_glad_glLineWidth = (PFNGLLINEWIDTHPROC) load(userptr, "glLineWidth");
    sf_glad_glListBase = (PFNGLLISTBASEPROC) load(userptr, "glListBase");
    sf_glad_glLoadIdentity = (PFNGLLOADIDENTITYPROC) load(userptr, "glLoadIdentity");
    sf_glad_glLoadMatrixd = (PFNGLLOADMATRIXDPROC) load(userptr, "glLoadMatrixd");
    sf_glad_glLoadMatrixf = (PFNGLLOADMATRIXFPROC) load(userptr, "glLoadMatrixf");
    sf_glad_glLoadName = (PFNGLLOADNAMEPROC) load(userptr, "glLoadName");
    sf_glad_glLogicOp = (PFNGLLOGICOPPROC) load(userptr, "glLogicOp");
    sf_glad_glMap1d = (PFNGLMAP1DPROC) load(userptr, "glMap1d");
    sf_glad_glMap1f = (PFNGLMAP1FPROC) load(userptr, "glMap1f");
    sf_glad_glMap2d = (PFNGLMAP2DPROC) load(userptr, "glMap2d");
    sf_glad_glMap2f = (PFNGLMAP2FPROC) load(userptr, "glMap2f");
    sf_glad_glMapGrid1d = (PFNGLMAPGRID1DPROC) load(userptr, "glMapGrid1d");
    sf_glad_glMapGrid1f = (PFNGLMAPGRID1FPROC) load(userptr, "glMapGrid1f");
    sf_glad_glMapGrid2d = (PFNGLMAPGRID2DPROC) load(userptr, "glMapGrid2d");
    sf_glad_glMapGrid2f = (PFNGLMAPGRID2FPROC) load(userptr, "glMapGrid2f");
    sf_glad_glMaterialf = (PFNGLMATERIALFPROC) load(userptr, "glMaterialf");
    sf_glad_glMaterialfv = (PFNGLMATERIALFVPROC) load(userptr, "glMaterialfv");
    sf_glad_glMateriali = (PFNGLMATERIALIPROC) load(userptr, "glMateriali");
    sf_glad_glMaterialiv = (PFNGLMATERIALIVPROC) load(userptr, "glMaterialiv");
    sf_glad_glMatrixMode = (PFNGLMATRIXMODEPROC) load(userptr, "glMatrixMode");
    sf_glad_glMultMatrixd = (PFNGLMULTMATRIXDPROC) load(userptr, "glMultMatrixd");
    sf_glad_glMultMatrixf = (PFNGLMULTMATRIXFPROC) load(userptr, "glMultMatrixf");
    sf_glad_glNewList = (PFNGLNEWLISTPROC) load(userptr, "glNewList");
    sf_glad_glNormal3b = (PFNGLNORMAL3BPROC) load(userptr, "glNormal3b");
    sf_glad_glNormal3bv = (PFNGLNORMAL3BVPROC) load(userptr, "glNormal3bv");
    sf_glad_glNormal3d = (PFNGLNORMAL3DPROC) load(userptr, "glNormal3d");
    sf_glad_glNormal3dv = (PFNGLNORMAL3DVPROC) load(userptr, "glNormal3dv");
    sf_glad_glNormal3f = (PFNGLNORMAL3FPROC) load(userptr, "glNormal3f");
    sf_glad_glNormal3fv = (PFNGLNORMAL3FVPROC) load(userptr, "glNormal3fv");
    sf_glad_glNormal3i = (PFNGLNORMAL3IPROC) load(userptr, "glNormal3i");
    sf_glad_glNormal3iv = (PFNGLNORMAL3IVPROC) load(userptr, "glNormal3iv");
    sf_glad_glNormal3s = (PFNGLNORMAL3SPROC) load(userptr, "glNormal3s");
    sf_glad_glNormal3sv = (PFNGLNORMAL3SVPROC) load(userptr, "glNormal3sv");
    sf_glad_glOrtho = (PFNGLORTHOPROC) load(userptr, "glOrtho");
    sf_glad_glPassThrough = (PFNGLPASSTHROUGHPROC) load(userptr, "glPassThrough");
    sf_glad_glPixelMapfv = (PFNGLPIXELMAPFVPROC) load(userptr, "glPixelMapfv");
    sf_glad_glPixelMapuiv = (PFNGLPIXELMAPUIVPROC) load(userptr, "glPixelMapuiv");
    sf_glad_glPixelMapusv = (PFNGLPIXELMAPUSVPROC) load(userptr, "glPixelMapusv");
    sf_glad_glPixelStoref = (PFNGLPIXELSTOREFPROC) load(userptr, "glPixelStoref");
    sf_glad_glPixelStorei = (PFNGLPIXELSTOREIPROC) load(userptr, "glPixelStorei");
    sf_glad_glPixelTransferf = (PFNGLPIXELTRANSFERFPROC) load(userptr, "glPixelTransferf");
    sf_glad_glPixelTransferi = (PFNGLPIXELTRANSFERIPROC) load(userptr, "glPixelTransferi");
    sf_glad_glPixelZoom = (PFNGLPIXELZOOMPROC) load(userptr, "glPixelZoom");
    sf_glad_glPointSize = (PFNGLPOINTSIZEPROC) load(userptr, "glPointSize");
    sf_glad_glPolygonMode = (PFNGLPOLYGONMODEPROC) load(userptr, "glPolygonMode");
    sf_glad_glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC) load(userptr, "glPolygonStipple");
    sf_glad_glPopAttrib = (PFNGLPOPATTRIBPROC) load(userptr, "glPopAttrib");
    sf_glad_glPopMatrix = (PFNGLPOPMATRIXPROC) load(userptr, "glPopMatrix");
    sf_glad_glPopName = (PFNGLPOPNAMEPROC) load(userptr, "glPopName");
    sf_glad_glPushAttrib = (PFNGLPUSHATTRIBPROC) load(userptr, "glPushAttrib");
    sf_glad_glPushMatrix = (PFNGLPUSHMATRIXPROC) load(userptr, "glPushMatrix");
    sf_glad_glPushName = (PFNGLPUSHNAMEPROC) load(userptr, "glPushName");
    sf_glad_glRasterPos2d = (PFNGLRASTERPOS2DPROC) load(userptr, "glRasterPos2d");
    sf_glad_glRasterPos2dv = (PFNGLRASTERPOS2DVPROC) load(userptr, "glRasterPos2dv");
    sf_glad_glRasterPos2f = (PFNGLRASTERPOS2FPROC) load(userptr, "glRasterPos2f");
    sf_glad_glRasterPos2fv = (PFNGLRASTERPOS2FVPROC) load(userptr, "glRasterPos2fv");
    sf_glad_glRasterPos2i = (PFNGLRASTERPOS2IPROC) load(userptr, "glRasterPos2i");
    sf_glad_glRasterPos2iv = (PFNGLRASTERPOS2IVPROC) load(userptr, "glRasterPos2iv");
    sf_glad_glRasterPos2s = (PFNGLRASTERPOS2SPROC) load(userptr, "glRasterPos2s");
    sf_glad_glRasterPos2sv = (PFNGLRASTERPOS2SVPROC) load(userptr, "glRasterPos2sv");
    sf_glad_glRasterPos3d = (PFNGLRASTERPOS3DPROC) load(userptr, "glRasterPos3d");
    sf_glad_glRasterPos3dv = (PFNGLRASTERPOS3DVPROC) load(userptr, "glRasterPos3dv");
    sf_glad_glRasterPos3f = (PFNGLRASTERPOS3FPROC) load(userptr, "glRasterPos3f");
    sf_glad_glRasterPos3fv = (PFNGLRASTERPOS3FVPROC) load(userptr, "glRasterPos3fv");
    sf_glad_glRasterPos3i = (PFNGLRASTERPOS3IPROC) load(userptr, "glRasterPos3i");
    sf_glad_glRasterPos3iv = (PFNGLRASTERPOS3IVPROC) load(userptr, "glRasterPos3iv");
    sf_glad_glRasterPos3s = (PFNGLRASTERPOS3SPROC) load(userptr, "glRasterPos3s");
    sf_glad_glRasterPos3sv = (PFNGLRASTERPOS3SVPROC) load(userptr, "glRasterPos3sv");
    sf_glad_glRasterPos4d = (PFNGLRASTERPOS4DPROC) load(userptr, "glRasterPos4d");
    sf_glad_glRasterPos4dv = (PFNGLRASTERPOS4DVPROC) load(userptr, "glRasterPos4dv");
    sf_glad_glRasterPos4f = (PFNGLRASTERPOS4FPROC) load(userptr, "glRasterPos4f");
    sf_glad_glRasterPos4fv = (PFNGLRASTERPOS4FVPROC) load(userptr, "glRasterPos4fv");
    sf_glad_glRasterPos4i = (PFNGLRASTERPOS4IPROC) load(userptr, "glRasterPos4i");
    sf_glad_glRasterPos4iv = (PFNGLRASTERPOS4IVPROC) load(userptr, "glRasterPos4iv");
    sf_glad_glRasterPos4s = (PFNGLRASTERPOS4SPROC) load(userptr, "glRasterPos4s");
    sf_glad_glRasterPos4sv = (PFNGLRASTERPOS4SVPROC) load(userptr, "glRasterPos4sv");
    sf_glad_glReadBuffer = (PFNGLREADBUFFERPROC) load(userptr, "glReadBuffer");
    sf_glad_glReadPixels = (PFNGLREADPIXELSPROC) load(userptr, "glReadPixels");
    sf_glad_glRectd = (PFNGLRECTDPROC) load(userptr, "glRectd");
    sf_glad_glRectdv = (PFNGLRECTDVPROC) load(userptr, "glRectdv");
    sf_glad_glRectf = (PFNGLRECTFPROC) load(userptr, "glRectf");
    sf_glad_glRectfv = (PFNGLRECTFVPROC) load(userptr, "glRectfv");
    sf_glad_glRecti = (PFNGLRECTIPROC) load(userptr, "glRecti");
    sf_glad_glRectiv = (PFNGLRECTIVPROC) load(userptr, "glRectiv");
    sf_glad_glRects = (PFNGLRECTSPROC) load(userptr, "glRects");
    sf_glad_glRectsv = (PFNGLRECTSVPROC) load(userptr, "glRectsv");
    sf_glad_glRenderMode = (PFNGLRENDERMODEPROC) load(userptr, "glRenderMode");
    sf_glad_glRotated = (PFNGLROTATEDPROC) load(userptr, "glRotated");
    sf_glad_glRotatef = (PFNGLROTATEFPROC) load(userptr, "glRotatef");
    sf_glad_glScaled = (PFNGLSCALEDPROC) load(userptr, "glScaled");
    sf_glad_glScalef = (PFNGLSCALEFPROC) load(userptr, "glScalef");
    sf_glad_glScissor = (PFNGLSCISSORPROC) load(userptr, "glScissor");
    sf_glad_glSelectBuffer = (PFNGLSELECTBUFFERPROC) load(userptr, "glSelectBuffer");
    sf_glad_glShadeModel = (PFNGLSHADEMODELPROC) load(userptr, "glShadeModel");
    sf_glad_glStencilFunc = (PFNGLSTENCILFUNCPROC) load(userptr, "glStencilFunc");
    sf_glad_glStencilMask = (PFNGLSTENCILMASKPROC) load(userptr, "glStencilMask");
    sf_glad_glStencilOp = (PFNGLSTENCILOPPROC) load(userptr, "glStencilOp");
    sf_glad_glTexCoord1d = (PFNGLTEXCOORD1DPROC) load(userptr, "glTexCoord1d");
    sf_glad_glTexCoord1dv = (PFNGLTEXCOORD1DVPROC) load(userptr, "glTexCoord1dv");
    sf_glad_glTexCoord1f = (PFNGLTEXCOORD1FPROC) load(userptr, "glTexCoord1f");
    sf_glad_glTexCoord1fv = (PFNGLTEXCOORD1FVPROC) load(userptr, "glTexCoord1fv");
    sf_glad_glTexCoord1i = (PFNGLTEXCOORD1IPROC) load(userptr, "glTexCoord1i");
    sf_glad_glTexCoord1iv = (PFNGLTEXCOORD1IVPROC) load(userptr, "glTexCoord1iv");
    sf_glad_glTexCoord1s = (PFNGLTEXCOORD1SPROC) load(userptr, "glTexCoord1s");
    sf_glad_glTexCoord1sv = (PFNGLTEXCOORD1SVPROC) load(userptr, "glTexCoord1sv");
    sf_glad_glTexCoord2d = (PFNGLTEXCOORD2DPROC) load(userptr, "glTexCoord2d");
    sf_glad_glTexCoord2dv = (PFNGLTEXCOORD2DVPROC) load(userptr, "glTexCoord2dv");
    sf_glad_glTexCoord2f = (PFNGLTEXCOORD2FPROC) load(userptr, "glTexCoord2f");
    sf_glad_glTexCoord2fv = (PFNGLTEXCOORD2FVPROC) load(userptr, "glTexCoord2fv");
    sf_glad_glTexCoord2i = (PFNGLTEXCOORD2IPROC) load(userptr, "glTexCoord2i");
    sf_glad_glTexCoord2iv = (PFNGLTEXCOORD2IVPROC) load(userptr, "glTexCoord2iv");
    sf_glad_glTexCoord2s = (PFNGLTEXCOORD2SPROC) load(userptr, "glTexCoord2s");
    sf_glad_glTexCoord2sv = (PFNGLTEXCOORD2SVPROC) load(userptr, "glTexCoord2sv");
    sf_glad_glTexCoord3d = (PFNGLTEXCOORD3DPROC) load(userptr, "glTexCoord3d");
    sf_glad_glTexCoord3dv = (PFNGLTEXCOORD3DVPROC) load(userptr, "glTexCoord3dv");
    sf_glad_glTexCoord3f = (PFNGLTEXCOORD3FPROC) load(userptr, "glTexCoord3f");
    sf_glad_glTexCoord3fv = (PFNGLTEXCOORD3FVPROC) load(userptr, "glTexCoord3fv");
    sf_glad_glTexCoord3i = (PFNGLTEXCOORD3IPROC) load(userptr, "glTexCoord3i");
    sf_glad_glTexCoord3iv = (PFNGLTEXCOORD3IVPROC) load(userptr, "glTexCoord3iv");
    sf_glad_glTexCoord3s = (PFNGLTEXCOORD3SPROC) load(userptr, "glTexCoord3s");
    sf_glad_glTexCoord3sv = (PFNGLTEXCOORD3SVPROC) load(userptr, "glTexCoord3sv");
    sf_glad_glTexCoord4d = (PFNGLTEXCOORD4DPROC) load(userptr, "glTexCoord4d");
    sf_glad_glTexCoord4dv = (PFNGLTEXCOORD4DVPROC) load(userptr, "glTexCoord4dv");
    sf_glad_glTexCoord4f = (PFNGLTEXCOORD4FPROC) load(userptr, "glTexCoord4f");
    sf_glad_glTexCoord4fv = (PFNGLTEXCOORD4FVPROC) load(userptr, "glTexCoord4fv");
    sf_glad_glTexCoord4i = (PFNGLTEXCOORD4IPROC) load(userptr, "glTexCoord4i");
    sf_glad_glTexCoord4iv = (PFNGLTEXCOORD4IVPROC) load(userptr, "glTexCoord4iv");
    sf_glad_glTexCoord4s = (PFNGLTEXCOORD4SPROC) load(userptr, "glTexCoord4s");
    sf_glad_glTexCoord4sv = (PFNGLTEXCOORD4SVPROC) load(userptr, "glTexCoord4sv");
    sf_glad_glTexEnvf = (PFNGLTEXENVFPROC) load(userptr, "glTexEnvf");
    sf_glad_glTexEnvfv = (PFNGLTEXENVFVPROC) load(userptr, "glTexEnvfv");
    sf_glad_glTexEnvi = (PFNGLTEXENVIPROC) load(userptr, "glTexEnvi");
    sf_glad_glTexEnviv = (PFNGLTEXENVIVPROC) load(userptr, "glTexEnviv");
    sf_glad_glTexGend = (PFNGLTEXGENDPROC) load(userptr, "glTexGend");
    sf_glad_glTexGendv = (PFNGLTEXGENDVPROC) load(userptr, "glTexGendv");
    sf_glad_glTexGenf = (PFNGLTEXGENFPROC) load(userptr, "glTexGenf");
    sf_glad_glTexGenfv = (PFNGLTEXGENFVPROC) load(userptr, "glTexGenfv");
    sf_glad_glTexGeni = (PFNGLTEXGENIPROC) load(userptr, "glTexGeni");
    sf_glad_glTexGeniv = (PFNGLTEXGENIVPROC) load(userptr, "glTexGeniv");
    sf_glad_glTexImage1D = (PFNGLTEXIMAGE1DPROC) load(userptr, "glTexImage1D");
    sf_glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC) load(userptr, "glTexImage2D");
    sf_glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC) load(userptr, "glTexParameterf");
    sf_glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) load(userptr, "glTexParameterfv");
    sf_glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC) load(userptr, "glTexParameteri");
    sf_glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) load(userptr, "glTexParameteriv");
    sf_glad_glTranslated = (PFNGLTRANSLATEDPROC) load(userptr, "glTranslated");
    sf_glad_glTranslatef = (PFNGLTRANSLATEFPROC) load(userptr, "glTranslatef");
    sf_glad_glVertex2d = (PFNGLVERTEX2DPROC) load(userptr, "glVertex2d");
    sf_glad_glVertex2dv = (PFNGLVERTEX2DVPROC) load(userptr, "glVertex2dv");
    sf_glad_glVertex2f = (PFNGLVERTEX2FPROC) load(userptr, "glVertex2f");
    sf_glad_glVertex2fv = (PFNGLVERTEX2FVPROC) load(userptr, "glVertex2fv");
    sf_glad_glVertex2i = (PFNGLVERTEX2IPROC) load(userptr, "glVertex2i");
    sf_glad_glVertex2iv = (PFNGLVERTEX2IVPROC) load(userptr, "glVertex2iv");
    sf_glad_glVertex2s = (PFNGLVERTEX2SPROC) load(userptr, "glVertex2s");
    sf_glad_glVertex2sv = (PFNGLVERTEX2SVPROC) load(userptr, "glVertex2sv");
    sf_glad_glVertex3d = (PFNGLVERTEX3DPROC) load(userptr, "glVertex3d");
    sf_glad_glVertex3dv = (PFNGLVERTEX3DVPROC) load(userptr, "glVertex3dv");
    sf_glad_glVertex3f = (PFNGLVERTEX3FPROC) load(userptr, "glVertex3f");
    sf_glad_glVertex3fv = (PFNGLVERTEX3FVPROC) load(userptr, "glVertex3fv");
    sf_glad_glVertex3i = (PFNGLVERTEX3IPROC) load(userptr, "glVertex3i");
    sf_glad_glVertex3iv = (PFNGLVERTEX3IVPROC) load(userptr, "glVertex3iv");
    sf_glad_glVertex3s = (PFNGLVERTEX3SPROC) load(userptr, "glVertex3s");
    sf_glad_glVertex3sv = (PFNGLVERTEX3SVPROC) load(userptr, "glVertex3sv");
    sf_glad_glVertex4d = (PFNGLVERTEX4DPROC) load(userptr, "glVertex4d");
    sf_glad_glVertex4dv = (PFNGLVERTEX4DVPROC) load(userptr, "glVertex4dv");
    sf_glad_glVertex4f = (PFNGLVERTEX4FPROC) load(userptr, "glVertex4f");
    sf_glad_glVertex4fv = (PFNGLVERTEX4FVPROC) load(userptr, "glVertex4fv");
    sf_glad_glVertex4i = (PFNGLVERTEX4IPROC) load(userptr, "glVertex4i");
    sf_glad_glVertex4iv = (PFNGLVERTEX4IVPROC) load(userptr, "glVertex4iv");
    sf_glad_glVertex4s = (PFNGLVERTEX4SPROC) load(userptr, "glVertex4s");
    sf_glad_glVertex4sv = (PFNGLVERTEX4SVPROC) load(userptr, "glVertex4sv");
    sf_glad_glViewport = (PFNGLVIEWPORTPROC) load(userptr, "glViewport");
}
static void sf_glad_gl_load_GL_VERSION_1_1( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_1) return;
    sf_glad_glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC) load(userptr, "glAreTexturesResident");
    sf_glad_glArrayElement = (PFNGLARRAYELEMENTPROC) load(userptr, "glArrayElement");
    sf_glad_glBindTexture = (PFNGLBINDTEXTUREPROC) load(userptr, "glBindTexture");
    sf_glad_glColorPointer = (PFNGLCOLORPOINTERPROC) load(userptr, "glColorPointer");
    sf_glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) load(userptr, "glCopyTexImage1D");
    sf_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load(userptr, "glCopyTexImage2D");
    sf_glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) load(userptr, "glCopyTexSubImage1D");
    sf_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load(userptr, "glCopyTexSubImage2D");
    sf_glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC) load(userptr, "glDeleteTextures");
    sf_glad_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC) load(userptr, "glDisableClientState");
    sf_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC) load(userptr, "glDrawArrays");
    sf_glad_glDrawElements = (PFNGLDRAWELEMENTSPROC) load(userptr, "glDrawElements");
    sf_glad_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC) load(userptr, "glEdgeFlagPointer");
    sf_glad_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC) load(userptr, "glEnableClientState");
    sf_glad_glGenTextures = (PFNGLGENTEXTURESPROC) load(userptr, "glGenTextures");
    sf_glad_glGetPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    sf_glad_glIndexPointer = (PFNGLINDEXPOINTERPROC) load(userptr, "glIndexPointer");
    sf_glad_glIndexub = (PFNGLINDEXUBPROC) load(userptr, "glIndexub");
    sf_glad_glIndexubv = (PFNGLINDEXUBVPROC) load(userptr, "glIndexubv");
    sf_glad_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC) load(userptr, "glInterleavedArrays");
    sf_glad_glIsTexture = (PFNGLISTEXTUREPROC) load(userptr, "glIsTexture");
    sf_glad_glNormalPointer = (PFNGLNORMALPOINTERPROC) load(userptr, "glNormalPointer");
    sf_glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) load(userptr, "glPolygonOffset");
    sf_glad_glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC) load(userptr, "glPopClientAttrib");
    sf_glad_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC) load(userptr, "glPrioritizeTextures");
    sf_glad_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC) load(userptr, "glPushClientAttrib");
    sf_glad_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC) load(userptr, "glTexCoordPointer");
    sf_glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) load(userptr, "glTexSubImage1D");
    sf_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load(userptr, "glTexSubImage2D");
    sf_glad_glVertexPointer = (PFNGLVERTEXPOINTERPROC) load(userptr, "glVertexPointer");
}
static void sf_glad_gl_load_GL_VERSION_1_2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_2) return;
    sf_glad_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) load(userptr, "glCopyTexSubImage3D");
    sf_glad_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) load(userptr, "glDrawRangeElements");
    sf_glad_glTexImage3D = (PFNGLTEXIMAGE3DPROC) load(userptr, "glTexImage3D");
    sf_glad_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) load(userptr, "glTexSubImage3D");
}
static void sf_glad_gl_load_GL_VERSION_1_3( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_3) return;
    sf_glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC) load(userptr, "glActiveTexture");
    sf_glad_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC) load(userptr, "glClientActiveTexture");
    sf_glad_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC) load(userptr, "glCompressedTexImage1D");
    sf_glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) load(userptr, "glCompressedTexImage2D");
    sf_glad_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) load(userptr, "glCompressedTexImage3D");
    sf_glad_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) load(userptr, "glCompressedTexSubImage1D");
    sf_glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) load(userptr, "glCompressedTexSubImage2D");
    sf_glad_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) load(userptr, "glCompressedTexSubImage3D");
    sf_glad_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC) load(userptr, "glGetCompressedTexImage");
    sf_glad_glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC) load(userptr, "glLoadTransposeMatrixd");
    sf_glad_glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC) load(userptr, "glLoadTransposeMatrixf");
    sf_glad_glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC) load(userptr, "glMultTransposeMatrixd");
    sf_glad_glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC) load(userptr, "glMultTransposeMatrixf");
    sf_glad_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC) load(userptr, "glMultiTexCoord1d");
    sf_glad_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC) load(userptr, "glMultiTexCoord1dv");
    sf_glad_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC) load(userptr, "glMultiTexCoord1f");
    sf_glad_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC) load(userptr, "glMultiTexCoord1fv");
    sf_glad_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC) load(userptr, "glMultiTexCoord1i");
    sf_glad_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC) load(userptr, "glMultiTexCoord1iv");
    sf_glad_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC) load(userptr, "glMultiTexCoord1s");
    sf_glad_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC) load(userptr, "glMultiTexCoord1sv");
    sf_glad_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC) load(userptr, "glMultiTexCoord2d");
    sf_glad_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC) load(userptr, "glMultiTexCoord2dv");
    sf_glad_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC) load(userptr, "glMultiTexCoord2f");
    sf_glad_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC) load(userptr, "glMultiTexCoord2fv");
    sf_glad_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC) load(userptr, "glMultiTexCoord2i");
    sf_glad_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC) load(userptr, "glMultiTexCoord2iv");
    sf_glad_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC) load(userptr, "glMultiTexCoord2s");
    sf_glad_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC) load(userptr, "glMultiTexCoord2sv");
    sf_glad_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC) load(userptr, "glMultiTexCoord3d");
    sf_glad_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC) load(userptr, "glMultiTexCoord3dv");
    sf_glad_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC) load(userptr, "glMultiTexCoord3f");
    sf_glad_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC) load(userptr, "glMultiTexCoord3fv");
    sf_glad_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC) load(userptr, "glMultiTexCoord3i");
    sf_glad_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC) load(userptr, "glMultiTexCoord3iv");
    sf_glad_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC) load(userptr, "glMultiTexCoord3s");
    sf_glad_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC) load(userptr, "glMultiTexCoord3sv");
    sf_glad_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC) load(userptr, "glMultiTexCoord4d");
    sf_glad_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC) load(userptr, "glMultiTexCoord4dv");
    sf_glad_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC) load(userptr, "glMultiTexCoord4f");
    sf_glad_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC) load(userptr, "glMultiTexCoord4fv");
    sf_glad_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC) load(userptr, "glMultiTexCoord4i");
    sf_glad_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC) load(userptr, "glMultiTexCoord4iv");
    sf_glad_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC) load(userptr, "glMultiTexCoord4s");
    sf_glad_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC) load(userptr, "glMultiTexCoord4sv");
    sf_glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) load(userptr, "glSampleCoverage");
}
static void sf_glad_gl_load_GL_VERSION_1_4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_4) return;
    sf_glad_glBlendColor = (PFNGLBLENDCOLORPROC) load(userptr, "glBlendColor");
    sf_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
    sf_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) load(userptr, "glBlendFuncSeparate");
    sf_glad_glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC) load(userptr, "glFogCoordPointer");
    sf_glad_glFogCoordd = (PFNGLFOGCOORDDPROC) load(userptr, "glFogCoordd");
    sf_glad_glFogCoorddv = (PFNGLFOGCOORDDVPROC) load(userptr, "glFogCoorddv");
    sf_glad_glFogCoordf = (PFNGLFOGCOORDFPROC) load(userptr, "glFogCoordf");
    sf_glad_glFogCoordfv = (PFNGLFOGCOORDFVPROC) load(userptr, "glFogCoordfv");
    sf_glad_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC) load(userptr, "glMultiDrawArrays");
    sf_glad_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC) load(userptr, "glMultiDrawElements");
    sf_glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC) load(userptr, "glPointParameterf");
    sf_glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC) load(userptr, "glPointParameterfv");
    sf_glad_glPointParameteri = (PFNGLPOINTPARAMETERIPROC) load(userptr, "glPointParameteri");
    sf_glad_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC) load(userptr, "glPointParameteriv");
    sf_glad_glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC) load(userptr, "glSecondaryColor3b");
    sf_glad_glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC) load(userptr, "glSecondaryColor3bv");
    sf_glad_glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC) load(userptr, "glSecondaryColor3d");
    sf_glad_glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC) load(userptr, "glSecondaryColor3dv");
    sf_glad_glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC) load(userptr, "glSecondaryColor3f");
    sf_glad_glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC) load(userptr, "glSecondaryColor3fv");
    sf_glad_glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC) load(userptr, "glSecondaryColor3i");
    sf_glad_glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC) load(userptr, "glSecondaryColor3iv");
    sf_glad_glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC) load(userptr, "glSecondaryColor3s");
    sf_glad_glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC) load(userptr, "glSecondaryColor3sv");
    sf_glad_glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC) load(userptr, "glSecondaryColor3ub");
    sf_glad_glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC) load(userptr, "glSecondaryColor3ubv");
    sf_glad_glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC) load(userptr, "glSecondaryColor3ui");
    sf_glad_glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC) load(userptr, "glSecondaryColor3uiv");
    sf_glad_glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC) load(userptr, "glSecondaryColor3us");
    sf_glad_glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC) load(userptr, "glSecondaryColor3usv");
    sf_glad_glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC) load(userptr, "glSecondaryColorPointer");
    sf_glad_glWindowPos2d = (PFNGLWINDOWPOS2DPROC) load(userptr, "glWindowPos2d");
    sf_glad_glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC) load(userptr, "glWindowPos2dv");
    sf_glad_glWindowPos2f = (PFNGLWINDOWPOS2FPROC) load(userptr, "glWindowPos2f");
    sf_glad_glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC) load(userptr, "glWindowPos2fv");
    sf_glad_glWindowPos2i = (PFNGLWINDOWPOS2IPROC) load(userptr, "glWindowPos2i");
    sf_glad_glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC) load(userptr, "glWindowPos2iv");
    sf_glad_glWindowPos2s = (PFNGLWINDOWPOS2SPROC) load(userptr, "glWindowPos2s");
    sf_glad_glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC) load(userptr, "glWindowPos2sv");
    sf_glad_glWindowPos3d = (PFNGLWINDOWPOS3DPROC) load(userptr, "glWindowPos3d");
    sf_glad_glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC) load(userptr, "glWindowPos3dv");
    sf_glad_glWindowPos3f = (PFNGLWINDOWPOS3FPROC) load(userptr, "glWindowPos3f");
    sf_glad_glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC) load(userptr, "glWindowPos3fv");
    sf_glad_glWindowPos3i = (PFNGLWINDOWPOS3IPROC) load(userptr, "glWindowPos3i");
    sf_glad_glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC) load(userptr, "glWindowPos3iv");
    sf_glad_glWindowPos3s = (PFNGLWINDOWPOS3SPROC) load(userptr, "glWindowPos3s");
    sf_glad_glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC) load(userptr, "glWindowPos3sv");
}
static void sf_glad_gl_load_GL_VERSION_1_5( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_1_5) return;
    sf_glad_glBeginQuery = (PFNGLBEGINQUERYPROC) load(userptr, "glBeginQuery");
    sf_glad_glBindBuffer = (PFNGLBINDBUFFERPROC) load(userptr, "glBindBuffer");
    sf_glad_glBufferData = (PFNGLBUFFERDATAPROC) load(userptr, "glBufferData");
    sf_glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC) load(userptr, "glBufferSubData");
    sf_glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) load(userptr, "glDeleteBuffers");
    sf_glad_glDeleteQueries = (PFNGLDELETEQUERIESPROC) load(userptr, "glDeleteQueries");
    sf_glad_glEndQuery = (PFNGLENDQUERYPROC) load(userptr, "glEndQuery");
    sf_glad_glGenBuffers = (PFNGLGENBUFFERSPROC) load(userptr, "glGenBuffers");
    sf_glad_glGenQueries = (PFNGLGENQUERIESPROC) load(userptr, "glGenQueries");
    sf_glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load(userptr, "glGetBufferParameteriv");
    sf_glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) load(userptr, "glGetBufferPointerv");
    sf_glad_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC) load(userptr, "glGetBufferSubData");
    sf_glad_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC) load(userptr, "glGetQueryObjectiv");
    sf_glad_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) load(userptr, "glGetQueryObjectuiv");
    sf_glad_glGetQueryiv = (PFNGLGETQUERYIVPROC) load(userptr, "glGetQueryiv");
    sf_glad_glIsBuffer = (PFNGLISBUFFERPROC) load(userptr, "glIsBuffer");
    sf_glad_glIsQuery = (PFNGLISQUERYPROC) load(userptr, "glIsQuery");
    sf_glad_glMapBuffer = (PFNGLMAPBUFFERPROC) load(userptr, "glMapBuffer");
    sf_glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC) load(userptr, "glUnmapBuffer");
}
static void sf_glad_gl_load_GL_VERSION_2_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_2_0) return;
    sf_glad_glAttachShader = (PFNGLATTACHSHADERPROC) load(userptr, "glAttachShader");
    sf_glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) load(userptr, "glBindAttribLocation");
    sf_glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) load(userptr, "glBlendEquationSeparate");
    sf_glad_glCompileShader = (PFNGLCOMPILESHADERPROC) load(userptr, "glCompileShader");
    sf_glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC) load(userptr, "glCreateProgram");
    sf_glad_glCreateShader = (PFNGLCREATESHADERPROC) load(userptr, "glCreateShader");
    sf_glad_glDeleteProgram = (PFNGLDELETEPROGRAMPROC) load(userptr, "glDeleteProgram");
    sf_glad_glDeleteShader = (PFNGLDELETESHADERPROC) load(userptr, "glDeleteShader");
    sf_glad_glDetachShader = (PFNGLDETACHSHADERPROC) load(userptr, "glDetachShader");
    sf_glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load(userptr, "glDisableVertexAttribArray");
    sf_glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC) load(userptr, "glDrawBuffers");
    sf_glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load(userptr, "glEnableVertexAttribArray");
    sf_glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) load(userptr, "glGetActiveAttrib");
    sf_glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) load(userptr, "glGetActiveUniform");
    sf_glad_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) load(userptr, "glGetAttachedShaders");
    sf_glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) load(userptr, "glGetAttribLocation");
    sf_glad_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) load(userptr, "glGetProgramInfoLog");
    sf_glad_glGetProgramiv = (PFNGLGETPROGRAMIVPROC) load(userptr, "glGetProgramiv");
    sf_glad_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) load(userptr, "glGetShaderInfoLog");
    sf_glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) load(userptr, "glGetShaderSource");
    sf_glad_glGetShaderiv = (PFNGLGETSHADERIVPROC) load(userptr, "glGetShaderiv");
    sf_glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) load(userptr, "glGetUniformLocation");
    sf_glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC) load(userptr, "glGetUniformfv");
    sf_glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC) load(userptr, "glGetUniformiv");
    sf_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load(userptr, "glGetVertexAttribPointerv");
    sf_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) load(userptr, "glGetVertexAttribdv");
    sf_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load(userptr, "glGetVertexAttribfv");
    sf_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load(userptr, "glGetVertexAttribiv");
    sf_glad_glIsProgram = (PFNGLISPROGRAMPROC) load(userptr, "glIsProgram");
    sf_glad_glIsShader = (PFNGLISSHADERPROC) load(userptr, "glIsShader");
    sf_glad_glLinkProgram = (PFNGLLINKPROGRAMPROC) load(userptr, "glLinkProgram");
    sf_glad_glShaderSource = (PFNGLSHADERSOURCEPROC) load(userptr, "glShaderSource");
    sf_glad_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) load(userptr, "glStencilFuncSeparate");
    sf_glad_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) load(userptr, "glStencilMaskSeparate");
    sf_glad_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) load(userptr, "glStencilOpSeparate");
    sf_glad_glUniform1f = (PFNGLUNIFORM1FPROC) load(userptr, "glUniform1f");
    sf_glad_glUniform1fv = (PFNGLUNIFORM1FVPROC) load(userptr, "glUniform1fv");
    sf_glad_glUniform1i = (PFNGLUNIFORM1IPROC) load(userptr, "glUniform1i");
    sf_glad_glUniform1iv = (PFNGLUNIFORM1IVPROC) load(userptr, "glUniform1iv");
    sf_glad_glUniform2f = (PFNGLUNIFORM2FPROC) load(userptr, "glUniform2f");
    sf_glad_glUniform2fv = (PFNGLUNIFORM2FVPROC) load(userptr, "glUniform2fv");
    sf_glad_glUniform2i = (PFNGLUNIFORM2IPROC) load(userptr, "glUniform2i");
    sf_glad_glUniform2iv = (PFNGLUNIFORM2IVPROC) load(userptr, "glUniform2iv");
    sf_glad_glUniform3f = (PFNGLUNIFORM3FPROC) load(userptr, "glUniform3f");
    sf_glad_glUniform3fv = (PFNGLUNIFORM3FVPROC) load(userptr, "glUniform3fv");
    sf_glad_glUniform3i = (PFNGLUNIFORM3IPROC) load(userptr, "glUniform3i");
    sf_glad_glUniform3iv = (PFNGLUNIFORM3IVPROC) load(userptr, "glUniform3iv");
    sf_glad_glUniform4f = (PFNGLUNIFORM4FPROC) load(userptr, "glUniform4f");
    sf_glad_glUniform4fv = (PFNGLUNIFORM4FVPROC) load(userptr, "glUniform4fv");
    sf_glad_glUniform4i = (PFNGLUNIFORM4IPROC) load(userptr, "glUniform4i");
    sf_glad_glUniform4iv = (PFNGLUNIFORM4IVPROC) load(userptr, "glUniform4iv");
    sf_glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) load(userptr, "glUniformMatrix2fv");
    sf_glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) load(userptr, "glUniformMatrix3fv");
    sf_glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) load(userptr, "glUniformMatrix4fv");
    sf_glad_glUseProgram = (PFNGLUSEPROGRAMPROC) load(userptr, "glUseProgram");
    sf_glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) load(userptr, "glValidateProgram");
    sf_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) load(userptr, "glVertexAttrib1d");
    sf_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) load(userptr, "glVertexAttrib1dv");
    sf_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load(userptr, "glVertexAttrib1f");
    sf_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load(userptr, "glVertexAttrib1fv");
    sf_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) load(userptr, "glVertexAttrib1s");
    sf_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) load(userptr, "glVertexAttrib1sv");
    sf_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) load(userptr, "glVertexAttrib2d");
    sf_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) load(userptr, "glVertexAttrib2dv");
    sf_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load(userptr, "glVertexAttrib2f");
    sf_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load(userptr, "glVertexAttrib2fv");
    sf_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) load(userptr, "glVertexAttrib2s");
    sf_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) load(userptr, "glVertexAttrib2sv");
    sf_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) load(userptr, "glVertexAttrib3d");
    sf_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) load(userptr, "glVertexAttrib3dv");
    sf_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load(userptr, "glVertexAttrib3f");
    sf_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load(userptr, "glVertexAttrib3fv");
    sf_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) load(userptr, "glVertexAttrib3s");
    sf_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) load(userptr, "glVertexAttrib3sv");
    sf_glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) load(userptr, "glVertexAttrib4Nbv");
    sf_glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) load(userptr, "glVertexAttrib4Niv");
    sf_glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) load(userptr, "glVertexAttrib4Nsv");
    sf_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) load(userptr, "glVertexAttrib4Nub");
    sf_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) load(userptr, "glVertexAttrib4Nubv");
    sf_glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) load(userptr, "glVertexAttrib4Nuiv");
    sf_glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) load(userptr, "glVertexAttrib4Nusv");
    sf_glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) load(userptr, "glVertexAttrib4bv");
    sf_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) load(userptr, "glVertexAttrib4d");
    sf_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) load(userptr, "glVertexAttrib4dv");
    sf_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load(userptr, "glVertexAttrib4f");
    sf_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load(userptr, "glVertexAttrib4fv");
    sf_glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) load(userptr, "glVertexAttrib4iv");
    sf_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) load(userptr, "glVertexAttrib4s");
    sf_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) load(userptr, "glVertexAttrib4sv");
    sf_glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) load(userptr, "glVertexAttrib4ubv");
    sf_glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) load(userptr, "glVertexAttrib4uiv");
    sf_glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) load(userptr, "glVertexAttrib4usv");
    sf_glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load(userptr, "glVertexAttribPointer");
}
static void sf_glad_gl_load_GL_VERSION_2_1( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_2_1) return;
    sf_glad_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) load(userptr, "glUniformMatrix2x3fv");
    sf_glad_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) load(userptr, "glUniformMatrix2x4fv");
    sf_glad_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) load(userptr, "glUniformMatrix3x2fv");
    sf_glad_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) load(userptr, "glUniformMatrix3x4fv");
    sf_glad_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) load(userptr, "glUniformMatrix4x2fv");
    sf_glad_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) load(userptr, "glUniformMatrix4x3fv");
}
static void sf_glad_gl_load_GL_VERSION_3_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_3_0) return;
    sf_glad_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC) load(userptr, "glBeginConditionalRender");
    sf_glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) load(userptr, "glBeginTransformFeedback");
    sf_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    sf_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    sf_glad_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC) load(userptr, "glBindFragDataLocation");
    sf_glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    sf_glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    sf_glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load(userptr, "glBindVertexArray");
    sf_glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    sf_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    sf_glad_glClampColor = (PFNGLCLAMPCOLORPROC) load(userptr, "glClampColor");
    sf_glad_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC) load(userptr, "glClearBufferfi");
    sf_glad_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC) load(userptr, "glClearBufferfv");
    sf_glad_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC) load(userptr, "glClearBufferiv");
    sf_glad_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) load(userptr, "glClearBufferuiv");
    sf_glad_glColorMaski = (PFNGLCOLORMASKIPROC) load(userptr, "glColorMaski");
    sf_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    sf_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    sf_glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load(userptr, "glDeleteVertexArrays");
    sf_glad_glDisablei = (PFNGLDISABLEIPROC) load(userptr, "glDisablei");
    sf_glad_glEnablei = (PFNGLENABLEIPROC) load(userptr, "glEnablei");
    sf_glad_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC) load(userptr, "glEndConditionalRender");
    sf_glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) load(userptr, "glEndTransformFeedback");
    sf_glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load(userptr, "glFlushMappedBufferRange");
    sf_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    sf_glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load(userptr, "glFramebufferTexture1D");
    sf_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    sf_glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load(userptr, "glFramebufferTexture3D");
    sf_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    sf_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    sf_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    sf_glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load(userptr, "glGenVertexArrays");
    sf_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    sf_glad_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) load(userptr, "glGetBooleani_v");
    sf_glad_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) load(userptr, "glGetFragDataLocation");
    sf_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    sf_glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    sf_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    sf_glad_glGetStringi = (PFNGLGETSTRINGIPROC) load(userptr, "glGetStringi");
    sf_glad_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) load(userptr, "glGetTexParameterIiv");
    sf_glad_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) load(userptr, "glGetTexParameterIuiv");
    sf_glad_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) load(userptr, "glGetTransformFeedbackVarying");
    sf_glad_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) load(userptr, "glGetUniformuiv");
    sf_glad_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) load(userptr, "glGetVertexAttribIiv");
    sf_glad_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) load(userptr, "glGetVertexAttribIuiv");
    sf_glad_glIsEnabledi = (PFNGLISENABLEDIPROC) load(userptr, "glIsEnabledi");
    sf_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    sf_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    sf_glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) load(userptr, "glIsVertexArray");
    sf_glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load(userptr, "glMapBufferRange");
    sf_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    sf_glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
    sf_glad_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC) load(userptr, "glTexParameterIiv");
    sf_glad_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) load(userptr, "glTexParameterIuiv");
    sf_glad_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) load(userptr, "glTransformFeedbackVaryings");
    sf_glad_glUniform1ui = (PFNGLUNIFORM1UIPROC) load(userptr, "glUniform1ui");
    sf_glad_glUniform1uiv = (PFNGLUNIFORM1UIVPROC) load(userptr, "glUniform1uiv");
    sf_glad_glUniform2ui = (PFNGLUNIFORM2UIPROC) load(userptr, "glUniform2ui");
    sf_glad_glUniform2uiv = (PFNGLUNIFORM2UIVPROC) load(userptr, "glUniform2uiv");
    sf_glad_glUniform3ui = (PFNGLUNIFORM3UIPROC) load(userptr, "glUniform3ui");
    sf_glad_glUniform3uiv = (PFNGLUNIFORM3UIVPROC) load(userptr, "glUniform3uiv");
    sf_glad_glUniform4ui = (PFNGLUNIFORM4UIPROC) load(userptr, "glUniform4ui");
    sf_glad_glUniform4uiv = (PFNGLUNIFORM4UIVPROC) load(userptr, "glUniform4uiv");
    sf_glad_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC) load(userptr, "glVertexAttribI1i");
    sf_glad_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC) load(userptr, "glVertexAttribI1iv");
    sf_glad_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC) load(userptr, "glVertexAttribI1ui");
    sf_glad_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC) load(userptr, "glVertexAttribI1uiv");
    sf_glad_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC) load(userptr, "glVertexAttribI2i");
    sf_glad_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC) load(userptr, "glVertexAttribI2iv");
    sf_glad_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC) load(userptr, "glVertexAttribI2ui");
    sf_glad_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC) load(userptr, "glVertexAttribI2uiv");
    sf_glad_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC) load(userptr, "glVertexAttribI3i");
    sf_glad_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC) load(userptr, "glVertexAttribI3iv");
    sf_glad_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC) load(userptr, "glVertexAttribI3ui");
    sf_glad_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC) load(userptr, "glVertexAttribI3uiv");
    sf_glad_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC) load(userptr, "glVertexAttribI4bv");
    sf_glad_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) load(userptr, "glVertexAttribI4i");
    sf_glad_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) load(userptr, "glVertexAttribI4iv");
    sf_glad_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC) load(userptr, "glVertexAttribI4sv");
    sf_glad_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC) load(userptr, "glVertexAttribI4ubv");
    sf_glad_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) load(userptr, "glVertexAttribI4ui");
    sf_glad_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) load(userptr, "glVertexAttribI4uiv");
    sf_glad_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC) load(userptr, "glVertexAttribI4usv");
    sf_glad_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) load(userptr, "glVertexAttribIPointer");
}
static void sf_glad_gl_load_GL_VERSION_3_1( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_3_1) return;
    sf_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    sf_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    sf_glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load(userptr, "glCopyBufferSubData");
    sf_glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) load(userptr, "glDrawArraysInstanced");
    sf_glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) load(userptr, "glDrawElementsInstanced");
    sf_glad_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load(userptr, "glGetActiveUniformBlockName");
    sf_glad_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load(userptr, "glGetActiveUniformBlockiv");
    sf_glad_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) load(userptr, "glGetActiveUniformName");
    sf_glad_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load(userptr, "glGetActiveUniformsiv");
    sf_glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    sf_glad_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load(userptr, "glGetUniformBlockIndex");
    sf_glad_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load(userptr, "glGetUniformIndices");
    sf_glad_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC) load(userptr, "glPrimitiveRestartIndex");
    sf_glad_glTexBuffer = (PFNGLTEXBUFFERPROC) load(userptr, "glTexBuffer");
    sf_glad_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load(userptr, "glUniformBlockBinding");
}
static void sf_glad_gl_load_GL_VERSION_3_2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_3_2) return;
    sf_glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load(userptr, "glClientWaitSync");
    sf_glad_glDeleteSync = (PFNGLDELETESYNCPROC) load(userptr, "glDeleteSync");
    sf_glad_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glDrawElementsBaseVertex");
    sf_glad_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load(userptr, "glDrawElementsInstancedBaseVertex");
    sf_glad_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load(userptr, "glDrawRangeElementsBaseVertex");
    sf_glad_glFenceSync = (PFNGLFENCESYNCPROC) load(userptr, "glFenceSync");
    sf_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) load(userptr, "glFramebufferTexture");
    sf_glad_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) load(userptr, "glGetBufferParameteri64v");
    sf_glad_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) load(userptr, "glGetInteger64i_v");
    sf_glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC) load(userptr, "glGetInteger64v");
    sf_glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load(userptr, "glGetMultisamplefv");
    sf_glad_glGetSynciv = (PFNGLGETSYNCIVPROC) load(userptr, "glGetSynciv");
    sf_glad_glIsSync = (PFNGLISSYNCPROC) load(userptr, "glIsSync");
    sf_glad_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glMultiDrawElementsBaseVertex");
    sf_glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) load(userptr, "glProvokingVertex");
    sf_glad_glSampleMaski = (PFNGLSAMPLEMASKIPROC) load(userptr, "glSampleMaski");
    sf_glad_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) load(userptr, "glTexImage2DMultisample");
    sf_glad_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) load(userptr, "glTexImage3DMultisample");
    sf_glad_glWaitSync = (PFNGLWAITSYNCPROC) load(userptr, "glWaitSync");
}
static void sf_glad_gl_load_GL_VERSION_3_3( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_3_3) return;
    sf_glad_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) load(userptr, "glBindFragDataLocationIndexed");
    sf_glad_glBindSampler = (PFNGLBINDSAMPLERPROC) load(userptr, "glBindSampler");
    sf_glad_glColorP3ui = (PFNGLCOLORP3UIPROC) load(userptr, "glColorP3ui");
    sf_glad_glColorP3uiv = (PFNGLCOLORP3UIVPROC) load(userptr, "glColorP3uiv");
    sf_glad_glColorP4ui = (PFNGLCOLORP4UIPROC) load(userptr, "glColorP4ui");
    sf_glad_glColorP4uiv = (PFNGLCOLORP4UIVPROC) load(userptr, "glColorP4uiv");
    sf_glad_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) load(userptr, "glDeleteSamplers");
    sf_glad_glGenSamplers = (PFNGLGENSAMPLERSPROC) load(userptr, "glGenSamplers");
    sf_glad_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) load(userptr, "glGetFragDataIndex");
    sf_glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) load(userptr, "glGetQueryObjecti64v");
    sf_glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) load(userptr, "glGetQueryObjectui64v");
    sf_glad_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) load(userptr, "glGetSamplerParameterIiv");
    sf_glad_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) load(userptr, "glGetSamplerParameterIuiv");
    sf_glad_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) load(userptr, "glGetSamplerParameterfv");
    sf_glad_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) load(userptr, "glGetSamplerParameteriv");
    sf_glad_glIsSampler = (PFNGLISSAMPLERPROC) load(userptr, "glIsSampler");
    sf_glad_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC) load(userptr, "glMultiTexCoordP1ui");
    sf_glad_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC) load(userptr, "glMultiTexCoordP1uiv");
    sf_glad_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC) load(userptr, "glMultiTexCoordP2ui");
    sf_glad_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC) load(userptr, "glMultiTexCoordP2uiv");
    sf_glad_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC) load(userptr, "glMultiTexCoordP3ui");
    sf_glad_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC) load(userptr, "glMultiTexCoordP3uiv");
    sf_glad_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC) load(userptr, "glMultiTexCoordP4ui");
    sf_glad_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC) load(userptr, "glMultiTexCoordP4uiv");
    sf_glad_glNormalP3ui = (PFNGLNORMALP3UIPROC) load(userptr, "glNormalP3ui");
    sf_glad_glNormalP3uiv = (PFNGLNORMALP3UIVPROC) load(userptr, "glNormalP3uiv");
    sf_glad_glQueryCounter = (PFNGLQUERYCOUNTERPROC) load(userptr, "glQueryCounter");
    sf_glad_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) load(userptr, "glSamplerParameterIiv");
    sf_glad_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) load(userptr, "glSamplerParameterIuiv");
    sf_glad_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) load(userptr, "glSamplerParameterf");
    sf_glad_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) load(userptr, "glSamplerParameterfv");
    sf_glad_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) load(userptr, "glSamplerParameteri");
    sf_glad_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) load(userptr, "glSamplerParameteriv");
    sf_glad_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC) load(userptr, "glSecondaryColorP3ui");
    sf_glad_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC) load(userptr, "glSecondaryColorP3uiv");
    sf_glad_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC) load(userptr, "glTexCoordP1ui");
    sf_glad_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC) load(userptr, "glTexCoordP1uiv");
    sf_glad_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC) load(userptr, "glTexCoordP2ui");
    sf_glad_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC) load(userptr, "glTexCoordP2uiv");
    sf_glad_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC) load(userptr, "glTexCoordP3ui");
    sf_glad_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC) load(userptr, "glTexCoordP3uiv");
    sf_glad_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC) load(userptr, "glTexCoordP4ui");
    sf_glad_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC) load(userptr, "glTexCoordP4uiv");
    sf_glad_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) load(userptr, "glVertexAttribDivisor");
    sf_glad_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) load(userptr, "glVertexAttribP1ui");
    sf_glad_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) load(userptr, "glVertexAttribP1uiv");
    sf_glad_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) load(userptr, "glVertexAttribP2ui");
    sf_glad_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) load(userptr, "glVertexAttribP2uiv");
    sf_glad_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) load(userptr, "glVertexAttribP3ui");
    sf_glad_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) load(userptr, "glVertexAttribP3uiv");
    sf_glad_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) load(userptr, "glVertexAttribP4ui");
    sf_glad_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) load(userptr, "glVertexAttribP4uiv");
    sf_glad_glVertexP2ui = (PFNGLVERTEXP2UIPROC) load(userptr, "glVertexP2ui");
    sf_glad_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC) load(userptr, "glVertexP2uiv");
    sf_glad_glVertexP3ui = (PFNGLVERTEXP3UIPROC) load(userptr, "glVertexP3ui");
    sf_glad_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC) load(userptr, "glVertexP3uiv");
    sf_glad_glVertexP4ui = (PFNGLVERTEXP4UIPROC) load(userptr, "glVertexP4ui");
    sf_glad_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC) load(userptr, "glVertexP4uiv");
}
static void sf_glad_gl_load_GL_VERSION_4_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_4_0) return;
    sf_glad_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC) load(userptr, "glBeginQueryIndexed");
    sf_glad_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) load(userptr, "glBindTransformFeedback");
    sf_glad_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC) load(userptr, "glBlendEquationSeparatei");
    sf_glad_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC) load(userptr, "glBlendEquationi");
    sf_glad_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC) load(userptr, "glBlendFuncSeparatei");
    sf_glad_glBlendFunci = (PFNGLBLENDFUNCIPROC) load(userptr, "glBlendFunci");
    sf_glad_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) load(userptr, "glDeleteTransformFeedbacks");
    sf_glad_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) load(userptr, "glDrawArraysIndirect");
    sf_glad_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) load(userptr, "glDrawElementsIndirect");
    sf_glad_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC) load(userptr, "glDrawTransformFeedback");
    sf_glad_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) load(userptr, "glDrawTransformFeedbackStream");
    sf_glad_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC) load(userptr, "glEndQueryIndexed");
    sf_glad_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) load(userptr, "glGenTransformFeedbacks");
    sf_glad_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC) load(userptr, "glGetActiveSubroutineName");
    sf_glad_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) load(userptr, "glGetActiveSubroutineUniformName");
    sf_glad_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) load(userptr, "glGetActiveSubroutineUniformiv");
    sf_glad_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC) load(userptr, "glGetProgramStageiv");
    sf_glad_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC) load(userptr, "glGetQueryIndexediv");
    sf_glad_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC) load(userptr, "glGetSubroutineIndex");
    sf_glad_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) load(userptr, "glGetSubroutineUniformLocation");
    sf_glad_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC) load(userptr, "glGetUniformSubroutineuiv");
    sf_glad_glGetUniformdv = (PFNGLGETUNIFORMDVPROC) load(userptr, "glGetUniformdv");
    sf_glad_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) load(userptr, "glIsTransformFeedback");
    sf_glad_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC) load(userptr, "glMinSampleShading");
    sf_glad_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) load(userptr, "glPatchParameterfv");
    sf_glad_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC) load(userptr, "glPatchParameteri");
    sf_glad_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) load(userptr, "glPauseTransformFeedback");
    sf_glad_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) load(userptr, "glResumeTransformFeedback");
    sf_glad_glUniform1d = (PFNGLUNIFORM1DPROC) load(userptr, "glUniform1d");
    sf_glad_glUniform1dv = (PFNGLUNIFORM1DVPROC) load(userptr, "glUniform1dv");
    sf_glad_glUniform2d = (PFNGLUNIFORM2DPROC) load(userptr, "glUniform2d");
    sf_glad_glUniform2dv = (PFNGLUNIFORM2DVPROC) load(userptr, "glUniform2dv");
    sf_glad_glUniform3d = (PFNGLUNIFORM3DPROC) load(userptr, "glUniform3d");
    sf_glad_glUniform3dv = (PFNGLUNIFORM3DVPROC) load(userptr, "glUniform3dv");
    sf_glad_glUniform4d = (PFNGLUNIFORM4DPROC) load(userptr, "glUniform4d");
    sf_glad_glUniform4dv = (PFNGLUNIFORM4DVPROC) load(userptr, "glUniform4dv");
    sf_glad_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC) load(userptr, "glUniformMatrix2dv");
    sf_glad_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) load(userptr, "glUniformMatrix2x3dv");
    sf_glad_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) load(userptr, "glUniformMatrix2x4dv");
    sf_glad_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC) load(userptr, "glUniformMatrix3dv");
    sf_glad_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) load(userptr, "glUniformMatrix3x2dv");
    sf_glad_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) load(userptr, "glUniformMatrix3x4dv");
    sf_glad_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC) load(userptr, "glUniformMatrix4dv");
    sf_glad_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) load(userptr, "glUniformMatrix4x2dv");
    sf_glad_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) load(userptr, "glUniformMatrix4x3dv");
    sf_glad_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC) load(userptr, "glUniformSubroutinesuiv");
}
static void sf_glad_gl_load_GL_VERSION_4_1( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_4_1) return;
    sf_glad_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) load(userptr, "glActiveShaderProgram");
    sf_glad_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) load(userptr, "glBindProgramPipeline");
    sf_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC) load(userptr, "glClearDepthf");
    sf_glad_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) load(userptr, "glCreateShaderProgramv");
    sf_glad_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) load(userptr, "glDeleteProgramPipelines");
    sf_glad_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC) load(userptr, "glDepthRangeArrayv");
    sf_glad_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) load(userptr, "glDepthRangeIndexed");
    sf_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC) load(userptr, "glDepthRangef");
    sf_glad_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) load(userptr, "glGenProgramPipelines");
    sf_glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC) load(userptr, "glGetDoublei_v");
    sf_glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC) load(userptr, "glGetFloati_v");
    sf_glad_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) load(userptr, "glGetProgramBinary");
    sf_glad_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) load(userptr, "glGetProgramPipelineInfoLog");
    sf_glad_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) load(userptr, "glGetProgramPipelineiv");
    sf_glad_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) load(userptr, "glGetShaderPrecisionFormat");
    sf_glad_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC) load(userptr, "glGetVertexAttribLdv");
    sf_glad_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) load(userptr, "glIsProgramPipeline");
    sf_glad_glProgramBinary = (PFNGLPROGRAMBINARYPROC) load(userptr, "glProgramBinary");
    sf_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
    sf_glad_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) load(userptr, "glProgramUniform1d");
    sf_glad_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) load(userptr, "glProgramUniform1dv");
    sf_glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) load(userptr, "glProgramUniform1f");
    sf_glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) load(userptr, "glProgramUniform1fv");
    sf_glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) load(userptr, "glProgramUniform1i");
    sf_glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) load(userptr, "glProgramUniform1iv");
    sf_glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) load(userptr, "glProgramUniform1ui");
    sf_glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) load(userptr, "glProgramUniform1uiv");
    sf_glad_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) load(userptr, "glProgramUniform2d");
    sf_glad_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) load(userptr, "glProgramUniform2dv");
    sf_glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) load(userptr, "glProgramUniform2f");
    sf_glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) load(userptr, "glProgramUniform2fv");
    sf_glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) load(userptr, "glProgramUniform2i");
    sf_glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) load(userptr, "glProgramUniform2iv");
    sf_glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) load(userptr, "glProgramUniform2ui");
    sf_glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) load(userptr, "glProgramUniform2uiv");
    sf_glad_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) load(userptr, "glProgramUniform3d");
    sf_glad_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) load(userptr, "glProgramUniform3dv");
    sf_glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) load(userptr, "glProgramUniform3f");
    sf_glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) load(userptr, "glProgramUniform3fv");
    sf_glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) load(userptr, "glProgramUniform3i");
    sf_glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) load(userptr, "glProgramUniform3iv");
    sf_glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) load(userptr, "glProgramUniform3ui");
    sf_glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) load(userptr, "glProgramUniform3uiv");
    sf_glad_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) load(userptr, "glProgramUniform4d");
    sf_glad_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) load(userptr, "glProgramUniform4dv");
    sf_glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) load(userptr, "glProgramUniform4f");
    sf_glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) load(userptr, "glProgramUniform4fv");
    sf_glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) load(userptr, "glProgramUniform4i");
    sf_glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) load(userptr, "glProgramUniform4iv");
    sf_glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) load(userptr, "glProgramUniform4ui");
    sf_glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) load(userptr, "glProgramUniform4uiv");
    sf_glad_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) load(userptr, "glProgramUniformMatrix2dv");
    sf_glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) load(userptr, "glProgramUniformMatrix2fv");
    sf_glad_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) load(userptr, "glProgramUniformMatrix2x3dv");
    sf_glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) load(userptr, "glProgramUniformMatrix2x3fv");
    sf_glad_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) load(userptr, "glProgramUniformMatrix2x4dv");
    sf_glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) load(userptr, "glProgramUniformMatrix2x4fv");
    sf_glad_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) load(userptr, "glProgramUniformMatrix3dv");
    sf_glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) load(userptr, "glProgramUniformMatrix3fv");
    sf_glad_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) load(userptr, "glProgramUniformMatrix3x2dv");
    sf_glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) load(userptr, "glProgramUniformMatrix3x2fv");
    sf_glad_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) load(userptr, "glProgramUniformMatrix3x4dv");
    sf_glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) load(userptr, "glProgramUniformMatrix3x4fv");
    sf_glad_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) load(userptr, "glProgramUniformMatrix4dv");
    sf_glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) load(userptr, "glProgramUniformMatrix4fv");
    sf_glad_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) load(userptr, "glProgramUniformMatrix4x2dv");
    sf_glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) load(userptr, "glProgramUniformMatrix4x2fv");
    sf_glad_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) load(userptr, "glProgramUniformMatrix4x3dv");
    sf_glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) load(userptr, "glProgramUniformMatrix4x3fv");
    sf_glad_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) load(userptr, "glReleaseShaderCompiler");
    sf_glad_glScissorArrayv = (PFNGLSCISSORARRAYVPROC) load(userptr, "glScissorArrayv");
    sf_glad_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC) load(userptr, "glScissorIndexed");
    sf_glad_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC) load(userptr, "glScissorIndexedv");
    sf_glad_glShaderBinary = (PFNGLSHADERBINARYPROC) load(userptr, "glShaderBinary");
    sf_glad_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) load(userptr, "glUseProgramStages");
    sf_glad_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) load(userptr, "glValidateProgramPipeline");
    sf_glad_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC) load(userptr, "glVertexAttribL1d");
    sf_glad_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC) load(userptr, "glVertexAttribL1dv");
    sf_glad_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC) load(userptr, "glVertexAttribL2d");
    sf_glad_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC) load(userptr, "glVertexAttribL2dv");
    sf_glad_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC) load(userptr, "glVertexAttribL3d");
    sf_glad_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC) load(userptr, "glVertexAttribL3dv");
    sf_glad_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC) load(userptr, "glVertexAttribL4d");
    sf_glad_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC) load(userptr, "glVertexAttribL4dv");
    sf_glad_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC) load(userptr, "glVertexAttribLPointer");
    sf_glad_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC) load(userptr, "glViewportArrayv");
    sf_glad_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC) load(userptr, "glViewportIndexedf");
    sf_glad_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) load(userptr, "glViewportIndexedfv");
}
static void sf_glad_gl_load_GL_VERSION_4_2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_4_2) return;
    sf_glad_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) load(userptr, "glBindImageTexture");
    sf_glad_glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) load(userptr, "glDrawArraysInstancedBaseInstance");
    sf_glad_glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) load(userptr, "glDrawElementsInstancedBaseInstance");
    sf_glad_glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) load(userptr, "glDrawElementsInstancedBaseVertexBaseInstance");
    sf_glad_glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) load(userptr, "glDrawTransformFeedbackInstanced");
    sf_glad_glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) load(userptr, "glDrawTransformFeedbackStreamInstanced");
    sf_glad_glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) load(userptr, "glGetActiveAtomicCounterBufferiv");
    sf_glad_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) load(userptr, "glGetInternalformativ");
    sf_glad_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC) load(userptr, "glMemoryBarrier");
    sf_glad_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC) load(userptr, "glTexStorage1D");
    sf_glad_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC) load(userptr, "glTexStorage2D");
    sf_glad_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC) load(userptr, "glTexStorage3D");
}
static void sf_glad_gl_load_GL_VERSION_4_3( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_4_3) return;
    sf_glad_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) load(userptr, "glBindVertexBuffer");
    sf_glad_glClearBufferData = (PFNGLCLEARBUFFERDATAPROC) load(userptr, "glClearBufferData");
    sf_glad_glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC) load(userptr, "glClearBufferSubData");
    sf_glad_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC) load(userptr, "glCopyImageSubData");
    sf_glad_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) load(userptr, "glDebugMessageCallback");
    sf_glad_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) load(userptr, "glDebugMessageControl");
    sf_glad_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) load(userptr, "glDebugMessageInsert");
    sf_glad_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) load(userptr, "glDispatchCompute");
    sf_glad_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) load(userptr, "glDispatchComputeIndirect");
    sf_glad_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) load(userptr, "glFramebufferParameteri");
    sf_glad_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) load(userptr, "glGetDebugMessageLog");
    sf_glad_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) load(userptr, "glGetFramebufferParameteriv");
    sf_glad_glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC) load(userptr, "glGetInternalformati64v");
    sf_glad_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC) load(userptr, "glGetObjectLabel");
    sf_glad_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) load(userptr, "glGetObjectPtrLabel");
    sf_glad_glGetPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    sf_glad_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) load(userptr, "glGetProgramInterfaceiv");
    sf_glad_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) load(userptr, "glGetProgramResourceIndex");
    sf_glad_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) load(userptr, "glGetProgramResourceLocation");
    sf_glad_glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) load(userptr, "glGetProgramResourceLocationIndex");
    sf_glad_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) load(userptr, "glGetProgramResourceName");
    sf_glad_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) load(userptr, "glGetProgramResourceiv");
    sf_glad_glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC) load(userptr, "glInvalidateBufferData");
    sf_glad_glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC) load(userptr, "glInvalidateBufferSubData");
    sf_glad_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) load(userptr, "glInvalidateFramebuffer");
    sf_glad_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) load(userptr, "glInvalidateSubFramebuffer");
    sf_glad_glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC) load(userptr, "glInvalidateTexImage");
    sf_glad_glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC) load(userptr, "glInvalidateTexSubImage");
    sf_glad_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC) load(userptr, "glMultiDrawArraysIndirect");
    sf_glad_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC) load(userptr, "glMultiDrawElementsIndirect");
    sf_glad_glObjectLabel = (PFNGLOBJECTLABELPROC) load(userptr, "glObjectLabel");
    sf_glad_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC) load(userptr, "glObjectPtrLabel");
    sf_glad_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC) load(userptr, "glPopDebugGroup");
    sf_glad_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) load(userptr, "glPushDebugGroup");
    sf_glad_glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC) load(userptr, "glShaderStorageBlockBinding");
    sf_glad_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC) load(userptr, "glTexBufferRange");
    sf_glad_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) load(userptr, "glTexStorage2DMultisample");
    sf_glad_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC) load(userptr, "glTexStorage3DMultisample");
    sf_glad_glTextureView = (PFNGLTEXTUREVIEWPROC) load(userptr, "glTextureView");
    sf_glad_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) load(userptr, "glVertexAttribBinding");
    sf_glad_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) load(userptr, "glVertexAttribFormat");
    sf_glad_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) load(userptr, "glVertexAttribIFormat");
    sf_glad_glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC) load(userptr, "glVertexAttribLFormat");
    sf_glad_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) load(userptr, "glVertexBindingDivisor");
}
static void sf_glad_gl_load_GL_VERSION_4_4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_4_4) return;
    sf_glad_glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC) load(userptr, "glBindBuffersBase");
    sf_glad_glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC) load(userptr, "glBindBuffersRange");
    sf_glad_glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC) load(userptr, "glBindImageTextures");
    sf_glad_glBindSamplers = (PFNGLBINDSAMPLERSPROC) load(userptr, "glBindSamplers");
    sf_glad_glBindTextures = (PFNGLBINDTEXTURESPROC) load(userptr, "glBindTextures");
    sf_glad_glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC) load(userptr, "glBindVertexBuffers");
    sf_glad_glBufferStorage = (PFNGLBUFFERSTORAGEPROC) load(userptr, "glBufferStorage");
    sf_glad_glClearTexImage = (PFNGLCLEARTEXIMAGEPROC) load(userptr, "glClearTexImage");
    sf_glad_glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC) load(userptr, "glClearTexSubImage");
}
static void sf_glad_gl_load_GL_VERSION_4_5( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_4_5) return;
    sf_glad_glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC) load(userptr, "glBindTextureUnit");
    sf_glad_glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC) load(userptr, "glBlitNamedFramebuffer");
    sf_glad_glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckNamedFramebufferStatus");
    sf_glad_glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC) load(userptr, "glClearNamedBufferData");
    sf_glad_glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC) load(userptr, "glClearNamedBufferSubData");
    sf_glad_glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) load(userptr, "glClearNamedFramebufferfi");
    sf_glad_glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) load(userptr, "glClearNamedFramebufferfv");
    sf_glad_glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) load(userptr, "glClearNamedFramebufferiv");
    sf_glad_glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) load(userptr, "glClearNamedFramebufferuiv");
    sf_glad_glClipControl = (PFNGLCLIPCONTROLPROC) load(userptr, "glClipControl");
    sf_glad_glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) load(userptr, "glCompressedTextureSubImage1D");
    sf_glad_glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) load(userptr, "glCompressedTextureSubImage2D");
    sf_glad_glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) load(userptr, "glCompressedTextureSubImage3D");
    sf_glad_glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC) load(userptr, "glCopyNamedBufferSubData");
    sf_glad_glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC) load(userptr, "glCopyTextureSubImage1D");
    sf_glad_glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC) load(userptr, "glCopyTextureSubImage2D");
    sf_glad_glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC) load(userptr, "glCopyTextureSubImage3D");
    sf_glad_glCreateBuffers = (PFNGLCREATEBUFFERSPROC) load(userptr, "glCreateBuffers");
    sf_glad_glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC) load(userptr, "glCreateFramebuffers");
    sf_glad_glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC) load(userptr, "glCreateProgramPipelines");
    sf_glad_glCreateQueries = (PFNGLCREATEQUERIESPROC) load(userptr, "glCreateQueries");
    sf_glad_glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC) load(userptr, "glCreateRenderbuffers");
    sf_glad_glCreateSamplers = (PFNGLCREATESAMPLERSPROC) load(userptr, "glCreateSamplers");
    sf_glad_glCreateTextures = (PFNGLCREATETEXTURESPROC) load(userptr, "glCreateTextures");
    sf_glad_glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC) load(userptr, "glCreateTransformFeedbacks");
    sf_glad_glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC) load(userptr, "glCreateVertexArrays");
    sf_glad_glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC) load(userptr, "glDisableVertexArrayAttrib");
    sf_glad_glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC) load(userptr, "glEnableVertexArrayAttrib");
    sf_glad_glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) load(userptr, "glFlushMappedNamedBufferRange");
    sf_glad_glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC) load(userptr, "glGenerateTextureMipmap");
    sf_glad_glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) load(userptr, "glGetCompressedTextureImage");
    sf_glad_glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) load(userptr, "glGetCompressedTextureSubImage");
    sf_glad_glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC) load(userptr, "glGetGraphicsResetStatus");
    sf_glad_glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) load(userptr, "glGetNamedBufferParameteri64v");
    sf_glad_glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC) load(userptr, "glGetNamedBufferParameteriv");
    sf_glad_glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC) load(userptr, "glGetNamedBufferPointerv");
    sf_glad_glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC) load(userptr, "glGetNamedBufferSubData");
    sf_glad_glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetNamedFramebufferAttachmentParameteriv");
    sf_glad_glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) load(userptr, "glGetNamedFramebufferParameteriv");
    sf_glad_glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetNamedRenderbufferParameteriv");
    sf_glad_glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC) load(userptr, "glGetQueryBufferObjecti64v");
    sf_glad_glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC) load(userptr, "glGetQueryBufferObjectiv");
    sf_glad_glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC) load(userptr, "glGetQueryBufferObjectui64v");
    sf_glad_glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC) load(userptr, "glGetQueryBufferObjectuiv");
    sf_glad_glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC) load(userptr, "glGetTextureImage");
    sf_glad_glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC) load(userptr, "glGetTextureLevelParameterfv");
    sf_glad_glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC) load(userptr, "glGetTextureLevelParameteriv");
    sf_glad_glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC) load(userptr, "glGetTextureParameterIiv");
    sf_glad_glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC) load(userptr, "glGetTextureParameterIuiv");
    sf_glad_glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC) load(userptr, "glGetTextureParameterfv");
    sf_glad_glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC) load(userptr, "glGetTextureParameteriv");
    sf_glad_glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC) load(userptr, "glGetTextureSubImage");
    sf_glad_glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC) load(userptr, "glGetTransformFeedbacki64_v");
    sf_glad_glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC) load(userptr, "glGetTransformFeedbacki_v");
    sf_glad_glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC) load(userptr, "glGetTransformFeedbackiv");
    sf_glad_glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC) load(userptr, "glGetVertexArrayIndexed64iv");
    sf_glad_glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC) load(userptr, "glGetVertexArrayIndexediv");
    sf_glad_glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC) load(userptr, "glGetVertexArrayiv");
    sf_glad_glGetnColorTable = (PFNGLGETNCOLORTABLEPROC) load(userptr, "glGetnColorTable");
    sf_glad_glGetnCompressedTexImage = (PFNGLGETNCOMPRESSEDTEXIMAGEPROC) load(userptr, "glGetnCompressedTexImage");
    sf_glad_glGetnConvolutionFilter = (PFNGLGETNCONVOLUTIONFILTERPROC) load(userptr, "glGetnConvolutionFilter");
    sf_glad_glGetnHistogram = (PFNGLGETNHISTOGRAMPROC) load(userptr, "glGetnHistogram");
    sf_glad_glGetnMapdv = (PFNGLGETNMAPDVPROC) load(userptr, "glGetnMapdv");
    sf_glad_glGetnMapfv = (PFNGLGETNMAPFVPROC) load(userptr, "glGetnMapfv");
    sf_glad_glGetnMapiv = (PFNGLGETNMAPIVPROC) load(userptr, "glGetnMapiv");
    sf_glad_glGetnMinmax = (PFNGLGETNMINMAXPROC) load(userptr, "glGetnMinmax");
    sf_glad_glGetnPixelMapfv = (PFNGLGETNPIXELMAPFVPROC) load(userptr, "glGetnPixelMapfv");
    sf_glad_glGetnPixelMapuiv = (PFNGLGETNPIXELMAPUIVPROC) load(userptr, "glGetnPixelMapuiv");
    sf_glad_glGetnPixelMapusv = (PFNGLGETNPIXELMAPUSVPROC) load(userptr, "glGetnPixelMapusv");
    sf_glad_glGetnPolygonStipple = (PFNGLGETNPOLYGONSTIPPLEPROC) load(userptr, "glGetnPolygonStipple");
    sf_glad_glGetnSeparableFilter = (PFNGLGETNSEPARABLEFILTERPROC) load(userptr, "glGetnSeparableFilter");
    sf_glad_glGetnTexImage = (PFNGLGETNTEXIMAGEPROC) load(userptr, "glGetnTexImage");
    sf_glad_glGetnUniformdv = (PFNGLGETNUNIFORMDVPROC) load(userptr, "glGetnUniformdv");
    sf_glad_glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC) load(userptr, "glGetnUniformfv");
    sf_glad_glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC) load(userptr, "glGetnUniformiv");
    sf_glad_glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC) load(userptr, "glGetnUniformuiv");
    sf_glad_glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) load(userptr, "glInvalidateNamedFramebufferData");
    sf_glad_glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) load(userptr, "glInvalidateNamedFramebufferSubData");
    sf_glad_glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC) load(userptr, "glMapNamedBuffer");
    sf_glad_glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC) load(userptr, "glMapNamedBufferRange");
    sf_glad_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC) load(userptr, "glMemoryBarrierByRegion");
    sf_glad_glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC) load(userptr, "glNamedBufferData");
    sf_glad_glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC) load(userptr, "glNamedBufferStorage");
    sf_glad_glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC) load(userptr, "glNamedBufferSubData");
    sf_glad_glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) load(userptr, "glNamedFramebufferDrawBuffer");
    sf_glad_glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) load(userptr, "glNamedFramebufferDrawBuffers");
    sf_glad_glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) load(userptr, "glNamedFramebufferParameteri");
    sf_glad_glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) load(userptr, "glNamedFramebufferReadBuffer");
    sf_glad_glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glNamedFramebufferRenderbuffer");
    sf_glad_glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) load(userptr, "glNamedFramebufferTexture");
    sf_glad_glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glNamedFramebufferTextureLayer");
    sf_glad_glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC) load(userptr, "glNamedRenderbufferStorage");
    sf_glad_glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glNamedRenderbufferStorageMultisample");
    sf_glad_glReadnPixels = (PFNGLREADNPIXELSPROC) load(userptr, "glReadnPixels");
    sf_glad_glTextureBarrier = (PFNGLTEXTUREBARRIERPROC) load(userptr, "glTextureBarrier");
    sf_glad_glTextureBuffer = (PFNGLTEXTUREBUFFERPROC) load(userptr, "glTextureBuffer");
    sf_glad_glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC) load(userptr, "glTextureBufferRange");
    sf_glad_glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC) load(userptr, "glTextureParameterIiv");
    sf_glad_glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC) load(userptr, "glTextureParameterIuiv");
    sf_glad_glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC) load(userptr, "glTextureParameterf");
    sf_glad_glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC) load(userptr, "glTextureParameterfv");
    sf_glad_glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC) load(userptr, "glTextureParameteri");
    sf_glad_glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC) load(userptr, "glTextureParameteriv");
    sf_glad_glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC) load(userptr, "glTextureStorage1D");
    sf_glad_glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC) load(userptr, "glTextureStorage2D");
    sf_glad_glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) load(userptr, "glTextureStorage2DMultisample");
    sf_glad_glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC) load(userptr, "glTextureStorage3D");
    sf_glad_glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) load(userptr, "glTextureStorage3DMultisample");
    sf_glad_glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC) load(userptr, "glTextureSubImage1D");
    sf_glad_glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC) load(userptr, "glTextureSubImage2D");
    sf_glad_glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC) load(userptr, "glTextureSubImage3D");
    sf_glad_glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) load(userptr, "glTransformFeedbackBufferBase");
    sf_glad_glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) load(userptr, "glTransformFeedbackBufferRange");
    sf_glad_glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC) load(userptr, "glUnmapNamedBuffer");
    sf_glad_glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC) load(userptr, "glVertexArrayAttribBinding");
    sf_glad_glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC) load(userptr, "glVertexArrayAttribFormat");
    sf_glad_glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC) load(userptr, "glVertexArrayAttribIFormat");
    sf_glad_glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC) load(userptr, "glVertexArrayAttribLFormat");
    sf_glad_glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC) load(userptr, "glVertexArrayBindingDivisor");
    sf_glad_glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC) load(userptr, "glVertexArrayElementBuffer");
    sf_glad_glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC) load(userptr, "glVertexArrayVertexBuffer");
    sf_glad_glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC) load(userptr, "glVertexArrayVertexBuffers");
}
static void sf_glad_gl_load_GL_VERSION_4_6( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_4_6) return;
    sf_glad_glMultiDrawArraysIndirectCount = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC) load(userptr, "glMultiDrawArraysIndirectCount");
    sf_glad_glMultiDrawElementsIndirectCount = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC) load(userptr, "glMultiDrawElementsIndirectCount");
    sf_glad_glPolygonOffsetClamp = (PFNGLPOLYGONOFFSETCLAMPPROC) load(userptr, "glPolygonOffsetClamp");
    sf_glad_glSpecializeShader = (PFNGLSPECIALIZESHADERPROC) load(userptr, "glSpecializeShader");
}
static void sf_glad_gl_load_GL_VERSION_ES_CM_1_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_VERSION_ES_CM_1_0) return;
    sf_glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC) load(userptr, "glActiveTexture");
    sf_glad_glAlphaFunc = (PFNGLALPHAFUNCPROC) load(userptr, "glAlphaFunc");
    sf_glad_glAlphaFuncx = (PFNGLALPHAFUNCXPROC) load(userptr, "glAlphaFuncx");
    sf_glad_glBindBuffer = (PFNGLBINDBUFFERPROC) load(userptr, "glBindBuffer");
    sf_glad_glBindTexture = (PFNGLBINDTEXTUREPROC) load(userptr, "glBindTexture");
    sf_glad_glBlendFunc = (PFNGLBLENDFUNCPROC) load(userptr, "glBlendFunc");
    sf_glad_glBufferData = (PFNGLBUFFERDATAPROC) load(userptr, "glBufferData");
    sf_glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC) load(userptr, "glBufferSubData");
    sf_glad_glClear = (PFNGLCLEARPROC) load(userptr, "glClear");
    sf_glad_glClearColor = (PFNGLCLEARCOLORPROC) load(userptr, "glClearColor");
    sf_glad_glClearColorx = (PFNGLCLEARCOLORXPROC) load(userptr, "glClearColorx");
    sf_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC) load(userptr, "glClearDepthf");
    sf_glad_glClearDepthx = (PFNGLCLEARDEPTHXPROC) load(userptr, "glClearDepthx");
    sf_glad_glClearStencil = (PFNGLCLEARSTENCILPROC) load(userptr, "glClearStencil");
    sf_glad_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC) load(userptr, "glClientActiveTexture");
    sf_glad_glClipPlanef = (PFNGLCLIPPLANEFPROC) load(userptr, "glClipPlanef");
    sf_glad_glClipPlanex = (PFNGLCLIPPLANEXPROC) load(userptr, "glClipPlanex");
    sf_glad_glColor4f = (PFNGLCOLOR4FPROC) load(userptr, "glColor4f");
    sf_glad_glColor4ub = (PFNGLCOLOR4UBPROC) load(userptr, "glColor4ub");
    sf_glad_glColor4x = (PFNGLCOLOR4XPROC) load(userptr, "glColor4x");
    sf_glad_glColorMask = (PFNGLCOLORMASKPROC) load(userptr, "glColorMask");
    sf_glad_glColorPointer = (PFNGLCOLORPOINTERPROC) load(userptr, "glColorPointer");
    sf_glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) load(userptr, "glCompressedTexImage2D");
    sf_glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) load(userptr, "glCompressedTexSubImage2D");
    sf_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load(userptr, "glCopyTexImage2D");
    sf_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load(userptr, "glCopyTexSubImage2D");
    sf_glad_glCullFace = (PFNGLCULLFACEPROC) load(userptr, "glCullFace");
    sf_glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) load(userptr, "glDeleteBuffers");
    sf_glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC) load(userptr, "glDeleteTextures");
    sf_glad_glDepthFunc = (PFNGLDEPTHFUNCPROC) load(userptr, "glDepthFunc");
    sf_glad_glDepthMask = (PFNGLDEPTHMASKPROC) load(userptr, "glDepthMask");
    sf_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC) load(userptr, "glDepthRangef");
    sf_glad_glDepthRangex = (PFNGLDEPTHRANGEXPROC) load(userptr, "glDepthRangex");
    sf_glad_glDisable = (PFNGLDISABLEPROC) load(userptr, "glDisable");
    sf_glad_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC) load(userptr, "glDisableClientState");
    sf_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC) load(userptr, "glDrawArrays");
    sf_glad_glDrawElements = (PFNGLDRAWELEMENTSPROC) load(userptr, "glDrawElements");
    sf_glad_glEnable = (PFNGLENABLEPROC) load(userptr, "glEnable");
    sf_glad_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC) load(userptr, "glEnableClientState");
    sf_glad_glFinish = (PFNGLFINISHPROC) load(userptr, "glFinish");
    sf_glad_glFlush = (PFNGLFLUSHPROC) load(userptr, "glFlush");
    sf_glad_glFogf = (PFNGLFOGFPROC) load(userptr, "glFogf");
    sf_glad_glFogfv = (PFNGLFOGFVPROC) load(userptr, "glFogfv");
    sf_glad_glFogx = (PFNGLFOGXPROC) load(userptr, "glFogx");
    sf_glad_glFogxv = (PFNGLFOGXVPROC) load(userptr, "glFogxv");
    sf_glad_glFrontFace = (PFNGLFRONTFACEPROC) load(userptr, "glFrontFace");
    sf_glad_glFrustumf = (PFNGLFRUSTUMFPROC) load(userptr, "glFrustumf");
    sf_glad_glFrustumx = (PFNGLFRUSTUMXPROC) load(userptr, "glFrustumx");
    sf_glad_glGenBuffers = (PFNGLGENBUFFERSPROC) load(userptr, "glGenBuffers");
    sf_glad_glGenTextures = (PFNGLGENTEXTURESPROC) load(userptr, "glGenTextures");
    sf_glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC) load(userptr, "glGetBooleanv");
    sf_glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load(userptr, "glGetBufferParameteriv");
    sf_glad_glGetClipPlanef = (PFNGLGETCLIPPLANEFPROC) load(userptr, "glGetClipPlanef");
    sf_glad_glGetClipPlanex = (PFNGLGETCLIPPLANEXPROC) load(userptr, "glGetClipPlanex");
    sf_glad_glGetError = (PFNGLGETERRORPROC) load(userptr, "glGetError");
    sf_glad_glGetFixedv = (PFNGLGETFIXEDVPROC) load(userptr, "glGetFixedv");
    sf_glad_glGetFloatv = (PFNGLGETFLOATVPROC) load(userptr, "glGetFloatv");
    sf_glad_glGetIntegerv = (PFNGLGETINTEGERVPROC) load(userptr, "glGetIntegerv");
    sf_glad_glGetLightfv = (PFNGLGETLIGHTFVPROC) load(userptr, "glGetLightfv");
    sf_glad_glGetLightxv = (PFNGLGETLIGHTXVPROC) load(userptr, "glGetLightxv");
    sf_glad_glGetMaterialfv = (PFNGLGETMATERIALFVPROC) load(userptr, "glGetMaterialfv");
    sf_glad_glGetMaterialxv = (PFNGLGETMATERIALXVPROC) load(userptr, "glGetMaterialxv");
    sf_glad_glGetPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    sf_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    sf_glad_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC) load(userptr, "glGetTexEnvfv");
    sf_glad_glGetTexEnviv = (PFNGLGETTEXENVIVPROC) load(userptr, "glGetTexEnviv");
    sf_glad_glGetTexEnvxv = (PFNGLGETTEXENVXVPROC) load(userptr, "glGetTexEnvxv");
    sf_glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load(userptr, "glGetTexParameterfv");
    sf_glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load(userptr, "glGetTexParameteriv");
    sf_glad_glGetTexParameterxv = (PFNGLGETTEXPARAMETERXVPROC) load(userptr, "glGetTexParameterxv");
    sf_glad_glHint = (PFNGLHINTPROC) load(userptr, "glHint");
    sf_glad_glIsBuffer = (PFNGLISBUFFERPROC) load(userptr, "glIsBuffer");
    sf_glad_glIsEnabled = (PFNGLISENABLEDPROC) load(userptr, "glIsEnabled");
    sf_glad_glIsTexture = (PFNGLISTEXTUREPROC) load(userptr, "glIsTexture");
    sf_glad_glLightModelf = (PFNGLLIGHTMODELFPROC) load(userptr, "glLightModelf");
    sf_glad_glLightModelfv = (PFNGLLIGHTMODELFVPROC) load(userptr, "glLightModelfv");
    sf_glad_glLightModelx = (PFNGLLIGHTMODELXPROC) load(userptr, "glLightModelx");
    sf_glad_glLightModelxv = (PFNGLLIGHTMODELXVPROC) load(userptr, "glLightModelxv");
    sf_glad_glLightf = (PFNGLLIGHTFPROC) load(userptr, "glLightf");
    sf_glad_glLightfv = (PFNGLLIGHTFVPROC) load(userptr, "glLightfv");
    sf_glad_glLightx = (PFNGLLIGHTXPROC) load(userptr, "glLightx");
    sf_glad_glLightxv = (PFNGLLIGHTXVPROC) load(userptr, "glLightxv");
    sf_glad_glLineWidth = (PFNGLLINEWIDTHPROC) load(userptr, "glLineWidth");
    sf_glad_glLineWidthx = (PFNGLLINEWIDTHXPROC) load(userptr, "glLineWidthx");
    sf_glad_glLoadIdentity = (PFNGLLOADIDENTITYPROC) load(userptr, "glLoadIdentity");
    sf_glad_glLoadMatrixf = (PFNGLLOADMATRIXFPROC) load(userptr, "glLoadMatrixf");
    sf_glad_glLoadMatrixx = (PFNGLLOADMATRIXXPROC) load(userptr, "glLoadMatrixx");
    sf_glad_glLogicOp = (PFNGLLOGICOPPROC) load(userptr, "glLogicOp");
    sf_glad_glMaterialf = (PFNGLMATERIALFPROC) load(userptr, "glMaterialf");
    sf_glad_glMaterialfv = (PFNGLMATERIALFVPROC) load(userptr, "glMaterialfv");
    sf_glad_glMaterialx = (PFNGLMATERIALXPROC) load(userptr, "glMaterialx");
    sf_glad_glMaterialxv = (PFNGLMATERIALXVPROC) load(userptr, "glMaterialxv");
    sf_glad_glMatrixMode = (PFNGLMATRIXMODEPROC) load(userptr, "glMatrixMode");
    sf_glad_glMultMatrixf = (PFNGLMULTMATRIXFPROC) load(userptr, "glMultMatrixf");
    sf_glad_glMultMatrixx = (PFNGLMULTMATRIXXPROC) load(userptr, "glMultMatrixx");
    sf_glad_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC) load(userptr, "glMultiTexCoord4f");
    sf_glad_glMultiTexCoord4x = (PFNGLMULTITEXCOORD4XPROC) load(userptr, "glMultiTexCoord4x");
    sf_glad_glNormal3f = (PFNGLNORMAL3FPROC) load(userptr, "glNormal3f");
    sf_glad_glNormal3x = (PFNGLNORMAL3XPROC) load(userptr, "glNormal3x");
    sf_glad_glNormalPointer = (PFNGLNORMALPOINTERPROC) load(userptr, "glNormalPointer");
    sf_glad_glOrthof = (PFNGLORTHOFPROC) load(userptr, "glOrthof");
    sf_glad_glOrthox = (PFNGLORTHOXPROC) load(userptr, "glOrthox");
    sf_glad_glPixelStorei = (PFNGLPIXELSTOREIPROC) load(userptr, "glPixelStorei");
    sf_glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC) load(userptr, "glPointParameterf");
    sf_glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC) load(userptr, "glPointParameterfv");
    sf_glad_glPointParameterx = (PFNGLPOINTPARAMETERXPROC) load(userptr, "glPointParameterx");
    sf_glad_glPointParameterxv = (PFNGLPOINTPARAMETERXVPROC) load(userptr, "glPointParameterxv");
    sf_glad_glPointSize = (PFNGLPOINTSIZEPROC) load(userptr, "glPointSize");
    sf_glad_glPointSizex = (PFNGLPOINTSIZEXPROC) load(userptr, "glPointSizex");
    sf_glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) load(userptr, "glPolygonOffset");
    sf_glad_glPolygonOffsetx = (PFNGLPOLYGONOFFSETXPROC) load(userptr, "glPolygonOffsetx");
    sf_glad_glPopMatrix = (PFNGLPOPMATRIXPROC) load(userptr, "glPopMatrix");
    sf_glad_glPushMatrix = (PFNGLPUSHMATRIXPROC) load(userptr, "glPushMatrix");
    sf_glad_glReadPixels = (PFNGLREADPIXELSPROC) load(userptr, "glReadPixels");
    sf_glad_glRotatef = (PFNGLROTATEFPROC) load(userptr, "glRotatef");
    sf_glad_glRotatex = (PFNGLROTATEXPROC) load(userptr, "glRotatex");
    sf_glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) load(userptr, "glSampleCoverage");
    sf_glad_glSampleCoveragex = (PFNGLSAMPLECOVERAGEXPROC) load(userptr, "glSampleCoveragex");
    sf_glad_glScalef = (PFNGLSCALEFPROC) load(userptr, "glScalef");
    sf_glad_glScalex = (PFNGLSCALEXPROC) load(userptr, "glScalex");
    sf_glad_glScissor = (PFNGLSCISSORPROC) load(userptr, "glScissor");
    sf_glad_glShadeModel = (PFNGLSHADEMODELPROC) load(userptr, "glShadeModel");
    sf_glad_glStencilFunc = (PFNGLSTENCILFUNCPROC) load(userptr, "glStencilFunc");
    sf_glad_glStencilMask = (PFNGLSTENCILMASKPROC) load(userptr, "glStencilMask");
    sf_glad_glStencilOp = (PFNGLSTENCILOPPROC) load(userptr, "glStencilOp");
    sf_glad_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC) load(userptr, "glTexCoordPointer");
    sf_glad_glTexEnvf = (PFNGLTEXENVFPROC) load(userptr, "glTexEnvf");
    sf_glad_glTexEnvfv = (PFNGLTEXENVFVPROC) load(userptr, "glTexEnvfv");
    sf_glad_glTexEnvi = (PFNGLTEXENVIPROC) load(userptr, "glTexEnvi");
    sf_glad_glTexEnviv = (PFNGLTEXENVIVPROC) load(userptr, "glTexEnviv");
    sf_glad_glTexEnvx = (PFNGLTEXENVXPROC) load(userptr, "glTexEnvx");
    sf_glad_glTexEnvxv = (PFNGLTEXENVXVPROC) load(userptr, "glTexEnvxv");
    sf_glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC) load(userptr, "glTexImage2D");
    sf_glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC) load(userptr, "glTexParameterf");
    sf_glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) load(userptr, "glTexParameterfv");
    sf_glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC) load(userptr, "glTexParameteri");
    sf_glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) load(userptr, "glTexParameteriv");
    sf_glad_glTexParameterx = (PFNGLTEXPARAMETERXPROC) load(userptr, "glTexParameterx");
    sf_glad_glTexParameterxv = (PFNGLTEXPARAMETERXVPROC) load(userptr, "glTexParameterxv");
    sf_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load(userptr, "glTexSubImage2D");
    sf_glad_glTranslatef = (PFNGLTRANSLATEFPROC) load(userptr, "glTranslatef");
    sf_glad_glTranslatex = (PFNGLTRANSLATEXPROC) load(userptr, "glTranslatex");
    sf_glad_glVertexPointer = (PFNGLVERTEXPOINTERPROC) load(userptr, "glVertexPointer");
    sf_glad_glViewport = (PFNGLVIEWPORTPROC) load(userptr, "glViewport");
}
static void sf_glad_gl_load_GL_3DFX_tbuffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_3DFX_tbuffer) return;
    sf_glad_glTbufferMask3DFX = (PFNGLTBUFFERMASK3DFXPROC) load(userptr, "glTbufferMask3DFX");
}
static void sf_glad_gl_load_GL_AMD_debug_output( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_debug_output) return;
    sf_glad_glDebugMessageCallbackAMD = (PFNGLDEBUGMESSAGECALLBACKAMDPROC) load(userptr, "glDebugMessageCallbackAMD");
    sf_glad_glDebugMessageEnableAMD = (PFNGLDEBUGMESSAGEENABLEAMDPROC) load(userptr, "glDebugMessageEnableAMD");
    sf_glad_glDebugMessageInsertAMD = (PFNGLDEBUGMESSAGEINSERTAMDPROC) load(userptr, "glDebugMessageInsertAMD");
    sf_glad_glGetDebugMessageLogAMD = (PFNGLGETDEBUGMESSAGELOGAMDPROC) load(userptr, "glGetDebugMessageLogAMD");
}
static void sf_glad_gl_load_GL_AMD_draw_buffers_blend( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_draw_buffers_blend) return;
    sf_glad_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC) load(userptr, "glBlendEquationIndexedAMD");
    sf_glad_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) load(userptr, "glBlendEquationSeparateIndexedAMD");
    sf_glad_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC) load(userptr, "glBlendFuncIndexedAMD");
    sf_glad_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) load(userptr, "glBlendFuncSeparateIndexedAMD");
}
static void sf_glad_gl_load_GL_AMD_framebuffer_multisample_advanced( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_framebuffer_multisample_advanced) return;
    sf_glad_glNamedRenderbufferStorageMultisampleAdvancedAMD = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC) load(userptr, "glNamedRenderbufferStorageMultisampleAdvancedAMD");
    sf_glad_glRenderbufferStorageMultisampleAdvancedAMD = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC) load(userptr, "glRenderbufferStorageMultisampleAdvancedAMD");
}
static void sf_glad_gl_load_GL_AMD_framebuffer_sample_positions( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_framebuffer_sample_positions) return;
    sf_glad_glFramebufferSamplePositionsfvAMD = (PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC) load(userptr, "glFramebufferSamplePositionsfvAMD");
    sf_glad_glGetFramebufferParameterfvAMD = (PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC) load(userptr, "glGetFramebufferParameterfvAMD");
    sf_glad_glGetNamedFramebufferParameterfvAMD = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC) load(userptr, "glGetNamedFramebufferParameterfvAMD");
    sf_glad_glNamedFramebufferSamplePositionsfvAMD = (PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC) load(userptr, "glNamedFramebufferSamplePositionsfvAMD");
}
static void sf_glad_gl_load_GL_AMD_gpu_shader_int64( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_gpu_shader_int64) return;
    sf_glad_glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC) load(userptr, "glGetUniformi64vNV");
    sf_glad_glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC) load(userptr, "glGetUniformui64vNV");
    sf_glad_glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC) load(userptr, "glProgramUniform1i64NV");
    sf_glad_glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC) load(userptr, "glProgramUniform1i64vNV");
    sf_glad_glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC) load(userptr, "glProgramUniform1ui64NV");
    sf_glad_glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC) load(userptr, "glProgramUniform1ui64vNV");
    sf_glad_glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC) load(userptr, "glProgramUniform2i64NV");
    sf_glad_glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC) load(userptr, "glProgramUniform2i64vNV");
    sf_glad_glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC) load(userptr, "glProgramUniform2ui64NV");
    sf_glad_glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC) load(userptr, "glProgramUniform2ui64vNV");
    sf_glad_glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC) load(userptr, "glProgramUniform3i64NV");
    sf_glad_glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC) load(userptr, "glProgramUniform3i64vNV");
    sf_glad_glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC) load(userptr, "glProgramUniform3ui64NV");
    sf_glad_glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC) load(userptr, "glProgramUniform3ui64vNV");
    sf_glad_glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC) load(userptr, "glProgramUniform4i64NV");
    sf_glad_glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC) load(userptr, "glProgramUniform4i64vNV");
    sf_glad_glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC) load(userptr, "glProgramUniform4ui64NV");
    sf_glad_glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC) load(userptr, "glProgramUniform4ui64vNV");
    sf_glad_glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC) load(userptr, "glUniform1i64NV");
    sf_glad_glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC) load(userptr, "glUniform1i64vNV");
    sf_glad_glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC) load(userptr, "glUniform1ui64NV");
    sf_glad_glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC) load(userptr, "glUniform1ui64vNV");
    sf_glad_glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC) load(userptr, "glUniform2i64NV");
    sf_glad_glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC) load(userptr, "glUniform2i64vNV");
    sf_glad_glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC) load(userptr, "glUniform2ui64NV");
    sf_glad_glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC) load(userptr, "glUniform2ui64vNV");
    sf_glad_glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC) load(userptr, "glUniform3i64NV");
    sf_glad_glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC) load(userptr, "glUniform3i64vNV");
    sf_glad_glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC) load(userptr, "glUniform3ui64NV");
    sf_glad_glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC) load(userptr, "glUniform3ui64vNV");
    sf_glad_glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC) load(userptr, "glUniform4i64NV");
    sf_glad_glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC) load(userptr, "glUniform4i64vNV");
    sf_glad_glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC) load(userptr, "glUniform4ui64NV");
    sf_glad_glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC) load(userptr, "glUniform4ui64vNV");
}
static void sf_glad_gl_load_GL_AMD_interleaved_elements( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_interleaved_elements) return;
    sf_glad_glVertexAttribParameteriAMD = (PFNGLVERTEXATTRIBPARAMETERIAMDPROC) load(userptr, "glVertexAttribParameteriAMD");
}
static void sf_glad_gl_load_GL_AMD_multi_draw_indirect( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_multi_draw_indirect) return;
    sf_glad_glMultiDrawArraysIndirectAMD = (PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) load(userptr, "glMultiDrawArraysIndirectAMD");
    sf_glad_glMultiDrawElementsIndirectAMD = (PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) load(userptr, "glMultiDrawElementsIndirectAMD");
}
static void sf_glad_gl_load_GL_AMD_name_gen_delete( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_name_gen_delete) return;
    sf_glad_glDeleteNamesAMD = (PFNGLDELETENAMESAMDPROC) load(userptr, "glDeleteNamesAMD");
    sf_glad_glGenNamesAMD = (PFNGLGENNAMESAMDPROC) load(userptr, "glGenNamesAMD");
    sf_glad_glIsNameAMD = (PFNGLISNAMEAMDPROC) load(userptr, "glIsNameAMD");
}
static void sf_glad_gl_load_GL_AMD_occlusion_query_event( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_occlusion_query_event) return;
    sf_glad_glQueryObjectParameteruiAMD = (PFNGLQUERYOBJECTPARAMETERUIAMDPROC) load(userptr, "glQueryObjectParameteruiAMD");
}
static void sf_glad_gl_load_GL_AMD_performance_monitor( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_performance_monitor) return;
    sf_glad_glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC) load(userptr, "glBeginPerfMonitorAMD");
    sf_glad_glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC) load(userptr, "glDeletePerfMonitorsAMD");
    sf_glad_glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC) load(userptr, "glEndPerfMonitorAMD");
    sf_glad_glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC) load(userptr, "glGenPerfMonitorsAMD");
    sf_glad_glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) load(userptr, "glGetPerfMonitorCounterDataAMD");
    sf_glad_glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) load(userptr, "glGetPerfMonitorCounterInfoAMD");
    sf_glad_glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) load(userptr, "glGetPerfMonitorCounterStringAMD");
    sf_glad_glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC) load(userptr, "glGetPerfMonitorCountersAMD");
    sf_glad_glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) load(userptr, "glGetPerfMonitorGroupStringAMD");
    sf_glad_glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC) load(userptr, "glGetPerfMonitorGroupsAMD");
    sf_glad_glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) load(userptr, "glSelectPerfMonitorCountersAMD");
}
static void sf_glad_gl_load_GL_AMD_sample_positions( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_sample_positions) return;
    sf_glad_glSetMultisamplefvAMD = (PFNGLSETMULTISAMPLEFVAMDPROC) load(userptr, "glSetMultisamplefvAMD");
}
static void sf_glad_gl_load_GL_AMD_sparse_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_sparse_texture) return;
    sf_glad_glTexStorageSparseAMD = (PFNGLTEXSTORAGESPARSEAMDPROC) load(userptr, "glTexStorageSparseAMD");
    sf_glad_glTextureStorageSparseAMD = (PFNGLTEXTURESTORAGESPARSEAMDPROC) load(userptr, "glTextureStorageSparseAMD");
}
static void sf_glad_gl_load_GL_AMD_stencil_operation_extended( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_stencil_operation_extended) return;
    sf_glad_glStencilOpValueAMD = (PFNGLSTENCILOPVALUEAMDPROC) load(userptr, "glStencilOpValueAMD");
}
static void sf_glad_gl_load_GL_AMD_vertex_shader_tessellator( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_AMD_vertex_shader_tessellator) return;
    sf_glad_glTessellationFactorAMD = (PFNGLTESSELLATIONFACTORAMDPROC) load(userptr, "glTessellationFactorAMD");
    sf_glad_glTessellationModeAMD = (PFNGLTESSELLATIONMODEAMDPROC) load(userptr, "glTessellationModeAMD");
}
static void sf_glad_gl_load_GL_APPLE_element_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_element_array) return;
    sf_glad_glDrawElementArrayAPPLE = (PFNGLDRAWELEMENTARRAYAPPLEPROC) load(userptr, "glDrawElementArrayAPPLE");
    sf_glad_glDrawRangeElementArrayAPPLE = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) load(userptr, "glDrawRangeElementArrayAPPLE");
    sf_glad_glElementPointerAPPLE = (PFNGLELEMENTPOINTERAPPLEPROC) load(userptr, "glElementPointerAPPLE");
    sf_glad_glMultiDrawElementArrayAPPLE = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) load(userptr, "glMultiDrawElementArrayAPPLE");
    sf_glad_glMultiDrawRangeElementArrayAPPLE = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) load(userptr, "glMultiDrawRangeElementArrayAPPLE");
}
static void sf_glad_gl_load_GL_APPLE_fence( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_fence) return;
    sf_glad_glDeleteFencesAPPLE = (PFNGLDELETEFENCESAPPLEPROC) load(userptr, "glDeleteFencesAPPLE");
    sf_glad_glFinishFenceAPPLE = (PFNGLFINISHFENCEAPPLEPROC) load(userptr, "glFinishFenceAPPLE");
    sf_glad_glFinishObjectAPPLE = (PFNGLFINISHOBJECTAPPLEPROC) load(userptr, "glFinishObjectAPPLE");
    sf_glad_glGenFencesAPPLE = (PFNGLGENFENCESAPPLEPROC) load(userptr, "glGenFencesAPPLE");
    sf_glad_glIsFenceAPPLE = (PFNGLISFENCEAPPLEPROC) load(userptr, "glIsFenceAPPLE");
    sf_glad_glSetFenceAPPLE = (PFNGLSETFENCEAPPLEPROC) load(userptr, "glSetFenceAPPLE");
    sf_glad_glTestFenceAPPLE = (PFNGLTESTFENCEAPPLEPROC) load(userptr, "glTestFenceAPPLE");
    sf_glad_glTestObjectAPPLE = (PFNGLTESTOBJECTAPPLEPROC) load(userptr, "glTestObjectAPPLE");
}
static void sf_glad_gl_load_GL_APPLE_flush_buffer_range( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_flush_buffer_range) return;
    sf_glad_glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC) load(userptr, "glBufferParameteriAPPLE");
    sf_glad_glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) load(userptr, "glFlushMappedBufferRangeAPPLE");
}
static void sf_glad_gl_load_GL_APPLE_object_purgeable( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_object_purgeable) return;
    sf_glad_glGetObjectParameterivAPPLE = (PFNGLGETOBJECTPARAMETERIVAPPLEPROC) load(userptr, "glGetObjectParameterivAPPLE");
    sf_glad_glObjectPurgeableAPPLE = (PFNGLOBJECTPURGEABLEAPPLEPROC) load(userptr, "glObjectPurgeableAPPLE");
    sf_glad_glObjectUnpurgeableAPPLE = (PFNGLOBJECTUNPURGEABLEAPPLEPROC) load(userptr, "glObjectUnpurgeableAPPLE");
}
static void sf_glad_gl_load_GL_APPLE_texture_range( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_texture_range) return;
    sf_glad_glGetTexParameterPointervAPPLE = (PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) load(userptr, "glGetTexParameterPointervAPPLE");
    sf_glad_glTextureRangeAPPLE = (PFNGLTEXTURERANGEAPPLEPROC) load(userptr, "glTextureRangeAPPLE");
}
static void sf_glad_gl_load_GL_APPLE_vertex_array_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_vertex_array_object) return;
    sf_glad_glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC) load(userptr, "glBindVertexArrayAPPLE");
    sf_glad_glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC) load(userptr, "glDeleteVertexArraysAPPLE");
    sf_glad_glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC) load(userptr, "glGenVertexArraysAPPLE");
    sf_glad_glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC) load(userptr, "glIsVertexArrayAPPLE");
}
static void sf_glad_gl_load_GL_APPLE_vertex_array_range( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_vertex_array_range) return;
    sf_glad_glFlushVertexArrayRangeAPPLE = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) load(userptr, "glFlushVertexArrayRangeAPPLE");
    sf_glad_glVertexArrayParameteriAPPLE = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) load(userptr, "glVertexArrayParameteriAPPLE");
    sf_glad_glVertexArrayRangeAPPLE = (PFNGLVERTEXARRAYRANGEAPPLEPROC) load(userptr, "glVertexArrayRangeAPPLE");
}
static void sf_glad_gl_load_GL_APPLE_vertex_program_evaluators( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_vertex_program_evaluators) return;
    sf_glad_glDisableVertexAttribAPPLE = (PFNGLDISABLEVERTEXATTRIBAPPLEPROC) load(userptr, "glDisableVertexAttribAPPLE");
    sf_glad_glEnableVertexAttribAPPLE = (PFNGLENABLEVERTEXATTRIBAPPLEPROC) load(userptr, "glEnableVertexAttribAPPLE");
    sf_glad_glIsVertexAttribEnabledAPPLE = (PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) load(userptr, "glIsVertexAttribEnabledAPPLE");
    sf_glad_glMapVertexAttrib1dAPPLE = (PFNGLMAPVERTEXATTRIB1DAPPLEPROC) load(userptr, "glMapVertexAttrib1dAPPLE");
    sf_glad_glMapVertexAttrib1fAPPLE = (PFNGLMAPVERTEXATTRIB1FAPPLEPROC) load(userptr, "glMapVertexAttrib1fAPPLE");
    sf_glad_glMapVertexAttrib2dAPPLE = (PFNGLMAPVERTEXATTRIB2DAPPLEPROC) load(userptr, "glMapVertexAttrib2dAPPLE");
    sf_glad_glMapVertexAttrib2fAPPLE = (PFNGLMAPVERTEXATTRIB2FAPPLEPROC) load(userptr, "glMapVertexAttrib2fAPPLE");
}
static void sf_glad_gl_load_GL_ARB_ES2_compatibility( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_ES2_compatibility) return;
    sf_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC) load(userptr, "glClearDepthf");
    sf_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC) load(userptr, "glDepthRangef");
    sf_glad_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) load(userptr, "glGetShaderPrecisionFormat");
    sf_glad_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) load(userptr, "glReleaseShaderCompiler");
    sf_glad_glShaderBinary = (PFNGLSHADERBINARYPROC) load(userptr, "glShaderBinary");
}
static void sf_glad_gl_load_GL_ARB_ES3_1_compatibility( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_ES3_1_compatibility) return;
    sf_glad_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC) load(userptr, "glMemoryBarrierByRegion");
}
static void sf_glad_gl_load_GL_ARB_ES3_2_compatibility( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_ES3_2_compatibility) return;
    sf_glad_glPrimitiveBoundingBoxARB = (PFNGLPRIMITIVEBOUNDINGBOXARBPROC) load(userptr, "glPrimitiveBoundingBoxARB");
}
static void sf_glad_gl_load_GL_ARB_base_instance( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_base_instance) return;
    sf_glad_glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) load(userptr, "glDrawArraysInstancedBaseInstance");
    sf_glad_glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) load(userptr, "glDrawElementsInstancedBaseInstance");
    sf_glad_glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) load(userptr, "glDrawElementsInstancedBaseVertexBaseInstance");
}
static void sf_glad_gl_load_GL_ARB_bindless_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_bindless_texture) return;
    sf_glad_glGetImageHandleARB = (PFNGLGETIMAGEHANDLEARBPROC) load(userptr, "glGetImageHandleARB");
    sf_glad_glGetTextureHandleARB = (PFNGLGETTEXTUREHANDLEARBPROC) load(userptr, "glGetTextureHandleARB");
    sf_glad_glGetTextureSamplerHandleARB = (PFNGLGETTEXTURESAMPLERHANDLEARBPROC) load(userptr, "glGetTextureSamplerHandleARB");
    sf_glad_glGetVertexAttribLui64vARB = (PFNGLGETVERTEXATTRIBLUI64VARBPROC) load(userptr, "glGetVertexAttribLui64vARB");
    sf_glad_glIsImageHandleResidentARB = (PFNGLISIMAGEHANDLERESIDENTARBPROC) load(userptr, "glIsImageHandleResidentARB");
    sf_glad_glIsTextureHandleResidentARB = (PFNGLISTEXTUREHANDLERESIDENTARBPROC) load(userptr, "glIsTextureHandleResidentARB");
    sf_glad_glMakeImageHandleNonResidentARB = (PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) load(userptr, "glMakeImageHandleNonResidentARB");
    sf_glad_glMakeImageHandleResidentARB = (PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) load(userptr, "glMakeImageHandleResidentARB");
    sf_glad_glMakeTextureHandleNonResidentARB = (PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) load(userptr, "glMakeTextureHandleNonResidentARB");
    sf_glad_glMakeTextureHandleResidentARB = (PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) load(userptr, "glMakeTextureHandleResidentARB");
    sf_glad_glProgramUniformHandleui64ARB = (PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) load(userptr, "glProgramUniformHandleui64ARB");
    sf_glad_glProgramUniformHandleui64vARB = (PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) load(userptr, "glProgramUniformHandleui64vARB");
    sf_glad_glUniformHandleui64ARB = (PFNGLUNIFORMHANDLEUI64ARBPROC) load(userptr, "glUniformHandleui64ARB");
    sf_glad_glUniformHandleui64vARB = (PFNGLUNIFORMHANDLEUI64VARBPROC) load(userptr, "glUniformHandleui64vARB");
    sf_glad_glVertexAttribL1ui64ARB = (PFNGLVERTEXATTRIBL1UI64ARBPROC) load(userptr, "glVertexAttribL1ui64ARB");
    sf_glad_glVertexAttribL1ui64vARB = (PFNGLVERTEXATTRIBL1UI64VARBPROC) load(userptr, "glVertexAttribL1ui64vARB");
}
static void sf_glad_gl_load_GL_ARB_blend_func_extended( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_blend_func_extended) return;
    sf_glad_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) load(userptr, "glBindFragDataLocationIndexed");
    sf_glad_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) load(userptr, "glGetFragDataIndex");
}
static void sf_glad_gl_load_GL_ARB_buffer_storage( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_buffer_storage) return;
    sf_glad_glBufferStorage = (PFNGLBUFFERSTORAGEPROC) load(userptr, "glBufferStorage");
}
static void sf_glad_gl_load_GL_ARB_cl_event( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_cl_event) return;
    sf_glad_glCreateSyncFromCLeventARB = (PFNGLCREATESYNCFROMCLEVENTARBPROC) load(userptr, "glCreateSyncFromCLeventARB");
}
static void sf_glad_gl_load_GL_ARB_clear_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_clear_buffer_object) return;
    sf_glad_glClearBufferData = (PFNGLCLEARBUFFERDATAPROC) load(userptr, "glClearBufferData");
    sf_glad_glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC) load(userptr, "glClearBufferSubData");
}
static void sf_glad_gl_load_GL_ARB_clear_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_clear_texture) return;
    sf_glad_glClearTexImage = (PFNGLCLEARTEXIMAGEPROC) load(userptr, "glClearTexImage");
    sf_glad_glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC) load(userptr, "glClearTexSubImage");
}
static void sf_glad_gl_load_GL_ARB_clip_control( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_clip_control) return;
    sf_glad_glClipControl = (PFNGLCLIPCONTROLPROC) load(userptr, "glClipControl");
}
static void sf_glad_gl_load_GL_ARB_color_buffer_float( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_color_buffer_float) return;
    sf_glad_glClampColorARB = (PFNGLCLAMPCOLORARBPROC) load(userptr, "glClampColorARB");
}
static void sf_glad_gl_load_GL_ARB_compute_shader( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_compute_shader) return;
    sf_glad_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) load(userptr, "glDispatchCompute");
    sf_glad_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) load(userptr, "glDispatchComputeIndirect");
}
static void sf_glad_gl_load_GL_ARB_compute_variable_group_size( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_compute_variable_group_size) return;
    sf_glad_glDispatchComputeGroupSizeARB = (PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) load(userptr, "glDispatchComputeGroupSizeARB");
}
static void sf_glad_gl_load_GL_ARB_copy_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_copy_buffer) return;
    sf_glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load(userptr, "glCopyBufferSubData");
}
static void sf_glad_gl_load_GL_ARB_copy_image( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_copy_image) return;
    sf_glad_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC) load(userptr, "glCopyImageSubData");
}
static void sf_glad_gl_load_GL_ARB_debug_output( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_debug_output) return;
    sf_glad_glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC) load(userptr, "glDebugMessageCallbackARB");
    sf_glad_glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC) load(userptr, "glDebugMessageControlARB");
    sf_glad_glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC) load(userptr, "glDebugMessageInsertARB");
    sf_glad_glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC) load(userptr, "glGetDebugMessageLogARB");
}
static void sf_glad_gl_load_GL_ARB_direct_state_access( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_direct_state_access) return;
    sf_glad_glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC) load(userptr, "glBindTextureUnit");
    sf_glad_glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC) load(userptr, "glBlitNamedFramebuffer");
    sf_glad_glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckNamedFramebufferStatus");
    sf_glad_glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC) load(userptr, "glClearNamedBufferData");
    sf_glad_glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC) load(userptr, "glClearNamedBufferSubData");
    sf_glad_glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) load(userptr, "glClearNamedFramebufferfi");
    sf_glad_glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) load(userptr, "glClearNamedFramebufferfv");
    sf_glad_glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) load(userptr, "glClearNamedFramebufferiv");
    sf_glad_glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) load(userptr, "glClearNamedFramebufferuiv");
    sf_glad_glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) load(userptr, "glCompressedTextureSubImage1D");
    sf_glad_glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) load(userptr, "glCompressedTextureSubImage2D");
    sf_glad_glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) load(userptr, "glCompressedTextureSubImage3D");
    sf_glad_glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC) load(userptr, "glCopyNamedBufferSubData");
    sf_glad_glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC) load(userptr, "glCopyTextureSubImage1D");
    sf_glad_glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC) load(userptr, "glCopyTextureSubImage2D");
    sf_glad_glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC) load(userptr, "glCopyTextureSubImage3D");
    sf_glad_glCreateBuffers = (PFNGLCREATEBUFFERSPROC) load(userptr, "glCreateBuffers");
    sf_glad_glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC) load(userptr, "glCreateFramebuffers");
    sf_glad_glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC) load(userptr, "glCreateProgramPipelines");
    sf_glad_glCreateQueries = (PFNGLCREATEQUERIESPROC) load(userptr, "glCreateQueries");
    sf_glad_glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC) load(userptr, "glCreateRenderbuffers");
    sf_glad_glCreateSamplers = (PFNGLCREATESAMPLERSPROC) load(userptr, "glCreateSamplers");
    sf_glad_glCreateTextures = (PFNGLCREATETEXTURESPROC) load(userptr, "glCreateTextures");
    sf_glad_glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC) load(userptr, "glCreateTransformFeedbacks");
    sf_glad_glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC) load(userptr, "glCreateVertexArrays");
    sf_glad_glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC) load(userptr, "glDisableVertexArrayAttrib");
    sf_glad_glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC) load(userptr, "glEnableVertexArrayAttrib");
    sf_glad_glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) load(userptr, "glFlushMappedNamedBufferRange");
    sf_glad_glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC) load(userptr, "glGenerateTextureMipmap");
    sf_glad_glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) load(userptr, "glGetCompressedTextureImage");
    sf_glad_glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) load(userptr, "glGetNamedBufferParameteri64v");
    sf_glad_glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC) load(userptr, "glGetNamedBufferParameteriv");
    sf_glad_glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC) load(userptr, "glGetNamedBufferPointerv");
    sf_glad_glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC) load(userptr, "glGetNamedBufferSubData");
    sf_glad_glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetNamedFramebufferAttachmentParameteriv");
    sf_glad_glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) load(userptr, "glGetNamedFramebufferParameteriv");
    sf_glad_glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetNamedRenderbufferParameteriv");
    sf_glad_glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC) load(userptr, "glGetQueryBufferObjecti64v");
    sf_glad_glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC) load(userptr, "glGetQueryBufferObjectiv");
    sf_glad_glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC) load(userptr, "glGetQueryBufferObjectui64v");
    sf_glad_glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC) load(userptr, "glGetQueryBufferObjectuiv");
    sf_glad_glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC) load(userptr, "glGetTextureImage");
    sf_glad_glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC) load(userptr, "glGetTextureLevelParameterfv");
    sf_glad_glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC) load(userptr, "glGetTextureLevelParameteriv");
    sf_glad_glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC) load(userptr, "glGetTextureParameterIiv");
    sf_glad_glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC) load(userptr, "glGetTextureParameterIuiv");
    sf_glad_glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC) load(userptr, "glGetTextureParameterfv");
    sf_glad_glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC) load(userptr, "glGetTextureParameteriv");
    sf_glad_glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC) load(userptr, "glGetTransformFeedbacki64_v");
    sf_glad_glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC) load(userptr, "glGetTransformFeedbacki_v");
    sf_glad_glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC) load(userptr, "glGetTransformFeedbackiv");
    sf_glad_glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC) load(userptr, "glGetVertexArrayIndexed64iv");
    sf_glad_glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC) load(userptr, "glGetVertexArrayIndexediv");
    sf_glad_glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC) load(userptr, "glGetVertexArrayiv");
    sf_glad_glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) load(userptr, "glInvalidateNamedFramebufferData");
    sf_glad_glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) load(userptr, "glInvalidateNamedFramebufferSubData");
    sf_glad_glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC) load(userptr, "glMapNamedBuffer");
    sf_glad_glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC) load(userptr, "glMapNamedBufferRange");
    sf_glad_glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC) load(userptr, "glNamedBufferData");
    sf_glad_glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC) load(userptr, "glNamedBufferStorage");
    sf_glad_glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC) load(userptr, "glNamedBufferSubData");
    sf_glad_glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) load(userptr, "glNamedFramebufferDrawBuffer");
    sf_glad_glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) load(userptr, "glNamedFramebufferDrawBuffers");
    sf_glad_glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) load(userptr, "glNamedFramebufferParameteri");
    sf_glad_glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) load(userptr, "glNamedFramebufferReadBuffer");
    sf_glad_glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glNamedFramebufferRenderbuffer");
    sf_glad_glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) load(userptr, "glNamedFramebufferTexture");
    sf_glad_glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glNamedFramebufferTextureLayer");
    sf_glad_glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC) load(userptr, "glNamedRenderbufferStorage");
    sf_glad_glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glNamedRenderbufferStorageMultisample");
    sf_glad_glTextureBuffer = (PFNGLTEXTUREBUFFERPROC) load(userptr, "glTextureBuffer");
    sf_glad_glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC) load(userptr, "glTextureBufferRange");
    sf_glad_glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC) load(userptr, "glTextureParameterIiv");
    sf_glad_glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC) load(userptr, "glTextureParameterIuiv");
    sf_glad_glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC) load(userptr, "glTextureParameterf");
    sf_glad_glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC) load(userptr, "glTextureParameterfv");
    sf_glad_glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC) load(userptr, "glTextureParameteri");
    sf_glad_glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC) load(userptr, "glTextureParameteriv");
    sf_glad_glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC) load(userptr, "glTextureStorage1D");
    sf_glad_glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC) load(userptr, "glTextureStorage2D");
    sf_glad_glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) load(userptr, "glTextureStorage2DMultisample");
    sf_glad_glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC) load(userptr, "glTextureStorage3D");
    sf_glad_glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) load(userptr, "glTextureStorage3DMultisample");
    sf_glad_glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC) load(userptr, "glTextureSubImage1D");
    sf_glad_glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC) load(userptr, "glTextureSubImage2D");
    sf_glad_glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC) load(userptr, "glTextureSubImage3D");
    sf_glad_glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) load(userptr, "glTransformFeedbackBufferBase");
    sf_glad_glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) load(userptr, "glTransformFeedbackBufferRange");
    sf_glad_glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC) load(userptr, "glUnmapNamedBuffer");
    sf_glad_glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC) load(userptr, "glVertexArrayAttribBinding");
    sf_glad_glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC) load(userptr, "glVertexArrayAttribFormat");
    sf_glad_glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC) load(userptr, "glVertexArrayAttribIFormat");
    sf_glad_glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC) load(userptr, "glVertexArrayAttribLFormat");
    sf_glad_glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC) load(userptr, "glVertexArrayBindingDivisor");
    sf_glad_glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC) load(userptr, "glVertexArrayElementBuffer");
    sf_glad_glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC) load(userptr, "glVertexArrayVertexBuffer");
    sf_glad_glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC) load(userptr, "glVertexArrayVertexBuffers");
}
static void sf_glad_gl_load_GL_ARB_draw_buffers( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_draw_buffers) return;
    sf_glad_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC) load(userptr, "glDrawBuffersARB");
}
static void sf_glad_gl_load_GL_ARB_draw_buffers_blend( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_draw_buffers_blend) return;
    sf_glad_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC) load(userptr, "glBlendEquationSeparateiARB");
    sf_glad_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC) load(userptr, "glBlendEquationiARB");
    sf_glad_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC) load(userptr, "glBlendFuncSeparateiARB");
    sf_glad_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC) load(userptr, "glBlendFunciARB");
}
static void sf_glad_gl_load_GL_ARB_draw_elements_base_vertex( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_draw_elements_base_vertex) return;
    sf_glad_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glDrawElementsBaseVertex");
    sf_glad_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load(userptr, "glDrawElementsInstancedBaseVertex");
    sf_glad_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load(userptr, "glDrawRangeElementsBaseVertex");
    sf_glad_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) load(userptr, "glMultiDrawElementsBaseVertex");
}
static void sf_glad_gl_load_GL_ARB_draw_indirect( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_draw_indirect) return;
    sf_glad_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) load(userptr, "glDrawArraysIndirect");
    sf_glad_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) load(userptr, "glDrawElementsIndirect");
}
static void sf_glad_gl_load_GL_ARB_draw_instanced( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_draw_instanced) return;
    sf_glad_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC) load(userptr, "glDrawArraysInstancedARB");
    sf_glad_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC) load(userptr, "glDrawElementsInstancedARB");
}
static void sf_glad_gl_load_GL_ARB_fragment_program( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_fragment_program) return;
    sf_glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC) load(userptr, "glBindProgramARB");
    sf_glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC) load(userptr, "glDeleteProgramsARB");
    sf_glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC) load(userptr, "glGenProgramsARB");
    sf_glad_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC) load(userptr, "glGetProgramEnvParameterdvARB");
    sf_glad_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC) load(userptr, "glGetProgramEnvParameterfvARB");
    sf_glad_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) load(userptr, "glGetProgramLocalParameterdvARB");
    sf_glad_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) load(userptr, "glGetProgramLocalParameterfvARB");
    sf_glad_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC) load(userptr, "glGetProgramStringARB");
    sf_glad_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC) load(userptr, "glGetProgramivARB");
    sf_glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC) load(userptr, "glIsProgramARB");
    sf_glad_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC) load(userptr, "glProgramEnvParameter4dARB");
    sf_glad_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC) load(userptr, "glProgramEnvParameter4dvARB");
    sf_glad_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC) load(userptr, "glProgramEnvParameter4fARB");
    sf_glad_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC) load(userptr, "glProgramEnvParameter4fvARB");
    sf_glad_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC) load(userptr, "glProgramLocalParameter4dARB");
    sf_glad_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) load(userptr, "glProgramLocalParameter4dvARB");
    sf_glad_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC) load(userptr, "glProgramLocalParameter4fARB");
    sf_glad_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) load(userptr, "glProgramLocalParameter4fvARB");
    sf_glad_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC) load(userptr, "glProgramStringARB");
}
static void sf_glad_gl_load_GL_ARB_framebuffer_no_attachments( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_framebuffer_no_attachments) return;
    sf_glad_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) load(userptr, "glFramebufferParameteri");
    sf_glad_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) load(userptr, "glGetFramebufferParameteriv");
}
static void sf_glad_gl_load_GL_ARB_framebuffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_framebuffer_object) return;
    sf_glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load(userptr, "glBindFramebuffer");
    sf_glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load(userptr, "glBindRenderbuffer");
    sf_glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load(userptr, "glBlitFramebuffer");
    sf_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load(userptr, "glCheckFramebufferStatus");
    sf_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load(userptr, "glDeleteFramebuffers");
    sf_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load(userptr, "glDeleteRenderbuffers");
    sf_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load(userptr, "glFramebufferRenderbuffer");
    sf_glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load(userptr, "glFramebufferTexture1D");
    sf_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load(userptr, "glFramebufferTexture2D");
    sf_glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load(userptr, "glFramebufferTexture3D");
    sf_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load(userptr, "glFramebufferTextureLayer");
    sf_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load(userptr, "glGenFramebuffers");
    sf_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load(userptr, "glGenRenderbuffers");
    sf_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load(userptr, "glGenerateMipmap");
    sf_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load(userptr, "glGetFramebufferAttachmentParameteriv");
    sf_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load(userptr, "glGetRenderbufferParameteriv");
    sf_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load(userptr, "glIsFramebuffer");
    sf_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load(userptr, "glIsRenderbuffer");
    sf_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load(userptr, "glRenderbufferStorage");
    sf_glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load(userptr, "glRenderbufferStorageMultisample");
}
static void sf_glad_gl_load_GL_ARB_geometry_shader4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_geometry_shader4) return;
    sf_glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC) load(userptr, "glFramebufferTextureARB");
    sf_glad_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) load(userptr, "glFramebufferTextureFaceARB");
    sf_glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) load(userptr, "glFramebufferTextureLayerARB");
    sf_glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC) load(userptr, "glProgramParameteriARB");
}
static void sf_glad_gl_load_GL_ARB_get_program_binary( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_get_program_binary) return;
    sf_glad_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) load(userptr, "glGetProgramBinary");
    sf_glad_glProgramBinary = (PFNGLPROGRAMBINARYPROC) load(userptr, "glProgramBinary");
    sf_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
}
static void sf_glad_gl_load_GL_ARB_get_texture_sub_image( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_get_texture_sub_image) return;
    sf_glad_glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) load(userptr, "glGetCompressedTextureSubImage");
    sf_glad_glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC) load(userptr, "glGetTextureSubImage");
}
static void sf_glad_gl_load_GL_ARB_gl_spirv( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_gl_spirv) return;
    sf_glad_glSpecializeShaderARB = (PFNGLSPECIALIZESHADERARBPROC) load(userptr, "glSpecializeShaderARB");
}
static void sf_glad_gl_load_GL_ARB_gpu_shader_fp64( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_gpu_shader_fp64) return;
    sf_glad_glGetUniformdv = (PFNGLGETUNIFORMDVPROC) load(userptr, "glGetUniformdv");
    sf_glad_glUniform1d = (PFNGLUNIFORM1DPROC) load(userptr, "glUniform1d");
    sf_glad_glUniform1dv = (PFNGLUNIFORM1DVPROC) load(userptr, "glUniform1dv");
    sf_glad_glUniform2d = (PFNGLUNIFORM2DPROC) load(userptr, "glUniform2d");
    sf_glad_glUniform2dv = (PFNGLUNIFORM2DVPROC) load(userptr, "glUniform2dv");
    sf_glad_glUniform3d = (PFNGLUNIFORM3DPROC) load(userptr, "glUniform3d");
    sf_glad_glUniform3dv = (PFNGLUNIFORM3DVPROC) load(userptr, "glUniform3dv");
    sf_glad_glUniform4d = (PFNGLUNIFORM4DPROC) load(userptr, "glUniform4d");
    sf_glad_glUniform4dv = (PFNGLUNIFORM4DVPROC) load(userptr, "glUniform4dv");
    sf_glad_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC) load(userptr, "glUniformMatrix2dv");
    sf_glad_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) load(userptr, "glUniformMatrix2x3dv");
    sf_glad_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) load(userptr, "glUniformMatrix2x4dv");
    sf_glad_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC) load(userptr, "glUniformMatrix3dv");
    sf_glad_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) load(userptr, "glUniformMatrix3x2dv");
    sf_glad_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) load(userptr, "glUniformMatrix3x4dv");
    sf_glad_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC) load(userptr, "glUniformMatrix4dv");
    sf_glad_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) load(userptr, "glUniformMatrix4x2dv");
    sf_glad_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) load(userptr, "glUniformMatrix4x3dv");
}
static void sf_glad_gl_load_GL_ARB_gpu_shader_int64( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_gpu_shader_int64) return;
    sf_glad_glGetUniformi64vARB = (PFNGLGETUNIFORMI64VARBPROC) load(userptr, "glGetUniformi64vARB");
    sf_glad_glGetUniformui64vARB = (PFNGLGETUNIFORMUI64VARBPROC) load(userptr, "glGetUniformui64vARB");
    sf_glad_glGetnUniformi64vARB = (PFNGLGETNUNIFORMI64VARBPROC) load(userptr, "glGetnUniformi64vARB");
    sf_glad_glGetnUniformui64vARB = (PFNGLGETNUNIFORMUI64VARBPROC) load(userptr, "glGetnUniformui64vARB");
    sf_glad_glProgramUniform1i64ARB = (PFNGLPROGRAMUNIFORM1I64ARBPROC) load(userptr, "glProgramUniform1i64ARB");
    sf_glad_glProgramUniform1i64vARB = (PFNGLPROGRAMUNIFORM1I64VARBPROC) load(userptr, "glProgramUniform1i64vARB");
    sf_glad_glProgramUniform1ui64ARB = (PFNGLPROGRAMUNIFORM1UI64ARBPROC) load(userptr, "glProgramUniform1ui64ARB");
    sf_glad_glProgramUniform1ui64vARB = (PFNGLPROGRAMUNIFORM1UI64VARBPROC) load(userptr, "glProgramUniform1ui64vARB");
    sf_glad_glProgramUniform2i64ARB = (PFNGLPROGRAMUNIFORM2I64ARBPROC) load(userptr, "glProgramUniform2i64ARB");
    sf_glad_glProgramUniform2i64vARB = (PFNGLPROGRAMUNIFORM2I64VARBPROC) load(userptr, "glProgramUniform2i64vARB");
    sf_glad_glProgramUniform2ui64ARB = (PFNGLPROGRAMUNIFORM2UI64ARBPROC) load(userptr, "glProgramUniform2ui64ARB");
    sf_glad_glProgramUniform2ui64vARB = (PFNGLPROGRAMUNIFORM2UI64VARBPROC) load(userptr, "glProgramUniform2ui64vARB");
    sf_glad_glProgramUniform3i64ARB = (PFNGLPROGRAMUNIFORM3I64ARBPROC) load(userptr, "glProgramUniform3i64ARB");
    sf_glad_glProgramUniform3i64vARB = (PFNGLPROGRAMUNIFORM3I64VARBPROC) load(userptr, "glProgramUniform3i64vARB");
    sf_glad_glProgramUniform3ui64ARB = (PFNGLPROGRAMUNIFORM3UI64ARBPROC) load(userptr, "glProgramUniform3ui64ARB");
    sf_glad_glProgramUniform3ui64vARB = (PFNGLPROGRAMUNIFORM3UI64VARBPROC) load(userptr, "glProgramUniform3ui64vARB");
    sf_glad_glProgramUniform4i64ARB = (PFNGLPROGRAMUNIFORM4I64ARBPROC) load(userptr, "glProgramUniform4i64ARB");
    sf_glad_glProgramUniform4i64vARB = (PFNGLPROGRAMUNIFORM4I64VARBPROC) load(userptr, "glProgramUniform4i64vARB");
    sf_glad_glProgramUniform4ui64ARB = (PFNGLPROGRAMUNIFORM4UI64ARBPROC) load(userptr, "glProgramUniform4ui64ARB");
    sf_glad_glProgramUniform4ui64vARB = (PFNGLPROGRAMUNIFORM4UI64VARBPROC) load(userptr, "glProgramUniform4ui64vARB");
    sf_glad_glUniform1i64ARB = (PFNGLUNIFORM1I64ARBPROC) load(userptr, "glUniform1i64ARB");
    sf_glad_glUniform1i64vARB = (PFNGLUNIFORM1I64VARBPROC) load(userptr, "glUniform1i64vARB");
    sf_glad_glUniform1ui64ARB = (PFNGLUNIFORM1UI64ARBPROC) load(userptr, "glUniform1ui64ARB");
    sf_glad_glUniform1ui64vARB = (PFNGLUNIFORM1UI64VARBPROC) load(userptr, "glUniform1ui64vARB");
    sf_glad_glUniform2i64ARB = (PFNGLUNIFORM2I64ARBPROC) load(userptr, "glUniform2i64ARB");
    sf_glad_glUniform2i64vARB = (PFNGLUNIFORM2I64VARBPROC) load(userptr, "glUniform2i64vARB");
    sf_glad_glUniform2ui64ARB = (PFNGLUNIFORM2UI64ARBPROC) load(userptr, "glUniform2ui64ARB");
    sf_glad_glUniform2ui64vARB = (PFNGLUNIFORM2UI64VARBPROC) load(userptr, "glUniform2ui64vARB");
    sf_glad_glUniform3i64ARB = (PFNGLUNIFORM3I64ARBPROC) load(userptr, "glUniform3i64ARB");
    sf_glad_glUniform3i64vARB = (PFNGLUNIFORM3I64VARBPROC) load(userptr, "glUniform3i64vARB");
    sf_glad_glUniform3ui64ARB = (PFNGLUNIFORM3UI64ARBPROC) load(userptr, "glUniform3ui64ARB");
    sf_glad_glUniform3ui64vARB = (PFNGLUNIFORM3UI64VARBPROC) load(userptr, "glUniform3ui64vARB");
    sf_glad_glUniform4i64ARB = (PFNGLUNIFORM4I64ARBPROC) load(userptr, "glUniform4i64ARB");
    sf_glad_glUniform4i64vARB = (PFNGLUNIFORM4I64VARBPROC) load(userptr, "glUniform4i64vARB");
    sf_glad_glUniform4ui64ARB = (PFNGLUNIFORM4UI64ARBPROC) load(userptr, "glUniform4ui64ARB");
    sf_glad_glUniform4ui64vARB = (PFNGLUNIFORM4UI64VARBPROC) load(userptr, "glUniform4ui64vARB");
}
static void sf_glad_gl_load_GL_ARB_imaging( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_imaging) return;
    sf_glad_glBlendColor = (PFNGLBLENDCOLORPROC) load(userptr, "glBlendColor");
    sf_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC) load(userptr, "glBlendEquation");
    sf_glad_glColorSubTable = (PFNGLCOLORSUBTABLEPROC) load(userptr, "glColorSubTable");
    sf_glad_glColorTable = (PFNGLCOLORTABLEPROC) load(userptr, "glColorTable");
    sf_glad_glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC) load(userptr, "glColorTableParameterfv");
    sf_glad_glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC) load(userptr, "glColorTableParameteriv");
    sf_glad_glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC) load(userptr, "glConvolutionFilter1D");
    sf_glad_glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC) load(userptr, "glConvolutionFilter2D");
    sf_glad_glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC) load(userptr, "glConvolutionParameterf");
    sf_glad_glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC) load(userptr, "glConvolutionParameterfv");
    sf_glad_glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC) load(userptr, "glConvolutionParameteri");
    sf_glad_glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC) load(userptr, "glConvolutionParameteriv");
    sf_glad_glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC) load(userptr, "glCopyColorSubTable");
    sf_glad_glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC) load(userptr, "glCopyColorTable");
    sf_glad_glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC) load(userptr, "glCopyConvolutionFilter1D");
    sf_glad_glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC) load(userptr, "glCopyConvolutionFilter2D");
    sf_glad_glGetColorTable = (PFNGLGETCOLORTABLEPROC) load(userptr, "glGetColorTable");
    sf_glad_glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC) load(userptr, "glGetColorTableParameterfv");
    sf_glad_glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC) load(userptr, "glGetColorTableParameteriv");
    sf_glad_glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC) load(userptr, "glGetConvolutionFilter");
    sf_glad_glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC) load(userptr, "glGetConvolutionParameterfv");
    sf_glad_glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC) load(userptr, "glGetConvolutionParameteriv");
    sf_glad_glGetHistogram = (PFNGLGETHISTOGRAMPROC) load(userptr, "glGetHistogram");
    sf_glad_glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC) load(userptr, "glGetHistogramParameterfv");
    sf_glad_glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC) load(userptr, "glGetHistogramParameteriv");
    sf_glad_glGetMinmax = (PFNGLGETMINMAXPROC) load(userptr, "glGetMinmax");
    sf_glad_glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC) load(userptr, "glGetMinmaxParameterfv");
    sf_glad_glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC) load(userptr, "glGetMinmaxParameteriv");
    sf_glad_glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC) load(userptr, "glGetSeparableFilter");
    sf_glad_glHistogram = (PFNGLHISTOGRAMPROC) load(userptr, "glHistogram");
    sf_glad_glMinmax = (PFNGLMINMAXPROC) load(userptr, "glMinmax");
    sf_glad_glResetHistogram = (PFNGLRESETHISTOGRAMPROC) load(userptr, "glResetHistogram");
    sf_glad_glResetMinmax = (PFNGLRESETMINMAXPROC) load(userptr, "glResetMinmax");
    sf_glad_glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC) load(userptr, "glSeparableFilter2D");
}
static void sf_glad_gl_load_GL_ARB_indirect_parameters( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_indirect_parameters) return;
    sf_glad_glMultiDrawArraysIndirectCountARB = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) load(userptr, "glMultiDrawArraysIndirectCountARB");
    sf_glad_glMultiDrawElementsIndirectCountARB = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) load(userptr, "glMultiDrawElementsIndirectCountARB");
}
static void sf_glad_gl_load_GL_ARB_instanced_arrays( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_instanced_arrays) return;
    sf_glad_glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC) load(userptr, "glVertexAttribDivisorARB");
}
static void sf_glad_gl_load_GL_ARB_internalformat_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_internalformat_query) return;
    sf_glad_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) load(userptr, "glGetInternalformativ");
}
static void sf_glad_gl_load_GL_ARB_internalformat_query2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_internalformat_query2) return;
    sf_glad_glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC) load(userptr, "glGetInternalformati64v");
}
static void sf_glad_gl_load_GL_ARB_invalidate_subdata( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_invalidate_subdata) return;
    sf_glad_glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC) load(userptr, "glInvalidateBufferData");
    sf_glad_glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC) load(userptr, "glInvalidateBufferSubData");
    sf_glad_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) load(userptr, "glInvalidateFramebuffer");
    sf_glad_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) load(userptr, "glInvalidateSubFramebuffer");
    sf_glad_glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC) load(userptr, "glInvalidateTexImage");
    sf_glad_glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC) load(userptr, "glInvalidateTexSubImage");
}
static void sf_glad_gl_load_GL_ARB_map_buffer_range( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_map_buffer_range) return;
    sf_glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load(userptr, "glFlushMappedBufferRange");
    sf_glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load(userptr, "glMapBufferRange");
}
static void sf_glad_gl_load_GL_ARB_matrix_palette( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_matrix_palette) return;
    sf_glad_glCurrentPaletteMatrixARB = (PFNGLCURRENTPALETTEMATRIXARBPROC) load(userptr, "glCurrentPaletteMatrixARB");
    sf_glad_glMatrixIndexPointerARB = (PFNGLMATRIXINDEXPOINTERARBPROC) load(userptr, "glMatrixIndexPointerARB");
    sf_glad_glMatrixIndexubvARB = (PFNGLMATRIXINDEXUBVARBPROC) load(userptr, "glMatrixIndexubvARB");
    sf_glad_glMatrixIndexuivARB = (PFNGLMATRIXINDEXUIVARBPROC) load(userptr, "glMatrixIndexuivARB");
    sf_glad_glMatrixIndexusvARB = (PFNGLMATRIXINDEXUSVARBPROC) load(userptr, "glMatrixIndexusvARB");
}
static void sf_glad_gl_load_GL_ARB_multi_bind( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_multi_bind) return;
    sf_glad_glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC) load(userptr, "glBindBuffersBase");
    sf_glad_glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC) load(userptr, "glBindBuffersRange");
    sf_glad_glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC) load(userptr, "glBindImageTextures");
    sf_glad_glBindSamplers = (PFNGLBINDSAMPLERSPROC) load(userptr, "glBindSamplers");
    sf_glad_glBindTextures = (PFNGLBINDTEXTURESPROC) load(userptr, "glBindTextures");
    sf_glad_glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC) load(userptr, "glBindVertexBuffers");
}
static void sf_glad_gl_load_GL_ARB_multi_draw_indirect( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_multi_draw_indirect) return;
    sf_glad_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC) load(userptr, "glMultiDrawArraysIndirect");
    sf_glad_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC) load(userptr, "glMultiDrawElementsIndirect");
}
static void sf_glad_gl_load_GL_ARB_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_multisample) return;
    sf_glad_glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC) load(userptr, "glSampleCoverageARB");
}
static void sf_glad_gl_load_GL_ARB_multitexture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_multitexture) return;
    sf_glad_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC) load(userptr, "glActiveTextureARB");
    sf_glad_glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC) load(userptr, "glClientActiveTextureARB");
    sf_glad_glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC) load(userptr, "glMultiTexCoord1dARB");
    sf_glad_glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC) load(userptr, "glMultiTexCoord1dvARB");
    sf_glad_glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC) load(userptr, "glMultiTexCoord1fARB");
    sf_glad_glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC) load(userptr, "glMultiTexCoord1fvARB");
    sf_glad_glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC) load(userptr, "glMultiTexCoord1iARB");
    sf_glad_glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC) load(userptr, "glMultiTexCoord1ivARB");
    sf_glad_glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC) load(userptr, "glMultiTexCoord1sARB");
    sf_glad_glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC) load(userptr, "glMultiTexCoord1svARB");
    sf_glad_glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC) load(userptr, "glMultiTexCoord2dARB");
    sf_glad_glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC) load(userptr, "glMultiTexCoord2dvARB");
    sf_glad_glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC) load(userptr, "glMultiTexCoord2fARB");
    sf_glad_glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC) load(userptr, "glMultiTexCoord2fvARB");
    sf_glad_glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC) load(userptr, "glMultiTexCoord2iARB");
    sf_glad_glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC) load(userptr, "glMultiTexCoord2ivARB");
    sf_glad_glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC) load(userptr, "glMultiTexCoord2sARB");
    sf_glad_glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC) load(userptr, "glMultiTexCoord2svARB");
    sf_glad_glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC) load(userptr, "glMultiTexCoord3dARB");
    sf_glad_glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC) load(userptr, "glMultiTexCoord3dvARB");
    sf_glad_glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC) load(userptr, "glMultiTexCoord3fARB");
    sf_glad_glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC) load(userptr, "glMultiTexCoord3fvARB");
    sf_glad_glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC) load(userptr, "glMultiTexCoord3iARB");
    sf_glad_glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC) load(userptr, "glMultiTexCoord3ivARB");
    sf_glad_glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC) load(userptr, "glMultiTexCoord3sARB");
    sf_glad_glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC) load(userptr, "glMultiTexCoord3svARB");
    sf_glad_glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC) load(userptr, "glMultiTexCoord4dARB");
    sf_glad_glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC) load(userptr, "glMultiTexCoord4dvARB");
    sf_glad_glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC) load(userptr, "glMultiTexCoord4fARB");
    sf_glad_glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC) load(userptr, "glMultiTexCoord4fvARB");
    sf_glad_glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC) load(userptr, "glMultiTexCoord4iARB");
    sf_glad_glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC) load(userptr, "glMultiTexCoord4ivARB");
    sf_glad_glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC) load(userptr, "glMultiTexCoord4sARB");
    sf_glad_glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC) load(userptr, "glMultiTexCoord4svARB");
}
static void sf_glad_gl_load_GL_ARB_occlusion_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_occlusion_query) return;
    sf_glad_glBeginQueryARB = (PFNGLBEGINQUERYARBPROC) load(userptr, "glBeginQueryARB");
    sf_glad_glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC) load(userptr, "glDeleteQueriesARB");
    sf_glad_glEndQueryARB = (PFNGLENDQUERYARBPROC) load(userptr, "glEndQueryARB");
    sf_glad_glGenQueriesARB = (PFNGLGENQUERIESARBPROC) load(userptr, "glGenQueriesARB");
    sf_glad_glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC) load(userptr, "glGetQueryObjectivARB");
    sf_glad_glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC) load(userptr, "glGetQueryObjectuivARB");
    sf_glad_glGetQueryivARB = (PFNGLGETQUERYIVARBPROC) load(userptr, "glGetQueryivARB");
    sf_glad_glIsQueryARB = (PFNGLISQUERYARBPROC) load(userptr, "glIsQueryARB");
}
static void sf_glad_gl_load_GL_ARB_parallel_shader_compile( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_parallel_shader_compile) return;
    sf_glad_glMaxShaderCompilerThreadsARB = (PFNGLMAXSHADERCOMPILERTHREADSARBPROC) load(userptr, "glMaxShaderCompilerThreadsARB");
}
static void sf_glad_gl_load_GL_ARB_point_parameters( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_point_parameters) return;
    sf_glad_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC) load(userptr, "glPointParameterfARB");
    sf_glad_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC) load(userptr, "glPointParameterfvARB");
}
static void sf_glad_gl_load_GL_ARB_polygon_offset_clamp( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_polygon_offset_clamp) return;
    sf_glad_glPolygonOffsetClamp = (PFNGLPOLYGONOFFSETCLAMPPROC) load(userptr, "glPolygonOffsetClamp");
}
static void sf_glad_gl_load_GL_ARB_program_interface_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_program_interface_query) return;
    sf_glad_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) load(userptr, "glGetProgramInterfaceiv");
    sf_glad_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) load(userptr, "glGetProgramResourceIndex");
    sf_glad_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) load(userptr, "glGetProgramResourceLocation");
    sf_glad_glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) load(userptr, "glGetProgramResourceLocationIndex");
    sf_glad_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) load(userptr, "glGetProgramResourceName");
    sf_glad_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) load(userptr, "glGetProgramResourceiv");
}
static void sf_glad_gl_load_GL_ARB_provoking_vertex( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_provoking_vertex) return;
    sf_glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) load(userptr, "glProvokingVertex");
}
static void sf_glad_gl_load_GL_ARB_robustness( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_robustness) return;
    sf_glad_glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC) load(userptr, "glGetGraphicsResetStatusARB");
    sf_glad_glGetnColorTableARB = (PFNGLGETNCOLORTABLEARBPROC) load(userptr, "glGetnColorTableARB");
    sf_glad_glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) load(userptr, "glGetnCompressedTexImageARB");
    sf_glad_glGetnConvolutionFilterARB = (PFNGLGETNCONVOLUTIONFILTERARBPROC) load(userptr, "glGetnConvolutionFilterARB");
    sf_glad_glGetnHistogramARB = (PFNGLGETNHISTOGRAMARBPROC) load(userptr, "glGetnHistogramARB");
    sf_glad_glGetnMapdvARB = (PFNGLGETNMAPDVARBPROC) load(userptr, "glGetnMapdvARB");
    sf_glad_glGetnMapfvARB = (PFNGLGETNMAPFVARBPROC) load(userptr, "glGetnMapfvARB");
    sf_glad_glGetnMapivARB = (PFNGLGETNMAPIVARBPROC) load(userptr, "glGetnMapivARB");
    sf_glad_glGetnMinmaxARB = (PFNGLGETNMINMAXARBPROC) load(userptr, "glGetnMinmaxARB");
    sf_glad_glGetnPixelMapfvARB = (PFNGLGETNPIXELMAPFVARBPROC) load(userptr, "glGetnPixelMapfvARB");
    sf_glad_glGetnPixelMapuivARB = (PFNGLGETNPIXELMAPUIVARBPROC) load(userptr, "glGetnPixelMapuivARB");
    sf_glad_glGetnPixelMapusvARB = (PFNGLGETNPIXELMAPUSVARBPROC) load(userptr, "glGetnPixelMapusvARB");
    sf_glad_glGetnPolygonStippleARB = (PFNGLGETNPOLYGONSTIPPLEARBPROC) load(userptr, "glGetnPolygonStippleARB");
    sf_glad_glGetnSeparableFilterARB = (PFNGLGETNSEPARABLEFILTERARBPROC) load(userptr, "glGetnSeparableFilterARB");
    sf_glad_glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC) load(userptr, "glGetnTexImageARB");
    sf_glad_glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC) load(userptr, "glGetnUniformdvARB");
    sf_glad_glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC) load(userptr, "glGetnUniformfvARB");
    sf_glad_glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC) load(userptr, "glGetnUniformivARB");
    sf_glad_glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC) load(userptr, "glGetnUniformuivARB");
    sf_glad_glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC) load(userptr, "glReadnPixelsARB");
}
static void sf_glad_gl_load_GL_ARB_sample_locations( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_sample_locations) return;
    sf_glad_glEvaluateDepthValuesARB = (PFNGLEVALUATEDEPTHVALUESARBPROC) load(userptr, "glEvaluateDepthValuesARB");
    sf_glad_glFramebufferSampleLocationsfvARB = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) load(userptr, "glFramebufferSampleLocationsfvARB");
    sf_glad_glNamedFramebufferSampleLocationsfvARB = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) load(userptr, "glNamedFramebufferSampleLocationsfvARB");
}
static void sf_glad_gl_load_GL_ARB_sample_shading( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_sample_shading) return;
    sf_glad_glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC) load(userptr, "glMinSampleShadingARB");
}
static void sf_glad_gl_load_GL_ARB_sampler_objects( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_sampler_objects) return;
    sf_glad_glBindSampler = (PFNGLBINDSAMPLERPROC) load(userptr, "glBindSampler");
    sf_glad_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) load(userptr, "glDeleteSamplers");
    sf_glad_glGenSamplers = (PFNGLGENSAMPLERSPROC) load(userptr, "glGenSamplers");
    sf_glad_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) load(userptr, "glGetSamplerParameterIiv");
    sf_glad_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) load(userptr, "glGetSamplerParameterIuiv");
    sf_glad_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) load(userptr, "glGetSamplerParameterfv");
    sf_glad_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) load(userptr, "glGetSamplerParameteriv");
    sf_glad_glIsSampler = (PFNGLISSAMPLERPROC) load(userptr, "glIsSampler");
    sf_glad_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) load(userptr, "glSamplerParameterIiv");
    sf_glad_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) load(userptr, "glSamplerParameterIuiv");
    sf_glad_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) load(userptr, "glSamplerParameterf");
    sf_glad_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) load(userptr, "glSamplerParameterfv");
    sf_glad_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) load(userptr, "glSamplerParameteri");
    sf_glad_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) load(userptr, "glSamplerParameteriv");
}
static void sf_glad_gl_load_GL_ARB_separate_shader_objects( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_separate_shader_objects) return;
    sf_glad_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) load(userptr, "glActiveShaderProgram");
    sf_glad_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) load(userptr, "glBindProgramPipeline");
    sf_glad_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) load(userptr, "glCreateShaderProgramv");
    sf_glad_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) load(userptr, "glDeleteProgramPipelines");
    sf_glad_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) load(userptr, "glGenProgramPipelines");
    sf_glad_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) load(userptr, "glGetProgramPipelineInfoLog");
    sf_glad_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) load(userptr, "glGetProgramPipelineiv");
    sf_glad_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) load(userptr, "glIsProgramPipeline");
    sf_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load(userptr, "glProgramParameteri");
    sf_glad_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) load(userptr, "glProgramUniform1d");
    sf_glad_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) load(userptr, "glProgramUniform1dv");
    sf_glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) load(userptr, "glProgramUniform1f");
    sf_glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) load(userptr, "glProgramUniform1fv");
    sf_glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) load(userptr, "glProgramUniform1i");
    sf_glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) load(userptr, "glProgramUniform1iv");
    sf_glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) load(userptr, "glProgramUniform1ui");
    sf_glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) load(userptr, "glProgramUniform1uiv");
    sf_glad_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) load(userptr, "glProgramUniform2d");
    sf_glad_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) load(userptr, "glProgramUniform2dv");
    sf_glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) load(userptr, "glProgramUniform2f");
    sf_glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) load(userptr, "glProgramUniform2fv");
    sf_glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) load(userptr, "glProgramUniform2i");
    sf_glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) load(userptr, "glProgramUniform2iv");
    sf_glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) load(userptr, "glProgramUniform2ui");
    sf_glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) load(userptr, "glProgramUniform2uiv");
    sf_glad_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) load(userptr, "glProgramUniform3d");
    sf_glad_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) load(userptr, "glProgramUniform3dv");
    sf_glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) load(userptr, "glProgramUniform3f");
    sf_glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) load(userptr, "glProgramUniform3fv");
    sf_glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) load(userptr, "glProgramUniform3i");
    sf_glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) load(userptr, "glProgramUniform3iv");
    sf_glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) load(userptr, "glProgramUniform3ui");
    sf_glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) load(userptr, "glProgramUniform3uiv");
    sf_glad_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) load(userptr, "glProgramUniform4d");
    sf_glad_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) load(userptr, "glProgramUniform4dv");
    sf_glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) load(userptr, "glProgramUniform4f");
    sf_glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) load(userptr, "glProgramUniform4fv");
    sf_glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) load(userptr, "glProgramUniform4i");
    sf_glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) load(userptr, "glProgramUniform4iv");
    sf_glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) load(userptr, "glProgramUniform4ui");
    sf_glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) load(userptr, "glProgramUniform4uiv");
    sf_glad_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) load(userptr, "glProgramUniformMatrix2dv");
    sf_glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) load(userptr, "glProgramUniformMatrix2fv");
    sf_glad_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) load(userptr, "glProgramUniformMatrix2x3dv");
    sf_glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) load(userptr, "glProgramUniformMatrix2x3fv");
    sf_glad_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) load(userptr, "glProgramUniformMatrix2x4dv");
    sf_glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) load(userptr, "glProgramUniformMatrix2x4fv");
    sf_glad_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) load(userptr, "glProgramUniformMatrix3dv");
    sf_glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) load(userptr, "glProgramUniformMatrix3fv");
    sf_glad_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) load(userptr, "glProgramUniformMatrix3x2dv");
    sf_glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) load(userptr, "glProgramUniformMatrix3x2fv");
    sf_glad_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) load(userptr, "glProgramUniformMatrix3x4dv");
    sf_glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) load(userptr, "glProgramUniformMatrix3x4fv");
    sf_glad_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) load(userptr, "glProgramUniformMatrix4dv");
    sf_glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) load(userptr, "glProgramUniformMatrix4fv");
    sf_glad_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) load(userptr, "glProgramUniformMatrix4x2dv");
    sf_glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) load(userptr, "glProgramUniformMatrix4x2fv");
    sf_glad_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) load(userptr, "glProgramUniformMatrix4x3dv");
    sf_glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) load(userptr, "glProgramUniformMatrix4x3fv");
    sf_glad_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) load(userptr, "glUseProgramStages");
    sf_glad_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) load(userptr, "glValidateProgramPipeline");
}
static void sf_glad_gl_load_GL_ARB_shader_atomic_counters( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_shader_atomic_counters) return;
    sf_glad_glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) load(userptr, "glGetActiveAtomicCounterBufferiv");
}
static void sf_glad_gl_load_GL_ARB_shader_image_load_store( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_shader_image_load_store) return;
    sf_glad_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) load(userptr, "glBindImageTexture");
    sf_glad_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC) load(userptr, "glMemoryBarrier");
}
static void sf_glad_gl_load_GL_ARB_shader_objects( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_shader_objects) return;
    sf_glad_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC) load(userptr, "glAttachObjectARB");
    sf_glad_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC) load(userptr, "glCompileShaderARB");
    sf_glad_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC) load(userptr, "glCreateProgramObjectARB");
    sf_glad_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC) load(userptr, "glCreateShaderObjectARB");
    sf_glad_glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC) load(userptr, "glDeleteObjectARB");
    sf_glad_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC) load(userptr, "glDetachObjectARB");
    sf_glad_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC) load(userptr, "glGetActiveUniformARB");
    sf_glad_glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC) load(userptr, "glGetAttachedObjectsARB");
    sf_glad_glGetHandleARB = (PFNGLGETHANDLEARBPROC) load(userptr, "glGetHandleARB");
    sf_glad_glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC) load(userptr, "glGetInfoLogARB");
    sf_glad_glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC) load(userptr, "glGetObjectParameterfvARB");
    sf_glad_glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC) load(userptr, "glGetObjectParameterivARB");
    sf_glad_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC) load(userptr, "glGetShaderSourceARB");
    sf_glad_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC) load(userptr, "glGetUniformLocationARB");
    sf_glad_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC) load(userptr, "glGetUniformfvARB");
    sf_glad_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC) load(userptr, "glGetUniformivARB");
    sf_glad_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC) load(userptr, "glLinkProgramARB");
    sf_glad_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC) load(userptr, "glShaderSourceARB");
    sf_glad_glUniform1fARB = (PFNGLUNIFORM1FARBPROC) load(userptr, "glUniform1fARB");
    sf_glad_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC) load(userptr, "glUniform1fvARB");
    sf_glad_glUniform1iARB = (PFNGLUNIFORM1IARBPROC) load(userptr, "glUniform1iARB");
    sf_glad_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC) load(userptr, "glUniform1ivARB");
    sf_glad_glUniform2fARB = (PFNGLUNIFORM2FARBPROC) load(userptr, "glUniform2fARB");
    sf_glad_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC) load(userptr, "glUniform2fvARB");
    sf_glad_glUniform2iARB = (PFNGLUNIFORM2IARBPROC) load(userptr, "glUniform2iARB");
    sf_glad_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC) load(userptr, "glUniform2ivARB");
    sf_glad_glUniform3fARB = (PFNGLUNIFORM3FARBPROC) load(userptr, "glUniform3fARB");
    sf_glad_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC) load(userptr, "glUniform3fvARB");
    sf_glad_glUniform3iARB = (PFNGLUNIFORM3IARBPROC) load(userptr, "glUniform3iARB");
    sf_glad_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC) load(userptr, "glUniform3ivARB");
    sf_glad_glUniform4fARB = (PFNGLUNIFORM4FARBPROC) load(userptr, "glUniform4fARB");
    sf_glad_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC) load(userptr, "glUniform4fvARB");
    sf_glad_glUniform4iARB = (PFNGLUNIFORM4IARBPROC) load(userptr, "glUniform4iARB");
    sf_glad_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC) load(userptr, "glUniform4ivARB");
    sf_glad_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC) load(userptr, "glUniformMatrix2fvARB");
    sf_glad_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC) load(userptr, "glUniformMatrix3fvARB");
    sf_glad_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC) load(userptr, "glUniformMatrix4fvARB");
    sf_glad_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC) load(userptr, "glUseProgramObjectARB");
    sf_glad_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC) load(userptr, "glValidateProgramARB");
}
static void sf_glad_gl_load_GL_ARB_shader_storage_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_shader_storage_buffer_object) return;
    sf_glad_glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC) load(userptr, "glShaderStorageBlockBinding");
}
static void sf_glad_gl_load_GL_ARB_shader_subroutine( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_shader_subroutine) return;
    sf_glad_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC) load(userptr, "glGetActiveSubroutineName");
    sf_glad_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) load(userptr, "glGetActiveSubroutineUniformName");
    sf_glad_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) load(userptr, "glGetActiveSubroutineUniformiv");
    sf_glad_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC) load(userptr, "glGetProgramStageiv");
    sf_glad_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC) load(userptr, "glGetSubroutineIndex");
    sf_glad_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) load(userptr, "glGetSubroutineUniformLocation");
    sf_glad_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC) load(userptr, "glGetUniformSubroutineuiv");
    sf_glad_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC) load(userptr, "glUniformSubroutinesuiv");
}
static void sf_glad_gl_load_GL_ARB_shading_language_include( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_shading_language_include) return;
    sf_glad_glCompileShaderIncludeARB = (PFNGLCOMPILESHADERINCLUDEARBPROC) load(userptr, "glCompileShaderIncludeARB");
    sf_glad_glDeleteNamedStringARB = (PFNGLDELETENAMEDSTRINGARBPROC) load(userptr, "glDeleteNamedStringARB");
    sf_glad_glGetNamedStringARB = (PFNGLGETNAMEDSTRINGARBPROC) load(userptr, "glGetNamedStringARB");
    sf_glad_glGetNamedStringivARB = (PFNGLGETNAMEDSTRINGIVARBPROC) load(userptr, "glGetNamedStringivARB");
    sf_glad_glIsNamedStringARB = (PFNGLISNAMEDSTRINGARBPROC) load(userptr, "glIsNamedStringARB");
    sf_glad_glNamedStringARB = (PFNGLNAMEDSTRINGARBPROC) load(userptr, "glNamedStringARB");
}
static void sf_glad_gl_load_GL_ARB_sparse_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_sparse_buffer) return;
    sf_glad_glBufferPageCommitmentARB = (PFNGLBUFFERPAGECOMMITMENTARBPROC) load(userptr, "glBufferPageCommitmentARB");
    sf_glad_glNamedBufferPageCommitmentARB = (PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC) load(userptr, "glNamedBufferPageCommitmentARB");
    sf_glad_glNamedBufferPageCommitmentEXT = (PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC) load(userptr, "glNamedBufferPageCommitmentEXT");
}
static void sf_glad_gl_load_GL_ARB_sparse_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_sparse_texture) return;
    sf_glad_glTexPageCommitmentARB = (PFNGLTEXPAGECOMMITMENTARBPROC) load(userptr, "glTexPageCommitmentARB");
}
static void sf_glad_gl_load_GL_ARB_sync( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_sync) return;
    sf_glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load(userptr, "glClientWaitSync");
    sf_glad_glDeleteSync = (PFNGLDELETESYNCPROC) load(userptr, "glDeleteSync");
    sf_glad_glFenceSync = (PFNGLFENCESYNCPROC) load(userptr, "glFenceSync");
    sf_glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC) load(userptr, "glGetInteger64v");
    sf_glad_glGetSynciv = (PFNGLGETSYNCIVPROC) load(userptr, "glGetSynciv");
    sf_glad_glIsSync = (PFNGLISSYNCPROC) load(userptr, "glIsSync");
    sf_glad_glWaitSync = (PFNGLWAITSYNCPROC) load(userptr, "glWaitSync");
}
static void sf_glad_gl_load_GL_ARB_tessellation_shader( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_tessellation_shader) return;
    sf_glad_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) load(userptr, "glPatchParameterfv");
    sf_glad_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC) load(userptr, "glPatchParameteri");
}
static void sf_glad_gl_load_GL_ARB_texture_barrier( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_barrier) return;
    sf_glad_glTextureBarrier = (PFNGLTEXTUREBARRIERPROC) load(userptr, "glTextureBarrier");
}
static void sf_glad_gl_load_GL_ARB_texture_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_buffer_object) return;
    sf_glad_glTexBufferARB = (PFNGLTEXBUFFERARBPROC) load(userptr, "glTexBufferARB");
}
static void sf_glad_gl_load_GL_ARB_texture_buffer_range( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_buffer_range) return;
    sf_glad_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC) load(userptr, "glTexBufferRange");
}
static void sf_glad_gl_load_GL_ARB_texture_compression( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_compression) return;
    sf_glad_glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) load(userptr, "glCompressedTexImage1DARB");
    sf_glad_glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) load(userptr, "glCompressedTexImage2DARB");
    sf_glad_glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) load(userptr, "glCompressedTexImage3DARB");
    sf_glad_glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) load(userptr, "glCompressedTexSubImage1DARB");
    sf_glad_glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) load(userptr, "glCompressedTexSubImage2DARB");
    sf_glad_glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) load(userptr, "glCompressedTexSubImage3DARB");
    sf_glad_glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) load(userptr, "glGetCompressedTexImageARB");
}
static void sf_glad_gl_load_GL_ARB_texture_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_multisample) return;
    sf_glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load(userptr, "glGetMultisamplefv");
    sf_glad_glSampleMaski = (PFNGLSAMPLEMASKIPROC) load(userptr, "glSampleMaski");
    sf_glad_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) load(userptr, "glTexImage2DMultisample");
    sf_glad_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) load(userptr, "glTexImage3DMultisample");
}
static void sf_glad_gl_load_GL_ARB_texture_storage( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_storage) return;
    sf_glad_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC) load(userptr, "glTexStorage1D");
    sf_glad_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC) load(userptr, "glTexStorage2D");
    sf_glad_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC) load(userptr, "glTexStorage3D");
}
static void sf_glad_gl_load_GL_ARB_texture_storage_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_storage_multisample) return;
    sf_glad_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) load(userptr, "glTexStorage2DMultisample");
    sf_glad_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC) load(userptr, "glTexStorage3DMultisample");
}
static void sf_glad_gl_load_GL_ARB_texture_view( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_texture_view) return;
    sf_glad_glTextureView = (PFNGLTEXTUREVIEWPROC) load(userptr, "glTextureView");
}
static void sf_glad_gl_load_GL_ARB_timer_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_timer_query) return;
    sf_glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) load(userptr, "glGetQueryObjecti64v");
    sf_glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) load(userptr, "glGetQueryObjectui64v");
    sf_glad_glQueryCounter = (PFNGLQUERYCOUNTERPROC) load(userptr, "glQueryCounter");
}
static void sf_glad_gl_load_GL_ARB_transform_feedback2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_transform_feedback2) return;
    sf_glad_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) load(userptr, "glBindTransformFeedback");
    sf_glad_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) load(userptr, "glDeleteTransformFeedbacks");
    sf_glad_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC) load(userptr, "glDrawTransformFeedback");
    sf_glad_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) load(userptr, "glGenTransformFeedbacks");
    sf_glad_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) load(userptr, "glIsTransformFeedback");
    sf_glad_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) load(userptr, "glPauseTransformFeedback");
    sf_glad_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) load(userptr, "glResumeTransformFeedback");
}
static void sf_glad_gl_load_GL_ARB_transform_feedback3( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_transform_feedback3) return;
    sf_glad_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC) load(userptr, "glBeginQueryIndexed");
    sf_glad_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) load(userptr, "glDrawTransformFeedbackStream");
    sf_glad_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC) load(userptr, "glEndQueryIndexed");
    sf_glad_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC) load(userptr, "glGetQueryIndexediv");
}
static void sf_glad_gl_load_GL_ARB_transform_feedback_instanced( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_transform_feedback_instanced) return;
    sf_glad_glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) load(userptr, "glDrawTransformFeedbackInstanced");
    sf_glad_glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) load(userptr, "glDrawTransformFeedbackStreamInstanced");
}
static void sf_glad_gl_load_GL_ARB_transpose_matrix( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_transpose_matrix) return;
    sf_glad_glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC) load(userptr, "glLoadTransposeMatrixdARB");
    sf_glad_glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC) load(userptr, "glLoadTransposeMatrixfARB");
    sf_glad_glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC) load(userptr, "glMultTransposeMatrixdARB");
    sf_glad_glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC) load(userptr, "glMultTransposeMatrixfARB");
}
static void sf_glad_gl_load_GL_ARB_uniform_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_uniform_buffer_object) return;
    sf_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load(userptr, "glBindBufferBase");
    sf_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load(userptr, "glBindBufferRange");
    sf_glad_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load(userptr, "glGetActiveUniformBlockName");
    sf_glad_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load(userptr, "glGetActiveUniformBlockiv");
    sf_glad_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) load(userptr, "glGetActiveUniformName");
    sf_glad_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load(userptr, "glGetActiveUniformsiv");
    sf_glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load(userptr, "glGetIntegeri_v");
    sf_glad_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load(userptr, "glGetUniformBlockIndex");
    sf_glad_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load(userptr, "glGetUniformIndices");
    sf_glad_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load(userptr, "glUniformBlockBinding");
}
static void sf_glad_gl_load_GL_ARB_vertex_array_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_array_object) return;
    sf_glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load(userptr, "glBindVertexArray");
    sf_glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load(userptr, "glDeleteVertexArrays");
    sf_glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load(userptr, "glGenVertexArrays");
    sf_glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) load(userptr, "glIsVertexArray");
}
static void sf_glad_gl_load_GL_ARB_vertex_attrib_64bit( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_attrib_64bit) return;
    sf_glad_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC) load(userptr, "glGetVertexAttribLdv");
    sf_glad_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC) load(userptr, "glVertexAttribL1d");
    sf_glad_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC) load(userptr, "glVertexAttribL1dv");
    sf_glad_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC) load(userptr, "glVertexAttribL2d");
    sf_glad_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC) load(userptr, "glVertexAttribL2dv");
    sf_glad_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC) load(userptr, "glVertexAttribL3d");
    sf_glad_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC) load(userptr, "glVertexAttribL3dv");
    sf_glad_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC) load(userptr, "glVertexAttribL4d");
    sf_glad_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC) load(userptr, "glVertexAttribL4dv");
    sf_glad_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC) load(userptr, "glVertexAttribLPointer");
}
static void sf_glad_gl_load_GL_ARB_vertex_attrib_binding( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_attrib_binding) return;
    sf_glad_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) load(userptr, "glBindVertexBuffer");
    sf_glad_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) load(userptr, "glVertexAttribBinding");
    sf_glad_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) load(userptr, "glVertexAttribFormat");
    sf_glad_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) load(userptr, "glVertexAttribIFormat");
    sf_glad_glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC) load(userptr, "glVertexAttribLFormat");
    sf_glad_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) load(userptr, "glVertexBindingDivisor");
}
static void sf_glad_gl_load_GL_ARB_vertex_blend( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_blend) return;
    sf_glad_glVertexBlendARB = (PFNGLVERTEXBLENDARBPROC) load(userptr, "glVertexBlendARB");
    sf_glad_glWeightPointerARB = (PFNGLWEIGHTPOINTERARBPROC) load(userptr, "glWeightPointerARB");
    sf_glad_glWeightbvARB = (PFNGLWEIGHTBVARBPROC) load(userptr, "glWeightbvARB");
    sf_glad_glWeightdvARB = (PFNGLWEIGHTDVARBPROC) load(userptr, "glWeightdvARB");
    sf_glad_glWeightfvARB = (PFNGLWEIGHTFVARBPROC) load(userptr, "glWeightfvARB");
    sf_glad_glWeightivARB = (PFNGLWEIGHTIVARBPROC) load(userptr, "glWeightivARB");
    sf_glad_glWeightsvARB = (PFNGLWEIGHTSVARBPROC) load(userptr, "glWeightsvARB");
    sf_glad_glWeightubvARB = (PFNGLWEIGHTUBVARBPROC) load(userptr, "glWeightubvARB");
    sf_glad_glWeightuivARB = (PFNGLWEIGHTUIVARBPROC) load(userptr, "glWeightuivARB");
    sf_glad_glWeightusvARB = (PFNGLWEIGHTUSVARBPROC) load(userptr, "glWeightusvARB");
}
static void sf_glad_gl_load_GL_ARB_vertex_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_buffer_object) return;
    sf_glad_glBindBufferARB = (PFNGLBINDBUFFERARBPROC) load(userptr, "glBindBufferARB");
    sf_glad_glBufferDataARB = (PFNGLBUFFERDATAARBPROC) load(userptr, "glBufferDataARB");
    sf_glad_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC) load(userptr, "glBufferSubDataARB");
    sf_glad_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC) load(userptr, "glDeleteBuffersARB");
    sf_glad_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC) load(userptr, "glGenBuffersARB");
    sf_glad_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC) load(userptr, "glGetBufferParameterivARB");
    sf_glad_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC) load(userptr, "glGetBufferPointervARB");
    sf_glad_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC) load(userptr, "glGetBufferSubDataARB");
    sf_glad_glIsBufferARB = (PFNGLISBUFFERARBPROC) load(userptr, "glIsBufferARB");
    sf_glad_glMapBufferARB = (PFNGLMAPBUFFERARBPROC) load(userptr, "glMapBufferARB");
    sf_glad_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC) load(userptr, "glUnmapBufferARB");
}
static void sf_glad_gl_load_GL_ARB_vertex_program( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_program) return;
    sf_glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC) load(userptr, "glBindProgramARB");
    sf_glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC) load(userptr, "glDeleteProgramsARB");
    sf_glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glDisableVertexAttribArrayARB");
    sf_glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glEnableVertexAttribArrayARB");
    sf_glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC) load(userptr, "glGenProgramsARB");
    sf_glad_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC) load(userptr, "glGetProgramEnvParameterdvARB");
    sf_glad_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC) load(userptr, "glGetProgramEnvParameterfvARB");
    sf_glad_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) load(userptr, "glGetProgramLocalParameterdvARB");
    sf_glad_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) load(userptr, "glGetProgramLocalParameterfvARB");
    sf_glad_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC) load(userptr, "glGetProgramStringARB");
    sf_glad_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC) load(userptr, "glGetProgramivARB");
    sf_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) load(userptr, "glGetVertexAttribPointervARB");
    sf_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) load(userptr, "glGetVertexAttribdvARB");
    sf_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) load(userptr, "glGetVertexAttribfvARB");
    sf_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) load(userptr, "glGetVertexAttribivARB");
    sf_glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC) load(userptr, "glIsProgramARB");
    sf_glad_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC) load(userptr, "glProgramEnvParameter4dARB");
    sf_glad_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC) load(userptr, "glProgramEnvParameter4dvARB");
    sf_glad_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC) load(userptr, "glProgramEnvParameter4fARB");
    sf_glad_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC) load(userptr, "glProgramEnvParameter4fvARB");
    sf_glad_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC) load(userptr, "glProgramLocalParameter4dARB");
    sf_glad_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) load(userptr, "glProgramLocalParameter4dvARB");
    sf_glad_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC) load(userptr, "glProgramLocalParameter4fARB");
    sf_glad_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) load(userptr, "glProgramLocalParameter4fvARB");
    sf_glad_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC) load(userptr, "glProgramStringARB");
    sf_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) load(userptr, "glVertexAttrib1dARB");
    sf_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) load(userptr, "glVertexAttrib1dvARB");
    sf_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) load(userptr, "glVertexAttrib1fARB");
    sf_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) load(userptr, "glVertexAttrib1fvARB");
    sf_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) load(userptr, "glVertexAttrib1sARB");
    sf_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) load(userptr, "glVertexAttrib1svARB");
    sf_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) load(userptr, "glVertexAttrib2dARB");
    sf_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) load(userptr, "glVertexAttrib2dvARB");
    sf_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) load(userptr, "glVertexAttrib2fARB");
    sf_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) load(userptr, "glVertexAttrib2fvARB");
    sf_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) load(userptr, "glVertexAttrib2sARB");
    sf_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) load(userptr, "glVertexAttrib2svARB");
    sf_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) load(userptr, "glVertexAttrib3dARB");
    sf_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) load(userptr, "glVertexAttrib3dvARB");
    sf_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) load(userptr, "glVertexAttrib3fARB");
    sf_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) load(userptr, "glVertexAttrib3fvARB");
    sf_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) load(userptr, "glVertexAttrib3sARB");
    sf_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) load(userptr, "glVertexAttrib3svARB");
    sf_glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) load(userptr, "glVertexAttrib4NbvARB");
    sf_glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) load(userptr, "glVertexAttrib4NivARB");
    sf_glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) load(userptr, "glVertexAttrib4NsvARB");
    sf_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) load(userptr, "glVertexAttrib4NubARB");
    sf_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) load(userptr, "glVertexAttrib4NubvARB");
    sf_glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) load(userptr, "glVertexAttrib4NuivARB");
    sf_glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) load(userptr, "glVertexAttrib4NusvARB");
    sf_glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) load(userptr, "glVertexAttrib4bvARB");
    sf_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) load(userptr, "glVertexAttrib4dARB");
    sf_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) load(userptr, "glVertexAttrib4dvARB");
    sf_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) load(userptr, "glVertexAttrib4fARB");
    sf_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) load(userptr, "glVertexAttrib4fvARB");
    sf_glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) load(userptr, "glVertexAttrib4ivARB");
    sf_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) load(userptr, "glVertexAttrib4sARB");
    sf_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) load(userptr, "glVertexAttrib4svARB");
    sf_glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) load(userptr, "glVertexAttrib4ubvARB");
    sf_glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) load(userptr, "glVertexAttrib4uivARB");
    sf_glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) load(userptr, "glVertexAttrib4usvARB");
    sf_glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) load(userptr, "glVertexAttribPointerARB");
}
static void sf_glad_gl_load_GL_ARB_vertex_shader( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_shader) return;
    sf_glad_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC) load(userptr, "glBindAttribLocationARB");
    sf_glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glDisableVertexAttribArrayARB");
    sf_glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) load(userptr, "glEnableVertexAttribArrayARB");
    sf_glad_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC) load(userptr, "glGetActiveAttribARB");
    sf_glad_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC) load(userptr, "glGetAttribLocationARB");
    sf_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) load(userptr, "glGetVertexAttribPointervARB");
    sf_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) load(userptr, "glGetVertexAttribdvARB");
    sf_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) load(userptr, "glGetVertexAttribfvARB");
    sf_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) load(userptr, "glGetVertexAttribivARB");
    sf_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) load(userptr, "glVertexAttrib1dARB");
    sf_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) load(userptr, "glVertexAttrib1dvARB");
    sf_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) load(userptr, "glVertexAttrib1fARB");
    sf_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) load(userptr, "glVertexAttrib1fvARB");
    sf_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) load(userptr, "glVertexAttrib1sARB");
    sf_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) load(userptr, "glVertexAttrib1svARB");
    sf_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) load(userptr, "glVertexAttrib2dARB");
    sf_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) load(userptr, "glVertexAttrib2dvARB");
    sf_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) load(userptr, "glVertexAttrib2fARB");
    sf_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) load(userptr, "glVertexAttrib2fvARB");
    sf_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) load(userptr, "glVertexAttrib2sARB");
    sf_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) load(userptr, "glVertexAttrib2svARB");
    sf_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) load(userptr, "glVertexAttrib3dARB");
    sf_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) load(userptr, "glVertexAttrib3dvARB");
    sf_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) load(userptr, "glVertexAttrib3fARB");
    sf_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) load(userptr, "glVertexAttrib3fvARB");
    sf_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) load(userptr, "glVertexAttrib3sARB");
    sf_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) load(userptr, "glVertexAttrib3svARB");
    sf_glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) load(userptr, "glVertexAttrib4NbvARB");
    sf_glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) load(userptr, "glVertexAttrib4NivARB");
    sf_glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) load(userptr, "glVertexAttrib4NsvARB");
    sf_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) load(userptr, "glVertexAttrib4NubARB");
    sf_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) load(userptr, "glVertexAttrib4NubvARB");
    sf_glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) load(userptr, "glVertexAttrib4NuivARB");
    sf_glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) load(userptr, "glVertexAttrib4NusvARB");
    sf_glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) load(userptr, "glVertexAttrib4bvARB");
    sf_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) load(userptr, "glVertexAttrib4dARB");
    sf_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) load(userptr, "glVertexAttrib4dvARB");
    sf_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) load(userptr, "glVertexAttrib4fARB");
    sf_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) load(userptr, "glVertexAttrib4fvARB");
    sf_glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) load(userptr, "glVertexAttrib4ivARB");
    sf_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) load(userptr, "glVertexAttrib4sARB");
    sf_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) load(userptr, "glVertexAttrib4svARB");
    sf_glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) load(userptr, "glVertexAttrib4ubvARB");
    sf_glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) load(userptr, "glVertexAttrib4uivARB");
    sf_glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) load(userptr, "glVertexAttrib4usvARB");
    sf_glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) load(userptr, "glVertexAttribPointerARB");
}
static void sf_glad_gl_load_GL_ARB_vertex_type_2_10_10_10_rev( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_vertex_type_2_10_10_10_rev) return;
    sf_glad_glColorP3ui = (PFNGLCOLORP3UIPROC) load(userptr, "glColorP3ui");
    sf_glad_glColorP3uiv = (PFNGLCOLORP3UIVPROC) load(userptr, "glColorP3uiv");
    sf_glad_glColorP4ui = (PFNGLCOLORP4UIPROC) load(userptr, "glColorP4ui");
    sf_glad_glColorP4uiv = (PFNGLCOLORP4UIVPROC) load(userptr, "glColorP4uiv");
    sf_glad_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC) load(userptr, "glMultiTexCoordP1ui");
    sf_glad_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC) load(userptr, "glMultiTexCoordP1uiv");
    sf_glad_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC) load(userptr, "glMultiTexCoordP2ui");
    sf_glad_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC) load(userptr, "glMultiTexCoordP2uiv");
    sf_glad_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC) load(userptr, "glMultiTexCoordP3ui");
    sf_glad_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC) load(userptr, "glMultiTexCoordP3uiv");
    sf_glad_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC) load(userptr, "glMultiTexCoordP4ui");
    sf_glad_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC) load(userptr, "glMultiTexCoordP4uiv");
    sf_glad_glNormalP3ui = (PFNGLNORMALP3UIPROC) load(userptr, "glNormalP3ui");
    sf_glad_glNormalP3uiv = (PFNGLNORMALP3UIVPROC) load(userptr, "glNormalP3uiv");
    sf_glad_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC) load(userptr, "glSecondaryColorP3ui");
    sf_glad_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC) load(userptr, "glSecondaryColorP3uiv");
    sf_glad_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC) load(userptr, "glTexCoordP1ui");
    sf_glad_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC) load(userptr, "glTexCoordP1uiv");
    sf_glad_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC) load(userptr, "glTexCoordP2ui");
    sf_glad_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC) load(userptr, "glTexCoordP2uiv");
    sf_glad_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC) load(userptr, "glTexCoordP3ui");
    sf_glad_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC) load(userptr, "glTexCoordP3uiv");
    sf_glad_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC) load(userptr, "glTexCoordP4ui");
    sf_glad_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC) load(userptr, "glTexCoordP4uiv");
    sf_glad_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) load(userptr, "glVertexAttribP1ui");
    sf_glad_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) load(userptr, "glVertexAttribP1uiv");
    sf_glad_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) load(userptr, "glVertexAttribP2ui");
    sf_glad_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) load(userptr, "glVertexAttribP2uiv");
    sf_glad_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) load(userptr, "glVertexAttribP3ui");
    sf_glad_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) load(userptr, "glVertexAttribP3uiv");
    sf_glad_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) load(userptr, "glVertexAttribP4ui");
    sf_glad_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) load(userptr, "glVertexAttribP4uiv");
    sf_glad_glVertexP2ui = (PFNGLVERTEXP2UIPROC) load(userptr, "glVertexP2ui");
    sf_glad_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC) load(userptr, "glVertexP2uiv");
    sf_glad_glVertexP3ui = (PFNGLVERTEXP3UIPROC) load(userptr, "glVertexP3ui");
    sf_glad_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC) load(userptr, "glVertexP3uiv");
    sf_glad_glVertexP4ui = (PFNGLVERTEXP4UIPROC) load(userptr, "glVertexP4ui");
    sf_glad_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC) load(userptr, "glVertexP4uiv");
}
static void sf_glad_gl_load_GL_ARB_viewport_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_viewport_array) return;
    sf_glad_glDepthRangeArraydvNV = (PFNGLDEPTHRANGEARRAYDVNVPROC) load(userptr, "glDepthRangeArraydvNV");
    sf_glad_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC) load(userptr, "glDepthRangeArrayv");
    sf_glad_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) load(userptr, "glDepthRangeIndexed");
    sf_glad_glDepthRangeIndexeddNV = (PFNGLDEPTHRANGEINDEXEDDNVPROC) load(userptr, "glDepthRangeIndexeddNV");
    sf_glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC) load(userptr, "glGetDoublei_v");
    sf_glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC) load(userptr, "glGetFloati_v");
    sf_glad_glScissorArrayv = (PFNGLSCISSORARRAYVPROC) load(userptr, "glScissorArrayv");
    sf_glad_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC) load(userptr, "glScissorIndexed");
    sf_glad_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC) load(userptr, "glScissorIndexedv");
    sf_glad_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC) load(userptr, "glViewportArrayv");
    sf_glad_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC) load(userptr, "glViewportIndexedf");
    sf_glad_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) load(userptr, "glViewportIndexedfv");
}
static void sf_glad_gl_load_GL_ARB_window_pos( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ARB_window_pos) return;
    sf_glad_glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC) load(userptr, "glWindowPos2dARB");
    sf_glad_glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC) load(userptr, "glWindowPos2dvARB");
    sf_glad_glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC) load(userptr, "glWindowPos2fARB");
    sf_glad_glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC) load(userptr, "glWindowPos2fvARB");
    sf_glad_glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC) load(userptr, "glWindowPos2iARB");
    sf_glad_glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC) load(userptr, "glWindowPos2ivARB");
    sf_glad_glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC) load(userptr, "glWindowPos2sARB");
    sf_glad_glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC) load(userptr, "glWindowPos2svARB");
    sf_glad_glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC) load(userptr, "glWindowPos3dARB");
    sf_glad_glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC) load(userptr, "glWindowPos3dvARB");
    sf_glad_glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC) load(userptr, "glWindowPos3fARB");
    sf_glad_glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC) load(userptr, "glWindowPos3fvARB");
    sf_glad_glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC) load(userptr, "glWindowPos3iARB");
    sf_glad_glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC) load(userptr, "glWindowPos3ivARB");
    sf_glad_glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC) load(userptr, "glWindowPos3sARB");
    sf_glad_glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC) load(userptr, "glWindowPos3svARB");
}
static void sf_glad_gl_load_GL_ATI_draw_buffers( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_draw_buffers) return;
    sf_glad_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC) load(userptr, "glDrawBuffersATI");
}
static void sf_glad_gl_load_GL_ATI_element_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_element_array) return;
    sf_glad_glDrawElementArrayATI = (PFNGLDRAWELEMENTARRAYATIPROC) load(userptr, "glDrawElementArrayATI");
    sf_glad_glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC) load(userptr, "glDrawRangeElementArrayATI");
    sf_glad_glElementPointerATI = (PFNGLELEMENTPOINTERATIPROC) load(userptr, "glElementPointerATI");
}
static void sf_glad_gl_load_GL_ATI_envmap_bumpmap( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_envmap_bumpmap) return;
    sf_glad_glGetTexBumpParameterfvATI = (PFNGLGETTEXBUMPPARAMETERFVATIPROC) load(userptr, "glGetTexBumpParameterfvATI");
    sf_glad_glGetTexBumpParameterivATI = (PFNGLGETTEXBUMPPARAMETERIVATIPROC) load(userptr, "glGetTexBumpParameterivATI");
    sf_glad_glTexBumpParameterfvATI = (PFNGLTEXBUMPPARAMETERFVATIPROC) load(userptr, "glTexBumpParameterfvATI");
    sf_glad_glTexBumpParameterivATI = (PFNGLTEXBUMPPARAMETERIVATIPROC) load(userptr, "glTexBumpParameterivATI");
}
static void sf_glad_gl_load_GL_ATI_fragment_shader( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_fragment_shader) return;
    sf_glad_glAlphaFragmentOp1ATI = (PFNGLALPHAFRAGMENTOP1ATIPROC) load(userptr, "glAlphaFragmentOp1ATI");
    sf_glad_glAlphaFragmentOp2ATI = (PFNGLALPHAFRAGMENTOP2ATIPROC) load(userptr, "glAlphaFragmentOp2ATI");
    sf_glad_glAlphaFragmentOp3ATI = (PFNGLALPHAFRAGMENTOP3ATIPROC) load(userptr, "glAlphaFragmentOp3ATI");
    sf_glad_glBeginFragmentShaderATI = (PFNGLBEGINFRAGMENTSHADERATIPROC) load(userptr, "glBeginFragmentShaderATI");
    sf_glad_glBindFragmentShaderATI = (PFNGLBINDFRAGMENTSHADERATIPROC) load(userptr, "glBindFragmentShaderATI");
    sf_glad_glColorFragmentOp1ATI = (PFNGLCOLORFRAGMENTOP1ATIPROC) load(userptr, "glColorFragmentOp1ATI");
    sf_glad_glColorFragmentOp2ATI = (PFNGLCOLORFRAGMENTOP2ATIPROC) load(userptr, "glColorFragmentOp2ATI");
    sf_glad_glColorFragmentOp3ATI = (PFNGLCOLORFRAGMENTOP3ATIPROC) load(userptr, "glColorFragmentOp3ATI");
    sf_glad_glDeleteFragmentShaderATI = (PFNGLDELETEFRAGMENTSHADERATIPROC) load(userptr, "glDeleteFragmentShaderATI");
    sf_glad_glEndFragmentShaderATI = (PFNGLENDFRAGMENTSHADERATIPROC) load(userptr, "glEndFragmentShaderATI");
    sf_glad_glGenFragmentShadersATI = (PFNGLGENFRAGMENTSHADERSATIPROC) load(userptr, "glGenFragmentShadersATI");
    sf_glad_glPassTexCoordATI = (PFNGLPASSTEXCOORDATIPROC) load(userptr, "glPassTexCoordATI");
    sf_glad_glSampleMapATI = (PFNGLSAMPLEMAPATIPROC) load(userptr, "glSampleMapATI");
    sf_glad_glSetFragmentShaderConstantATI = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) load(userptr, "glSetFragmentShaderConstantATI");
}
static void sf_glad_gl_load_GL_ATI_map_object_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_map_object_buffer) return;
    sf_glad_glMapObjectBufferATI = (PFNGLMAPOBJECTBUFFERATIPROC) load(userptr, "glMapObjectBufferATI");
    sf_glad_glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC) load(userptr, "glUnmapObjectBufferATI");
}
static void sf_glad_gl_load_GL_ATI_pn_triangles( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_pn_triangles) return;
    sf_glad_glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC) load(userptr, "glPNTrianglesfATI");
    sf_glad_glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC) load(userptr, "glPNTrianglesiATI");
}
static void sf_glad_gl_load_GL_ATI_separate_stencil( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_separate_stencil) return;
    sf_glad_glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC) load(userptr, "glStencilFuncSeparateATI");
    sf_glad_glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC) load(userptr, "glStencilOpSeparateATI");
}
static void sf_glad_gl_load_GL_ATI_vertex_array_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_vertex_array_object) return;
    sf_glad_glArrayObjectATI = (PFNGLARRAYOBJECTATIPROC) load(userptr, "glArrayObjectATI");
    sf_glad_glFreeObjectBufferATI = (PFNGLFREEOBJECTBUFFERATIPROC) load(userptr, "glFreeObjectBufferATI");
    sf_glad_glGetArrayObjectfvATI = (PFNGLGETARRAYOBJECTFVATIPROC) load(userptr, "glGetArrayObjectfvATI");
    sf_glad_glGetArrayObjectivATI = (PFNGLGETARRAYOBJECTIVATIPROC) load(userptr, "glGetArrayObjectivATI");
    sf_glad_glGetObjectBufferfvATI = (PFNGLGETOBJECTBUFFERFVATIPROC) load(userptr, "glGetObjectBufferfvATI");
    sf_glad_glGetObjectBufferivATI = (PFNGLGETOBJECTBUFFERIVATIPROC) load(userptr, "glGetObjectBufferivATI");
    sf_glad_glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC) load(userptr, "glGetVariantArrayObjectfvATI");
    sf_glad_glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC) load(userptr, "glGetVariantArrayObjectivATI");
    sf_glad_glIsObjectBufferATI = (PFNGLISOBJECTBUFFERATIPROC) load(userptr, "glIsObjectBufferATI");
    sf_glad_glNewObjectBufferATI = (PFNGLNEWOBJECTBUFFERATIPROC) load(userptr, "glNewObjectBufferATI");
    sf_glad_glUpdateObjectBufferATI = (PFNGLUPDATEOBJECTBUFFERATIPROC) load(userptr, "glUpdateObjectBufferATI");
    sf_glad_glVariantArrayObjectATI = (PFNGLVARIANTARRAYOBJECTATIPROC) load(userptr, "glVariantArrayObjectATI");
}
static void sf_glad_gl_load_GL_ATI_vertex_attrib_array_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_vertex_attrib_array_object) return;
    sf_glad_glGetVertexAttribArrayObjectfvATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) load(userptr, "glGetVertexAttribArrayObjectfvATI");
    sf_glad_glGetVertexAttribArrayObjectivATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) load(userptr, "glGetVertexAttribArrayObjectivATI");
    sf_glad_glVertexAttribArrayObjectATI = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) load(userptr, "glVertexAttribArrayObjectATI");
}
static void sf_glad_gl_load_GL_ATI_vertex_streams( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_ATI_vertex_streams) return;
    sf_glad_glClientActiveVertexStreamATI = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) load(userptr, "glClientActiveVertexStreamATI");
    sf_glad_glNormalStream3bATI = (PFNGLNORMALSTREAM3BATIPROC) load(userptr, "glNormalStream3bATI");
    sf_glad_glNormalStream3bvATI = (PFNGLNORMALSTREAM3BVATIPROC) load(userptr, "glNormalStream3bvATI");
    sf_glad_glNormalStream3dATI = (PFNGLNORMALSTREAM3DATIPROC) load(userptr, "glNormalStream3dATI");
    sf_glad_glNormalStream3dvATI = (PFNGLNORMALSTREAM3DVATIPROC) load(userptr, "glNormalStream3dvATI");
    sf_glad_glNormalStream3fATI = (PFNGLNORMALSTREAM3FATIPROC) load(userptr, "glNormalStream3fATI");
    sf_glad_glNormalStream3fvATI = (PFNGLNORMALSTREAM3FVATIPROC) load(userptr, "glNormalStream3fvATI");
    sf_glad_glNormalStream3iATI = (PFNGLNORMALSTREAM3IATIPROC) load(userptr, "glNormalStream3iATI");
    sf_glad_glNormalStream3ivATI = (PFNGLNORMALSTREAM3IVATIPROC) load(userptr, "glNormalStream3ivATI");
    sf_glad_glNormalStream3sATI = (PFNGLNORMALSTREAM3SATIPROC) load(userptr, "glNormalStream3sATI");
    sf_glad_glNormalStream3svATI = (PFNGLNORMALSTREAM3SVATIPROC) load(userptr, "glNormalStream3svATI");
    sf_glad_glVertexBlendEnvfATI = (PFNGLVERTEXBLENDENVFATIPROC) load(userptr, "glVertexBlendEnvfATI");
    sf_glad_glVertexBlendEnviATI = (PFNGLVERTEXBLENDENVIATIPROC) load(userptr, "glVertexBlendEnviATI");
    sf_glad_glVertexStream1dATI = (PFNGLVERTEXSTREAM1DATIPROC) load(userptr, "glVertexStream1dATI");
    sf_glad_glVertexStream1dvATI = (PFNGLVERTEXSTREAM1DVATIPROC) load(userptr, "glVertexStream1dvATI");
    sf_glad_glVertexStream1fATI = (PFNGLVERTEXSTREAM1FATIPROC) load(userptr, "glVertexStream1fATI");
    sf_glad_glVertexStream1fvATI = (PFNGLVERTEXSTREAM1FVATIPROC) load(userptr, "glVertexStream1fvATI");
    sf_glad_glVertexStream1iATI = (PFNGLVERTEXSTREAM1IATIPROC) load(userptr, "glVertexStream1iATI");
    sf_glad_glVertexStream1ivATI = (PFNGLVERTEXSTREAM1IVATIPROC) load(userptr, "glVertexStream1ivATI");
    sf_glad_glVertexStream1sATI = (PFNGLVERTEXSTREAM1SATIPROC) load(userptr, "glVertexStream1sATI");
    sf_glad_glVertexStream1svATI = (PFNGLVERTEXSTREAM1SVATIPROC) load(userptr, "glVertexStream1svATI");
    sf_glad_glVertexStream2dATI = (PFNGLVERTEXSTREAM2DATIPROC) load(userptr, "glVertexStream2dATI");
    sf_glad_glVertexStream2dvATI = (PFNGLVERTEXSTREAM2DVATIPROC) load(userptr, "glVertexStream2dvATI");
    sf_glad_glVertexStream2fATI = (PFNGLVERTEXSTREAM2FATIPROC) load(userptr, "glVertexStream2fATI");
    sf_glad_glVertexStream2fvATI = (PFNGLVERTEXSTREAM2FVATIPROC) load(userptr, "glVertexStream2fvATI");
    sf_glad_glVertexStream2iATI = (PFNGLVERTEXSTREAM2IATIPROC) load(userptr, "glVertexStream2iATI");
    sf_glad_glVertexStream2ivATI = (PFNGLVERTEXSTREAM2IVATIPROC) load(userptr, "glVertexStream2ivATI");
    sf_glad_glVertexStream2sATI = (PFNGLVERTEXSTREAM2SATIPROC) load(userptr, "glVertexStream2sATI");
    sf_glad_glVertexStream2svATI = (PFNGLVERTEXSTREAM2SVATIPROC) load(userptr, "glVertexStream2svATI");
    sf_glad_glVertexStream3dATI = (PFNGLVERTEXSTREAM3DATIPROC) load(userptr, "glVertexStream3dATI");
    sf_glad_glVertexStream3dvATI = (PFNGLVERTEXSTREAM3DVATIPROC) load(userptr, "glVertexStream3dvATI");
    sf_glad_glVertexStream3fATI = (PFNGLVERTEXSTREAM3FATIPROC) load(userptr, "glVertexStream3fATI");
    sf_glad_glVertexStream3fvATI = (PFNGLVERTEXSTREAM3FVATIPROC) load(userptr, "glVertexStream3fvATI");
    sf_glad_glVertexStream3iATI = (PFNGLVERTEXSTREAM3IATIPROC) load(userptr, "glVertexStream3iATI");
    sf_glad_glVertexStream3ivATI = (PFNGLVERTEXSTREAM3IVATIPROC) load(userptr, "glVertexStream3ivATI");
    sf_glad_glVertexStream3sATI = (PFNGLVERTEXSTREAM3SATIPROC) load(userptr, "glVertexStream3sATI");
    sf_glad_glVertexStream3svATI = (PFNGLVERTEXSTREAM3SVATIPROC) load(userptr, "glVertexStream3svATI");
    sf_glad_glVertexStream4dATI = (PFNGLVERTEXSTREAM4DATIPROC) load(userptr, "glVertexStream4dATI");
    sf_glad_glVertexStream4dvATI = (PFNGLVERTEXSTREAM4DVATIPROC) load(userptr, "glVertexStream4dvATI");
    sf_glad_glVertexStream4fATI = (PFNGLVERTEXSTREAM4FATIPROC) load(userptr, "glVertexStream4fATI");
    sf_glad_glVertexStream4fvATI = (PFNGLVERTEXSTREAM4FVATIPROC) load(userptr, "glVertexStream4fvATI");
    sf_glad_glVertexStream4iATI = (PFNGLVERTEXSTREAM4IATIPROC) load(userptr, "glVertexStream4iATI");
    sf_glad_glVertexStream4ivATI = (PFNGLVERTEXSTREAM4IVATIPROC) load(userptr, "glVertexStream4ivATI");
    sf_glad_glVertexStream4sATI = (PFNGLVERTEXSTREAM4SATIPROC) load(userptr, "glVertexStream4sATI");
    sf_glad_glVertexStream4svATI = (PFNGLVERTEXSTREAM4SVATIPROC) load(userptr, "glVertexStream4svATI");
}
static void sf_glad_gl_load_GL_EXT_EGL_image_storage( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_EGL_image_storage) return;
    sf_glad_glEGLImageTargetTexStorageEXT = (PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC) load(userptr, "glEGLImageTargetTexStorageEXT");
    sf_glad_glEGLImageTargetTextureStorageEXT = (PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC) load(userptr, "glEGLImageTargetTextureStorageEXT");
}
static void sf_glad_gl_load_GL_EXT_bindable_uniform( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_bindable_uniform) return;
    sf_glad_glGetUniformBufferSizeEXT = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC) load(userptr, "glGetUniformBufferSizeEXT");
    sf_glad_glGetUniformOffsetEXT = (PFNGLGETUNIFORMOFFSETEXTPROC) load(userptr, "glGetUniformOffsetEXT");
    sf_glad_glUniformBufferEXT = (PFNGLUNIFORMBUFFEREXTPROC) load(userptr, "glUniformBufferEXT");
}
static void sf_glad_gl_load_GL_EXT_blend_color( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_blend_color) return;
    sf_glad_glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC) load(userptr, "glBlendColorEXT");
}
static void sf_glad_gl_load_GL_EXT_blend_equation_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_blend_equation_separate) return;
    sf_glad_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC) load(userptr, "glBlendEquationSeparateEXT");
}
static void sf_glad_gl_load_GL_EXT_blend_func_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_blend_func_separate) return;
    sf_glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC) load(userptr, "glBlendFuncSeparateEXT");
}
static void sf_glad_gl_load_GL_EXT_blend_minmax( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_blend_minmax) return;
    sf_glad_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC) load(userptr, "glBlendEquationEXT");
}
static void sf_glad_gl_load_GL_EXT_color_subtable( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_color_subtable) return;
    sf_glad_glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC) load(userptr, "glColorSubTableEXT");
    sf_glad_glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC) load(userptr, "glCopyColorSubTableEXT");
}
static void sf_glad_gl_load_GL_EXT_compiled_vertex_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_compiled_vertex_array) return;
    sf_glad_glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC) load(userptr, "glLockArraysEXT");
    sf_glad_glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC) load(userptr, "glUnlockArraysEXT");
}
static void sf_glad_gl_load_GL_EXT_convolution( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_convolution) return;
    sf_glad_glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC) load(userptr, "glConvolutionFilter1DEXT");
    sf_glad_glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC) load(userptr, "glConvolutionFilter2DEXT");
    sf_glad_glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC) load(userptr, "glConvolutionParameterfEXT");
    sf_glad_glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC) load(userptr, "glConvolutionParameterfvEXT");
    sf_glad_glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC) load(userptr, "glConvolutionParameteriEXT");
    sf_glad_glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC) load(userptr, "glConvolutionParameterivEXT");
    sf_glad_glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) load(userptr, "glCopyConvolutionFilter1DEXT");
    sf_glad_glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) load(userptr, "glCopyConvolutionFilter2DEXT");
    sf_glad_glGetConvolutionFilterEXT = (PFNGLGETCONVOLUTIONFILTEREXTPROC) load(userptr, "glGetConvolutionFilterEXT");
    sf_glad_glGetConvolutionParameterfvEXT = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) load(userptr, "glGetConvolutionParameterfvEXT");
    sf_glad_glGetConvolutionParameterivEXT = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) load(userptr, "glGetConvolutionParameterivEXT");
    sf_glad_glGetSeparableFilterEXT = (PFNGLGETSEPARABLEFILTEREXTPROC) load(userptr, "glGetSeparableFilterEXT");
    sf_glad_glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC) load(userptr, "glSeparableFilter2DEXT");
}
static void sf_glad_gl_load_GL_EXT_coordinate_frame( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_coordinate_frame) return;
    sf_glad_glBinormal3bEXT = (PFNGLBINORMAL3BEXTPROC) load(userptr, "glBinormal3bEXT");
    sf_glad_glBinormal3bvEXT = (PFNGLBINORMAL3BVEXTPROC) load(userptr, "glBinormal3bvEXT");
    sf_glad_glBinormal3dEXT = (PFNGLBINORMAL3DEXTPROC) load(userptr, "glBinormal3dEXT");
    sf_glad_glBinormal3dvEXT = (PFNGLBINORMAL3DVEXTPROC) load(userptr, "glBinormal3dvEXT");
    sf_glad_glBinormal3fEXT = (PFNGLBINORMAL3FEXTPROC) load(userptr, "glBinormal3fEXT");
    sf_glad_glBinormal3fvEXT = (PFNGLBINORMAL3FVEXTPROC) load(userptr, "glBinormal3fvEXT");
    sf_glad_glBinormal3iEXT = (PFNGLBINORMAL3IEXTPROC) load(userptr, "glBinormal3iEXT");
    sf_glad_glBinormal3ivEXT = (PFNGLBINORMAL3IVEXTPROC) load(userptr, "glBinormal3ivEXT");
    sf_glad_glBinormal3sEXT = (PFNGLBINORMAL3SEXTPROC) load(userptr, "glBinormal3sEXT");
    sf_glad_glBinormal3svEXT = (PFNGLBINORMAL3SVEXTPROC) load(userptr, "glBinormal3svEXT");
    sf_glad_glBinormalPointerEXT = (PFNGLBINORMALPOINTEREXTPROC) load(userptr, "glBinormalPointerEXT");
    sf_glad_glTangent3bEXT = (PFNGLTANGENT3BEXTPROC) load(userptr, "glTangent3bEXT");
    sf_glad_glTangent3bvEXT = (PFNGLTANGENT3BVEXTPROC) load(userptr, "glTangent3bvEXT");
    sf_glad_glTangent3dEXT = (PFNGLTANGENT3DEXTPROC) load(userptr, "glTangent3dEXT");
    sf_glad_glTangent3dvEXT = (PFNGLTANGENT3DVEXTPROC) load(userptr, "glTangent3dvEXT");
    sf_glad_glTangent3fEXT = (PFNGLTANGENT3FEXTPROC) load(userptr, "glTangent3fEXT");
    sf_glad_glTangent3fvEXT = (PFNGLTANGENT3FVEXTPROC) load(userptr, "glTangent3fvEXT");
    sf_glad_glTangent3iEXT = (PFNGLTANGENT3IEXTPROC) load(userptr, "glTangent3iEXT");
    sf_glad_glTangent3ivEXT = (PFNGLTANGENT3IVEXTPROC) load(userptr, "glTangent3ivEXT");
    sf_glad_glTangent3sEXT = (PFNGLTANGENT3SEXTPROC) load(userptr, "glTangent3sEXT");
    sf_glad_glTangent3svEXT = (PFNGLTANGENT3SVEXTPROC) load(userptr, "glTangent3svEXT");
    sf_glad_glTangentPointerEXT = (PFNGLTANGENTPOINTEREXTPROC) load(userptr, "glTangentPointerEXT");
}
static void sf_glad_gl_load_GL_EXT_copy_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_copy_texture) return;
    sf_glad_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC) load(userptr, "glCopyTexImage1DEXT");
    sf_glad_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC) load(userptr, "glCopyTexImage2DEXT");
    sf_glad_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC) load(userptr, "glCopyTexSubImage1DEXT");
    sf_glad_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC) load(userptr, "glCopyTexSubImage2DEXT");
    sf_glad_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC) load(userptr, "glCopyTexSubImage3DEXT");
}
static void sf_glad_gl_load_GL_EXT_cull_vertex( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_cull_vertex) return;
    sf_glad_glCullParameterdvEXT = (PFNGLCULLPARAMETERDVEXTPROC) load(userptr, "glCullParameterdvEXT");
    sf_glad_glCullParameterfvEXT = (PFNGLCULLPARAMETERFVEXTPROC) load(userptr, "glCullParameterfvEXT");
}
static void sf_glad_gl_load_GL_EXT_debug_label( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_debug_label) return;
    sf_glad_glGetObjectLabelEXT = (PFNGLGETOBJECTLABELEXTPROC) load(userptr, "glGetObjectLabelEXT");
    sf_glad_glLabelObjectEXT = (PFNGLLABELOBJECTEXTPROC) load(userptr, "glLabelObjectEXT");
}
static void sf_glad_gl_load_GL_EXT_debug_marker( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_debug_marker) return;
    sf_glad_glInsertEventMarkerEXT = (PFNGLINSERTEVENTMARKEREXTPROC) load(userptr, "glInsertEventMarkerEXT");
    sf_glad_glPopGroupMarkerEXT = (PFNGLPOPGROUPMARKEREXTPROC) load(userptr, "glPopGroupMarkerEXT");
    sf_glad_glPushGroupMarkerEXT = (PFNGLPUSHGROUPMARKEREXTPROC) load(userptr, "glPushGroupMarkerEXT");
}
static void sf_glad_gl_load_GL_EXT_depth_bounds_test( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_depth_bounds_test) return;
    sf_glad_glDepthBoundsEXT = (PFNGLDEPTHBOUNDSEXTPROC) load(userptr, "glDepthBoundsEXT");
}
static void sf_glad_gl_load_GL_EXT_direct_state_access( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_direct_state_access) return;
    sf_glad_glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC) load(userptr, "glBindMultiTextureEXT");
    sf_glad_glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) load(userptr, "glCheckNamedFramebufferStatusEXT");
    sf_glad_glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC) load(userptr, "glClearNamedBufferDataEXT");
    sf_glad_glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) load(userptr, "glClearNamedBufferSubDataEXT");
    sf_glad_glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC) load(userptr, "glClientAttribDefaultEXT");
    sf_glad_glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) load(userptr, "glCompressedMultiTexImage1DEXT");
    sf_glad_glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) load(userptr, "glCompressedMultiTexImage2DEXT");
    sf_glad_glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) load(userptr, "glCompressedMultiTexImage3DEXT");
    sf_glad_glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) load(userptr, "glCompressedMultiTexSubImage1DEXT");
    sf_glad_glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) load(userptr, "glCompressedMultiTexSubImage2DEXT");
    sf_glad_glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) load(userptr, "glCompressedMultiTexSubImage3DEXT");
    sf_glad_glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) load(userptr, "glCompressedTextureImage1DEXT");
    sf_glad_glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) load(userptr, "glCompressedTextureImage2DEXT");
    sf_glad_glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) load(userptr, "glCompressedTextureImage3DEXT");
    sf_glad_glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) load(userptr, "glCompressedTextureSubImage1DEXT");
    sf_glad_glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) load(userptr, "glCompressedTextureSubImage2DEXT");
    sf_glad_glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) load(userptr, "glCompressedTextureSubImage3DEXT");
    sf_glad_glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC) load(userptr, "glCopyMultiTexImage1DEXT");
    sf_glad_glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC) load(userptr, "glCopyMultiTexImage2DEXT");
    sf_glad_glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) load(userptr, "glCopyMultiTexSubImage1DEXT");
    sf_glad_glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) load(userptr, "glCopyMultiTexSubImage2DEXT");
    sf_glad_glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) load(userptr, "glCopyMultiTexSubImage3DEXT");
    sf_glad_glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC) load(userptr, "glCopyTextureImage1DEXT");
    sf_glad_glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC) load(userptr, "glCopyTextureImage2DEXT");
    sf_glad_glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) load(userptr, "glCopyTextureSubImage1DEXT");
    sf_glad_glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) load(userptr, "glCopyTextureSubImage2DEXT");
    sf_glad_glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) load(userptr, "glCopyTextureSubImage3DEXT");
    sf_glad_glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) load(userptr, "glDisableClientStateIndexedEXT");
    sf_glad_glDisableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC) load(userptr, "glDisableClientStateiEXT");
    sf_glad_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC) load(userptr, "glDisableIndexedEXT");
    sf_glad_glDisableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) load(userptr, "glDisableVertexArrayAttribEXT");
    sf_glad_glDisableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC) load(userptr, "glDisableVertexArrayEXT");
    sf_glad_glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) load(userptr, "glEnableClientStateIndexedEXT");
    sf_glad_glEnableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC) load(userptr, "glEnableClientStateiEXT");
    sf_glad_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC) load(userptr, "glEnableIndexedEXT");
    sf_glad_glEnableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) load(userptr, "glEnableVertexArrayAttribEXT");
    sf_glad_glEnableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC) load(userptr, "glEnableVertexArrayEXT");
    sf_glad_glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) load(userptr, "glFlushMappedNamedBufferRangeEXT");
    sf_glad_glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) load(userptr, "glFramebufferDrawBufferEXT");
    sf_glad_glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) load(userptr, "glFramebufferDrawBuffersEXT");
    sf_glad_glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC) load(userptr, "glFramebufferReadBufferEXT");
    sf_glad_glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC) load(userptr, "glGenerateMultiTexMipmapEXT");
    sf_glad_glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC) load(userptr, "glGenerateTextureMipmapEXT");
    sf_glad_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC) load(userptr, "glGetBooleanIndexedvEXT");
    sf_glad_glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) load(userptr, "glGetCompressedMultiTexImageEXT");
    sf_glad_glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) load(userptr, "glGetCompressedTextureImageEXT");
    sf_glad_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC) load(userptr, "glGetDoubleIndexedvEXT");
    sf_glad_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC) load(userptr, "glGetDoublei_vEXT");
    sf_glad_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC) load(userptr, "glGetFloatIndexedvEXT");
    sf_glad_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC) load(userptr, "glGetFloati_vEXT");
    sf_glad_glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetFramebufferParameterivEXT");
    sf_glad_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC) load(userptr, "glGetIntegerIndexedvEXT");
    sf_glad_glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC) load(userptr, "glGetMultiTexEnvfvEXT");
    sf_glad_glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC) load(userptr, "glGetMultiTexEnvivEXT");
    sf_glad_glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC) load(userptr, "glGetMultiTexGendvEXT");
    sf_glad_glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC) load(userptr, "glGetMultiTexGenfvEXT");
    sf_glad_glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC) load(userptr, "glGetMultiTexGenivEXT");
    sf_glad_glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC) load(userptr, "glGetMultiTexImageEXT");
    sf_glad_glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) load(userptr, "glGetMultiTexLevelParameterfvEXT");
    sf_glad_glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) load(userptr, "glGetMultiTexLevelParameterivEXT");
    sf_glad_glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC) load(userptr, "glGetMultiTexParameterIivEXT");
    sf_glad_glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) load(userptr, "glGetMultiTexParameterIuivEXT");
    sf_glad_glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC) load(userptr, "glGetMultiTexParameterfvEXT");
    sf_glad_glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC) load(userptr, "glGetMultiTexParameterivEXT");
    sf_glad_glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetNamedBufferParameterivEXT");
    sf_glad_glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) load(userptr, "glGetNamedBufferPointervEXT");
    sf_glad_glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) load(userptr, "glGetNamedBufferSubDataEXT");
    sf_glad_glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) load(userptr, "glGetNamedFramebufferAttachmentParameterivEXT");
    sf_glad_glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetNamedFramebufferParameterivEXT");
    sf_glad_glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterIivEXT");
    sf_glad_glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterIuivEXT");
    sf_glad_glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterdvEXT");
    sf_glad_glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) load(userptr, "glGetNamedProgramLocalParameterfvEXT");
    sf_glad_glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) load(userptr, "glGetNamedProgramStringEXT");
    sf_glad_glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC) load(userptr, "glGetNamedProgramivEXT");
    sf_glad_glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetNamedRenderbufferParameterivEXT");
    sf_glad_glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC) load(userptr, "glGetPointerIndexedvEXT");
    sf_glad_glGetPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC) load(userptr, "glGetPointeri_vEXT");
    sf_glad_glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC) load(userptr, "glGetTextureImageEXT");
    sf_glad_glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) load(userptr, "glGetTextureLevelParameterfvEXT");
    sf_glad_glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) load(userptr, "glGetTextureLevelParameterivEXT");
    sf_glad_glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC) load(userptr, "glGetTextureParameterIivEXT");
    sf_glad_glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) load(userptr, "glGetTextureParameterIuivEXT");
    sf_glad_glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC) load(userptr, "glGetTextureParameterfvEXT");
    sf_glad_glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC) load(userptr, "glGetTextureParameterivEXT");
    sf_glad_glGetVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) load(userptr, "glGetVertexArrayIntegeri_vEXT");
    sf_glad_glGetVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC) load(userptr, "glGetVertexArrayIntegervEXT");
    sf_glad_glGetVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) load(userptr, "glGetVertexArrayPointeri_vEXT");
    sf_glad_glGetVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC) load(userptr, "glGetVertexArrayPointervEXT");
    sf_glad_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC) load(userptr, "glIsEnabledIndexedEXT");
    sf_glad_glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC) load(userptr, "glMapNamedBufferEXT");
    sf_glad_glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC) load(userptr, "glMapNamedBufferRangeEXT");
    sf_glad_glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC) load(userptr, "glMatrixFrustumEXT");
    sf_glad_glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC) load(userptr, "glMatrixLoadIdentityEXT");
    sf_glad_glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC) load(userptr, "glMatrixLoadTransposedEXT");
    sf_glad_glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC) load(userptr, "glMatrixLoadTransposefEXT");
    sf_glad_glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC) load(userptr, "glMatrixLoaddEXT");
    sf_glad_glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC) load(userptr, "glMatrixLoadfEXT");
    sf_glad_glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC) load(userptr, "glMatrixMultTransposedEXT");
    sf_glad_glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC) load(userptr, "glMatrixMultTransposefEXT");
    sf_glad_glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC) load(userptr, "glMatrixMultdEXT");
    sf_glad_glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC) load(userptr, "glMatrixMultfEXT");
    sf_glad_glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC) load(userptr, "glMatrixOrthoEXT");
    sf_glad_glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC) load(userptr, "glMatrixPopEXT");
    sf_glad_glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC) load(userptr, "glMatrixPushEXT");
    sf_glad_glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC) load(userptr, "glMatrixRotatedEXT");
    sf_glad_glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC) load(userptr, "glMatrixRotatefEXT");
    sf_glad_glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC) load(userptr, "glMatrixScaledEXT");
    sf_glad_glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC) load(userptr, "glMatrixScalefEXT");
    sf_glad_glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC) load(userptr, "glMatrixTranslatedEXT");
    sf_glad_glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC) load(userptr, "glMatrixTranslatefEXT");
    sf_glad_glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC) load(userptr, "glMultiTexBufferEXT");
    sf_glad_glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC) load(userptr, "glMultiTexCoordPointerEXT");
    sf_glad_glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC) load(userptr, "glMultiTexEnvfEXT");
    sf_glad_glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC) load(userptr, "glMultiTexEnvfvEXT");
    sf_glad_glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC) load(userptr, "glMultiTexEnviEXT");
    sf_glad_glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC) load(userptr, "glMultiTexEnvivEXT");
    sf_glad_glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC) load(userptr, "glMultiTexGendEXT");
    sf_glad_glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC) load(userptr, "glMultiTexGendvEXT");
    sf_glad_glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC) load(userptr, "glMultiTexGenfEXT");
    sf_glad_glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC) load(userptr, "glMultiTexGenfvEXT");
    sf_glad_glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC) load(userptr, "glMultiTexGeniEXT");
    sf_glad_glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC) load(userptr, "glMultiTexGenivEXT");
    sf_glad_glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC) load(userptr, "glMultiTexImage1DEXT");
    sf_glad_glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC) load(userptr, "glMultiTexImage2DEXT");
    sf_glad_glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC) load(userptr, "glMultiTexImage3DEXT");
    sf_glad_glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC) load(userptr, "glMultiTexParameterIivEXT");
    sf_glad_glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC) load(userptr, "glMultiTexParameterIuivEXT");
    sf_glad_glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC) load(userptr, "glMultiTexParameterfEXT");
    sf_glad_glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC) load(userptr, "glMultiTexParameterfvEXT");
    sf_glad_glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC) load(userptr, "glMultiTexParameteriEXT");
    sf_glad_glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC) load(userptr, "glMultiTexParameterivEXT");
    sf_glad_glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC) load(userptr, "glMultiTexRenderbufferEXT");
    sf_glad_glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC) load(userptr, "glMultiTexSubImage1DEXT");
    sf_glad_glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC) load(userptr, "glMultiTexSubImage2DEXT");
    sf_glad_glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC) load(userptr, "glMultiTexSubImage3DEXT");
    sf_glad_glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC) load(userptr, "glNamedBufferDataEXT");
    sf_glad_glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC) load(userptr, "glNamedBufferStorageEXT");
    sf_glad_glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC) load(userptr, "glNamedBufferSubDataEXT");
    sf_glad_glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) load(userptr, "glNamedCopyBufferSubDataEXT");
    sf_glad_glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) load(userptr, "glNamedFramebufferParameteriEXT");
    sf_glad_glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) load(userptr, "glNamedFramebufferRenderbufferEXT");
    sf_glad_glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) load(userptr, "glNamedFramebufferTexture1DEXT");
    sf_glad_glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) load(userptr, "glNamedFramebufferTexture2DEXT");
    sf_glad_glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) load(userptr, "glNamedFramebufferTexture3DEXT");
    sf_glad_glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) load(userptr, "glNamedFramebufferTextureEXT");
    sf_glad_glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) load(userptr, "glNamedFramebufferTextureFaceEXT");
    sf_glad_glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glNamedFramebufferTextureLayerEXT");
    sf_glad_glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) load(userptr, "glNamedProgramLocalParameter4dEXT");
    sf_glad_glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) load(userptr, "glNamedProgramLocalParameter4dvEXT");
    sf_glad_glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) load(userptr, "glNamedProgramLocalParameter4fEXT");
    sf_glad_glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) load(userptr, "glNamedProgramLocalParameter4fvEXT");
    sf_glad_glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) load(userptr, "glNamedProgramLocalParameterI4iEXT");
    sf_glad_glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) load(userptr, "glNamedProgramLocalParameterI4ivEXT");
    sf_glad_glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) load(userptr, "glNamedProgramLocalParameterI4uiEXT");
    sf_glad_glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) load(userptr, "glNamedProgramLocalParameterI4uivEXT");
    sf_glad_glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) load(userptr, "glNamedProgramLocalParameters4fvEXT");
    sf_glad_glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) load(userptr, "glNamedProgramLocalParametersI4ivEXT");
    sf_glad_glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) load(userptr, "glNamedProgramLocalParametersI4uivEXT");
    sf_glad_glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC) load(userptr, "glNamedProgramStringEXT");
    sf_glad_glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) load(userptr, "glNamedRenderbufferStorageEXT");
    sf_glad_glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) load(userptr, "glNamedRenderbufferStorageMultisampleCoverageEXT");
    sf_glad_glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) load(userptr, "glNamedRenderbufferStorageMultisampleEXT");
    sf_glad_glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC) load(userptr, "glProgramUniform1dEXT");
    sf_glad_glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC) load(userptr, "glProgramUniform1dvEXT");
    sf_glad_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC) load(userptr, "glProgramUniform1fEXT");
    sf_glad_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC) load(userptr, "glProgramUniform1fvEXT");
    sf_glad_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC) load(userptr, "glProgramUniform1iEXT");
    sf_glad_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC) load(userptr, "glProgramUniform1ivEXT");
    sf_glad_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC) load(userptr, "glProgramUniform1uiEXT");
    sf_glad_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC) load(userptr, "glProgramUniform1uivEXT");
    sf_glad_glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC) load(userptr, "glProgramUniform2dEXT");
    sf_glad_glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC) load(userptr, "glProgramUniform2dvEXT");
    sf_glad_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC) load(userptr, "glProgramUniform2fEXT");
    sf_glad_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC) load(userptr, "glProgramUniform2fvEXT");
    sf_glad_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC) load(userptr, "glProgramUniform2iEXT");
    sf_glad_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC) load(userptr, "glProgramUniform2ivEXT");
    sf_glad_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC) load(userptr, "glProgramUniform2uiEXT");
    sf_glad_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC) load(userptr, "glProgramUniform2uivEXT");
    sf_glad_glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC) load(userptr, "glProgramUniform3dEXT");
    sf_glad_glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC) load(userptr, "glProgramUniform3dvEXT");
    sf_glad_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC) load(userptr, "glProgramUniform3fEXT");
    sf_glad_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC) load(userptr, "glProgramUniform3fvEXT");
    sf_glad_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC) load(userptr, "glProgramUniform3iEXT");
    sf_glad_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC) load(userptr, "glProgramUniform3ivEXT");
    sf_glad_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC) load(userptr, "glProgramUniform3uiEXT");
    sf_glad_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC) load(userptr, "glProgramUniform3uivEXT");
    sf_glad_glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC) load(userptr, "glProgramUniform4dEXT");
    sf_glad_glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC) load(userptr, "glProgramUniform4dvEXT");
    sf_glad_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC) load(userptr, "glProgramUniform4fEXT");
    sf_glad_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC) load(userptr, "glProgramUniform4fvEXT");
    sf_glad_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC) load(userptr, "glProgramUniform4iEXT");
    sf_glad_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC) load(userptr, "glProgramUniform4ivEXT");
    sf_glad_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC) load(userptr, "glProgramUniform4uiEXT");
    sf_glad_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC) load(userptr, "glProgramUniform4uivEXT");
    sf_glad_glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) load(userptr, "glProgramUniformMatrix2dvEXT");
    sf_glad_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) load(userptr, "glProgramUniformMatrix2fvEXT");
    sf_glad_glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) load(userptr, "glProgramUniformMatrix2x3dvEXT");
    sf_glad_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) load(userptr, "glProgramUniformMatrix2x3fvEXT");
    sf_glad_glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) load(userptr, "glProgramUniformMatrix2x4dvEXT");
    sf_glad_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) load(userptr, "glProgramUniformMatrix2x4fvEXT");
    sf_glad_glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) load(userptr, "glProgramUniformMatrix3dvEXT");
    sf_glad_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) load(userptr, "glProgramUniformMatrix3fvEXT");
    sf_glad_glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) load(userptr, "glProgramUniformMatrix3x2dvEXT");
    sf_glad_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) load(userptr, "glProgramUniformMatrix3x2fvEXT");
    sf_glad_glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) load(userptr, "glProgramUniformMatrix3x4dvEXT");
    sf_glad_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) load(userptr, "glProgramUniformMatrix3x4fvEXT");
    sf_glad_glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) load(userptr, "glProgramUniformMatrix4dvEXT");
    sf_glad_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) load(userptr, "glProgramUniformMatrix4fvEXT");
    sf_glad_glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) load(userptr, "glProgramUniformMatrix4x2dvEXT");
    sf_glad_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) load(userptr, "glProgramUniformMatrix4x2fvEXT");
    sf_glad_glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) load(userptr, "glProgramUniformMatrix4x3dvEXT");
    sf_glad_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) load(userptr, "glProgramUniformMatrix4x3fvEXT");
    sf_glad_glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) load(userptr, "glPushClientAttribDefaultEXT");
    sf_glad_glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC) load(userptr, "glTextureBufferEXT");
    sf_glad_glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC) load(userptr, "glTextureBufferRangeEXT");
    sf_glad_glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC) load(userptr, "glTextureImage1DEXT");
    sf_glad_glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC) load(userptr, "glTextureImage2DEXT");
    sf_glad_glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC) load(userptr, "glTextureImage3DEXT");
    sf_glad_glTexturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC) load(userptr, "glTexturePageCommitmentEXT");
    sf_glad_glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC) load(userptr, "glTextureParameterIivEXT");
    sf_glad_glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC) load(userptr, "glTextureParameterIuivEXT");
    sf_glad_glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC) load(userptr, "glTextureParameterfEXT");
    sf_glad_glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC) load(userptr, "glTextureParameterfvEXT");
    sf_glad_glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC) load(userptr, "glTextureParameteriEXT");
    sf_glad_glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC) load(userptr, "glTextureParameterivEXT");
    sf_glad_glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC) load(userptr, "glTextureRenderbufferEXT");
    sf_glad_glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) load(userptr, "glTextureStorage1DEXT");
    sf_glad_glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) load(userptr, "glTextureStorage2DEXT");
    sf_glad_glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) load(userptr, "glTextureStorage2DMultisampleEXT");
    sf_glad_glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) load(userptr, "glTextureStorage3DEXT");
    sf_glad_glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) load(userptr, "glTextureStorage3DMultisampleEXT");
    sf_glad_glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC) load(userptr, "glTextureSubImage1DEXT");
    sf_glad_glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC) load(userptr, "glTextureSubImage2DEXT");
    sf_glad_glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC) load(userptr, "glTextureSubImage3DEXT");
    sf_glad_glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC) load(userptr, "glUnmapNamedBufferEXT");
    sf_glad_glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) load(userptr, "glVertexArrayBindVertexBufferEXT");
    sf_glad_glVertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) load(userptr, "glVertexArrayColorOffsetEXT");
    sf_glad_glVertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) load(userptr, "glVertexArrayEdgeFlagOffsetEXT");
    sf_glad_glVertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) load(userptr, "glVertexArrayFogCoordOffsetEXT");
    sf_glad_glVertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) load(userptr, "glVertexArrayIndexOffsetEXT");
    sf_glad_glVertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) load(userptr, "glVertexArrayMultiTexCoordOffsetEXT");
    sf_glad_glVertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) load(userptr, "glVertexArrayNormalOffsetEXT");
    sf_glad_glVertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) load(userptr, "glVertexArraySecondaryColorOffsetEXT");
    sf_glad_glVertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) load(userptr, "glVertexArrayTexCoordOffsetEXT");
    sf_glad_glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) load(userptr, "glVertexArrayVertexAttribBindingEXT");
    sf_glad_glVertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) load(userptr, "glVertexArrayVertexAttribDivisorEXT");
    sf_glad_glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) load(userptr, "glVertexArrayVertexAttribFormatEXT");
    sf_glad_glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) load(userptr, "glVertexArrayVertexAttribIFormatEXT");
    sf_glad_glVertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) load(userptr, "glVertexArrayVertexAttribIOffsetEXT");
    sf_glad_glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) load(userptr, "glVertexArrayVertexAttribLFormatEXT");
    sf_glad_glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) load(userptr, "glVertexArrayVertexAttribLOffsetEXT");
    sf_glad_glVertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) load(userptr, "glVertexArrayVertexAttribOffsetEXT");
    sf_glad_glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) load(userptr, "glVertexArrayVertexBindingDivisorEXT");
    sf_glad_glVertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) load(userptr, "glVertexArrayVertexOffsetEXT");
}
static void sf_glad_gl_load_GL_EXT_draw_buffers2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_draw_buffers2) return;
    sf_glad_glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC) load(userptr, "glColorMaskIndexedEXT");
    sf_glad_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC) load(userptr, "glDisableIndexedEXT");
    sf_glad_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC) load(userptr, "glEnableIndexedEXT");
    sf_glad_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC) load(userptr, "glGetBooleanIndexedvEXT");
    sf_glad_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC) load(userptr, "glGetIntegerIndexedvEXT");
    sf_glad_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC) load(userptr, "glIsEnabledIndexedEXT");
}
static void sf_glad_gl_load_GL_EXT_draw_instanced( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_draw_instanced) return;
    sf_glad_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC) load(userptr, "glDrawArraysInstancedEXT");
    sf_glad_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC) load(userptr, "glDrawElementsInstancedEXT");
}
static void sf_glad_gl_load_GL_EXT_draw_range_elements( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_draw_range_elements) return;
    sf_glad_glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC) load(userptr, "glDrawRangeElementsEXT");
}
static void sf_glad_gl_load_GL_EXT_external_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_external_buffer) return;
    sf_glad_glBufferStorageExternalEXT = (PFNGLBUFFERSTORAGEEXTERNALEXTPROC) load(userptr, "glBufferStorageExternalEXT");
    sf_glad_glNamedBufferStorageExternalEXT = (PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC) load(userptr, "glNamedBufferStorageExternalEXT");
}
static void sf_glad_gl_load_GL_EXT_fog_coord( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_fog_coord) return;
    sf_glad_glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC) load(userptr, "glFogCoordPointerEXT");
    sf_glad_glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC) load(userptr, "glFogCoorddEXT");
    sf_glad_glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC) load(userptr, "glFogCoorddvEXT");
    sf_glad_glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC) load(userptr, "glFogCoordfEXT");
    sf_glad_glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC) load(userptr, "glFogCoordfvEXT");
}
static void sf_glad_gl_load_GL_EXT_framebuffer_blit( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_framebuffer_blit) return;
    sf_glad_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC) load(userptr, "glBlitFramebufferEXT");
}
static void sf_glad_gl_load_GL_EXT_framebuffer_blit_layers( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_framebuffer_blit_layers) return;
    sf_glad_glBlitFramebufferLayerEXT = (PFNGLBLITFRAMEBUFFERLAYEREXTPROC) load(userptr, "glBlitFramebufferLayerEXT");
    sf_glad_glBlitFramebufferLayersEXT = (PFNGLBLITFRAMEBUFFERLAYERSEXTPROC) load(userptr, "glBlitFramebufferLayersEXT");
}
static void sf_glad_gl_load_GL_EXT_framebuffer_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_framebuffer_multisample) return;
    sf_glad_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) load(userptr, "glRenderbufferStorageMultisampleEXT");
}
static void sf_glad_gl_load_GL_EXT_framebuffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_framebuffer_object) return;
    sf_glad_glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC) load(userptr, "glBindFramebufferEXT");
    sf_glad_glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC) load(userptr, "glBindRenderbufferEXT");
    sf_glad_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) load(userptr, "glCheckFramebufferStatusEXT");
    sf_glad_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC) load(userptr, "glDeleteFramebuffersEXT");
    sf_glad_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC) load(userptr, "glDeleteRenderbuffersEXT");
    sf_glad_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) load(userptr, "glFramebufferRenderbufferEXT");
    sf_glad_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) load(userptr, "glFramebufferTexture1DEXT");
    sf_glad_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) load(userptr, "glFramebufferTexture2DEXT");
    sf_glad_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) load(userptr, "glFramebufferTexture3DEXT");
    sf_glad_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC) load(userptr, "glGenFramebuffersEXT");
    sf_glad_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC) load(userptr, "glGenRenderbuffersEXT");
    sf_glad_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC) load(userptr, "glGenerateMipmapEXT");
    sf_glad_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) load(userptr, "glGetFramebufferAttachmentParameterivEXT");
    sf_glad_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) load(userptr, "glGetRenderbufferParameterivEXT");
    sf_glad_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC) load(userptr, "glIsFramebufferEXT");
    sf_glad_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC) load(userptr, "glIsRenderbufferEXT");
    sf_glad_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC) load(userptr, "glRenderbufferStorageEXT");
}
static void sf_glad_gl_load_GL_EXT_geometry_shader4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_geometry_shader4) return;
    sf_glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC) load(userptr, "glProgramParameteriEXT");
}
static void sf_glad_gl_load_GL_EXT_gpu_program_parameters( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_gpu_program_parameters) return;
    sf_glad_glProgramEnvParameters4fvEXT = (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) load(userptr, "glProgramEnvParameters4fvEXT");
    sf_glad_glProgramLocalParameters4fvEXT = (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) load(userptr, "glProgramLocalParameters4fvEXT");
}
static void sf_glad_gl_load_GL_EXT_gpu_shader4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_gpu_shader4) return;
    sf_glad_glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC) load(userptr, "glBindFragDataLocationEXT");
    sf_glad_glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC) load(userptr, "glGetFragDataLocationEXT");
    sf_glad_glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC) load(userptr, "glGetUniformuivEXT");
    sf_glad_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC) load(userptr, "glGetVertexAttribIivEXT");
    sf_glad_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC) load(userptr, "glGetVertexAttribIuivEXT");
    sf_glad_glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC) load(userptr, "glUniform1uiEXT");
    sf_glad_glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC) load(userptr, "glUniform1uivEXT");
    sf_glad_glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC) load(userptr, "glUniform2uiEXT");
    sf_glad_glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC) load(userptr, "glUniform2uivEXT");
    sf_glad_glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC) load(userptr, "glUniform3uiEXT");
    sf_glad_glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC) load(userptr, "glUniform3uivEXT");
    sf_glad_glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC) load(userptr, "glUniform4uiEXT");
    sf_glad_glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC) load(userptr, "glUniform4uivEXT");
    sf_glad_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC) load(userptr, "glVertexAttribI1iEXT");
    sf_glad_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC) load(userptr, "glVertexAttribI1ivEXT");
    sf_glad_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC) load(userptr, "glVertexAttribI1uiEXT");
    sf_glad_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC) load(userptr, "glVertexAttribI1uivEXT");
    sf_glad_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC) load(userptr, "glVertexAttribI2iEXT");
    sf_glad_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC) load(userptr, "glVertexAttribI2ivEXT");
    sf_glad_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC) load(userptr, "glVertexAttribI2uiEXT");
    sf_glad_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC) load(userptr, "glVertexAttribI2uivEXT");
    sf_glad_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC) load(userptr, "glVertexAttribI3iEXT");
    sf_glad_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC) load(userptr, "glVertexAttribI3ivEXT");
    sf_glad_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC) load(userptr, "glVertexAttribI3uiEXT");
    sf_glad_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC) load(userptr, "glVertexAttribI3uivEXT");
    sf_glad_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC) load(userptr, "glVertexAttribI4bvEXT");
    sf_glad_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC) load(userptr, "glVertexAttribI4iEXT");
    sf_glad_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC) load(userptr, "glVertexAttribI4ivEXT");
    sf_glad_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC) load(userptr, "glVertexAttribI4svEXT");
    sf_glad_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC) load(userptr, "glVertexAttribI4ubvEXT");
    sf_glad_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC) load(userptr, "glVertexAttribI4uiEXT");
    sf_glad_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC) load(userptr, "glVertexAttribI4uivEXT");
    sf_glad_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC) load(userptr, "glVertexAttribI4usvEXT");
    sf_glad_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC) load(userptr, "glVertexAttribIPointerEXT");
}
static void sf_glad_gl_load_GL_EXT_histogram( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_histogram) return;
    sf_glad_glGetHistogramEXT = (PFNGLGETHISTOGRAMEXTPROC) load(userptr, "glGetHistogramEXT");
    sf_glad_glGetHistogramParameterfvEXT = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) load(userptr, "glGetHistogramParameterfvEXT");
    sf_glad_glGetHistogramParameterivEXT = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) load(userptr, "glGetHistogramParameterivEXT");
    sf_glad_glGetMinmaxEXT = (PFNGLGETMINMAXEXTPROC) load(userptr, "glGetMinmaxEXT");
    sf_glad_glGetMinmaxParameterfvEXT = (PFNGLGETMINMAXPARAMETERFVEXTPROC) load(userptr, "glGetMinmaxParameterfvEXT");
    sf_glad_glGetMinmaxParameterivEXT = (PFNGLGETMINMAXPARAMETERIVEXTPROC) load(userptr, "glGetMinmaxParameterivEXT");
    sf_glad_glHistogramEXT = (PFNGLHISTOGRAMEXTPROC) load(userptr, "glHistogramEXT");
    sf_glad_glMinmaxEXT = (PFNGLMINMAXEXTPROC) load(userptr, "glMinmaxEXT");
    sf_glad_glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC) load(userptr, "glResetHistogramEXT");
    sf_glad_glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC) load(userptr, "glResetMinmaxEXT");
}
static void sf_glad_gl_load_GL_EXT_index_func( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_index_func) return;
    sf_glad_glIndexFuncEXT = (PFNGLINDEXFUNCEXTPROC) load(userptr, "glIndexFuncEXT");
}
static void sf_glad_gl_load_GL_EXT_index_material( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_index_material) return;
    sf_glad_glIndexMaterialEXT = (PFNGLINDEXMATERIALEXTPROC) load(userptr, "glIndexMaterialEXT");
}
static void sf_glad_gl_load_GL_EXT_light_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_light_texture) return;
    sf_glad_glApplyTextureEXT = (PFNGLAPPLYTEXTUREEXTPROC) load(userptr, "glApplyTextureEXT");
    sf_glad_glTextureLightEXT = (PFNGLTEXTURELIGHTEXTPROC) load(userptr, "glTextureLightEXT");
    sf_glad_glTextureMaterialEXT = (PFNGLTEXTUREMATERIALEXTPROC) load(userptr, "glTextureMaterialEXT");
}
static void sf_glad_gl_load_GL_EXT_memory_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_memory_object) return;
    sf_glad_glBufferStorageMemEXT = (PFNGLBUFFERSTORAGEMEMEXTPROC) load(userptr, "glBufferStorageMemEXT");
    sf_glad_glCreateMemoryObjectsEXT = (PFNGLCREATEMEMORYOBJECTSEXTPROC) load(userptr, "glCreateMemoryObjectsEXT");
    sf_glad_glDeleteMemoryObjectsEXT = (PFNGLDELETEMEMORYOBJECTSEXTPROC) load(userptr, "glDeleteMemoryObjectsEXT");
    sf_glad_glGetMemoryObjectParameterivEXT = (PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC) load(userptr, "glGetMemoryObjectParameterivEXT");
    sf_glad_glGetUnsignedBytei_vEXT = (PFNGLGETUNSIGNEDBYTEI_VEXTPROC) load(userptr, "glGetUnsignedBytei_vEXT");
    sf_glad_glGetUnsignedBytevEXT = (PFNGLGETUNSIGNEDBYTEVEXTPROC) load(userptr, "glGetUnsignedBytevEXT");
    sf_glad_glIsMemoryObjectEXT = (PFNGLISMEMORYOBJECTEXTPROC) load(userptr, "glIsMemoryObjectEXT");
    sf_glad_glMemoryObjectParameterivEXT = (PFNGLMEMORYOBJECTPARAMETERIVEXTPROC) load(userptr, "glMemoryObjectParameterivEXT");
    sf_glad_glNamedBufferStorageMemEXT = (PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC) load(userptr, "glNamedBufferStorageMemEXT");
    sf_glad_glTexStorageMem1DEXT = (PFNGLTEXSTORAGEMEM1DEXTPROC) load(userptr, "glTexStorageMem1DEXT");
    sf_glad_glTexStorageMem2DEXT = (PFNGLTEXSTORAGEMEM2DEXTPROC) load(userptr, "glTexStorageMem2DEXT");
    sf_glad_glTexStorageMem2DMultisampleEXT = (PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC) load(userptr, "glTexStorageMem2DMultisampleEXT");
    sf_glad_glTexStorageMem3DEXT = (PFNGLTEXSTORAGEMEM3DEXTPROC) load(userptr, "glTexStorageMem3DEXT");
    sf_glad_glTexStorageMem3DMultisampleEXT = (PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC) load(userptr, "glTexStorageMem3DMultisampleEXT");
    sf_glad_glTextureStorageMem1DEXT = (PFNGLTEXTURESTORAGEMEM1DEXTPROC) load(userptr, "glTextureStorageMem1DEXT");
    sf_glad_glTextureStorageMem2DEXT = (PFNGLTEXTURESTORAGEMEM2DEXTPROC) load(userptr, "glTextureStorageMem2DEXT");
    sf_glad_glTextureStorageMem2DMultisampleEXT = (PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC) load(userptr, "glTextureStorageMem2DMultisampleEXT");
    sf_glad_glTextureStorageMem3DEXT = (PFNGLTEXTURESTORAGEMEM3DEXTPROC) load(userptr, "glTextureStorageMem3DEXT");
    sf_glad_glTextureStorageMem3DMultisampleEXT = (PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC) load(userptr, "glTextureStorageMem3DMultisampleEXT");
}
static void sf_glad_gl_load_GL_EXT_memory_object_fd( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_memory_object_fd) return;
    sf_glad_glImportMemoryFdEXT = (PFNGLIMPORTMEMORYFDEXTPROC) load(userptr, "glImportMemoryFdEXT");
}
static void sf_glad_gl_load_GL_EXT_memory_object_win32( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_memory_object_win32) return;
    sf_glad_glImportMemoryWin32HandleEXT = (PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC) load(userptr, "glImportMemoryWin32HandleEXT");
    sf_glad_glImportMemoryWin32NameEXT = (PFNGLIMPORTMEMORYWIN32NAMEEXTPROC) load(userptr, "glImportMemoryWin32NameEXT");
}
static void sf_glad_gl_load_GL_EXT_multi_draw_arrays( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_multi_draw_arrays) return;
    sf_glad_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC) load(userptr, "glMultiDrawArraysEXT");
    sf_glad_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC) load(userptr, "glMultiDrawElementsEXT");
}
static void sf_glad_gl_load_GL_EXT_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_multisample) return;
    sf_glad_glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC) load(userptr, "glSampleMaskEXT");
    sf_glad_glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC) load(userptr, "glSamplePatternEXT");
}
static void sf_glad_gl_load_GL_EXT_paletted_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_paletted_texture) return;
    sf_glad_glColorTableEXT = (PFNGLCOLORTABLEEXTPROC) load(userptr, "glColorTableEXT");
    sf_glad_glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC) load(userptr, "glGetColorTableEXT");
    sf_glad_glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) load(userptr, "glGetColorTableParameterfvEXT");
    sf_glad_glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) load(userptr, "glGetColorTableParameterivEXT");
}
static void sf_glad_gl_load_GL_EXT_pixel_transform( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_pixel_transform) return;
    sf_glad_glGetPixelTransformParameterfvEXT = (PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) load(userptr, "glGetPixelTransformParameterfvEXT");
    sf_glad_glGetPixelTransformParameterivEXT = (PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) load(userptr, "glGetPixelTransformParameterivEXT");
    sf_glad_glPixelTransformParameterfEXT = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) load(userptr, "glPixelTransformParameterfEXT");
    sf_glad_glPixelTransformParameterfvEXT = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) load(userptr, "glPixelTransformParameterfvEXT");
    sf_glad_glPixelTransformParameteriEXT = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) load(userptr, "glPixelTransformParameteriEXT");
    sf_glad_glPixelTransformParameterivEXT = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) load(userptr, "glPixelTransformParameterivEXT");
}
static void sf_glad_gl_load_GL_EXT_point_parameters( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_point_parameters) return;
    sf_glad_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC) load(userptr, "glPointParameterfEXT");
    sf_glad_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC) load(userptr, "glPointParameterfvEXT");
}
static void sf_glad_gl_load_GL_EXT_polygon_offset( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_polygon_offset) return;
    sf_glad_glPolygonOffsetEXT = (PFNGLPOLYGONOFFSETEXTPROC) load(userptr, "glPolygonOffsetEXT");
}
static void sf_glad_gl_load_GL_EXT_polygon_offset_clamp( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_polygon_offset_clamp) return;
    sf_glad_glPolygonOffsetClampEXT = (PFNGLPOLYGONOFFSETCLAMPEXTPROC) load(userptr, "glPolygonOffsetClampEXT");
}
static void sf_glad_gl_load_GL_EXT_provoking_vertex( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_provoking_vertex) return;
    sf_glad_glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC) load(userptr, "glProvokingVertexEXT");
}
static void sf_glad_gl_load_GL_EXT_raster_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_raster_multisample) return;
    sf_glad_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) load(userptr, "glRasterSamplesEXT");
}
static void sf_glad_gl_load_GL_EXT_secondary_color( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_secondary_color) return;
    sf_glad_glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC) load(userptr, "glSecondaryColor3bEXT");
    sf_glad_glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC) load(userptr, "glSecondaryColor3bvEXT");
    sf_glad_glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC) load(userptr, "glSecondaryColor3dEXT");
    sf_glad_glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC) load(userptr, "glSecondaryColor3dvEXT");
    sf_glad_glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC) load(userptr, "glSecondaryColor3fEXT");
    sf_glad_glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC) load(userptr, "glSecondaryColor3fvEXT");
    sf_glad_glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC) load(userptr, "glSecondaryColor3iEXT");
    sf_glad_glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC) load(userptr, "glSecondaryColor3ivEXT");
    sf_glad_glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC) load(userptr, "glSecondaryColor3sEXT");
    sf_glad_glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC) load(userptr, "glSecondaryColor3svEXT");
    sf_glad_glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC) load(userptr, "glSecondaryColor3ubEXT");
    sf_glad_glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC) load(userptr, "glSecondaryColor3ubvEXT");
    sf_glad_glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC) load(userptr, "glSecondaryColor3uiEXT");
    sf_glad_glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC) load(userptr, "glSecondaryColor3uivEXT");
    sf_glad_glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC) load(userptr, "glSecondaryColor3usEXT");
    sf_glad_glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC) load(userptr, "glSecondaryColor3usvEXT");
    sf_glad_glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC) load(userptr, "glSecondaryColorPointerEXT");
}
static void sf_glad_gl_load_GL_EXT_semaphore( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_semaphore) return;
    sf_glad_glDeleteSemaphoresEXT = (PFNGLDELETESEMAPHORESEXTPROC) load(userptr, "glDeleteSemaphoresEXT");
    sf_glad_glGenSemaphoresEXT = (PFNGLGENSEMAPHORESEXTPROC) load(userptr, "glGenSemaphoresEXT");
    sf_glad_glGetSemaphoreParameterui64vEXT = (PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC) load(userptr, "glGetSemaphoreParameterui64vEXT");
    sf_glad_glGetUnsignedBytei_vEXT = (PFNGLGETUNSIGNEDBYTEI_VEXTPROC) load(userptr, "glGetUnsignedBytei_vEXT");
    sf_glad_glGetUnsignedBytevEXT = (PFNGLGETUNSIGNEDBYTEVEXTPROC) load(userptr, "glGetUnsignedBytevEXT");
    sf_glad_glIsSemaphoreEXT = (PFNGLISSEMAPHOREEXTPROC) load(userptr, "glIsSemaphoreEXT");
    sf_glad_glSemaphoreParameterui64vEXT = (PFNGLSEMAPHOREPARAMETERUI64VEXTPROC) load(userptr, "glSemaphoreParameterui64vEXT");
    sf_glad_glSignalSemaphoreEXT = (PFNGLSIGNALSEMAPHOREEXTPROC) load(userptr, "glSignalSemaphoreEXT");
    sf_glad_glWaitSemaphoreEXT = (PFNGLWAITSEMAPHOREEXTPROC) load(userptr, "glWaitSemaphoreEXT");
}
static void sf_glad_gl_load_GL_EXT_semaphore_fd( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_semaphore_fd) return;
    sf_glad_glImportSemaphoreFdEXT = (PFNGLIMPORTSEMAPHOREFDEXTPROC) load(userptr, "glImportSemaphoreFdEXT");
}
static void sf_glad_gl_load_GL_EXT_semaphore_win32( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_semaphore_win32) return;
    sf_glad_glImportSemaphoreWin32HandleEXT = (PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC) load(userptr, "glImportSemaphoreWin32HandleEXT");
    sf_glad_glImportSemaphoreWin32NameEXT = (PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC) load(userptr, "glImportSemaphoreWin32NameEXT");
}
static void sf_glad_gl_load_GL_EXT_separate_shader_objects( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_separate_shader_objects) return;
    sf_glad_glActiveProgramEXT = (PFNGLACTIVEPROGRAMEXTPROC) load(userptr, "glActiveProgramEXT");
    sf_glad_glCreateShaderProgramEXT = (PFNGLCREATESHADERPROGRAMEXTPROC) load(userptr, "glCreateShaderProgramEXT");
    sf_glad_glUseShaderProgramEXT = (PFNGLUSESHADERPROGRAMEXTPROC) load(userptr, "glUseShaderProgramEXT");
}
static void sf_glad_gl_load_GL_EXT_shader_framebuffer_fetch_non_coherent( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_shader_framebuffer_fetch_non_coherent) return;
    sf_glad_glFramebufferFetchBarrierEXT = (PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC) load(userptr, "glFramebufferFetchBarrierEXT");
}
static void sf_glad_gl_load_GL_EXT_shader_image_load_store( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_shader_image_load_store) return;
    sf_glad_glBindImageTextureEXT = (PFNGLBINDIMAGETEXTUREEXTPROC) load(userptr, "glBindImageTextureEXT");
    sf_glad_glMemoryBarrierEXT = (PFNGLMEMORYBARRIEREXTPROC) load(userptr, "glMemoryBarrierEXT");
}
static void sf_glad_gl_load_GL_EXT_stencil_clear_tag( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_stencil_clear_tag) return;
    sf_glad_glStencilClearTagEXT = (PFNGLSTENCILCLEARTAGEXTPROC) load(userptr, "glStencilClearTagEXT");
}
static void sf_glad_gl_load_GL_EXT_stencil_two_side( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_stencil_two_side) return;
    sf_glad_glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC) load(userptr, "glActiveStencilFaceEXT");
}
static void sf_glad_gl_load_GL_EXT_subtexture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_subtexture) return;
    sf_glad_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC) load(userptr, "glTexSubImage1DEXT");
    sf_glad_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC) load(userptr, "glTexSubImage2DEXT");
}
static void sf_glad_gl_load_GL_EXT_texture3D( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture3D) return;
    sf_glad_glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC) load(userptr, "glTexImage3DEXT");
    sf_glad_glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC) load(userptr, "glTexSubImage3DEXT");
}
static void sf_glad_gl_load_GL_EXT_texture_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture_array) return;
    sf_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glFramebufferTextureLayerEXT");
}
static void sf_glad_gl_load_GL_EXT_texture_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture_buffer_object) return;
    sf_glad_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC) load(userptr, "glTexBufferEXT");
}
static void sf_glad_gl_load_GL_EXT_texture_integer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture_integer) return;
    sf_glad_glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC) load(userptr, "glClearColorIiEXT");
    sf_glad_glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC) load(userptr, "glClearColorIuiEXT");
    sf_glad_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC) load(userptr, "glGetTexParameterIivEXT");
    sf_glad_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC) load(userptr, "glGetTexParameterIuivEXT");
    sf_glad_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC) load(userptr, "glTexParameterIivEXT");
    sf_glad_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC) load(userptr, "glTexParameterIuivEXT");
}
static void sf_glad_gl_load_GL_EXT_texture_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture_object) return;
    sf_glad_glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC) load(userptr, "glAreTexturesResidentEXT");
    sf_glad_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC) load(userptr, "glBindTextureEXT");
    sf_glad_glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC) load(userptr, "glDeleteTexturesEXT");
    sf_glad_glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC) load(userptr, "glGenTexturesEXT");
    sf_glad_glIsTextureEXT = (PFNGLISTEXTUREEXTPROC) load(userptr, "glIsTextureEXT");
    sf_glad_glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC) load(userptr, "glPrioritizeTexturesEXT");
}
static void sf_glad_gl_load_GL_EXT_texture_perturb_normal( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture_perturb_normal) return;
    sf_glad_glTextureNormalEXT = (PFNGLTEXTURENORMALEXTPROC) load(userptr, "glTextureNormalEXT");
}
static void sf_glad_gl_load_GL_EXT_texture_storage( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_texture_storage) return;
    sf_glad_glTexStorage1DEXT = (PFNGLTEXSTORAGE1DEXTPROC) load(userptr, "glTexStorage1DEXT");
    sf_glad_glTexStorage2DEXT = (PFNGLTEXSTORAGE2DEXTPROC) load(userptr, "glTexStorage2DEXT");
    sf_glad_glTexStorage3DEXT = (PFNGLTEXSTORAGE3DEXTPROC) load(userptr, "glTexStorage3DEXT");
    sf_glad_glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) load(userptr, "glTextureStorage1DEXT");
    sf_glad_glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) load(userptr, "glTextureStorage2DEXT");
    sf_glad_glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) load(userptr, "glTextureStorage3DEXT");
}
static void sf_glad_gl_load_GL_EXT_timer_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_timer_query) return;
    sf_glad_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC) load(userptr, "glGetQueryObjecti64vEXT");
    sf_glad_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC) load(userptr, "glGetQueryObjectui64vEXT");
}
static void sf_glad_gl_load_GL_EXT_transform_feedback( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_transform_feedback) return;
    sf_glad_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) load(userptr, "glBeginTransformFeedbackEXT");
    sf_glad_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC) load(userptr, "glBindBufferBaseEXT");
    sf_glad_glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC) load(userptr, "glBindBufferOffsetEXT");
    sf_glad_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC) load(userptr, "glBindBufferRangeEXT");
    sf_glad_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC) load(userptr, "glEndTransformFeedbackEXT");
    sf_glad_glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) load(userptr, "glGetTransformFeedbackVaryingEXT");
    sf_glad_glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) load(userptr, "glTransformFeedbackVaryingsEXT");
}
static void sf_glad_gl_load_GL_EXT_vertex_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_vertex_array) return;
    sf_glad_glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC) load(userptr, "glArrayElementEXT");
    sf_glad_glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC) load(userptr, "glColorPointerEXT");
    sf_glad_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC) load(userptr, "glDrawArraysEXT");
    sf_glad_glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC) load(userptr, "glEdgeFlagPointerEXT");
    sf_glad_glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC) load(userptr, "glGetPointervEXT");
    sf_glad_glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC) load(userptr, "glIndexPointerEXT");
    sf_glad_glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC) load(userptr, "glNormalPointerEXT");
    sf_glad_glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC) load(userptr, "glTexCoordPointerEXT");
    sf_glad_glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC) load(userptr, "glVertexPointerEXT");
}
static void sf_glad_gl_load_GL_EXT_vertex_attrib_64bit( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_vertex_attrib_64bit) return;
    sf_glad_glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC) load(userptr, "glGetVertexAttribLdvEXT");
    sf_glad_glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC) load(userptr, "glVertexAttribL1dEXT");
    sf_glad_glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC) load(userptr, "glVertexAttribL1dvEXT");
    sf_glad_glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC) load(userptr, "glVertexAttribL2dEXT");
    sf_glad_glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC) load(userptr, "glVertexAttribL2dvEXT");
    sf_glad_glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC) load(userptr, "glVertexAttribL3dEXT");
    sf_glad_glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC) load(userptr, "glVertexAttribL3dvEXT");
    sf_glad_glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC) load(userptr, "glVertexAttribL4dEXT");
    sf_glad_glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC) load(userptr, "glVertexAttribL4dvEXT");
    sf_glad_glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC) load(userptr, "glVertexAttribLPointerEXT");
}
static void sf_glad_gl_load_GL_EXT_vertex_shader( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_vertex_shader) return;
    sf_glad_glBeginVertexShaderEXT = (PFNGLBEGINVERTEXSHADEREXTPROC) load(userptr, "glBeginVertexShaderEXT");
    sf_glad_glBindLightParameterEXT = (PFNGLBINDLIGHTPARAMETEREXTPROC) load(userptr, "glBindLightParameterEXT");
    sf_glad_glBindMaterialParameterEXT = (PFNGLBINDMATERIALPARAMETEREXTPROC) load(userptr, "glBindMaterialParameterEXT");
    sf_glad_glBindParameterEXT = (PFNGLBINDPARAMETEREXTPROC) load(userptr, "glBindParameterEXT");
    sf_glad_glBindTexGenParameterEXT = (PFNGLBINDTEXGENPARAMETEREXTPROC) load(userptr, "glBindTexGenParameterEXT");
    sf_glad_glBindTextureUnitParameterEXT = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) load(userptr, "glBindTextureUnitParameterEXT");
    sf_glad_glBindVertexShaderEXT = (PFNGLBINDVERTEXSHADEREXTPROC) load(userptr, "glBindVertexShaderEXT");
    sf_glad_glDeleteVertexShaderEXT = (PFNGLDELETEVERTEXSHADEREXTPROC) load(userptr, "glDeleteVertexShaderEXT");
    sf_glad_glDisableVariantClientStateEXT = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) load(userptr, "glDisableVariantClientStateEXT");
    sf_glad_glEnableVariantClientStateEXT = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) load(userptr, "glEnableVariantClientStateEXT");
    sf_glad_glEndVertexShaderEXT = (PFNGLENDVERTEXSHADEREXTPROC) load(userptr, "glEndVertexShaderEXT");
    sf_glad_glExtractComponentEXT = (PFNGLEXTRACTCOMPONENTEXTPROC) load(userptr, "glExtractComponentEXT");
    sf_glad_glGenSymbolsEXT = (PFNGLGENSYMBOLSEXTPROC) load(userptr, "glGenSymbolsEXT");
    sf_glad_glGenVertexShadersEXT = (PFNGLGENVERTEXSHADERSEXTPROC) load(userptr, "glGenVertexShadersEXT");
    sf_glad_glGetInvariantBooleanvEXT = (PFNGLGETINVARIANTBOOLEANVEXTPROC) load(userptr, "glGetInvariantBooleanvEXT");
    sf_glad_glGetInvariantFloatvEXT = (PFNGLGETINVARIANTFLOATVEXTPROC) load(userptr, "glGetInvariantFloatvEXT");
    sf_glad_glGetInvariantIntegervEXT = (PFNGLGETINVARIANTINTEGERVEXTPROC) load(userptr, "glGetInvariantIntegervEXT");
    sf_glad_glGetLocalConstantBooleanvEXT = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) load(userptr, "glGetLocalConstantBooleanvEXT");
    sf_glad_glGetLocalConstantFloatvEXT = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC) load(userptr, "glGetLocalConstantFloatvEXT");
    sf_glad_glGetLocalConstantIntegervEXT = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) load(userptr, "glGetLocalConstantIntegervEXT");
    sf_glad_glGetVariantBooleanvEXT = (PFNGLGETVARIANTBOOLEANVEXTPROC) load(userptr, "glGetVariantBooleanvEXT");
    sf_glad_glGetVariantFloatvEXT = (PFNGLGETVARIANTFLOATVEXTPROC) load(userptr, "glGetVariantFloatvEXT");
    sf_glad_glGetVariantIntegervEXT = (PFNGLGETVARIANTINTEGERVEXTPROC) load(userptr, "glGetVariantIntegervEXT");
    sf_glad_glGetVariantPointervEXT = (PFNGLGETVARIANTPOINTERVEXTPROC) load(userptr, "glGetVariantPointervEXT");
    sf_glad_glInsertComponentEXT = (PFNGLINSERTCOMPONENTEXTPROC) load(userptr, "glInsertComponentEXT");
    sf_glad_glIsVariantEnabledEXT = (PFNGLISVARIANTENABLEDEXTPROC) load(userptr, "glIsVariantEnabledEXT");
    sf_glad_glSetInvariantEXT = (PFNGLSETINVARIANTEXTPROC) load(userptr, "glSetInvariantEXT");
    sf_glad_glSetLocalConstantEXT = (PFNGLSETLOCALCONSTANTEXTPROC) load(userptr, "glSetLocalConstantEXT");
    sf_glad_glShaderOp1EXT = (PFNGLSHADEROP1EXTPROC) load(userptr, "glShaderOp1EXT");
    sf_glad_glShaderOp2EXT = (PFNGLSHADEROP2EXTPROC) load(userptr, "glShaderOp2EXT");
    sf_glad_glShaderOp3EXT = (PFNGLSHADEROP3EXTPROC) load(userptr, "glShaderOp3EXT");
    sf_glad_glSwizzleEXT = (PFNGLSWIZZLEEXTPROC) load(userptr, "glSwizzleEXT");
    sf_glad_glVariantPointerEXT = (PFNGLVARIANTPOINTEREXTPROC) load(userptr, "glVariantPointerEXT");
    sf_glad_glVariantbvEXT = (PFNGLVARIANTBVEXTPROC) load(userptr, "glVariantbvEXT");
    sf_glad_glVariantdvEXT = (PFNGLVARIANTDVEXTPROC) load(userptr, "glVariantdvEXT");
    sf_glad_glVariantfvEXT = (PFNGLVARIANTFVEXTPROC) load(userptr, "glVariantfvEXT");
    sf_glad_glVariantivEXT = (PFNGLVARIANTIVEXTPROC) load(userptr, "glVariantivEXT");
    sf_glad_glVariantsvEXT = (PFNGLVARIANTSVEXTPROC) load(userptr, "glVariantsvEXT");
    sf_glad_glVariantubvEXT = (PFNGLVARIANTUBVEXTPROC) load(userptr, "glVariantubvEXT");
    sf_glad_glVariantuivEXT = (PFNGLVARIANTUIVEXTPROC) load(userptr, "glVariantuivEXT");
    sf_glad_glVariantusvEXT = (PFNGLVARIANTUSVEXTPROC) load(userptr, "glVariantusvEXT");
    sf_glad_glWriteMaskEXT = (PFNGLWRITEMASKEXTPROC) load(userptr, "glWriteMaskEXT");
}
static void sf_glad_gl_load_GL_EXT_vertex_weighting( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_vertex_weighting) return;
    sf_glad_glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC) load(userptr, "glVertexWeightPointerEXT");
    sf_glad_glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC) load(userptr, "glVertexWeightfEXT");
    sf_glad_glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC) load(userptr, "glVertexWeightfvEXT");
}
static void sf_glad_gl_load_GL_EXT_win32_keyed_mutex( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_win32_keyed_mutex) return;
    sf_glad_glAcquireKeyedMutexWin32EXT = (PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC) load(userptr, "glAcquireKeyedMutexWin32EXT");
    sf_glad_glReleaseKeyedMutexWin32EXT = (PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC) load(userptr, "glReleaseKeyedMutexWin32EXT");
}
static void sf_glad_gl_load_GL_EXT_window_rectangles( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_window_rectangles) return;
    sf_glad_glWindowRectanglesEXT = (PFNGLWINDOWRECTANGLESEXTPROC) load(userptr, "glWindowRectanglesEXT");
}
static void sf_glad_gl_load_GL_EXT_x11_sync_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_x11_sync_object) return;
    sf_glad_glImportSyncEXT = (PFNGLIMPORTSYNCEXTPROC) load(userptr, "glImportSyncEXT");
}
static void sf_glad_gl_load_GL_GREMEDY_frame_terminator( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_GREMEDY_frame_terminator) return;
    sf_glad_glFrameTerminatorGREMEDY = (PFNGLFRAMETERMINATORGREMEDYPROC) load(userptr, "glFrameTerminatorGREMEDY");
}
static void sf_glad_gl_load_GL_GREMEDY_string_marker( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_GREMEDY_string_marker) return;
    sf_glad_glStringMarkerGREMEDY = (PFNGLSTRINGMARKERGREMEDYPROC) load(userptr, "glStringMarkerGREMEDY");
}
static void sf_glad_gl_load_GL_HP_image_transform( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_HP_image_transform) return;
    sf_glad_glGetImageTransformParameterfvHP = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) load(userptr, "glGetImageTransformParameterfvHP");
    sf_glad_glGetImageTransformParameterivHP = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) load(userptr, "glGetImageTransformParameterivHP");
    sf_glad_glImageTransformParameterfHP = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC) load(userptr, "glImageTransformParameterfHP");
    sf_glad_glImageTransformParameterfvHP = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) load(userptr, "glImageTransformParameterfvHP");
    sf_glad_glImageTransformParameteriHP = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC) load(userptr, "glImageTransformParameteriHP");
    sf_glad_glImageTransformParameterivHP = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) load(userptr, "glImageTransformParameterivHP");
}
static void sf_glad_gl_load_GL_IBM_multimode_draw_arrays( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_IBM_multimode_draw_arrays) return;
    sf_glad_glMultiModeDrawArraysIBM = (PFNGLMULTIMODEDRAWARRAYSIBMPROC) load(userptr, "glMultiModeDrawArraysIBM");
    sf_glad_glMultiModeDrawElementsIBM = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC) load(userptr, "glMultiModeDrawElementsIBM");
}
static void sf_glad_gl_load_GL_IBM_static_data( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_IBM_static_data) return;
    sf_glad_glFlushStaticDataIBM = (PFNGLFLUSHSTATICDATAIBMPROC) load(userptr, "glFlushStaticDataIBM");
}
static void sf_glad_gl_load_GL_IBM_vertex_array_lists( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_IBM_vertex_array_lists) return;
    sf_glad_glColorPointerListIBM = (PFNGLCOLORPOINTERLISTIBMPROC) load(userptr, "glColorPointerListIBM");
    sf_glad_glEdgeFlagPointerListIBM = (PFNGLEDGEFLAGPOINTERLISTIBMPROC) load(userptr, "glEdgeFlagPointerListIBM");
    sf_glad_glFogCoordPointerListIBM = (PFNGLFOGCOORDPOINTERLISTIBMPROC) load(userptr, "glFogCoordPointerListIBM");
    sf_glad_glIndexPointerListIBM = (PFNGLINDEXPOINTERLISTIBMPROC) load(userptr, "glIndexPointerListIBM");
    sf_glad_glNormalPointerListIBM = (PFNGLNORMALPOINTERLISTIBMPROC) load(userptr, "glNormalPointerListIBM");
    sf_glad_glSecondaryColorPointerListIBM = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) load(userptr, "glSecondaryColorPointerListIBM");
    sf_glad_glTexCoordPointerListIBM = (PFNGLTEXCOORDPOINTERLISTIBMPROC) load(userptr, "glTexCoordPointerListIBM");
    sf_glad_glVertexPointerListIBM = (PFNGLVERTEXPOINTERLISTIBMPROC) load(userptr, "glVertexPointerListIBM");
}
static void sf_glad_gl_load_GL_INGR_blend_func_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_INGR_blend_func_separate) return;
    sf_glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC) load(userptr, "glBlendFuncSeparateINGR");
}
static void sf_glad_gl_load_GL_INTEL_framebuffer_CMAA( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_INTEL_framebuffer_CMAA) return;
    sf_glad_glApplyFramebufferAttachmentCMAAINTEL = (PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC) load(userptr, "glApplyFramebufferAttachmentCMAAINTEL");
}
static void sf_glad_gl_load_GL_INTEL_map_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_INTEL_map_texture) return;
    sf_glad_glMapTexture2DINTEL = (PFNGLMAPTEXTURE2DINTELPROC) load(userptr, "glMapTexture2DINTEL");
    sf_glad_glSyncTextureINTEL = (PFNGLSYNCTEXTUREINTELPROC) load(userptr, "glSyncTextureINTEL");
    sf_glad_glUnmapTexture2DINTEL = (PFNGLUNMAPTEXTURE2DINTELPROC) load(userptr, "glUnmapTexture2DINTEL");
}
static void sf_glad_gl_load_GL_INTEL_parallel_arrays( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_INTEL_parallel_arrays) return;
    sf_glad_glColorPointervINTEL = (PFNGLCOLORPOINTERVINTELPROC) load(userptr, "glColorPointervINTEL");
    sf_glad_glNormalPointervINTEL = (PFNGLNORMALPOINTERVINTELPROC) load(userptr, "glNormalPointervINTEL");
    sf_glad_glTexCoordPointervINTEL = (PFNGLTEXCOORDPOINTERVINTELPROC) load(userptr, "glTexCoordPointervINTEL");
    sf_glad_glVertexPointervINTEL = (PFNGLVERTEXPOINTERVINTELPROC) load(userptr, "glVertexPointervINTEL");
}
static void sf_glad_gl_load_GL_INTEL_performance_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_INTEL_performance_query) return;
    sf_glad_glBeginPerfQueryINTEL = (PFNGLBEGINPERFQUERYINTELPROC) load(userptr, "glBeginPerfQueryINTEL");
    sf_glad_glCreatePerfQueryINTEL = (PFNGLCREATEPERFQUERYINTELPROC) load(userptr, "glCreatePerfQueryINTEL");
    sf_glad_glDeletePerfQueryINTEL = (PFNGLDELETEPERFQUERYINTELPROC) load(userptr, "glDeletePerfQueryINTEL");
    sf_glad_glEndPerfQueryINTEL = (PFNGLENDPERFQUERYINTELPROC) load(userptr, "glEndPerfQueryINTEL");
    sf_glad_glGetFirstPerfQueryIdINTEL = (PFNGLGETFIRSTPERFQUERYIDINTELPROC) load(userptr, "glGetFirstPerfQueryIdINTEL");
    sf_glad_glGetNextPerfQueryIdINTEL = (PFNGLGETNEXTPERFQUERYIDINTELPROC) load(userptr, "glGetNextPerfQueryIdINTEL");
    sf_glad_glGetPerfCounterInfoINTEL = (PFNGLGETPERFCOUNTERINFOINTELPROC) load(userptr, "glGetPerfCounterInfoINTEL");
    sf_glad_glGetPerfQueryDataINTEL = (PFNGLGETPERFQUERYDATAINTELPROC) load(userptr, "glGetPerfQueryDataINTEL");
    sf_glad_glGetPerfQueryIdByNameINTEL = (PFNGLGETPERFQUERYIDBYNAMEINTELPROC) load(userptr, "glGetPerfQueryIdByNameINTEL");
    sf_glad_glGetPerfQueryInfoINTEL = (PFNGLGETPERFQUERYINFOINTELPROC) load(userptr, "glGetPerfQueryInfoINTEL");
}
static void sf_glad_gl_load_GL_KHR_blend_equation_advanced( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_KHR_blend_equation_advanced) return;
    sf_glad_glBlendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC) load(userptr, "glBlendBarrierKHR");
}
static void sf_glad_gl_load_GL_KHR_debug( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_KHR_debug) return;
    sf_glad_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) load(userptr, "glDebugMessageCallback");
    sf_glad_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) load(userptr, "glDebugMessageControl");
    sf_glad_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) load(userptr, "glDebugMessageInsert");
    sf_glad_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) load(userptr, "glGetDebugMessageLog");
    sf_glad_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC) load(userptr, "glGetObjectLabel");
    sf_glad_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) load(userptr, "glGetObjectPtrLabel");
    sf_glad_glGetPointerv = (PFNGLGETPOINTERVPROC) load(userptr, "glGetPointerv");
    sf_glad_glObjectLabel = (PFNGLOBJECTLABELPROC) load(userptr, "glObjectLabel");
    sf_glad_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC) load(userptr, "glObjectPtrLabel");
    sf_glad_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC) load(userptr, "glPopDebugGroup");
    sf_glad_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) load(userptr, "glPushDebugGroup");
}
static void sf_glad_gl_load_GL_KHR_parallel_shader_compile( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_KHR_parallel_shader_compile) return;
    sf_glad_glMaxShaderCompilerThreadsKHR = (PFNGLMAXSHADERCOMPILERTHREADSKHRPROC) load(userptr, "glMaxShaderCompilerThreadsKHR");
}
static void sf_glad_gl_load_GL_KHR_robustness( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_KHR_robustness) return;
    sf_glad_glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC) load(userptr, "glGetGraphicsResetStatus");
    sf_glad_glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC) load(userptr, "glGetnUniformfv");
    sf_glad_glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC) load(userptr, "glGetnUniformiv");
    sf_glad_glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC) load(userptr, "glGetnUniformuiv");
    sf_glad_glReadnPixels = (PFNGLREADNPIXELSPROC) load(userptr, "glReadnPixels");
}
static void sf_glad_gl_load_GL_MESA_framebuffer_flip_y( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_MESA_framebuffer_flip_y) return;
    sf_glad_glFramebufferParameteriMESA = (PFNGLFRAMEBUFFERPARAMETERIMESAPROC) load(userptr, "glFramebufferParameteriMESA");
    sf_glad_glGetFramebufferParameterivMESA = (PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC) load(userptr, "glGetFramebufferParameterivMESA");
}
static void sf_glad_gl_load_GL_MESA_resize_buffers( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_MESA_resize_buffers) return;
    sf_glad_glResizeBuffersMESA = (PFNGLRESIZEBUFFERSMESAPROC) load(userptr, "glResizeBuffersMESA");
}
static void sf_glad_gl_load_GL_MESA_window_pos( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_MESA_window_pos) return;
    sf_glad_glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC) load(userptr, "glWindowPos2dMESA");
    sf_glad_glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC) load(userptr, "glWindowPos2dvMESA");
    sf_glad_glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC) load(userptr, "glWindowPos2fMESA");
    sf_glad_glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC) load(userptr, "glWindowPos2fvMESA");
    sf_glad_glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC) load(userptr, "glWindowPos2iMESA");
    sf_glad_glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC) load(userptr, "glWindowPos2ivMESA");
    sf_glad_glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC) load(userptr, "glWindowPos2sMESA");
    sf_glad_glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC) load(userptr, "glWindowPos2svMESA");
    sf_glad_glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC) load(userptr, "glWindowPos3dMESA");
    sf_glad_glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC) load(userptr, "glWindowPos3dvMESA");
    sf_glad_glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC) load(userptr, "glWindowPos3fMESA");
    sf_glad_glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC) load(userptr, "glWindowPos3fvMESA");
    sf_glad_glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC) load(userptr, "glWindowPos3iMESA");
    sf_glad_glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC) load(userptr, "glWindowPos3ivMESA");
    sf_glad_glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC) load(userptr, "glWindowPos3sMESA");
    sf_glad_glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC) load(userptr, "glWindowPos3svMESA");
    sf_glad_glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC) load(userptr, "glWindowPos4dMESA");
    sf_glad_glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC) load(userptr, "glWindowPos4dvMESA");
    sf_glad_glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC) load(userptr, "glWindowPos4fMESA");
    sf_glad_glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC) load(userptr, "glWindowPos4fvMESA");
    sf_glad_glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC) load(userptr, "glWindowPos4iMESA");
    sf_glad_glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC) load(userptr, "glWindowPos4ivMESA");
    sf_glad_glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC) load(userptr, "glWindowPos4sMESA");
    sf_glad_glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC) load(userptr, "glWindowPos4svMESA");
}
static void sf_glad_gl_load_GL_NVX_conditional_render( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NVX_conditional_render) return;
    sf_glad_glBeginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC) load(userptr, "glBeginConditionalRenderNVX");
    sf_glad_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC) load(userptr, "glEndConditionalRenderNVX");
}
static void sf_glad_gl_load_GL_NVX_gpu_multicast2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NVX_gpu_multicast2) return;
    sf_glad_glAsyncCopyBufferSubDataNVX = (PFNGLASYNCCOPYBUFFERSUBDATANVXPROC) load(userptr, "glAsyncCopyBufferSubDataNVX");
    sf_glad_glAsyncCopyImageSubDataNVX = (PFNGLASYNCCOPYIMAGESUBDATANVXPROC) load(userptr, "glAsyncCopyImageSubDataNVX");
    sf_glad_glMulticastScissorArrayvNVX = (PFNGLMULTICASTSCISSORARRAYVNVXPROC) load(userptr, "glMulticastScissorArrayvNVX");
    sf_glad_glMulticastViewportArrayvNVX = (PFNGLMULTICASTVIEWPORTARRAYVNVXPROC) load(userptr, "glMulticastViewportArrayvNVX");
    sf_glad_glMulticastViewportPositionWScaleNVX = (PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC) load(userptr, "glMulticastViewportPositionWScaleNVX");
    sf_glad_glUploadGpuMaskNVX = (PFNGLUPLOADGPUMASKNVXPROC) load(userptr, "glUploadGpuMaskNVX");
}
static void sf_glad_gl_load_GL_NVX_linked_gpu_multicast( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NVX_linked_gpu_multicast) return;
    sf_glad_glLGPUCopyImageSubDataNVX = (PFNGLLGPUCOPYIMAGESUBDATANVXPROC) load(userptr, "glLGPUCopyImageSubDataNVX");
    sf_glad_glLGPUInterlockNVX = (PFNGLLGPUINTERLOCKNVXPROC) load(userptr, "glLGPUInterlockNVX");
    sf_glad_glLGPUNamedBufferSubDataNVX = (PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC) load(userptr, "glLGPUNamedBufferSubDataNVX");
}
static void sf_glad_gl_load_GL_NVX_progress_fence( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NVX_progress_fence) return;
    sf_glad_glClientWaitSemaphoreui64NVX = (PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC) load(userptr, "glClientWaitSemaphoreui64NVX");
    sf_glad_glCreateProgressFenceNVX = (PFNGLCREATEPROGRESSFENCENVXPROC) load(userptr, "glCreateProgressFenceNVX");
    sf_glad_glSignalSemaphoreui64NVX = (PFNGLSIGNALSEMAPHOREUI64NVXPROC) load(userptr, "glSignalSemaphoreui64NVX");
    sf_glad_glWaitSemaphoreui64NVX = (PFNGLWAITSEMAPHOREUI64NVXPROC) load(userptr, "glWaitSemaphoreui64NVX");
}
static void sf_glad_gl_load_GL_NV_alpha_to_coverage_dither_control( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_alpha_to_coverage_dither_control) return;
    sf_glad_glAlphaToCoverageDitherControlNV = (PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC) load(userptr, "glAlphaToCoverageDitherControlNV");
}
static void sf_glad_gl_load_GL_NV_bindless_multi_draw_indirect( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_bindless_multi_draw_indirect) return;
    sf_glad_glMultiDrawArraysIndirectBindlessNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) load(userptr, "glMultiDrawArraysIndirectBindlessNV");
    sf_glad_glMultiDrawElementsIndirectBindlessNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) load(userptr, "glMultiDrawElementsIndirectBindlessNV");
}
static void sf_glad_gl_load_GL_NV_bindless_multi_draw_indirect_count( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_bindless_multi_draw_indirect_count) return;
    sf_glad_glMultiDrawArraysIndirectBindlessCountNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC) load(userptr, "glMultiDrawArraysIndirectBindlessCountNV");
    sf_glad_glMultiDrawElementsIndirectBindlessCountNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC) load(userptr, "glMultiDrawElementsIndirectBindlessCountNV");
}
static void sf_glad_gl_load_GL_NV_bindless_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_bindless_texture) return;
    sf_glad_glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC) load(userptr, "glGetImageHandleNV");
    sf_glad_glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC) load(userptr, "glGetTextureHandleNV");
    sf_glad_glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC) load(userptr, "glGetTextureSamplerHandleNV");
    sf_glad_glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC) load(userptr, "glIsImageHandleResidentNV");
    sf_glad_glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC) load(userptr, "glIsTextureHandleResidentNV");
    sf_glad_glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) load(userptr, "glMakeImageHandleNonResidentNV");
    sf_glad_glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) load(userptr, "glMakeImageHandleResidentNV");
    sf_glad_glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) load(userptr, "glMakeTextureHandleNonResidentNV");
    sf_glad_glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) load(userptr, "glMakeTextureHandleResidentNV");
    sf_glad_glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) load(userptr, "glProgramUniformHandleui64NV");
    sf_glad_glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) load(userptr, "glProgramUniformHandleui64vNV");
    sf_glad_glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC) load(userptr, "glUniformHandleui64NV");
    sf_glad_glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC) load(userptr, "glUniformHandleui64vNV");
}
static void sf_glad_gl_load_GL_NV_blend_equation_advanced( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_blend_equation_advanced) return;
    sf_glad_glBlendBarrierNV = (PFNGLBLENDBARRIERNVPROC) load(userptr, "glBlendBarrierNV");
    sf_glad_glBlendParameteriNV = (PFNGLBLENDPARAMETERINVPROC) load(userptr, "glBlendParameteriNV");
}
static void sf_glad_gl_load_GL_NV_clip_space_w_scaling( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_clip_space_w_scaling) return;
    sf_glad_glViewportPositionWScaleNV = (PFNGLVIEWPORTPOSITIONWSCALENVPROC) load(userptr, "glViewportPositionWScaleNV");
}
static void sf_glad_gl_load_GL_NV_command_list( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_command_list) return;
    sf_glad_glCallCommandListNV = (PFNGLCALLCOMMANDLISTNVPROC) load(userptr, "glCallCommandListNV");
    sf_glad_glCommandListSegmentsNV = (PFNGLCOMMANDLISTSEGMENTSNVPROC) load(userptr, "glCommandListSegmentsNV");
    sf_glad_glCompileCommandListNV = (PFNGLCOMPILECOMMANDLISTNVPROC) load(userptr, "glCompileCommandListNV");
    sf_glad_glCreateCommandListsNV = (PFNGLCREATECOMMANDLISTSNVPROC) load(userptr, "glCreateCommandListsNV");
    sf_glad_glCreateStatesNV = (PFNGLCREATESTATESNVPROC) load(userptr, "glCreateStatesNV");
    sf_glad_glDeleteCommandListsNV = (PFNGLDELETECOMMANDLISTSNVPROC) load(userptr, "glDeleteCommandListsNV");
    sf_glad_glDeleteStatesNV = (PFNGLDELETESTATESNVPROC) load(userptr, "glDeleteStatesNV");
    sf_glad_glDrawCommandsAddressNV = (PFNGLDRAWCOMMANDSADDRESSNVPROC) load(userptr, "glDrawCommandsAddressNV");
    sf_glad_glDrawCommandsNV = (PFNGLDRAWCOMMANDSNVPROC) load(userptr, "glDrawCommandsNV");
    sf_glad_glDrawCommandsStatesAddressNV = (PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC) load(userptr, "glDrawCommandsStatesAddressNV");
    sf_glad_glDrawCommandsStatesNV = (PFNGLDRAWCOMMANDSSTATESNVPROC) load(userptr, "glDrawCommandsStatesNV");
    sf_glad_glGetCommandHeaderNV = (PFNGLGETCOMMANDHEADERNVPROC) load(userptr, "glGetCommandHeaderNV");
    sf_glad_glGetStageIndexNV = (PFNGLGETSTAGEINDEXNVPROC) load(userptr, "glGetStageIndexNV");
    sf_glad_glIsCommandListNV = (PFNGLISCOMMANDLISTNVPROC) load(userptr, "glIsCommandListNV");
    sf_glad_glIsStateNV = (PFNGLISSTATENVPROC) load(userptr, "glIsStateNV");
    sf_glad_glListDrawCommandsStatesClientNV = (PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC) load(userptr, "glListDrawCommandsStatesClientNV");
    sf_glad_glStateCaptureNV = (PFNGLSTATECAPTURENVPROC) load(userptr, "glStateCaptureNV");
}
static void sf_glad_gl_load_GL_NV_conditional_render( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_conditional_render) return;
    sf_glad_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC) load(userptr, "glBeginConditionalRenderNV");
    sf_glad_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC) load(userptr, "glEndConditionalRenderNV");
}
static void sf_glad_gl_load_GL_NV_conservative_raster( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_conservative_raster) return;
    sf_glad_glSubpixelPrecisionBiasNV = (PFNGLSUBPIXELPRECISIONBIASNVPROC) load(userptr, "glSubpixelPrecisionBiasNV");
}
static void sf_glad_gl_load_GL_NV_conservative_raster_dilate( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_conservative_raster_dilate) return;
    sf_glad_glConservativeRasterParameterfNV = (PFNGLCONSERVATIVERASTERPARAMETERFNVPROC) load(userptr, "glConservativeRasterParameterfNV");
}
static void sf_glad_gl_load_GL_NV_conservative_raster_pre_snap_triangles( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_conservative_raster_pre_snap_triangles) return;
    sf_glad_glConservativeRasterParameteriNV = (PFNGLCONSERVATIVERASTERPARAMETERINVPROC) load(userptr, "glConservativeRasterParameteriNV");
}
static void sf_glad_gl_load_GL_NV_copy_image( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_copy_image) return;
    sf_glad_glCopyImageSubDataNV = (PFNGLCOPYIMAGESUBDATANVPROC) load(userptr, "glCopyImageSubDataNV");
}
static void sf_glad_gl_load_GL_NV_depth_buffer_float( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_depth_buffer_float) return;
    sf_glad_glClearDepthdNV = (PFNGLCLEARDEPTHDNVPROC) load(userptr, "glClearDepthdNV");
    sf_glad_glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC) load(userptr, "glDepthBoundsdNV");
    sf_glad_glDepthRangedNV = (PFNGLDEPTHRANGEDNVPROC) load(userptr, "glDepthRangedNV");
}
static void sf_glad_gl_load_GL_NV_draw_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_draw_texture) return;
    sf_glad_glDrawTextureNV = (PFNGLDRAWTEXTURENVPROC) load(userptr, "glDrawTextureNV");
}
static void sf_glad_gl_load_GL_NV_draw_vulkan_image( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_draw_vulkan_image) return;
    sf_glad_glDrawVkImageNV = (PFNGLDRAWVKIMAGENVPROC) load(userptr, "glDrawVkImageNV");
    sf_glad_glGetVkProcAddrNV = (PFNGLGETVKPROCADDRNVPROC) load(userptr, "glGetVkProcAddrNV");
    sf_glad_glSignalVkFenceNV = (PFNGLSIGNALVKFENCENVPROC) load(userptr, "glSignalVkFenceNV");
    sf_glad_glSignalVkSemaphoreNV = (PFNGLSIGNALVKSEMAPHORENVPROC) load(userptr, "glSignalVkSemaphoreNV");
    sf_glad_glWaitVkSemaphoreNV = (PFNGLWAITVKSEMAPHORENVPROC) load(userptr, "glWaitVkSemaphoreNV");
}
static void sf_glad_gl_load_GL_NV_evaluators( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_evaluators) return;
    sf_glad_glEvalMapsNV = (PFNGLEVALMAPSNVPROC) load(userptr, "glEvalMapsNV");
    sf_glad_glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC) load(userptr, "glGetMapAttribParameterfvNV");
    sf_glad_glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC) load(userptr, "glGetMapAttribParameterivNV");
    sf_glad_glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC) load(userptr, "glGetMapControlPointsNV");
    sf_glad_glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC) load(userptr, "glGetMapParameterfvNV");
    sf_glad_glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC) load(userptr, "glGetMapParameterivNV");
    sf_glad_glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC) load(userptr, "glMapControlPointsNV");
    sf_glad_glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC) load(userptr, "glMapParameterfvNV");
    sf_glad_glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC) load(userptr, "glMapParameterivNV");
}
static void sf_glad_gl_load_GL_NV_explicit_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_explicit_multisample) return;
    sf_glad_glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC) load(userptr, "glGetMultisamplefvNV");
    sf_glad_glSampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC) load(userptr, "glSampleMaskIndexedNV");
    sf_glad_glTexRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC) load(userptr, "glTexRenderbufferNV");
}
static void sf_glad_gl_load_GL_NV_fence( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_fence) return;
    sf_glad_glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC) load(userptr, "glDeleteFencesNV");
    sf_glad_glFinishFenceNV = (PFNGLFINISHFENCENVPROC) load(userptr, "glFinishFenceNV");
    sf_glad_glGenFencesNV = (PFNGLGENFENCESNVPROC) load(userptr, "glGenFencesNV");
    sf_glad_glGetFenceivNV = (PFNGLGETFENCEIVNVPROC) load(userptr, "glGetFenceivNV");
    sf_glad_glIsFenceNV = (PFNGLISFENCENVPROC) load(userptr, "glIsFenceNV");
    sf_glad_glSetFenceNV = (PFNGLSETFENCENVPROC) load(userptr, "glSetFenceNV");
    sf_glad_glTestFenceNV = (PFNGLTESTFENCENVPROC) load(userptr, "glTestFenceNV");
}
static void sf_glad_gl_load_GL_NV_fragment_coverage_to_color( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_fragment_coverage_to_color) return;
    sf_glad_glFragmentCoverageColorNV = (PFNGLFRAGMENTCOVERAGECOLORNVPROC) load(userptr, "glFragmentCoverageColorNV");
}
static void sf_glad_gl_load_GL_NV_fragment_program( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_fragment_program) return;
    sf_glad_glGetProgramNamedParameterdvNV = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) load(userptr, "glGetProgramNamedParameterdvNV");
    sf_glad_glGetProgramNamedParameterfvNV = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) load(userptr, "glGetProgramNamedParameterfvNV");
    sf_glad_glProgramNamedParameter4dNV = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) load(userptr, "glProgramNamedParameter4dNV");
    sf_glad_glProgramNamedParameter4dvNV = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) load(userptr, "glProgramNamedParameter4dvNV");
    sf_glad_glProgramNamedParameter4fNV = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) load(userptr, "glProgramNamedParameter4fNV");
    sf_glad_glProgramNamedParameter4fvNV = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) load(userptr, "glProgramNamedParameter4fvNV");
}
static void sf_glad_gl_load_GL_NV_framebuffer_mixed_samples( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_framebuffer_mixed_samples) return;
    sf_glad_glCoverageModulationNV = (PFNGLCOVERAGEMODULATIONNVPROC) load(userptr, "glCoverageModulationNV");
    sf_glad_glCoverageModulationTableNV = (PFNGLCOVERAGEMODULATIONTABLENVPROC) load(userptr, "glCoverageModulationTableNV");
    sf_glad_glGetCoverageModulationTableNV = (PFNGLGETCOVERAGEMODULATIONTABLENVPROC) load(userptr, "glGetCoverageModulationTableNV");
    sf_glad_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) load(userptr, "glRasterSamplesEXT");
}
static void sf_glad_gl_load_GL_NV_framebuffer_multisample_coverage( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_framebuffer_multisample_coverage) return;
    sf_glad_glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) load(userptr, "glRenderbufferStorageMultisampleCoverageNV");
}
static void sf_glad_gl_load_GL_NV_geometry_program4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_geometry_program4) return;
    sf_glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC) load(userptr, "glFramebufferTextureEXT");
    sf_glad_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) load(userptr, "glFramebufferTextureFaceEXT");
    sf_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) load(userptr, "glFramebufferTextureLayerEXT");
    sf_glad_glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC) load(userptr, "glProgramVertexLimitNV");
}
static void sf_glad_gl_load_GL_NV_gpu_multicast( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_gpu_multicast) return;
    sf_glad_glMulticastBarrierNV = (PFNGLMULTICASTBARRIERNVPROC) load(userptr, "glMulticastBarrierNV");
    sf_glad_glMulticastBlitFramebufferNV = (PFNGLMULTICASTBLITFRAMEBUFFERNVPROC) load(userptr, "glMulticastBlitFramebufferNV");
    sf_glad_glMulticastBufferSubDataNV = (PFNGLMULTICASTBUFFERSUBDATANVPROC) load(userptr, "glMulticastBufferSubDataNV");
    sf_glad_glMulticastCopyBufferSubDataNV = (PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC) load(userptr, "glMulticastCopyBufferSubDataNV");
    sf_glad_glMulticastCopyImageSubDataNV = (PFNGLMULTICASTCOPYIMAGESUBDATANVPROC) load(userptr, "glMulticastCopyImageSubDataNV");
    sf_glad_glMulticastFramebufferSampleLocationsfvNV = (PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) load(userptr, "glMulticastFramebufferSampleLocationsfvNV");
    sf_glad_glMulticastGetQueryObjecti64vNV = (PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC) load(userptr, "glMulticastGetQueryObjecti64vNV");
    sf_glad_glMulticastGetQueryObjectivNV = (PFNGLMULTICASTGETQUERYOBJECTIVNVPROC) load(userptr, "glMulticastGetQueryObjectivNV");
    sf_glad_glMulticastGetQueryObjectui64vNV = (PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC) load(userptr, "glMulticastGetQueryObjectui64vNV");
    sf_glad_glMulticastGetQueryObjectuivNV = (PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC) load(userptr, "glMulticastGetQueryObjectuivNV");
    sf_glad_glMulticastWaitSyncNV = (PFNGLMULTICASTWAITSYNCNVPROC) load(userptr, "glMulticastWaitSyncNV");
    sf_glad_glRenderGpuMaskNV = (PFNGLRENDERGPUMASKNVPROC) load(userptr, "glRenderGpuMaskNV");
}
static void sf_glad_gl_load_GL_NV_gpu_program4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_gpu_program4) return;
    sf_glad_glGetProgramEnvParameterIivNV = (PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) load(userptr, "glGetProgramEnvParameterIivNV");
    sf_glad_glGetProgramEnvParameterIuivNV = (PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) load(userptr, "glGetProgramEnvParameterIuivNV");
    sf_glad_glGetProgramLocalParameterIivNV = (PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) load(userptr, "glGetProgramLocalParameterIivNV");
    sf_glad_glGetProgramLocalParameterIuivNV = (PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) load(userptr, "glGetProgramLocalParameterIuivNV");
    sf_glad_glProgramEnvParameterI4iNV = (PFNGLPROGRAMENVPARAMETERI4INVPROC) load(userptr, "glProgramEnvParameterI4iNV");
    sf_glad_glProgramEnvParameterI4ivNV = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC) load(userptr, "glProgramEnvParameterI4ivNV");
    sf_glad_glProgramEnvParameterI4uiNV = (PFNGLPROGRAMENVPARAMETERI4UINVPROC) load(userptr, "glProgramEnvParameterI4uiNV");
    sf_glad_glProgramEnvParameterI4uivNV = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) load(userptr, "glProgramEnvParameterI4uivNV");
    sf_glad_glProgramEnvParametersI4ivNV = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) load(userptr, "glProgramEnvParametersI4ivNV");
    sf_glad_glProgramEnvParametersI4uivNV = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) load(userptr, "glProgramEnvParametersI4uivNV");
    sf_glad_glProgramLocalParameterI4iNV = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC) load(userptr, "glProgramLocalParameterI4iNV");
    sf_glad_glProgramLocalParameterI4ivNV = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) load(userptr, "glProgramLocalParameterI4ivNV");
    sf_glad_glProgramLocalParameterI4uiNV = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) load(userptr, "glProgramLocalParameterI4uiNV");
    sf_glad_glProgramLocalParameterI4uivNV = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) load(userptr, "glProgramLocalParameterI4uivNV");
    sf_glad_glProgramLocalParametersI4ivNV = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) load(userptr, "glProgramLocalParametersI4ivNV");
    sf_glad_glProgramLocalParametersI4uivNV = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) load(userptr, "glProgramLocalParametersI4uivNV");
}
static void sf_glad_gl_load_GL_NV_gpu_program5( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_gpu_program5) return;
    sf_glad_glGetProgramSubroutineParameteruivNV = (PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) load(userptr, "glGetProgramSubroutineParameteruivNV");
    sf_glad_glProgramSubroutineParametersuivNV = (PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) load(userptr, "glProgramSubroutineParametersuivNV");
}
static void sf_glad_gl_load_GL_NV_gpu_shader5( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_gpu_shader5) return;
    sf_glad_glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC) load(userptr, "glGetUniformi64vNV");
    sf_glad_glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC) load(userptr, "glProgramUniform1i64NV");
    sf_glad_glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC) load(userptr, "glProgramUniform1i64vNV");
    sf_glad_glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC) load(userptr, "glProgramUniform1ui64NV");
    sf_glad_glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC) load(userptr, "glProgramUniform1ui64vNV");
    sf_glad_glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC) load(userptr, "glProgramUniform2i64NV");
    sf_glad_glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC) load(userptr, "glProgramUniform2i64vNV");
    sf_glad_glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC) load(userptr, "glProgramUniform2ui64NV");
    sf_glad_glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC) load(userptr, "glProgramUniform2ui64vNV");
    sf_glad_glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC) load(userptr, "glProgramUniform3i64NV");
    sf_glad_glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC) load(userptr, "glProgramUniform3i64vNV");
    sf_glad_glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC) load(userptr, "glProgramUniform3ui64NV");
    sf_glad_glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC) load(userptr, "glProgramUniform3ui64vNV");
    sf_glad_glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC) load(userptr, "glProgramUniform4i64NV");
    sf_glad_glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC) load(userptr, "glProgramUniform4i64vNV");
    sf_glad_glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC) load(userptr, "glProgramUniform4ui64NV");
    sf_glad_glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC) load(userptr, "glProgramUniform4ui64vNV");
    sf_glad_glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC) load(userptr, "glUniform1i64NV");
    sf_glad_glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC) load(userptr, "glUniform1i64vNV");
    sf_glad_glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC) load(userptr, "glUniform1ui64NV");
    sf_glad_glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC) load(userptr, "glUniform1ui64vNV");
    sf_glad_glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC) load(userptr, "glUniform2i64NV");
    sf_glad_glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC) load(userptr, "glUniform2i64vNV");
    sf_glad_glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC) load(userptr, "glUniform2ui64NV");
    sf_glad_glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC) load(userptr, "glUniform2ui64vNV");
    sf_glad_glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC) load(userptr, "glUniform3i64NV");
    sf_glad_glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC) load(userptr, "glUniform3i64vNV");
    sf_glad_glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC) load(userptr, "glUniform3ui64NV");
    sf_glad_glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC) load(userptr, "glUniform3ui64vNV");
    sf_glad_glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC) load(userptr, "glUniform4i64NV");
    sf_glad_glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC) load(userptr, "glUniform4i64vNV");
    sf_glad_glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC) load(userptr, "glUniform4ui64NV");
    sf_glad_glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC) load(userptr, "glUniform4ui64vNV");
}
static void sf_glad_gl_load_GL_NV_half_float( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_half_float) return;
    sf_glad_glColor3hNV = (PFNGLCOLOR3HNVPROC) load(userptr, "glColor3hNV");
    sf_glad_glColor3hvNV = (PFNGLCOLOR3HVNVPROC) load(userptr, "glColor3hvNV");
    sf_glad_glColor4hNV = (PFNGLCOLOR4HNVPROC) load(userptr, "glColor4hNV");
    sf_glad_glColor4hvNV = (PFNGLCOLOR4HVNVPROC) load(userptr, "glColor4hvNV");
    sf_glad_glFogCoordhNV = (PFNGLFOGCOORDHNVPROC) load(userptr, "glFogCoordhNV");
    sf_glad_glFogCoordhvNV = (PFNGLFOGCOORDHVNVPROC) load(userptr, "glFogCoordhvNV");
    sf_glad_glMultiTexCoord1hNV = (PFNGLMULTITEXCOORD1HNVPROC) load(userptr, "glMultiTexCoord1hNV");
    sf_glad_glMultiTexCoord1hvNV = (PFNGLMULTITEXCOORD1HVNVPROC) load(userptr, "glMultiTexCoord1hvNV");
    sf_glad_glMultiTexCoord2hNV = (PFNGLMULTITEXCOORD2HNVPROC) load(userptr, "glMultiTexCoord2hNV");
    sf_glad_glMultiTexCoord2hvNV = (PFNGLMULTITEXCOORD2HVNVPROC) load(userptr, "glMultiTexCoord2hvNV");
    sf_glad_glMultiTexCoord3hNV = (PFNGLMULTITEXCOORD3HNVPROC) load(userptr, "glMultiTexCoord3hNV");
    sf_glad_glMultiTexCoord3hvNV = (PFNGLMULTITEXCOORD3HVNVPROC) load(userptr, "glMultiTexCoord3hvNV");
    sf_glad_glMultiTexCoord4hNV = (PFNGLMULTITEXCOORD4HNVPROC) load(userptr, "glMultiTexCoord4hNV");
    sf_glad_glMultiTexCoord4hvNV = (PFNGLMULTITEXCOORD4HVNVPROC) load(userptr, "glMultiTexCoord4hvNV");
    sf_glad_glNormal3hNV = (PFNGLNORMAL3HNVPROC) load(userptr, "glNormal3hNV");
    sf_glad_glNormal3hvNV = (PFNGLNORMAL3HVNVPROC) load(userptr, "glNormal3hvNV");
    sf_glad_glSecondaryColor3hNV = (PFNGLSECONDARYCOLOR3HNVPROC) load(userptr, "glSecondaryColor3hNV");
    sf_glad_glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC) load(userptr, "glSecondaryColor3hvNV");
    sf_glad_glTexCoord1hNV = (PFNGLTEXCOORD1HNVPROC) load(userptr, "glTexCoord1hNV");
    sf_glad_glTexCoord1hvNV = (PFNGLTEXCOORD1HVNVPROC) load(userptr, "glTexCoord1hvNV");
    sf_glad_glTexCoord2hNV = (PFNGLTEXCOORD2HNVPROC) load(userptr, "glTexCoord2hNV");
    sf_glad_glTexCoord2hvNV = (PFNGLTEXCOORD2HVNVPROC) load(userptr, "glTexCoord2hvNV");
    sf_glad_glTexCoord3hNV = (PFNGLTEXCOORD3HNVPROC) load(userptr, "glTexCoord3hNV");
    sf_glad_glTexCoord3hvNV = (PFNGLTEXCOORD3HVNVPROC) load(userptr, "glTexCoord3hvNV");
    sf_glad_glTexCoord4hNV = (PFNGLTEXCOORD4HNVPROC) load(userptr, "glTexCoord4hNV");
    sf_glad_glTexCoord4hvNV = (PFNGLTEXCOORD4HVNVPROC) load(userptr, "glTexCoord4hvNV");
    sf_glad_glVertex2hNV = (PFNGLVERTEX2HNVPROC) load(userptr, "glVertex2hNV");
    sf_glad_glVertex2hvNV = (PFNGLVERTEX2HVNVPROC) load(userptr, "glVertex2hvNV");
    sf_glad_glVertex3hNV = (PFNGLVERTEX3HNVPROC) load(userptr, "glVertex3hNV");
    sf_glad_glVertex3hvNV = (PFNGLVERTEX3HVNVPROC) load(userptr, "glVertex3hvNV");
    sf_glad_glVertex4hNV = (PFNGLVERTEX4HNVPROC) load(userptr, "glVertex4hNV");
    sf_glad_glVertex4hvNV = (PFNGLVERTEX4HVNVPROC) load(userptr, "glVertex4hvNV");
    sf_glad_glVertexAttrib1hNV = (PFNGLVERTEXATTRIB1HNVPROC) load(userptr, "glVertexAttrib1hNV");
    sf_glad_glVertexAttrib1hvNV = (PFNGLVERTEXATTRIB1HVNVPROC) load(userptr, "glVertexAttrib1hvNV");
    sf_glad_glVertexAttrib2hNV = (PFNGLVERTEXATTRIB2HNVPROC) load(userptr, "glVertexAttrib2hNV");
    sf_glad_glVertexAttrib2hvNV = (PFNGLVERTEXATTRIB2HVNVPROC) load(userptr, "glVertexAttrib2hvNV");
    sf_glad_glVertexAttrib3hNV = (PFNGLVERTEXATTRIB3HNVPROC) load(userptr, "glVertexAttrib3hNV");
    sf_glad_glVertexAttrib3hvNV = (PFNGLVERTEXATTRIB3HVNVPROC) load(userptr, "glVertexAttrib3hvNV");
    sf_glad_glVertexAttrib4hNV = (PFNGLVERTEXATTRIB4HNVPROC) load(userptr, "glVertexAttrib4hNV");
    sf_glad_glVertexAttrib4hvNV = (PFNGLVERTEXATTRIB4HVNVPROC) load(userptr, "glVertexAttrib4hvNV");
    sf_glad_glVertexAttribs1hvNV = (PFNGLVERTEXATTRIBS1HVNVPROC) load(userptr, "glVertexAttribs1hvNV");
    sf_glad_glVertexAttribs2hvNV = (PFNGLVERTEXATTRIBS2HVNVPROC) load(userptr, "glVertexAttribs2hvNV");
    sf_glad_glVertexAttribs3hvNV = (PFNGLVERTEXATTRIBS3HVNVPROC) load(userptr, "glVertexAttribs3hvNV");
    sf_glad_glVertexAttribs4hvNV = (PFNGLVERTEXATTRIBS4HVNVPROC) load(userptr, "glVertexAttribs4hvNV");
    sf_glad_glVertexWeighthNV = (PFNGLVERTEXWEIGHTHNVPROC) load(userptr, "glVertexWeighthNV");
    sf_glad_glVertexWeighthvNV = (PFNGLVERTEXWEIGHTHVNVPROC) load(userptr, "glVertexWeighthvNV");
}
static void sf_glad_gl_load_GL_NV_internalformat_sample_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_internalformat_sample_query) return;
    sf_glad_glGetInternalformatSampleivNV = (PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) load(userptr, "glGetInternalformatSampleivNV");
}
static void sf_glad_gl_load_GL_NV_memory_attachment( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_memory_attachment) return;
    sf_glad_glBufferAttachMemoryNV = (PFNGLBUFFERATTACHMEMORYNVPROC) load(userptr, "glBufferAttachMemoryNV");
    sf_glad_glGetMemoryObjectDetachedResourcesuivNV = (PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC) load(userptr, "glGetMemoryObjectDetachedResourcesuivNV");
    sf_glad_glNamedBufferAttachMemoryNV = (PFNGLNAMEDBUFFERATTACHMEMORYNVPROC) load(userptr, "glNamedBufferAttachMemoryNV");
    sf_glad_glResetMemoryObjectParameterNV = (PFNGLRESETMEMORYOBJECTPARAMETERNVPROC) load(userptr, "glResetMemoryObjectParameterNV");
    sf_glad_glTexAttachMemoryNV = (PFNGLTEXATTACHMEMORYNVPROC) load(userptr, "glTexAttachMemoryNV");
    sf_glad_glTextureAttachMemoryNV = (PFNGLTEXTUREATTACHMEMORYNVPROC) load(userptr, "glTextureAttachMemoryNV");
}
static void sf_glad_gl_load_GL_NV_memory_object_sparse( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_memory_object_sparse) return;
    sf_glad_glBufferPageCommitmentMemNV = (PFNGLBUFFERPAGECOMMITMENTMEMNVPROC) load(userptr, "glBufferPageCommitmentMemNV");
    sf_glad_glNamedBufferPageCommitmentMemNV = (PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC) load(userptr, "glNamedBufferPageCommitmentMemNV");
    sf_glad_glTexPageCommitmentMemNV = (PFNGLTEXPAGECOMMITMENTMEMNVPROC) load(userptr, "glTexPageCommitmentMemNV");
    sf_glad_glTexturePageCommitmentMemNV = (PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC) load(userptr, "glTexturePageCommitmentMemNV");
}
static void sf_glad_gl_load_GL_NV_mesh_shader( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_mesh_shader) return;
    sf_glad_glDrawMeshTasksIndirectNV = (PFNGLDRAWMESHTASKSINDIRECTNVPROC) load(userptr, "glDrawMeshTasksIndirectNV");
    sf_glad_glDrawMeshTasksNV = (PFNGLDRAWMESHTASKSNVPROC) load(userptr, "glDrawMeshTasksNV");
    sf_glad_glMultiDrawMeshTasksIndirectCountNV = (PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC) load(userptr, "glMultiDrawMeshTasksIndirectCountNV");
    sf_glad_glMultiDrawMeshTasksIndirectNV = (PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC) load(userptr, "glMultiDrawMeshTasksIndirectNV");
}
static void sf_glad_gl_load_GL_NV_occlusion_query( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_occlusion_query) return;
    sf_glad_glBeginOcclusionQueryNV = (PFNGLBEGINOCCLUSIONQUERYNVPROC) load(userptr, "glBeginOcclusionQueryNV");
    sf_glad_glDeleteOcclusionQueriesNV = (PFNGLDELETEOCCLUSIONQUERIESNVPROC) load(userptr, "glDeleteOcclusionQueriesNV");
    sf_glad_glEndOcclusionQueryNV = (PFNGLENDOCCLUSIONQUERYNVPROC) load(userptr, "glEndOcclusionQueryNV");
    sf_glad_glGenOcclusionQueriesNV = (PFNGLGENOCCLUSIONQUERIESNVPROC) load(userptr, "glGenOcclusionQueriesNV");
    sf_glad_glGetOcclusionQueryivNV = (PFNGLGETOCCLUSIONQUERYIVNVPROC) load(userptr, "glGetOcclusionQueryivNV");
    sf_glad_glGetOcclusionQueryuivNV = (PFNGLGETOCCLUSIONQUERYUIVNVPROC) load(userptr, "glGetOcclusionQueryuivNV");
    sf_glad_glIsOcclusionQueryNV = (PFNGLISOCCLUSIONQUERYNVPROC) load(userptr, "glIsOcclusionQueryNV");
}
static void sf_glad_gl_load_GL_NV_parameter_buffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_parameter_buffer_object) return;
    sf_glad_glProgramBufferParametersIivNV = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) load(userptr, "glProgramBufferParametersIivNV");
    sf_glad_glProgramBufferParametersIuivNV = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) load(userptr, "glProgramBufferParametersIuivNV");
    sf_glad_glProgramBufferParametersfvNV = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) load(userptr, "glProgramBufferParametersfvNV");
}
static void sf_glad_gl_load_GL_NV_path_rendering( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_path_rendering) return;
    sf_glad_glCopyPathNV = (PFNGLCOPYPATHNVPROC) load(userptr, "glCopyPathNV");
    sf_glad_glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC) load(userptr, "glCoverFillPathInstancedNV");
    sf_glad_glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC) load(userptr, "glCoverFillPathNV");
    sf_glad_glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) load(userptr, "glCoverStrokePathInstancedNV");
    sf_glad_glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC) load(userptr, "glCoverStrokePathNV");
    sf_glad_glDeletePathsNV = (PFNGLDELETEPATHSNVPROC) load(userptr, "glDeletePathsNV");
    sf_glad_glGenPathsNV = (PFNGLGENPATHSNVPROC) load(userptr, "glGenPathsNV");
    sf_glad_glGetPathColorGenfvNV = (PFNGLGETPATHCOLORGENFVNVPROC) load(userptr, "glGetPathColorGenfvNV");
    sf_glad_glGetPathColorGenivNV = (PFNGLGETPATHCOLORGENIVNVPROC) load(userptr, "glGetPathColorGenivNV");
    sf_glad_glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC) load(userptr, "glGetPathCommandsNV");
    sf_glad_glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC) load(userptr, "glGetPathCoordsNV");
    sf_glad_glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC) load(userptr, "glGetPathDashArrayNV");
    sf_glad_glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC) load(userptr, "glGetPathLengthNV");
    sf_glad_glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC) load(userptr, "glGetPathMetricRangeNV");
    sf_glad_glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC) load(userptr, "glGetPathMetricsNV");
    sf_glad_glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC) load(userptr, "glGetPathParameterfvNV");
    sf_glad_glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC) load(userptr, "glGetPathParameterivNV");
    sf_glad_glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC) load(userptr, "glGetPathSpacingNV");
    sf_glad_glGetPathTexGenfvNV = (PFNGLGETPATHTEXGENFVNVPROC) load(userptr, "glGetPathTexGenfvNV");
    sf_glad_glGetPathTexGenivNV = (PFNGLGETPATHTEXGENIVNVPROC) load(userptr, "glGetPathTexGenivNV");
    sf_glad_glGetProgramResourcefvNV = (PFNGLGETPROGRAMRESOURCEFVNVPROC) load(userptr, "glGetProgramResourcefvNV");
    sf_glad_glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC) load(userptr, "glInterpolatePathsNV");
    sf_glad_glIsPathNV = (PFNGLISPATHNVPROC) load(userptr, "glIsPathNV");
    sf_glad_glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC) load(userptr, "glIsPointInFillPathNV");
    sf_glad_glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC) load(userptr, "glIsPointInStrokePathNV");
    sf_glad_glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC) load(userptr, "glMatrixFrustumEXT");
    sf_glad_glMatrixLoad3x2fNV = (PFNGLMATRIXLOAD3X2FNVPROC) load(userptr, "glMatrixLoad3x2fNV");
    sf_glad_glMatrixLoad3x3fNV = (PFNGLMATRIXLOAD3X3FNVPROC) load(userptr, "glMatrixLoad3x3fNV");
    sf_glad_glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC) load(userptr, "glMatrixLoadIdentityEXT");
    sf_glad_glMatrixLoadTranspose3x3fNV = (PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) load(userptr, "glMatrixLoadTranspose3x3fNV");
    sf_glad_glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC) load(userptr, "glMatrixLoadTransposedEXT");
    sf_glad_glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC) load(userptr, "glMatrixLoadTransposefEXT");
    sf_glad_glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC) load(userptr, "glMatrixLoaddEXT");
    sf_glad_glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC) load(userptr, "glMatrixLoadfEXT");
    sf_glad_glMatrixMult3x2fNV = (PFNGLMATRIXMULT3X2FNVPROC) load(userptr, "glMatrixMult3x2fNV");
    sf_glad_glMatrixMult3x3fNV = (PFNGLMATRIXMULT3X3FNVPROC) load(userptr, "glMatrixMult3x3fNV");
    sf_glad_glMatrixMultTranspose3x3fNV = (PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) load(userptr, "glMatrixMultTranspose3x3fNV");
    sf_glad_glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC) load(userptr, "glMatrixMultTransposedEXT");
    sf_glad_glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC) load(userptr, "glMatrixMultTransposefEXT");
    sf_glad_glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC) load(userptr, "glMatrixMultdEXT");
    sf_glad_glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC) load(userptr, "glMatrixMultfEXT");
    sf_glad_glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC) load(userptr, "glMatrixOrthoEXT");
    sf_glad_glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC) load(userptr, "glMatrixPopEXT");
    sf_glad_glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC) load(userptr, "glMatrixPushEXT");
    sf_glad_glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC) load(userptr, "glMatrixRotatedEXT");
    sf_glad_glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC) load(userptr, "glMatrixRotatefEXT");
    sf_glad_glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC) load(userptr, "glMatrixScaledEXT");
    sf_glad_glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC) load(userptr, "glMatrixScalefEXT");
    sf_glad_glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC) load(userptr, "glMatrixTranslatedEXT");
    sf_glad_glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC) load(userptr, "glMatrixTranslatefEXT");
    sf_glad_glPathColorGenNV = (PFNGLPATHCOLORGENNVPROC) load(userptr, "glPathColorGenNV");
    sf_glad_glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC) load(userptr, "glPathCommandsNV");
    sf_glad_glPathCoordsNV = (PFNGLPATHCOORDSNVPROC) load(userptr, "glPathCoordsNV");
    sf_glad_glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC) load(userptr, "glPathCoverDepthFuncNV");
    sf_glad_glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC) load(userptr, "glPathDashArrayNV");
    sf_glad_glPathFogGenNV = (PFNGLPATHFOGGENNVPROC) load(userptr, "glPathFogGenNV");
    sf_glad_glPathGlyphIndexArrayNV = (PFNGLPATHGLYPHINDEXARRAYNVPROC) load(userptr, "glPathGlyphIndexArrayNV");
    sf_glad_glPathGlyphIndexRangeNV = (PFNGLPATHGLYPHINDEXRANGENVPROC) load(userptr, "glPathGlyphIndexRangeNV");
    sf_glad_glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC) load(userptr, "glPathGlyphRangeNV");
    sf_glad_glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC) load(userptr, "glPathGlyphsNV");
    sf_glad_glPathMemoryGlyphIndexArrayNV = (PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) load(userptr, "glPathMemoryGlyphIndexArrayNV");
    sf_glad_glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC) load(userptr, "glPathParameterfNV");
    sf_glad_glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC) load(userptr, "glPathParameterfvNV");
    sf_glad_glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC) load(userptr, "glPathParameteriNV");
    sf_glad_glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC) load(userptr, "glPathParameterivNV");
    sf_glad_glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC) load(userptr, "glPathStencilDepthOffsetNV");
    sf_glad_glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC) load(userptr, "glPathStencilFuncNV");
    sf_glad_glPathStringNV = (PFNGLPATHSTRINGNVPROC) load(userptr, "glPathStringNV");
    sf_glad_glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC) load(userptr, "glPathSubCommandsNV");
    sf_glad_glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC) load(userptr, "glPathSubCoordsNV");
    sf_glad_glPathTexGenNV = (PFNGLPATHTEXGENNVPROC) load(userptr, "glPathTexGenNV");
    sf_glad_glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC) load(userptr, "glPointAlongPathNV");
    sf_glad_glProgramPathFragmentInputGenNV = (PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) load(userptr, "glProgramPathFragmentInputGenNV");
    sf_glad_glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC) load(userptr, "glStencilFillPathInstancedNV");
    sf_glad_glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC) load(userptr, "glStencilFillPathNV");
    sf_glad_glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) load(userptr, "glStencilStrokePathInstancedNV");
    sf_glad_glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC) load(userptr, "glStencilStrokePathNV");
    sf_glad_glStencilThenCoverFillPathInstancedNV = (PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) load(userptr, "glStencilThenCoverFillPathInstancedNV");
    sf_glad_glStencilThenCoverFillPathNV = (PFNGLSTENCILTHENCOVERFILLPATHNVPROC) load(userptr, "glStencilThenCoverFillPathNV");
    sf_glad_glStencilThenCoverStrokePathInstancedNV = (PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) load(userptr, "glStencilThenCoverStrokePathInstancedNV");
    sf_glad_glStencilThenCoverStrokePathNV = (PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) load(userptr, "glStencilThenCoverStrokePathNV");
    sf_glad_glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC) load(userptr, "glTransformPathNV");
    sf_glad_glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC) load(userptr, "glWeightPathsNV");
}
static void sf_glad_gl_load_GL_NV_pixel_data_range( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_pixel_data_range) return;
    sf_glad_glFlushPixelDataRangeNV = (PFNGLFLUSHPIXELDATARANGENVPROC) load(userptr, "glFlushPixelDataRangeNV");
    sf_glad_glPixelDataRangeNV = (PFNGLPIXELDATARANGENVPROC) load(userptr, "glPixelDataRangeNV");
}
static void sf_glad_gl_load_GL_NV_point_sprite( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_point_sprite) return;
    sf_glad_glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC) load(userptr, "glPointParameteriNV");
    sf_glad_glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC) load(userptr, "glPointParameterivNV");
}
static void sf_glad_gl_load_GL_NV_present_video( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_present_video) return;
    sf_glad_glGetVideoi64vNV = (PFNGLGETVIDEOI64VNVPROC) load(userptr, "glGetVideoi64vNV");
    sf_glad_glGetVideoivNV = (PFNGLGETVIDEOIVNVPROC) load(userptr, "glGetVideoivNV");
    sf_glad_glGetVideoui64vNV = (PFNGLGETVIDEOUI64VNVPROC) load(userptr, "glGetVideoui64vNV");
    sf_glad_glGetVideouivNV = (PFNGLGETVIDEOUIVNVPROC) load(userptr, "glGetVideouivNV");
    sf_glad_glPresentFrameDualFillNV = (PFNGLPRESENTFRAMEDUALFILLNVPROC) load(userptr, "glPresentFrameDualFillNV");
    sf_glad_glPresentFrameKeyedNV = (PFNGLPRESENTFRAMEKEYEDNVPROC) load(userptr, "glPresentFrameKeyedNV");
}
static void sf_glad_gl_load_GL_NV_primitive_restart( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_primitive_restart) return;
    sf_glad_glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC) load(userptr, "glPrimitiveRestartIndexNV");
    sf_glad_glPrimitiveRestartNV = (PFNGLPRIMITIVERESTARTNVPROC) load(userptr, "glPrimitiveRestartNV");
}
static void sf_glad_gl_load_GL_NV_query_resource( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_query_resource) return;
    sf_glad_glQueryResourceNV = (PFNGLQUERYRESOURCENVPROC) load(userptr, "glQueryResourceNV");
}
static void sf_glad_gl_load_GL_NV_query_resource_tag( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_query_resource_tag) return;
    sf_glad_glDeleteQueryResourceTagNV = (PFNGLDELETEQUERYRESOURCETAGNVPROC) load(userptr, "glDeleteQueryResourceTagNV");
    sf_glad_glGenQueryResourceTagNV = (PFNGLGENQUERYRESOURCETAGNVPROC) load(userptr, "glGenQueryResourceTagNV");
    sf_glad_glQueryResourceTagNV = (PFNGLQUERYRESOURCETAGNVPROC) load(userptr, "glQueryResourceTagNV");
}
static void sf_glad_gl_load_GL_NV_register_combiners( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_register_combiners) return;
    sf_glad_glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC) load(userptr, "glCombinerInputNV");
    sf_glad_glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC) load(userptr, "glCombinerOutputNV");
    sf_glad_glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC) load(userptr, "glCombinerParameterfNV");
    sf_glad_glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC) load(userptr, "glCombinerParameterfvNV");
    sf_glad_glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC) load(userptr, "glCombinerParameteriNV");
    sf_glad_glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC) load(userptr, "glCombinerParameterivNV");
    sf_glad_glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC) load(userptr, "glFinalCombinerInputNV");
    sf_glad_glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) load(userptr, "glGetCombinerInputParameterfvNV");
    sf_glad_glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) load(userptr, "glGetCombinerInputParameterivNV");
    sf_glad_glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) load(userptr, "glGetCombinerOutputParameterfvNV");
    sf_glad_glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) load(userptr, "glGetCombinerOutputParameterivNV");
    sf_glad_glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) load(userptr, "glGetFinalCombinerInputParameterfvNV");
    sf_glad_glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) load(userptr, "glGetFinalCombinerInputParameterivNV");
}
static void sf_glad_gl_load_GL_NV_register_combiners2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_register_combiners2) return;
    sf_glad_glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) load(userptr, "glCombinerStageParameterfvNV");
    sf_glad_glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) load(userptr, "glGetCombinerStageParameterfvNV");
}
static void sf_glad_gl_load_GL_NV_sample_locations( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_sample_locations) return;
    sf_glad_glFramebufferSampleLocationsfvNV = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) load(userptr, "glFramebufferSampleLocationsfvNV");
    sf_glad_glNamedFramebufferSampleLocationsfvNV = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) load(userptr, "glNamedFramebufferSampleLocationsfvNV");
    sf_glad_glResolveDepthValuesNV = (PFNGLRESOLVEDEPTHVALUESNVPROC) load(userptr, "glResolveDepthValuesNV");
}
static void sf_glad_gl_load_GL_NV_scissor_exclusive( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_scissor_exclusive) return;
    sf_glad_glScissorExclusiveArrayvNV = (PFNGLSCISSOREXCLUSIVEARRAYVNVPROC) load(userptr, "glScissorExclusiveArrayvNV");
    sf_glad_glScissorExclusiveNV = (PFNGLSCISSOREXCLUSIVENVPROC) load(userptr, "glScissorExclusiveNV");
}
static void sf_glad_gl_load_GL_NV_shader_buffer_load( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_shader_buffer_load) return;
    sf_glad_glGetBufferParameterui64vNV = (PFNGLGETBUFFERPARAMETERUI64VNVPROC) load(userptr, "glGetBufferParameterui64vNV");
    sf_glad_glGetIntegerui64vNV = (PFNGLGETINTEGERUI64VNVPROC) load(userptr, "glGetIntegerui64vNV");
    sf_glad_glGetNamedBufferParameterui64vNV = (PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) load(userptr, "glGetNamedBufferParameterui64vNV");
    sf_glad_glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC) load(userptr, "glGetUniformui64vNV");
    sf_glad_glIsBufferResidentNV = (PFNGLISBUFFERRESIDENTNVPROC) load(userptr, "glIsBufferResidentNV");
    sf_glad_glIsNamedBufferResidentNV = (PFNGLISNAMEDBUFFERRESIDENTNVPROC) load(userptr, "glIsNamedBufferResidentNV");
    sf_glad_glMakeBufferNonResidentNV = (PFNGLMAKEBUFFERNONRESIDENTNVPROC) load(userptr, "glMakeBufferNonResidentNV");
    sf_glad_glMakeBufferResidentNV = (PFNGLMAKEBUFFERRESIDENTNVPROC) load(userptr, "glMakeBufferResidentNV");
    sf_glad_glMakeNamedBufferNonResidentNV = (PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) load(userptr, "glMakeNamedBufferNonResidentNV");
    sf_glad_glMakeNamedBufferResidentNV = (PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) load(userptr, "glMakeNamedBufferResidentNV");
    sf_glad_glProgramUniformui64NV = (PFNGLPROGRAMUNIFORMUI64NVPROC) load(userptr, "glProgramUniformui64NV");
    sf_glad_glProgramUniformui64vNV = (PFNGLPROGRAMUNIFORMUI64VNVPROC) load(userptr, "glProgramUniformui64vNV");
    sf_glad_glUniformui64NV = (PFNGLUNIFORMUI64NVPROC) load(userptr, "glUniformui64NV");
    sf_glad_glUniformui64vNV = (PFNGLUNIFORMUI64VNVPROC) load(userptr, "glUniformui64vNV");
}
static void sf_glad_gl_load_GL_NV_shading_rate_image( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_shading_rate_image) return;
    sf_glad_glBindShadingRateImageNV = (PFNGLBINDSHADINGRATEIMAGENVPROC) load(userptr, "glBindShadingRateImageNV");
    sf_glad_glGetShadingRateImagePaletteNV = (PFNGLGETSHADINGRATEIMAGEPALETTENVPROC) load(userptr, "glGetShadingRateImagePaletteNV");
    sf_glad_glGetShadingRateSampleLocationivNV = (PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC) load(userptr, "glGetShadingRateSampleLocationivNV");
    sf_glad_glShadingRateImageBarrierNV = (PFNGLSHADINGRATEIMAGEBARRIERNVPROC) load(userptr, "glShadingRateImageBarrierNV");
    sf_glad_glShadingRateImagePaletteNV = (PFNGLSHADINGRATEIMAGEPALETTENVPROC) load(userptr, "glShadingRateImagePaletteNV");
    sf_glad_glShadingRateSampleOrderCustomNV = (PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC) load(userptr, "glShadingRateSampleOrderCustomNV");
    sf_glad_glShadingRateSampleOrderNV = (PFNGLSHADINGRATESAMPLEORDERNVPROC) load(userptr, "glShadingRateSampleOrderNV");
}
static void sf_glad_gl_load_GL_NV_texture_barrier( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_texture_barrier) return;
    sf_glad_glTextureBarrierNV = (PFNGLTEXTUREBARRIERNVPROC) load(userptr, "glTextureBarrierNV");
}
static void sf_glad_gl_load_GL_NV_texture_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_texture_multisample) return;
    sf_glad_glTexImage2DMultisampleCoverageNV = (PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) load(userptr, "glTexImage2DMultisampleCoverageNV");
    sf_glad_glTexImage3DMultisampleCoverageNV = (PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) load(userptr, "glTexImage3DMultisampleCoverageNV");
    sf_glad_glTextureImage2DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) load(userptr, "glTextureImage2DMultisampleCoverageNV");
    sf_glad_glTextureImage2DMultisampleNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) load(userptr, "glTextureImage2DMultisampleNV");
    sf_glad_glTextureImage3DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) load(userptr, "glTextureImage3DMultisampleCoverageNV");
    sf_glad_glTextureImage3DMultisampleNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) load(userptr, "glTextureImage3DMultisampleNV");
}
static void sf_glad_gl_load_GL_NV_timeline_semaphore( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_timeline_semaphore) return;
    sf_glad_glCreateSemaphoresNV = (PFNGLCREATESEMAPHORESNVPROC) load(userptr, "glCreateSemaphoresNV");
    sf_glad_glGetSemaphoreParameterivNV = (PFNGLGETSEMAPHOREPARAMETERIVNVPROC) load(userptr, "glGetSemaphoreParameterivNV");
    sf_glad_glSemaphoreParameterivNV = (PFNGLSEMAPHOREPARAMETERIVNVPROC) load(userptr, "glSemaphoreParameterivNV");
}
static void sf_glad_gl_load_GL_NV_transform_feedback( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_transform_feedback) return;
    sf_glad_glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC) load(userptr, "glActiveVaryingNV");
    sf_glad_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC) load(userptr, "glBeginTransformFeedbackNV");
    sf_glad_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC) load(userptr, "glBindBufferBaseNV");
    sf_glad_glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC) load(userptr, "glBindBufferOffsetNV");
    sf_glad_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC) load(userptr, "glBindBufferRangeNV");
    sf_glad_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC) load(userptr, "glEndTransformFeedbackNV");
    sf_glad_glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC) load(userptr, "glGetActiveVaryingNV");
    sf_glad_glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) load(userptr, "glGetTransformFeedbackVaryingNV");
    sf_glad_glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC) load(userptr, "glGetVaryingLocationNV");
    sf_glad_glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) load(userptr, "glTransformFeedbackAttribsNV");
    sf_glad_glTransformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) load(userptr, "glTransformFeedbackStreamAttribsNV");
    sf_glad_glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) load(userptr, "glTransformFeedbackVaryingsNV");
}
static void sf_glad_gl_load_GL_NV_transform_feedback2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_transform_feedback2) return;
    sf_glad_glBindTransformFeedbackNV = (PFNGLBINDTRANSFORMFEEDBACKNVPROC) load(userptr, "glBindTransformFeedbackNV");
    sf_glad_glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC) load(userptr, "glDeleteTransformFeedbacksNV");
    sf_glad_glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC) load(userptr, "glDrawTransformFeedbackNV");
    sf_glad_glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC) load(userptr, "glGenTransformFeedbacksNV");
    sf_glad_glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC) load(userptr, "glIsTransformFeedbackNV");
    sf_glad_glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC) load(userptr, "glPauseTransformFeedbackNV");
    sf_glad_glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC) load(userptr, "glResumeTransformFeedbackNV");
}
static void sf_glad_gl_load_GL_NV_vdpau_interop( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_vdpau_interop) return;
    sf_glad_glVDPAUFiniNV = (PFNGLVDPAUFININVPROC) load(userptr, "glVDPAUFiniNV");
    sf_glad_glVDPAUGetSurfaceivNV = (PFNGLVDPAUGETSURFACEIVNVPROC) load(userptr, "glVDPAUGetSurfaceivNV");
    sf_glad_glVDPAUInitNV = (PFNGLVDPAUINITNVPROC) load(userptr, "glVDPAUInitNV");
    sf_glad_glVDPAUIsSurfaceNV = (PFNGLVDPAUISSURFACENVPROC) load(userptr, "glVDPAUIsSurfaceNV");
    sf_glad_glVDPAUMapSurfacesNV = (PFNGLVDPAUMAPSURFACESNVPROC) load(userptr, "glVDPAUMapSurfacesNV");
    sf_glad_glVDPAURegisterOutputSurfaceNV = (PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) load(userptr, "glVDPAURegisterOutputSurfaceNV");
    sf_glad_glVDPAURegisterVideoSurfaceNV = (PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) load(userptr, "glVDPAURegisterVideoSurfaceNV");
    sf_glad_glVDPAUSurfaceAccessNV = (PFNGLVDPAUSURFACEACCESSNVPROC) load(userptr, "glVDPAUSurfaceAccessNV");
    sf_glad_glVDPAUUnmapSurfacesNV = (PFNGLVDPAUUNMAPSURFACESNVPROC) load(userptr, "glVDPAUUnmapSurfacesNV");
    sf_glad_glVDPAUUnregisterSurfaceNV = (PFNGLVDPAUUNREGISTERSURFACENVPROC) load(userptr, "glVDPAUUnregisterSurfaceNV");
}
static void sf_glad_gl_load_GL_NV_vdpau_interop2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_vdpau_interop2) return;
    sf_glad_glVDPAURegisterVideoSurfaceWithPictureStructureNV = (PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC) load(userptr, "glVDPAURegisterVideoSurfaceWithPictureStructureNV");
}
static void sf_glad_gl_load_GL_NV_vertex_array_range( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_vertex_array_range) return;
    sf_glad_glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC) load(userptr, "glFlushVertexArrayRangeNV");
    sf_glad_glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC) load(userptr, "glVertexArrayRangeNV");
}
static void sf_glad_gl_load_GL_NV_vertex_attrib_integer_64bit( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_vertex_attrib_integer_64bit) return;
    sf_glad_glGetVertexAttribLi64vNV = (PFNGLGETVERTEXATTRIBLI64VNVPROC) load(userptr, "glGetVertexAttribLi64vNV");
    sf_glad_glGetVertexAttribLui64vNV = (PFNGLGETVERTEXATTRIBLUI64VNVPROC) load(userptr, "glGetVertexAttribLui64vNV");
    sf_glad_glVertexAttribL1i64NV = (PFNGLVERTEXATTRIBL1I64NVPROC) load(userptr, "glVertexAttribL1i64NV");
    sf_glad_glVertexAttribL1i64vNV = (PFNGLVERTEXATTRIBL1I64VNVPROC) load(userptr, "glVertexAttribL1i64vNV");
    sf_glad_glVertexAttribL1ui64NV = (PFNGLVERTEXATTRIBL1UI64NVPROC) load(userptr, "glVertexAttribL1ui64NV");
    sf_glad_glVertexAttribL1ui64vNV = (PFNGLVERTEXATTRIBL1UI64VNVPROC) load(userptr, "glVertexAttribL1ui64vNV");
    sf_glad_glVertexAttribL2i64NV = (PFNGLVERTEXATTRIBL2I64NVPROC) load(userptr, "glVertexAttribL2i64NV");
    sf_glad_glVertexAttribL2i64vNV = (PFNGLVERTEXATTRIBL2I64VNVPROC) load(userptr, "glVertexAttribL2i64vNV");
    sf_glad_glVertexAttribL2ui64NV = (PFNGLVERTEXATTRIBL2UI64NVPROC) load(userptr, "glVertexAttribL2ui64NV");
    sf_glad_glVertexAttribL2ui64vNV = (PFNGLVERTEXATTRIBL2UI64VNVPROC) load(userptr, "glVertexAttribL2ui64vNV");
    sf_glad_glVertexAttribL3i64NV = (PFNGLVERTEXATTRIBL3I64NVPROC) load(userptr, "glVertexAttribL3i64NV");
    sf_glad_glVertexAttribL3i64vNV = (PFNGLVERTEXATTRIBL3I64VNVPROC) load(userptr, "glVertexAttribL3i64vNV");
    sf_glad_glVertexAttribL3ui64NV = (PFNGLVERTEXATTRIBL3UI64NVPROC) load(userptr, "glVertexAttribL3ui64NV");
    sf_glad_glVertexAttribL3ui64vNV = (PFNGLVERTEXATTRIBL3UI64VNVPROC) load(userptr, "glVertexAttribL3ui64vNV");
    sf_glad_glVertexAttribL4i64NV = (PFNGLVERTEXATTRIBL4I64NVPROC) load(userptr, "glVertexAttribL4i64NV");
    sf_glad_glVertexAttribL4i64vNV = (PFNGLVERTEXATTRIBL4I64VNVPROC) load(userptr, "glVertexAttribL4i64vNV");
    sf_glad_glVertexAttribL4ui64NV = (PFNGLVERTEXATTRIBL4UI64NVPROC) load(userptr, "glVertexAttribL4ui64NV");
    sf_glad_glVertexAttribL4ui64vNV = (PFNGLVERTEXATTRIBL4UI64VNVPROC) load(userptr, "glVertexAttribL4ui64vNV");
    sf_glad_glVertexAttribLFormatNV = (PFNGLVERTEXATTRIBLFORMATNVPROC) load(userptr, "glVertexAttribLFormatNV");
}
static void sf_glad_gl_load_GL_NV_vertex_buffer_unified_memory( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_vertex_buffer_unified_memory) return;
    sf_glad_glBufferAddressRangeNV = (PFNGLBUFFERADDRESSRANGENVPROC) load(userptr, "glBufferAddressRangeNV");
    sf_glad_glColorFormatNV = (PFNGLCOLORFORMATNVPROC) load(userptr, "glColorFormatNV");
    sf_glad_glEdgeFlagFormatNV = (PFNGLEDGEFLAGFORMATNVPROC) load(userptr, "glEdgeFlagFormatNV");
    sf_glad_glFogCoordFormatNV = (PFNGLFOGCOORDFORMATNVPROC) load(userptr, "glFogCoordFormatNV");
    sf_glad_glGetIntegerui64i_vNV = (PFNGLGETINTEGERUI64I_VNVPROC) load(userptr, "glGetIntegerui64i_vNV");
    sf_glad_glIndexFormatNV = (PFNGLINDEXFORMATNVPROC) load(userptr, "glIndexFormatNV");
    sf_glad_glNormalFormatNV = (PFNGLNORMALFORMATNVPROC) load(userptr, "glNormalFormatNV");
    sf_glad_glSecondaryColorFormatNV = (PFNGLSECONDARYCOLORFORMATNVPROC) load(userptr, "glSecondaryColorFormatNV");
    sf_glad_glTexCoordFormatNV = (PFNGLTEXCOORDFORMATNVPROC) load(userptr, "glTexCoordFormatNV");
    sf_glad_glVertexAttribFormatNV = (PFNGLVERTEXATTRIBFORMATNVPROC) load(userptr, "glVertexAttribFormatNV");
    sf_glad_glVertexAttribIFormatNV = (PFNGLVERTEXATTRIBIFORMATNVPROC) load(userptr, "glVertexAttribIFormatNV");
    sf_glad_glVertexFormatNV = (PFNGLVERTEXFORMATNVPROC) load(userptr, "glVertexFormatNV");
}
static void sf_glad_gl_load_GL_NV_vertex_program( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_vertex_program) return;
    sf_glad_glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC) load(userptr, "glAreProgramsResidentNV");
    sf_glad_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC) load(userptr, "glBindProgramNV");
    sf_glad_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC) load(userptr, "glDeleteProgramsNV");
    sf_glad_glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC) load(userptr, "glExecuteProgramNV");
    sf_glad_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC) load(userptr, "glGenProgramsNV");
    sf_glad_glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC) load(userptr, "glGetProgramParameterdvNV");
    sf_glad_glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC) load(userptr, "glGetProgramParameterfvNV");
    sf_glad_glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC) load(userptr, "glGetProgramStringNV");
    sf_glad_glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC) load(userptr, "glGetProgramivNV");
    sf_glad_glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC) load(userptr, "glGetTrackMatrixivNV");
    sf_glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC) load(userptr, "glGetVertexAttribPointervNV");
    sf_glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC) load(userptr, "glGetVertexAttribdvNV");
    sf_glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC) load(userptr, "glGetVertexAttribfvNV");
    sf_glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC) load(userptr, "glGetVertexAttribivNV");
    sf_glad_glIsProgramNV = (PFNGLISPROGRAMNVPROC) load(userptr, "glIsProgramNV");
    sf_glad_glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC) load(userptr, "glLoadProgramNV");
    sf_glad_glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC) load(userptr, "glProgramParameter4dNV");
    sf_glad_glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC) load(userptr, "glProgramParameter4dvNV");
    sf_glad_glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC) load(userptr, "glProgramParameter4fNV");
    sf_glad_glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC) load(userptr, "glProgramParameter4fvNV");
    sf_glad_glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC) load(userptr, "glProgramParameters4dvNV");
    sf_glad_glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC) load(userptr, "glProgramParameters4fvNV");
    sf_glad_glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC) load(userptr, "glRequestResidentProgramsNV");
    sf_glad_glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC) load(userptr, "glTrackMatrixNV");
    sf_glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC) load(userptr, "glVertexAttrib1dNV");
    sf_glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC) load(userptr, "glVertexAttrib1dvNV");
    sf_glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC) load(userptr, "glVertexAttrib1fNV");
    sf_glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC) load(userptr, "glVertexAttrib1fvNV");
    sf_glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC) load(userptr, "glVertexAttrib1sNV");
    sf_glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC) load(userptr, "glVertexAttrib1svNV");
    sf_glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC) load(userptr, "glVertexAttrib2dNV");
    sf_glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC) load(userptr, "glVertexAttrib2dvNV");
    sf_glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC) load(userptr, "glVertexAttrib2fNV");
    sf_glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC) load(userptr, "glVertexAttrib2fvNV");
    sf_glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC) load(userptr, "glVertexAttrib2sNV");
    sf_glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC) load(userptr, "glVertexAttrib2svNV");
    sf_glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC) load(userptr, "glVertexAttrib3dNV");
    sf_glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC) load(userptr, "glVertexAttrib3dvNV");
    sf_glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC) load(userptr, "glVertexAttrib3fNV");
    sf_glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC) load(userptr, "glVertexAttrib3fvNV");
    sf_glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC) load(userptr, "glVertexAttrib3sNV");
    sf_glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC) load(userptr, "glVertexAttrib3svNV");
    sf_glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC) load(userptr, "glVertexAttrib4dNV");
    sf_glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC) load(userptr, "glVertexAttrib4dvNV");
    sf_glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC) load(userptr, "glVertexAttrib4fNV");
    sf_glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC) load(userptr, "glVertexAttrib4fvNV");
    sf_glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC) load(userptr, "glVertexAttrib4sNV");
    sf_glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC) load(userptr, "glVertexAttrib4svNV");
    sf_glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC) load(userptr, "glVertexAttrib4ubNV");
    sf_glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC) load(userptr, "glVertexAttrib4ubvNV");
    sf_glad_glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC) load(userptr, "glVertexAttribPointerNV");
    sf_glad_glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC) load(userptr, "glVertexAttribs1dvNV");
    sf_glad_glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC) load(userptr, "glVertexAttribs1fvNV");
    sf_glad_glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC) load(userptr, "glVertexAttribs1svNV");
    sf_glad_glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC) load(userptr, "glVertexAttribs2dvNV");
    sf_glad_glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC) load(userptr, "glVertexAttribs2fvNV");
    sf_glad_glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC) load(userptr, "glVertexAttribs2svNV");
    sf_glad_glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC) load(userptr, "glVertexAttribs3dvNV");
    sf_glad_glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC) load(userptr, "glVertexAttribs3fvNV");
    sf_glad_glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC) load(userptr, "glVertexAttribs3svNV");
    sf_glad_glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC) load(userptr, "glVertexAttribs4dvNV");
    sf_glad_glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC) load(userptr, "glVertexAttribs4fvNV");
    sf_glad_glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC) load(userptr, "glVertexAttribs4svNV");
    sf_glad_glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC) load(userptr, "glVertexAttribs4ubvNV");
}
static void sf_glad_gl_load_GL_NV_vertex_program4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_vertex_program4) return;
    sf_glad_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC) load(userptr, "glGetVertexAttribIivEXT");
    sf_glad_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC) load(userptr, "glGetVertexAttribIuivEXT");
    sf_glad_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC) load(userptr, "glVertexAttribI1iEXT");
    sf_glad_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC) load(userptr, "glVertexAttribI1ivEXT");
    sf_glad_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC) load(userptr, "glVertexAttribI1uiEXT");
    sf_glad_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC) load(userptr, "glVertexAttribI1uivEXT");
    sf_glad_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC) load(userptr, "glVertexAttribI2iEXT");
    sf_glad_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC) load(userptr, "glVertexAttribI2ivEXT");
    sf_glad_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC) load(userptr, "glVertexAttribI2uiEXT");
    sf_glad_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC) load(userptr, "glVertexAttribI2uivEXT");
    sf_glad_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC) load(userptr, "glVertexAttribI3iEXT");
    sf_glad_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC) load(userptr, "glVertexAttribI3ivEXT");
    sf_glad_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC) load(userptr, "glVertexAttribI3uiEXT");
    sf_glad_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC) load(userptr, "glVertexAttribI3uivEXT");
    sf_glad_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC) load(userptr, "glVertexAttribI4bvEXT");
    sf_glad_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC) load(userptr, "glVertexAttribI4iEXT");
    sf_glad_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC) load(userptr, "glVertexAttribI4ivEXT");
    sf_glad_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC) load(userptr, "glVertexAttribI4svEXT");
    sf_glad_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC) load(userptr, "glVertexAttribI4ubvEXT");
    sf_glad_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC) load(userptr, "glVertexAttribI4uiEXT");
    sf_glad_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC) load(userptr, "glVertexAttribI4uivEXT");
    sf_glad_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC) load(userptr, "glVertexAttribI4usvEXT");
    sf_glad_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC) load(userptr, "glVertexAttribIPointerEXT");
}
static void sf_glad_gl_load_GL_NV_video_capture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_video_capture) return;
    sf_glad_glBeginVideoCaptureNV = (PFNGLBEGINVIDEOCAPTURENVPROC) load(userptr, "glBeginVideoCaptureNV");
    sf_glad_glBindVideoCaptureStreamBufferNV = (PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) load(userptr, "glBindVideoCaptureStreamBufferNV");
    sf_glad_glBindVideoCaptureStreamTextureNV = (PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) load(userptr, "glBindVideoCaptureStreamTextureNV");
    sf_glad_glEndVideoCaptureNV = (PFNGLENDVIDEOCAPTURENVPROC) load(userptr, "glEndVideoCaptureNV");
    sf_glad_glGetVideoCaptureStreamdvNV = (PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) load(userptr, "glGetVideoCaptureStreamdvNV");
    sf_glad_glGetVideoCaptureStreamfvNV = (PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) load(userptr, "glGetVideoCaptureStreamfvNV");
    sf_glad_glGetVideoCaptureStreamivNV = (PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) load(userptr, "glGetVideoCaptureStreamivNV");
    sf_glad_glGetVideoCaptureivNV = (PFNGLGETVIDEOCAPTUREIVNVPROC) load(userptr, "glGetVideoCaptureivNV");
    sf_glad_glVideoCaptureNV = (PFNGLVIDEOCAPTURENVPROC) load(userptr, "glVideoCaptureNV");
    sf_glad_glVideoCaptureStreamParameterdvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) load(userptr, "glVideoCaptureStreamParameterdvNV");
    sf_glad_glVideoCaptureStreamParameterfvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) load(userptr, "glVideoCaptureStreamParameterfvNV");
    sf_glad_glVideoCaptureStreamParameterivNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) load(userptr, "glVideoCaptureStreamParameterivNV");
}
static void sf_glad_gl_load_GL_NV_viewport_swizzle( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_NV_viewport_swizzle) return;
    sf_glad_glViewportSwizzleNV = (PFNGLVIEWPORTSWIZZLENVPROC) load(userptr, "glViewportSwizzleNV");
}
static void sf_glad_gl_load_GL_OES_byte_coordinates( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_byte_coordinates) return;
    sf_glad_glMultiTexCoord1bOES = (PFNGLMULTITEXCOORD1BOESPROC) load(userptr, "glMultiTexCoord1bOES");
    sf_glad_glMultiTexCoord1bvOES = (PFNGLMULTITEXCOORD1BVOESPROC) load(userptr, "glMultiTexCoord1bvOES");
    sf_glad_glMultiTexCoord2bOES = (PFNGLMULTITEXCOORD2BOESPROC) load(userptr, "glMultiTexCoord2bOES");
    sf_glad_glMultiTexCoord2bvOES = (PFNGLMULTITEXCOORD2BVOESPROC) load(userptr, "glMultiTexCoord2bvOES");
    sf_glad_glMultiTexCoord3bOES = (PFNGLMULTITEXCOORD3BOESPROC) load(userptr, "glMultiTexCoord3bOES");
    sf_glad_glMultiTexCoord3bvOES = (PFNGLMULTITEXCOORD3BVOESPROC) load(userptr, "glMultiTexCoord3bvOES");
    sf_glad_glMultiTexCoord4bOES = (PFNGLMULTITEXCOORD4BOESPROC) load(userptr, "glMultiTexCoord4bOES");
    sf_glad_glMultiTexCoord4bvOES = (PFNGLMULTITEXCOORD4BVOESPROC) load(userptr, "glMultiTexCoord4bvOES");
    sf_glad_glTexCoord1bOES = (PFNGLTEXCOORD1BOESPROC) load(userptr, "glTexCoord1bOES");
    sf_glad_glTexCoord1bvOES = (PFNGLTEXCOORD1BVOESPROC) load(userptr, "glTexCoord1bvOES");
    sf_glad_glTexCoord2bOES = (PFNGLTEXCOORD2BOESPROC) load(userptr, "glTexCoord2bOES");
    sf_glad_glTexCoord2bvOES = (PFNGLTEXCOORD2BVOESPROC) load(userptr, "glTexCoord2bvOES");
    sf_glad_glTexCoord3bOES = (PFNGLTEXCOORD3BOESPROC) load(userptr, "glTexCoord3bOES");
    sf_glad_glTexCoord3bvOES = (PFNGLTEXCOORD3BVOESPROC) load(userptr, "glTexCoord3bvOES");
    sf_glad_glTexCoord4bOES = (PFNGLTEXCOORD4BOESPROC) load(userptr, "glTexCoord4bOES");
    sf_glad_glTexCoord4bvOES = (PFNGLTEXCOORD4BVOESPROC) load(userptr, "glTexCoord4bvOES");
    sf_glad_glVertex2bOES = (PFNGLVERTEX2BOESPROC) load(userptr, "glVertex2bOES");
    sf_glad_glVertex2bvOES = (PFNGLVERTEX2BVOESPROC) load(userptr, "glVertex2bvOES");
    sf_glad_glVertex3bOES = (PFNGLVERTEX3BOESPROC) load(userptr, "glVertex3bOES");
    sf_glad_glVertex3bvOES = (PFNGLVERTEX3BVOESPROC) load(userptr, "glVertex3bvOES");
    sf_glad_glVertex4bOES = (PFNGLVERTEX4BOESPROC) load(userptr, "glVertex4bOES");
    sf_glad_glVertex4bvOES = (PFNGLVERTEX4BVOESPROC) load(userptr, "glVertex4bvOES");
}
static void sf_glad_gl_load_GL_OES_fixed_point( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_fixed_point) return;
    sf_glad_glAccumxOES = (PFNGLACCUMXOESPROC) load(userptr, "glAccumxOES");
    sf_glad_glAlphaFuncxOES = (PFNGLALPHAFUNCXOESPROC) load(userptr, "glAlphaFuncxOES");
    sf_glad_glBitmapxOES = (PFNGLBITMAPXOESPROC) load(userptr, "glBitmapxOES");
    sf_glad_glBlendColorxOES = (PFNGLBLENDCOLORXOESPROC) load(userptr, "glBlendColorxOES");
    sf_glad_glClearAccumxOES = (PFNGLCLEARACCUMXOESPROC) load(userptr, "glClearAccumxOES");
    sf_glad_glClearColorxOES = (PFNGLCLEARCOLORXOESPROC) load(userptr, "glClearColorxOES");
    sf_glad_glClearDepthxOES = (PFNGLCLEARDEPTHXOESPROC) load(userptr, "glClearDepthxOES");
    sf_glad_glClipPlanexOES = (PFNGLCLIPPLANEXOESPROC) load(userptr, "glClipPlanexOES");
    sf_glad_glColor3xOES = (PFNGLCOLOR3XOESPROC) load(userptr, "glColor3xOES");
    sf_glad_glColor3xvOES = (PFNGLCOLOR3XVOESPROC) load(userptr, "glColor3xvOES");
    sf_glad_glColor4xOES = (PFNGLCOLOR4XOESPROC) load(userptr, "glColor4xOES");
    sf_glad_glColor4xvOES = (PFNGLCOLOR4XVOESPROC) load(userptr, "glColor4xvOES");
    sf_glad_glConvolutionParameterxOES = (PFNGLCONVOLUTIONPARAMETERXOESPROC) load(userptr, "glConvolutionParameterxOES");
    sf_glad_glConvolutionParameterxvOES = (PFNGLCONVOLUTIONPARAMETERXVOESPROC) load(userptr, "glConvolutionParameterxvOES");
    sf_glad_glDepthRangexOES = (PFNGLDEPTHRANGEXOESPROC) load(userptr, "glDepthRangexOES");
    sf_glad_glEvalCoord1xOES = (PFNGLEVALCOORD1XOESPROC) load(userptr, "glEvalCoord1xOES");
    sf_glad_glEvalCoord1xvOES = (PFNGLEVALCOORD1XVOESPROC) load(userptr, "glEvalCoord1xvOES");
    sf_glad_glEvalCoord2xOES = (PFNGLEVALCOORD2XOESPROC) load(userptr, "glEvalCoord2xOES");
    sf_glad_glEvalCoord2xvOES = (PFNGLEVALCOORD2XVOESPROC) load(userptr, "glEvalCoord2xvOES");
    sf_glad_glFeedbackBufferxOES = (PFNGLFEEDBACKBUFFERXOESPROC) load(userptr, "glFeedbackBufferxOES");
    sf_glad_glFogxOES = (PFNGLFOGXOESPROC) load(userptr, "glFogxOES");
    sf_glad_glFogxvOES = (PFNGLFOGXVOESPROC) load(userptr, "glFogxvOES");
    sf_glad_glFrustumxOES = (PFNGLFRUSTUMXOESPROC) load(userptr, "glFrustumxOES");
    sf_glad_glGetClipPlanexOES = (PFNGLGETCLIPPLANEXOESPROC) load(userptr, "glGetClipPlanexOES");
    sf_glad_glGetConvolutionParameterxvOES = (PFNGLGETCONVOLUTIONPARAMETERXVOESPROC) load(userptr, "glGetConvolutionParameterxvOES");
    sf_glad_glGetFixedvOES = (PFNGLGETFIXEDVOESPROC) load(userptr, "glGetFixedvOES");
    sf_glad_glGetHistogramParameterxvOES = (PFNGLGETHISTOGRAMPARAMETERXVOESPROC) load(userptr, "glGetHistogramParameterxvOES");
    sf_glad_glGetLightxOES = (PFNGLGETLIGHTXOESPROC) load(userptr, "glGetLightxOES");
    sf_glad_glGetLightxvOES = (PFNGLGETLIGHTXVOESPROC) load(userptr, "glGetLightxvOES");
    sf_glad_glGetMapxvOES = (PFNGLGETMAPXVOESPROC) load(userptr, "glGetMapxvOES");
    sf_glad_glGetMaterialxOES = (PFNGLGETMATERIALXOESPROC) load(userptr, "glGetMaterialxOES");
    sf_glad_glGetMaterialxvOES = (PFNGLGETMATERIALXVOESPROC) load(userptr, "glGetMaterialxvOES");
    sf_glad_glGetPixelMapxv = (PFNGLGETPIXELMAPXVPROC) load(userptr, "glGetPixelMapxv");
    sf_glad_glGetTexEnvxvOES = (PFNGLGETTEXENVXVOESPROC) load(userptr, "glGetTexEnvxvOES");
    sf_glad_glGetTexGenxvOES = (PFNGLGETTEXGENXVOESPROC) load(userptr, "glGetTexGenxvOES");
    sf_glad_glGetTexLevelParameterxvOES = (PFNGLGETTEXLEVELPARAMETERXVOESPROC) load(userptr, "glGetTexLevelParameterxvOES");
    sf_glad_glGetTexParameterxvOES = (PFNGLGETTEXPARAMETERXVOESPROC) load(userptr, "glGetTexParameterxvOES");
    sf_glad_glIndexxOES = (PFNGLINDEXXOESPROC) load(userptr, "glIndexxOES");
    sf_glad_glIndexxvOES = (PFNGLINDEXXVOESPROC) load(userptr, "glIndexxvOES");
    sf_glad_glLightModelxOES = (PFNGLLIGHTMODELXOESPROC) load(userptr, "glLightModelxOES");
    sf_glad_glLightModelxvOES = (PFNGLLIGHTMODELXVOESPROC) load(userptr, "glLightModelxvOES");
    sf_glad_glLightxOES = (PFNGLLIGHTXOESPROC) load(userptr, "glLightxOES");
    sf_glad_glLightxvOES = (PFNGLLIGHTXVOESPROC) load(userptr, "glLightxvOES");
    sf_glad_glLineWidthxOES = (PFNGLLINEWIDTHXOESPROC) load(userptr, "glLineWidthxOES");
    sf_glad_glLoadMatrixxOES = (PFNGLLOADMATRIXXOESPROC) load(userptr, "glLoadMatrixxOES");
    sf_glad_glLoadTransposeMatrixxOES = (PFNGLLOADTRANSPOSEMATRIXXOESPROC) load(userptr, "glLoadTransposeMatrixxOES");
    sf_glad_glMap1xOES = (PFNGLMAP1XOESPROC) load(userptr, "glMap1xOES");
    sf_glad_glMap2xOES = (PFNGLMAP2XOESPROC) load(userptr, "glMap2xOES");
    sf_glad_glMapGrid1xOES = (PFNGLMAPGRID1XOESPROC) load(userptr, "glMapGrid1xOES");
    sf_glad_glMapGrid2xOES = (PFNGLMAPGRID2XOESPROC) load(userptr, "glMapGrid2xOES");
    sf_glad_glMaterialxOES = (PFNGLMATERIALXOESPROC) load(userptr, "glMaterialxOES");
    sf_glad_glMaterialxvOES = (PFNGLMATERIALXVOESPROC) load(userptr, "glMaterialxvOES");
    sf_glad_glMultMatrixxOES = (PFNGLMULTMATRIXXOESPROC) load(userptr, "glMultMatrixxOES");
    sf_glad_glMultTransposeMatrixxOES = (PFNGLMULTTRANSPOSEMATRIXXOESPROC) load(userptr, "glMultTransposeMatrixxOES");
    sf_glad_glMultiTexCoord1xOES = (PFNGLMULTITEXCOORD1XOESPROC) load(userptr, "glMultiTexCoord1xOES");
    sf_glad_glMultiTexCoord1xvOES = (PFNGLMULTITEXCOORD1XVOESPROC) load(userptr, "glMultiTexCoord1xvOES");
    sf_glad_glMultiTexCoord2xOES = (PFNGLMULTITEXCOORD2XOESPROC) load(userptr, "glMultiTexCoord2xOES");
    sf_glad_glMultiTexCoord2xvOES = (PFNGLMULTITEXCOORD2XVOESPROC) load(userptr, "glMultiTexCoord2xvOES");
    sf_glad_glMultiTexCoord3xOES = (PFNGLMULTITEXCOORD3XOESPROC) load(userptr, "glMultiTexCoord3xOES");
    sf_glad_glMultiTexCoord3xvOES = (PFNGLMULTITEXCOORD3XVOESPROC) load(userptr, "glMultiTexCoord3xvOES");
    sf_glad_glMultiTexCoord4xOES = (PFNGLMULTITEXCOORD4XOESPROC) load(userptr, "glMultiTexCoord4xOES");
    sf_glad_glMultiTexCoord4xvOES = (PFNGLMULTITEXCOORD4XVOESPROC) load(userptr, "glMultiTexCoord4xvOES");
    sf_glad_glNormal3xOES = (PFNGLNORMAL3XOESPROC) load(userptr, "glNormal3xOES");
    sf_glad_glNormal3xvOES = (PFNGLNORMAL3XVOESPROC) load(userptr, "glNormal3xvOES");
    sf_glad_glOrthoxOES = (PFNGLORTHOXOESPROC) load(userptr, "glOrthoxOES");
    sf_glad_glPassThroughxOES = (PFNGLPASSTHROUGHXOESPROC) load(userptr, "glPassThroughxOES");
    sf_glad_glPixelMapx = (PFNGLPIXELMAPXPROC) load(userptr, "glPixelMapx");
    sf_glad_glPixelStorex = (PFNGLPIXELSTOREXPROC) load(userptr, "glPixelStorex");
    sf_glad_glPixelTransferxOES = (PFNGLPIXELTRANSFERXOESPROC) load(userptr, "glPixelTransferxOES");
    sf_glad_glPixelZoomxOES = (PFNGLPIXELZOOMXOESPROC) load(userptr, "glPixelZoomxOES");
    sf_glad_glPointParameterxOES = (PFNGLPOINTPARAMETERXOESPROC) load(userptr, "glPointParameterxOES");
    sf_glad_glPointParameterxvOES = (PFNGLPOINTPARAMETERXVOESPROC) load(userptr, "glPointParameterxvOES");
    sf_glad_glPointSizexOES = (PFNGLPOINTSIZEXOESPROC) load(userptr, "glPointSizexOES");
    sf_glad_glPolygonOffsetxOES = (PFNGLPOLYGONOFFSETXOESPROC) load(userptr, "glPolygonOffsetxOES");
    sf_glad_glPrioritizeTexturesxOES = (PFNGLPRIORITIZETEXTURESXOESPROC) load(userptr, "glPrioritizeTexturesxOES");
    sf_glad_glRasterPos2xOES = (PFNGLRASTERPOS2XOESPROC) load(userptr, "glRasterPos2xOES");
    sf_glad_glRasterPos2xvOES = (PFNGLRASTERPOS2XVOESPROC) load(userptr, "glRasterPos2xvOES");
    sf_glad_glRasterPos3xOES = (PFNGLRASTERPOS3XOESPROC) load(userptr, "glRasterPos3xOES");
    sf_glad_glRasterPos3xvOES = (PFNGLRASTERPOS3XVOESPROC) load(userptr, "glRasterPos3xvOES");
    sf_glad_glRasterPos4xOES = (PFNGLRASTERPOS4XOESPROC) load(userptr, "glRasterPos4xOES");
    sf_glad_glRasterPos4xvOES = (PFNGLRASTERPOS4XVOESPROC) load(userptr, "glRasterPos4xvOES");
    sf_glad_glRectxOES = (PFNGLRECTXOESPROC) load(userptr, "glRectxOES");
    sf_glad_glRectxvOES = (PFNGLRECTXVOESPROC) load(userptr, "glRectxvOES");
    sf_glad_glRotatexOES = (PFNGLROTATEXOESPROC) load(userptr, "glRotatexOES");
    sf_glad_glSampleCoveragexOES = (PFNGLSAMPLECOVERAGEXOESPROC) load(userptr, "glSampleCoveragexOES");
    sf_glad_glScalexOES = (PFNGLSCALEXOESPROC) load(userptr, "glScalexOES");
    sf_glad_glTexCoord1xOES = (PFNGLTEXCOORD1XOESPROC) load(userptr, "glTexCoord1xOES");
    sf_glad_glTexCoord1xvOES = (PFNGLTEXCOORD1XVOESPROC) load(userptr, "glTexCoord1xvOES");
    sf_glad_glTexCoord2xOES = (PFNGLTEXCOORD2XOESPROC) load(userptr, "glTexCoord2xOES");
    sf_glad_glTexCoord2xvOES = (PFNGLTEXCOORD2XVOESPROC) load(userptr, "glTexCoord2xvOES");
    sf_glad_glTexCoord3xOES = (PFNGLTEXCOORD3XOESPROC) load(userptr, "glTexCoord3xOES");
    sf_glad_glTexCoord3xvOES = (PFNGLTEXCOORD3XVOESPROC) load(userptr, "glTexCoord3xvOES");
    sf_glad_glTexCoord4xOES = (PFNGLTEXCOORD4XOESPROC) load(userptr, "glTexCoord4xOES");
    sf_glad_glTexCoord4xvOES = (PFNGLTEXCOORD4XVOESPROC) load(userptr, "glTexCoord4xvOES");
    sf_glad_glTexEnvxOES = (PFNGLTEXENVXOESPROC) load(userptr, "glTexEnvxOES");
    sf_glad_glTexEnvxvOES = (PFNGLTEXENVXVOESPROC) load(userptr, "glTexEnvxvOES");
    sf_glad_glTexGenxOES = (PFNGLTEXGENXOESPROC) load(userptr, "glTexGenxOES");
    sf_glad_glTexGenxvOES = (PFNGLTEXGENXVOESPROC) load(userptr, "glTexGenxvOES");
    sf_glad_glTexParameterxOES = (PFNGLTEXPARAMETERXOESPROC) load(userptr, "glTexParameterxOES");
    sf_glad_glTexParameterxvOES = (PFNGLTEXPARAMETERXVOESPROC) load(userptr, "glTexParameterxvOES");
    sf_glad_glTranslatexOES = (PFNGLTRANSLATEXOESPROC) load(userptr, "glTranslatexOES");
    sf_glad_glVertex2xOES = (PFNGLVERTEX2XOESPROC) load(userptr, "glVertex2xOES");
    sf_glad_glVertex2xvOES = (PFNGLVERTEX2XVOESPROC) load(userptr, "glVertex2xvOES");
    sf_glad_glVertex3xOES = (PFNGLVERTEX3XOESPROC) load(userptr, "glVertex3xOES");
    sf_glad_glVertex3xvOES = (PFNGLVERTEX3XVOESPROC) load(userptr, "glVertex3xvOES");
    sf_glad_glVertex4xOES = (PFNGLVERTEX4XOESPROC) load(userptr, "glVertex4xOES");
    sf_glad_glVertex4xvOES = (PFNGLVERTEX4XVOESPROC) load(userptr, "glVertex4xvOES");
}
static void sf_glad_gl_load_GL_OES_query_matrix( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_query_matrix) return;
    sf_glad_glQueryMatrixxOES = (PFNGLQUERYMATRIXXOESPROC) load(userptr, "glQueryMatrixxOES");
}
static void sf_glad_gl_load_GL_OES_single_precision( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_single_precision) return;
    sf_glad_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC) load(userptr, "glClearDepthfOES");
    sf_glad_glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC) load(userptr, "glClipPlanefOES");
    sf_glad_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC) load(userptr, "glDepthRangefOES");
    sf_glad_glFrustumfOES = (PFNGLFRUSTUMFOESPROC) load(userptr, "glFrustumfOES");
    sf_glad_glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC) load(userptr, "glGetClipPlanefOES");
    sf_glad_glOrthofOES = (PFNGLORTHOFOESPROC) load(userptr, "glOrthofOES");
}
static void sf_glad_gl_load_GL_OVR_multiview( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OVR_multiview) return;
    sf_glad_glFramebufferTextureMultiviewOVR = (PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) load(userptr, "glFramebufferTextureMultiviewOVR");
    sf_glad_glNamedFramebufferTextureMultiviewOVR = (PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) load(userptr, "glNamedFramebufferTextureMultiviewOVR");
}
static void sf_glad_gl_load_GL_PGI_misc_hints( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_PGI_misc_hints) return;
    sf_glad_glHintPGI = (PFNGLHINTPGIPROC) load(userptr, "glHintPGI");
}
static void sf_glad_gl_load_GL_SGIS_detail_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIS_detail_texture) return;
    sf_glad_glDetailTexFuncSGIS = (PFNGLDETAILTEXFUNCSGISPROC) load(userptr, "glDetailTexFuncSGIS");
    sf_glad_glGetDetailTexFuncSGIS = (PFNGLGETDETAILTEXFUNCSGISPROC) load(userptr, "glGetDetailTexFuncSGIS");
}
static void sf_glad_gl_load_GL_SGIS_fog_function( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIS_fog_function) return;
    sf_glad_glFogFuncSGIS = (PFNGLFOGFUNCSGISPROC) load(userptr, "glFogFuncSGIS");
    sf_glad_glGetFogFuncSGIS = (PFNGLGETFOGFUNCSGISPROC) load(userptr, "glGetFogFuncSGIS");
}
static void sf_glad_gl_load_GL_SGIS_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIS_multisample) return;
    sf_glad_glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC) load(userptr, "glSampleMaskSGIS");
    sf_glad_glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC) load(userptr, "glSamplePatternSGIS");
}
static void sf_glad_gl_load_GL_SGIS_pixel_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIS_pixel_texture) return;
    sf_glad_glGetPixelTexGenParameterfvSGIS = (PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) load(userptr, "glGetPixelTexGenParameterfvSGIS");
    sf_glad_glGetPixelTexGenParameterivSGIS = (PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) load(userptr, "glGetPixelTexGenParameterivSGIS");
    sf_glad_glPixelTexGenParameterfSGIS = (PFNGLPIXELTEXGENPARAMETERFSGISPROC) load(userptr, "glPixelTexGenParameterfSGIS");
    sf_glad_glPixelTexGenParameterfvSGIS = (PFNGLPIXELTEXGENPARAMETERFVSGISPROC) load(userptr, "glPixelTexGenParameterfvSGIS");
    sf_glad_glPixelTexGenParameteriSGIS = (PFNGLPIXELTEXGENPARAMETERISGISPROC) load(userptr, "glPixelTexGenParameteriSGIS");
    sf_glad_glPixelTexGenParameterivSGIS = (PFNGLPIXELTEXGENPARAMETERIVSGISPROC) load(userptr, "glPixelTexGenParameterivSGIS");
}
static void sf_glad_gl_load_GL_SGIS_point_parameters( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIS_point_parameters) return;
    sf_glad_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC) load(userptr, "glPointParameterfSGIS");
    sf_glad_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC) load(userptr, "glPointParameterfvSGIS");
}
static void sf_glad_gl_load_GL_SGIS_sharpen_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIS_sharpen_texture) return;
    sf_glad_glGetSharpenTexFuncSGIS = (PFNGLGETSHARPENTEXFUNCSGISPROC) load(userptr, "glGetSharpenTexFuncSGIS");
    sf_glad_glSharpenTexFuncSGIS = (PFNGLSHARPENTEXFUNCSGISPROC) load(userptr, "glSharpenTexFuncSGIS");
}
static void sf_glad_gl_load_GL_SGIS_texture4D( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIS_texture4D) return;
    sf_glad_glTexImage4DSGIS = (PFNGLTEXIMAGE4DSGISPROC) load(userptr, "glTexImage4DSGIS");
    sf_glad_glTexSubImage4DSGIS = (PFNGLTEXSUBIMAGE4DSGISPROC) load(userptr, "glTexSubImage4DSGIS");
}
static void sf_glad_gl_load_GL_SGIS_texture_color_mask( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIS_texture_color_mask) return;
    sf_glad_glTextureColorMaskSGIS = (PFNGLTEXTURECOLORMASKSGISPROC) load(userptr, "glTextureColorMaskSGIS");
}
static void sf_glad_gl_load_GL_SGIS_texture_filter4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIS_texture_filter4) return;
    sf_glad_glGetTexFilterFuncSGIS = (PFNGLGETTEXFILTERFUNCSGISPROC) load(userptr, "glGetTexFilterFuncSGIS");
    sf_glad_glTexFilterFuncSGIS = (PFNGLTEXFILTERFUNCSGISPROC) load(userptr, "glTexFilterFuncSGIS");
}
static void sf_glad_gl_load_GL_SGIX_async( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_async) return;
    sf_glad_glAsyncMarkerSGIX = (PFNGLASYNCMARKERSGIXPROC) load(userptr, "glAsyncMarkerSGIX");
    sf_glad_glDeleteAsyncMarkersSGIX = (PFNGLDELETEASYNCMARKERSSGIXPROC) load(userptr, "glDeleteAsyncMarkersSGIX");
    sf_glad_glFinishAsyncSGIX = (PFNGLFINISHASYNCSGIXPROC) load(userptr, "glFinishAsyncSGIX");
    sf_glad_glGenAsyncMarkersSGIX = (PFNGLGENASYNCMARKERSSGIXPROC) load(userptr, "glGenAsyncMarkersSGIX");
    sf_glad_glIsAsyncMarkerSGIX = (PFNGLISASYNCMARKERSGIXPROC) load(userptr, "glIsAsyncMarkerSGIX");
    sf_glad_glPollAsyncSGIX = (PFNGLPOLLASYNCSGIXPROC) load(userptr, "glPollAsyncSGIX");
}
static void sf_glad_gl_load_GL_SGIX_flush_raster( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_flush_raster) return;
    sf_glad_glFlushRasterSGIX = (PFNGLFLUSHRASTERSGIXPROC) load(userptr, "glFlushRasterSGIX");
}
static void sf_glad_gl_load_GL_SGIX_fragment_lighting( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_fragment_lighting) return;
    sf_glad_glFragmentColorMaterialSGIX = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC) load(userptr, "glFragmentColorMaterialSGIX");
    sf_glad_glFragmentLightModelfSGIX = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC) load(userptr, "glFragmentLightModelfSGIX");
    sf_glad_glFragmentLightModelfvSGIX = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) load(userptr, "glFragmentLightModelfvSGIX");
    sf_glad_glFragmentLightModeliSGIX = (PFNGLFRAGMENTLIGHTMODELISGIXPROC) load(userptr, "glFragmentLightModeliSGIX");
    sf_glad_glFragmentLightModelivSGIX = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) load(userptr, "glFragmentLightModelivSGIX");
    sf_glad_glFragmentLightfSGIX = (PFNGLFRAGMENTLIGHTFSGIXPROC) load(userptr, "glFragmentLightfSGIX");
    sf_glad_glFragmentLightfvSGIX = (PFNGLFRAGMENTLIGHTFVSGIXPROC) load(userptr, "glFragmentLightfvSGIX");
    sf_glad_glFragmentLightiSGIX = (PFNGLFRAGMENTLIGHTISGIXPROC) load(userptr, "glFragmentLightiSGIX");
    sf_glad_glFragmentLightivSGIX = (PFNGLFRAGMENTLIGHTIVSGIXPROC) load(userptr, "glFragmentLightivSGIX");
    sf_glad_glFragmentMaterialfSGIX = (PFNGLFRAGMENTMATERIALFSGIXPROC) load(userptr, "glFragmentMaterialfSGIX");
    sf_glad_glFragmentMaterialfvSGIX = (PFNGLFRAGMENTMATERIALFVSGIXPROC) load(userptr, "glFragmentMaterialfvSGIX");
    sf_glad_glFragmentMaterialiSGIX = (PFNGLFRAGMENTMATERIALISGIXPROC) load(userptr, "glFragmentMaterialiSGIX");
    sf_glad_glFragmentMaterialivSGIX = (PFNGLFRAGMENTMATERIALIVSGIXPROC) load(userptr, "glFragmentMaterialivSGIX");
    sf_glad_glGetFragmentLightfvSGIX = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC) load(userptr, "glGetFragmentLightfvSGIX");
    sf_glad_glGetFragmentLightivSGIX = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC) load(userptr, "glGetFragmentLightivSGIX");
    sf_glad_glGetFragmentMaterialfvSGIX = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC) load(userptr, "glGetFragmentMaterialfvSGIX");
    sf_glad_glGetFragmentMaterialivSGIX = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC) load(userptr, "glGetFragmentMaterialivSGIX");
    sf_glad_glLightEnviSGIX = (PFNGLLIGHTENVISGIXPROC) load(userptr, "glLightEnviSGIX");
}
static void sf_glad_gl_load_GL_SGIX_framezoom( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_framezoom) return;
    sf_glad_glFrameZoomSGIX = (PFNGLFRAMEZOOMSGIXPROC) load(userptr, "glFrameZoomSGIX");
}
static void sf_glad_gl_load_GL_SGIX_igloo_interface( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_igloo_interface) return;
    sf_glad_glIglooInterfaceSGIX = (PFNGLIGLOOINTERFACESGIXPROC) load(userptr, "glIglooInterfaceSGIX");
}
static void sf_glad_gl_load_GL_SGIX_instruments( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_instruments) return;
    sf_glad_glGetInstrumentsSGIX = (PFNGLGETINSTRUMENTSSGIXPROC) load(userptr, "glGetInstrumentsSGIX");
    sf_glad_glInstrumentsBufferSGIX = (PFNGLINSTRUMENTSBUFFERSGIXPROC) load(userptr, "glInstrumentsBufferSGIX");
    sf_glad_glPollInstrumentsSGIX = (PFNGLPOLLINSTRUMENTSSGIXPROC) load(userptr, "glPollInstrumentsSGIX");
    sf_glad_glReadInstrumentsSGIX = (PFNGLREADINSTRUMENTSSGIXPROC) load(userptr, "glReadInstrumentsSGIX");
    sf_glad_glStartInstrumentsSGIX = (PFNGLSTARTINSTRUMENTSSGIXPROC) load(userptr, "glStartInstrumentsSGIX");
    sf_glad_glStopInstrumentsSGIX = (PFNGLSTOPINSTRUMENTSSGIXPROC) load(userptr, "glStopInstrumentsSGIX");
}
static void sf_glad_gl_load_GL_SGIX_list_priority( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_list_priority) return;
    sf_glad_glGetListParameterfvSGIX = (PFNGLGETLISTPARAMETERFVSGIXPROC) load(userptr, "glGetListParameterfvSGIX");
    sf_glad_glGetListParameterivSGIX = (PFNGLGETLISTPARAMETERIVSGIXPROC) load(userptr, "glGetListParameterivSGIX");
    sf_glad_glListParameterfSGIX = (PFNGLLISTPARAMETERFSGIXPROC) load(userptr, "glListParameterfSGIX");
    sf_glad_glListParameterfvSGIX = (PFNGLLISTPARAMETERFVSGIXPROC) load(userptr, "glListParameterfvSGIX");
    sf_glad_glListParameteriSGIX = (PFNGLLISTPARAMETERISGIXPROC) load(userptr, "glListParameteriSGIX");
    sf_glad_glListParameterivSGIX = (PFNGLLISTPARAMETERIVSGIXPROC) load(userptr, "glListParameterivSGIX");
}
static void sf_glad_gl_load_GL_SGIX_pixel_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_pixel_texture) return;
    sf_glad_glPixelTexGenSGIX = (PFNGLPIXELTEXGENSGIXPROC) load(userptr, "glPixelTexGenSGIX");
}
static void sf_glad_gl_load_GL_SGIX_polynomial_ffd( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_polynomial_ffd) return;
    sf_glad_glDeformSGIX = (PFNGLDEFORMSGIXPROC) load(userptr, "glDeformSGIX");
    sf_glad_glDeformationMap3dSGIX = (PFNGLDEFORMATIONMAP3DSGIXPROC) load(userptr, "glDeformationMap3dSGIX");
    sf_glad_glDeformationMap3fSGIX = (PFNGLDEFORMATIONMAP3FSGIXPROC) load(userptr, "glDeformationMap3fSGIX");
    sf_glad_glLoadIdentityDeformationMapSGIX = (PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) load(userptr, "glLoadIdentityDeformationMapSGIX");
}
static void sf_glad_gl_load_GL_SGIX_reference_plane( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_reference_plane) return;
    sf_glad_glReferencePlaneSGIX = (PFNGLREFERENCEPLANESGIXPROC) load(userptr, "glReferencePlaneSGIX");
}
static void sf_glad_gl_load_GL_SGIX_sprite( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_sprite) return;
    sf_glad_glSpriteParameterfSGIX = (PFNGLSPRITEPARAMETERFSGIXPROC) load(userptr, "glSpriteParameterfSGIX");
    sf_glad_glSpriteParameterfvSGIX = (PFNGLSPRITEPARAMETERFVSGIXPROC) load(userptr, "glSpriteParameterfvSGIX");
    sf_glad_glSpriteParameteriSGIX = (PFNGLSPRITEPARAMETERISGIXPROC) load(userptr, "glSpriteParameteriSGIX");
    sf_glad_glSpriteParameterivSGIX = (PFNGLSPRITEPARAMETERIVSGIXPROC) load(userptr, "glSpriteParameterivSGIX");
}
static void sf_glad_gl_load_GL_SGIX_tag_sample_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGIX_tag_sample_buffer) return;
    sf_glad_glTagSampleBufferSGIX = (PFNGLTAGSAMPLEBUFFERSGIXPROC) load(userptr, "glTagSampleBufferSGIX");
}
static void sf_glad_gl_load_GL_SGI_color_table( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SGI_color_table) return;
    sf_glad_glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC) load(userptr, "glColorTableParameterfvSGI");
    sf_glad_glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC) load(userptr, "glColorTableParameterivSGI");
    sf_glad_glColorTableSGI = (PFNGLCOLORTABLESGIPROC) load(userptr, "glColorTableSGI");
    sf_glad_glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC) load(userptr, "glCopyColorTableSGI");
    sf_glad_glGetColorTableParameterfvSGI = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) load(userptr, "glGetColorTableParameterfvSGI");
    sf_glad_glGetColorTableParameterivSGI = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) load(userptr, "glGetColorTableParameterivSGI");
    sf_glad_glGetColorTableSGI = (PFNGLGETCOLORTABLESGIPROC) load(userptr, "glGetColorTableSGI");
}
static void sf_glad_gl_load_GL_SUNX_constant_data( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SUNX_constant_data) return;
    sf_glad_glFinishTextureSUNX = (PFNGLFINISHTEXTURESUNXPROC) load(userptr, "glFinishTextureSUNX");
}
static void sf_glad_gl_load_GL_SUN_global_alpha( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SUN_global_alpha) return;
    sf_glad_glGlobalAlphaFactorbSUN = (PFNGLGLOBALALPHAFACTORBSUNPROC) load(userptr, "glGlobalAlphaFactorbSUN");
    sf_glad_glGlobalAlphaFactordSUN = (PFNGLGLOBALALPHAFACTORDSUNPROC) load(userptr, "glGlobalAlphaFactordSUN");
    sf_glad_glGlobalAlphaFactorfSUN = (PFNGLGLOBALALPHAFACTORFSUNPROC) load(userptr, "glGlobalAlphaFactorfSUN");
    sf_glad_glGlobalAlphaFactoriSUN = (PFNGLGLOBALALPHAFACTORISUNPROC) load(userptr, "glGlobalAlphaFactoriSUN");
    sf_glad_glGlobalAlphaFactorsSUN = (PFNGLGLOBALALPHAFACTORSSUNPROC) load(userptr, "glGlobalAlphaFactorsSUN");
    sf_glad_glGlobalAlphaFactorubSUN = (PFNGLGLOBALALPHAFACTORUBSUNPROC) load(userptr, "glGlobalAlphaFactorubSUN");
    sf_glad_glGlobalAlphaFactoruiSUN = (PFNGLGLOBALALPHAFACTORUISUNPROC) load(userptr, "glGlobalAlphaFactoruiSUN");
    sf_glad_glGlobalAlphaFactorusSUN = (PFNGLGLOBALALPHAFACTORUSSUNPROC) load(userptr, "glGlobalAlphaFactorusSUN");
}
static void sf_glad_gl_load_GL_SUN_mesh_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SUN_mesh_array) return;
    sf_glad_glDrawMeshArraysSUN = (PFNGLDRAWMESHARRAYSSUNPROC) load(userptr, "glDrawMeshArraysSUN");
}
static void sf_glad_gl_load_GL_SUN_triangle_list( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SUN_triangle_list) return;
    sf_glad_glReplacementCodePointerSUN = (PFNGLREPLACEMENTCODEPOINTERSUNPROC) load(userptr, "glReplacementCodePointerSUN");
    sf_glad_glReplacementCodeubSUN = (PFNGLREPLACEMENTCODEUBSUNPROC) load(userptr, "glReplacementCodeubSUN");
    sf_glad_glReplacementCodeubvSUN = (PFNGLREPLACEMENTCODEUBVSUNPROC) load(userptr, "glReplacementCodeubvSUN");
    sf_glad_glReplacementCodeuiSUN = (PFNGLREPLACEMENTCODEUISUNPROC) load(userptr, "glReplacementCodeuiSUN");
    sf_glad_glReplacementCodeuivSUN = (PFNGLREPLACEMENTCODEUIVSUNPROC) load(userptr, "glReplacementCodeuivSUN");
    sf_glad_glReplacementCodeusSUN = (PFNGLREPLACEMENTCODEUSSUNPROC) load(userptr, "glReplacementCodeusSUN");
    sf_glad_glReplacementCodeusvSUN = (PFNGLREPLACEMENTCODEUSVSUNPROC) load(userptr, "glReplacementCodeusvSUN");
}
static void sf_glad_gl_load_GL_SUN_vertex( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_SUN_vertex) return;
    sf_glad_glColor3fVertex3fSUN = (PFNGLCOLOR3FVERTEX3FSUNPROC) load(userptr, "glColor3fVertex3fSUN");
    sf_glad_glColor3fVertex3fvSUN = (PFNGLCOLOR3FVERTEX3FVSUNPROC) load(userptr, "glColor3fVertex3fvSUN");
    sf_glad_glColor4fNormal3fVertex3fSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) load(userptr, "glColor4fNormal3fVertex3fSUN");
    sf_glad_glColor4fNormal3fVertex3fvSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) load(userptr, "glColor4fNormal3fVertex3fvSUN");
    sf_glad_glColor4ubVertex2fSUN = (PFNGLCOLOR4UBVERTEX2FSUNPROC) load(userptr, "glColor4ubVertex2fSUN");
    sf_glad_glColor4ubVertex2fvSUN = (PFNGLCOLOR4UBVERTEX2FVSUNPROC) load(userptr, "glColor4ubVertex2fvSUN");
    sf_glad_glColor4ubVertex3fSUN = (PFNGLCOLOR4UBVERTEX3FSUNPROC) load(userptr, "glColor4ubVertex3fSUN");
    sf_glad_glColor4ubVertex3fvSUN = (PFNGLCOLOR4UBVERTEX3FVSUNPROC) load(userptr, "glColor4ubVertex3fvSUN");
    sf_glad_glNormal3fVertex3fSUN = (PFNGLNORMAL3FVERTEX3FSUNPROC) load(userptr, "glNormal3fVertex3fSUN");
    sf_glad_glNormal3fVertex3fvSUN = (PFNGLNORMAL3FVERTEX3FVSUNPROC) load(userptr, "glNormal3fVertex3fvSUN");
    sf_glad_glReplacementCodeuiColor3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) load(userptr, "glReplacementCodeuiColor3fVertex3fSUN");
    sf_glad_glReplacementCodeuiColor3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) load(userptr, "glReplacementCodeuiColor3fVertex3fvSUN");
    sf_glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) load(userptr, "glReplacementCodeuiColor4fNormal3fVertex3fSUN");
    sf_glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) load(userptr, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
    sf_glad_glReplacementCodeuiColor4ubVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) load(userptr, "glReplacementCodeuiColor4ubVertex3fSUN");
    sf_glad_glReplacementCodeuiColor4ubVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) load(userptr, "glReplacementCodeuiColor4ubVertex3fvSUN");
    sf_glad_glReplacementCodeuiNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) load(userptr, "glReplacementCodeuiNormal3fVertex3fSUN");
    sf_glad_glReplacementCodeuiNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) load(userptr, "glReplacementCodeuiNormal3fVertex3fvSUN");
    sf_glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) load(userptr, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
    sf_glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) load(userptr, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
    sf_glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) load(userptr, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
    sf_glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) load(userptr, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
    sf_glad_glReplacementCodeuiTexCoord2fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) load(userptr, "glReplacementCodeuiTexCoord2fVertex3fSUN");
    sf_glad_glReplacementCodeuiTexCoord2fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) load(userptr, "glReplacementCodeuiTexCoord2fVertex3fvSUN");
    sf_glad_glReplacementCodeuiVertex3fSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) load(userptr, "glReplacementCodeuiVertex3fSUN");
    sf_glad_glReplacementCodeuiVertex3fvSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) load(userptr, "glReplacementCodeuiVertex3fvSUN");
    sf_glad_glTexCoord2fColor3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) load(userptr, "glTexCoord2fColor3fVertex3fSUN");
    sf_glad_glTexCoord2fColor3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) load(userptr, "glTexCoord2fColor3fVertex3fvSUN");
    sf_glad_glTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) load(userptr, "glTexCoord2fColor4fNormal3fVertex3fSUN");
    sf_glad_glTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) load(userptr, "glTexCoord2fColor4fNormal3fVertex3fvSUN");
    sf_glad_glTexCoord2fColor4ubVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) load(userptr, "glTexCoord2fColor4ubVertex3fSUN");
    sf_glad_glTexCoord2fColor4ubVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) load(userptr, "glTexCoord2fColor4ubVertex3fvSUN");
    sf_glad_glTexCoord2fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) load(userptr, "glTexCoord2fNormal3fVertex3fSUN");
    sf_glad_glTexCoord2fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) load(userptr, "glTexCoord2fNormal3fVertex3fvSUN");
    sf_glad_glTexCoord2fVertex3fSUN = (PFNGLTEXCOORD2FVERTEX3FSUNPROC) load(userptr, "glTexCoord2fVertex3fSUN");
    sf_glad_glTexCoord2fVertex3fvSUN = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC) load(userptr, "glTexCoord2fVertex3fvSUN");
    sf_glad_glTexCoord4fColor4fNormal3fVertex4fSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) load(userptr, "glTexCoord4fColor4fNormal3fVertex4fSUN");
    sf_glad_glTexCoord4fColor4fNormal3fVertex4fvSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) load(userptr, "glTexCoord4fColor4fNormal3fVertex4fvSUN");
    sf_glad_glTexCoord4fVertex4fSUN = (PFNGLTEXCOORD4FVERTEX4FSUNPROC) load(userptr, "glTexCoord4fVertex4fSUN");
    sf_glad_glTexCoord4fVertex4fvSUN = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC) load(userptr, "glTexCoord4fVertex4fvSUN");
}
static void sf_glad_gl_load_GL_APPLE_copy_texture_levels( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_copy_texture_levels) return;
    sf_glad_glCopyTextureLevelsAPPLE = (PFNGLCOPYTEXTURELEVELSAPPLEPROC) load(userptr, "glCopyTextureLevelsAPPLE");
}
static void sf_glad_gl_load_GL_APPLE_framebuffer_multisample( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_framebuffer_multisample) return;
    sf_glad_glRenderbufferStorageMultisampleAPPLE = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC) load(userptr, "glRenderbufferStorageMultisampleAPPLE");
    sf_glad_glResolveMultisampleFramebufferAPPLE = (PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC) load(userptr, "glResolveMultisampleFramebufferAPPLE");
}
static void sf_glad_gl_load_GL_APPLE_sync( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_APPLE_sync) return;
    sf_glad_glClientWaitSyncAPPLE = (PFNGLCLIENTWAITSYNCAPPLEPROC) load(userptr, "glClientWaitSyncAPPLE");
    sf_glad_glDeleteSyncAPPLE = (PFNGLDELETESYNCAPPLEPROC) load(userptr, "glDeleteSyncAPPLE");
    sf_glad_glFenceSyncAPPLE = (PFNGLFENCESYNCAPPLEPROC) load(userptr, "glFenceSyncAPPLE");
    sf_glad_glGetInteger64vAPPLE = (PFNGLGETINTEGER64VAPPLEPROC) load(userptr, "glGetInteger64vAPPLE");
    sf_glad_glGetSyncivAPPLE = (PFNGLGETSYNCIVAPPLEPROC) load(userptr, "glGetSyncivAPPLE");
    sf_glad_glIsSyncAPPLE = (PFNGLISSYNCAPPLEPROC) load(userptr, "glIsSyncAPPLE");
    sf_glad_glWaitSyncAPPLE = (PFNGLWAITSYNCAPPLEPROC) load(userptr, "glWaitSyncAPPLE");
}
static void sf_glad_gl_load_GL_EXT_discard_framebuffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_discard_framebuffer) return;
    sf_glad_glDiscardFramebufferEXT = (PFNGLDISCARDFRAMEBUFFEREXTPROC) load(userptr, "glDiscardFramebufferEXT");
}
static void sf_glad_gl_load_GL_EXT_map_buffer_range( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_map_buffer_range) return;
    sf_glad_glFlushMappedBufferRangeEXT = (PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC) load(userptr, "glFlushMappedBufferRangeEXT");
    sf_glad_glMapBufferRangeEXT = (PFNGLMAPBUFFERRANGEEXTPROC) load(userptr, "glMapBufferRangeEXT");
}
static void sf_glad_gl_load_GL_EXT_multisampled_render_to_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_multisampled_render_to_texture) return;
    sf_glad_glFramebufferTexture2DMultisampleEXT = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC) load(userptr, "glFramebufferTexture2DMultisampleEXT");
    sf_glad_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) load(userptr, "glRenderbufferStorageMultisampleEXT");
}
static void sf_glad_gl_load_GL_EXT_robustness( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_EXT_robustness) return;
    sf_glad_glGetGraphicsResetStatusEXT = (PFNGLGETGRAPHICSRESETSTATUSEXTPROC) load(userptr, "glGetGraphicsResetStatusEXT");
    sf_glad_glGetnUniformfvEXT = (PFNGLGETNUNIFORMFVEXTPROC) load(userptr, "glGetnUniformfvEXT");
    sf_glad_glGetnUniformivEXT = (PFNGLGETNUNIFORMIVEXTPROC) load(userptr, "glGetnUniformivEXT");
    sf_glad_glReadnPixelsEXT = (PFNGLREADNPIXELSEXTPROC) load(userptr, "glReadnPixelsEXT");
}
static void sf_glad_gl_load_GL_IMG_multisampled_render_to_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_IMG_multisampled_render_to_texture) return;
    sf_glad_glFramebufferTexture2DMultisampleIMG = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC) load(userptr, "glFramebufferTexture2DMultisampleIMG");
    sf_glad_glRenderbufferStorageMultisampleIMG = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC) load(userptr, "glRenderbufferStorageMultisampleIMG");
}
static void sf_glad_gl_load_GL_IMG_user_clip_plane( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_IMG_user_clip_plane) return;
    sf_glad_glClipPlanefIMG = (PFNGLCLIPPLANEFIMGPROC) load(userptr, "glClipPlanefIMG");
    sf_glad_glClipPlanexIMG = (PFNGLCLIPPLANEXIMGPROC) load(userptr, "glClipPlanexIMG");
}
static void sf_glad_gl_load_GL_OES_EGL_image( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_EGL_image) return;
    sf_glad_glEGLImageTargetRenderbufferStorageOES = (PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC) load(userptr, "glEGLImageTargetRenderbufferStorageOES");
    sf_glad_glEGLImageTargetTexture2DOES = (PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) load(userptr, "glEGLImageTargetTexture2DOES");
}
static void sf_glad_gl_load_GL_OES_blend_equation_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_blend_equation_separate) return;
    sf_glad_glBlendEquationSeparateOES = (PFNGLBLENDEQUATIONSEPARATEOESPROC) load(userptr, "glBlendEquationSeparateOES");
}
static void sf_glad_gl_load_GL_OES_blend_func_separate( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_blend_func_separate) return;
    sf_glad_glBlendFuncSeparateOES = (PFNGLBLENDFUNCSEPARATEOESPROC) load(userptr, "glBlendFuncSeparateOES");
}
static void sf_glad_gl_load_GL_OES_blend_subtract( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_blend_subtract) return;
    sf_glad_glBlendEquationOES = (PFNGLBLENDEQUATIONOESPROC) load(userptr, "glBlendEquationOES");
}
static void sf_glad_gl_load_GL_OES_draw_texture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_draw_texture) return;
    sf_glad_glDrawTexfOES = (PFNGLDRAWTEXFOESPROC) load(userptr, "glDrawTexfOES");
    sf_glad_glDrawTexfvOES = (PFNGLDRAWTEXFVOESPROC) load(userptr, "glDrawTexfvOES");
    sf_glad_glDrawTexiOES = (PFNGLDRAWTEXIOESPROC) load(userptr, "glDrawTexiOES");
    sf_glad_glDrawTexivOES = (PFNGLDRAWTEXIVOESPROC) load(userptr, "glDrawTexivOES");
    sf_glad_glDrawTexsOES = (PFNGLDRAWTEXSOESPROC) load(userptr, "glDrawTexsOES");
    sf_glad_glDrawTexsvOES = (PFNGLDRAWTEXSVOESPROC) load(userptr, "glDrawTexsvOES");
    sf_glad_glDrawTexxOES = (PFNGLDRAWTEXXOESPROC) load(userptr, "glDrawTexxOES");
    sf_glad_glDrawTexxvOES = (PFNGLDRAWTEXXVOESPROC) load(userptr, "glDrawTexxvOES");
}
static void sf_glad_gl_load_GL_OES_framebuffer_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_framebuffer_object) return;
    sf_glad_glBindFramebufferOES = (PFNGLBINDFRAMEBUFFEROESPROC) load(userptr, "glBindFramebufferOES");
    sf_glad_glBindRenderbufferOES = (PFNGLBINDRENDERBUFFEROESPROC) load(userptr, "glBindRenderbufferOES");
    sf_glad_glCheckFramebufferStatusOES = (PFNGLCHECKFRAMEBUFFERSTATUSOESPROC) load(userptr, "glCheckFramebufferStatusOES");
    sf_glad_glDeleteFramebuffersOES = (PFNGLDELETEFRAMEBUFFERSOESPROC) load(userptr, "glDeleteFramebuffersOES");
    sf_glad_glDeleteRenderbuffersOES = (PFNGLDELETERENDERBUFFERSOESPROC) load(userptr, "glDeleteRenderbuffersOES");
    sf_glad_glFramebufferRenderbufferOES = (PFNGLFRAMEBUFFERRENDERBUFFEROESPROC) load(userptr, "glFramebufferRenderbufferOES");
    sf_glad_glFramebufferTexture2DOES = (PFNGLFRAMEBUFFERTEXTURE2DOESPROC) load(userptr, "glFramebufferTexture2DOES");
    sf_glad_glGenFramebuffersOES = (PFNGLGENFRAMEBUFFERSOESPROC) load(userptr, "glGenFramebuffersOES");
    sf_glad_glGenRenderbuffersOES = (PFNGLGENRENDERBUFFERSOESPROC) load(userptr, "glGenRenderbuffersOES");
    sf_glad_glGenerateMipmapOES = (PFNGLGENERATEMIPMAPOESPROC) load(userptr, "glGenerateMipmapOES");
    sf_glad_glGetFramebufferAttachmentParameterivOES = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC) load(userptr, "glGetFramebufferAttachmentParameterivOES");
    sf_glad_glGetRenderbufferParameterivOES = (PFNGLGETRENDERBUFFERPARAMETERIVOESPROC) load(userptr, "glGetRenderbufferParameterivOES");
    sf_glad_glIsFramebufferOES = (PFNGLISFRAMEBUFFEROESPROC) load(userptr, "glIsFramebufferOES");
    sf_glad_glIsRenderbufferOES = (PFNGLISRENDERBUFFEROESPROC) load(userptr, "glIsRenderbufferOES");
    sf_glad_glRenderbufferStorageOES = (PFNGLRENDERBUFFERSTORAGEOESPROC) load(userptr, "glRenderbufferStorageOES");
}
static void sf_glad_gl_load_GL_OES_mapbuffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_mapbuffer) return;
    sf_glad_glGetBufferPointervOES = (PFNGLGETBUFFERPOINTERVOESPROC) load(userptr, "glGetBufferPointervOES");
    sf_glad_glMapBufferOES = (PFNGLMAPBUFFEROESPROC) load(userptr, "glMapBufferOES");
    sf_glad_glUnmapBufferOES = (PFNGLUNMAPBUFFEROESPROC) load(userptr, "glUnmapBufferOES");
}
static void sf_glad_gl_load_GL_OES_matrix_palette( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_matrix_palette) return;
    sf_glad_glCurrentPaletteMatrixOES = (PFNGLCURRENTPALETTEMATRIXOESPROC) load(userptr, "glCurrentPaletteMatrixOES");
    sf_glad_glLoadPaletteFromModelViewMatrixOES = (PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC) load(userptr, "glLoadPaletteFromModelViewMatrixOES");
    sf_glad_glMatrixIndexPointerOES = (PFNGLMATRIXINDEXPOINTEROESPROC) load(userptr, "glMatrixIndexPointerOES");
    sf_glad_glWeightPointerOES = (PFNGLWEIGHTPOINTEROESPROC) load(userptr, "glWeightPointerOES");
}
static void sf_glad_gl_load_GL_OES_point_size_array( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_point_size_array) return;
    sf_glad_glPointSizePointerOES = (PFNGLPOINTSIZEPOINTEROESPROC) load(userptr, "glPointSizePointerOES");
}
static void sf_glad_gl_load_GL_OES_texture_cube_map( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_texture_cube_map) return;
    sf_glad_glGetTexGenfvOES = (PFNGLGETTEXGENFVOESPROC) load(userptr, "glGetTexGenfvOES");
    sf_glad_glGetTexGenivOES = (PFNGLGETTEXGENIVOESPROC) load(userptr, "glGetTexGenivOES");
    sf_glad_glGetTexGenxvOES = (PFNGLGETTEXGENXVOESPROC) load(userptr, "glGetTexGenxvOES");
    sf_glad_glTexGenfOES = (PFNGLTEXGENFOESPROC) load(userptr, "glTexGenfOES");
    sf_glad_glTexGenfvOES = (PFNGLTEXGENFVOESPROC) load(userptr, "glTexGenfvOES");
    sf_glad_glTexGeniOES = (PFNGLTEXGENIOESPROC) load(userptr, "glTexGeniOES");
    sf_glad_glTexGenivOES = (PFNGLTEXGENIVOESPROC) load(userptr, "glTexGenivOES");
    sf_glad_glTexGenxOES = (PFNGLTEXGENXOESPROC) load(userptr, "glTexGenxOES");
    sf_glad_glTexGenxvOES = (PFNGLTEXGENXVOESPROC) load(userptr, "glTexGenxvOES");
}
static void sf_glad_gl_load_GL_OES_vertex_array_object( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_OES_vertex_array_object) return;
    sf_glad_glBindVertexArrayOES = (PFNGLBINDVERTEXARRAYOESPROC) load(userptr, "glBindVertexArrayOES");
    sf_glad_glDeleteVertexArraysOES = (PFNGLDELETEVERTEXARRAYSOESPROC) load(userptr, "glDeleteVertexArraysOES");
    sf_glad_glGenVertexArraysOES = (PFNGLGENVERTEXARRAYSOESPROC) load(userptr, "glGenVertexArraysOES");
    sf_glad_glIsVertexArrayOES = (PFNGLISVERTEXARRAYOESPROC) load(userptr, "glIsVertexArrayOES");
}
static void sf_glad_gl_load_GL_QCOM_driver_control( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_QCOM_driver_control) return;
    sf_glad_glDisableDriverControlQCOM = (PFNGLDISABLEDRIVERCONTROLQCOMPROC) load(userptr, "glDisableDriverControlQCOM");
    sf_glad_glEnableDriverControlQCOM = (PFNGLENABLEDRIVERCONTROLQCOMPROC) load(userptr, "glEnableDriverControlQCOM");
    sf_glad_glGetDriverControlStringQCOM = (PFNGLGETDRIVERCONTROLSTRINGQCOMPROC) load(userptr, "glGetDriverControlStringQCOM");
    sf_glad_glGetDriverControlsQCOM = (PFNGLGETDRIVERCONTROLSQCOMPROC) load(userptr, "glGetDriverControlsQCOM");
}
static void sf_glad_gl_load_GL_QCOM_extended_get( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_QCOM_extended_get) return;
    sf_glad_glExtGetBufferPointervQCOM = (PFNGLEXTGETBUFFERPOINTERVQCOMPROC) load(userptr, "glExtGetBufferPointervQCOM");
    sf_glad_glExtGetBuffersQCOM = (PFNGLEXTGETBUFFERSQCOMPROC) load(userptr, "glExtGetBuffersQCOM");
    sf_glad_glExtGetFramebuffersQCOM = (PFNGLEXTGETFRAMEBUFFERSQCOMPROC) load(userptr, "glExtGetFramebuffersQCOM");
    sf_glad_glExtGetRenderbuffersQCOM = (PFNGLEXTGETRENDERBUFFERSQCOMPROC) load(userptr, "glExtGetRenderbuffersQCOM");
    sf_glad_glExtGetTexLevelParameterivQCOM = (PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC) load(userptr, "glExtGetTexLevelParameterivQCOM");
    sf_glad_glExtGetTexSubImageQCOM = (PFNGLEXTGETTEXSUBIMAGEQCOMPROC) load(userptr, "glExtGetTexSubImageQCOM");
    sf_glad_glExtGetTexturesQCOM = (PFNGLEXTGETTEXTURESQCOMPROC) load(userptr, "glExtGetTexturesQCOM");
    sf_glad_glExtTexObjectStateOverrideiQCOM = (PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC) load(userptr, "glExtTexObjectStateOverrideiQCOM");
}
static void sf_glad_gl_load_GL_QCOM_extended_get2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_QCOM_extended_get2) return;
    sf_glad_glExtGetProgramBinarySourceQCOM = (PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC) load(userptr, "glExtGetProgramBinarySourceQCOM");
    sf_glad_glExtGetProgramsQCOM = (PFNGLEXTGETPROGRAMSQCOMPROC) load(userptr, "glExtGetProgramsQCOM");
    sf_glad_glExtGetShadersQCOM = (PFNGLEXTGETSHADERSQCOMPROC) load(userptr, "glExtGetShadersQCOM");
    sf_glad_glExtIsProgramBinaryQCOM = (PFNGLEXTISPROGRAMBINARYQCOMPROC) load(userptr, "glExtIsProgramBinaryQCOM");
}
static void sf_glad_gl_load_GL_QCOM_tiled_rendering( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GL_QCOM_tiled_rendering) return;
    sf_glad_glEndTilingQCOM = (PFNGLENDTILINGQCOMPROC) load(userptr, "glEndTilingQCOM");
    sf_glad_glStartTilingQCOM = (PFNGLSTARTTILINGQCOMPROC) load(userptr, "glStartTilingQCOM");
}


static void sf_glad_gl_resolve_aliases(void) {
    if (sf_glad_glActiveTexture == NULL && sf_glad_glActiveTextureARB != NULL) sf_glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC)sf_glad_glActiveTextureARB;
    if (sf_glad_glActiveTextureARB == NULL && sf_glad_glActiveTexture != NULL) sf_glad_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)sf_glad_glActiveTexture;
    if (sf_glad_glArrayElement == NULL && sf_glad_glArrayElementEXT != NULL) sf_glad_glArrayElement = (PFNGLARRAYELEMENTPROC)sf_glad_glArrayElementEXT;
    if (sf_glad_glArrayElementEXT == NULL && sf_glad_glArrayElement != NULL) sf_glad_glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)sf_glad_glArrayElement;
    if (sf_glad_glAttachObjectARB == NULL && sf_glad_glAttachShader != NULL) sf_glad_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)sf_glad_glAttachShader;
    if (sf_glad_glAttachShader == NULL && sf_glad_glAttachObjectARB != NULL) sf_glad_glAttachShader = (PFNGLATTACHSHADERPROC)sf_glad_glAttachObjectARB;
    if (sf_glad_glBeginConditionalRender == NULL && sf_glad_glBeginConditionalRenderNV != NULL) sf_glad_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)sf_glad_glBeginConditionalRenderNV;
    if (sf_glad_glBeginConditionalRenderNV == NULL && sf_glad_glBeginConditionalRender != NULL) sf_glad_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC)sf_glad_glBeginConditionalRender;
    if (sf_glad_glBeginQuery == NULL && sf_glad_glBeginQueryARB != NULL) sf_glad_glBeginQuery = (PFNGLBEGINQUERYPROC)sf_glad_glBeginQueryARB;
    if (sf_glad_glBeginQueryARB == NULL && sf_glad_glBeginQuery != NULL) sf_glad_glBeginQueryARB = (PFNGLBEGINQUERYARBPROC)sf_glad_glBeginQuery;
    if (sf_glad_glBeginTransformFeedback == NULL && sf_glad_glBeginTransformFeedbackEXT != NULL) sf_glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)sf_glad_glBeginTransformFeedbackEXT;
    if (sf_glad_glBeginTransformFeedback == NULL && sf_glad_glBeginTransformFeedbackNV != NULL) sf_glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)sf_glad_glBeginTransformFeedbackNV;
    if (sf_glad_glBeginTransformFeedbackEXT == NULL && sf_glad_glBeginTransformFeedback != NULL) sf_glad_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)sf_glad_glBeginTransformFeedback;
    if (sf_glad_glBeginTransformFeedbackEXT == NULL && sf_glad_glBeginTransformFeedbackNV != NULL) sf_glad_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)sf_glad_glBeginTransformFeedbackNV;
    if (sf_glad_glBeginTransformFeedbackNV == NULL && sf_glad_glBeginTransformFeedback != NULL) sf_glad_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)sf_glad_glBeginTransformFeedback;
    if (sf_glad_glBeginTransformFeedbackNV == NULL && sf_glad_glBeginTransformFeedbackEXT != NULL) sf_glad_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)sf_glad_glBeginTransformFeedbackEXT;
    if (sf_glad_glBindAttribLocation == NULL && sf_glad_glBindAttribLocationARB != NULL) sf_glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)sf_glad_glBindAttribLocationARB;
    if (sf_glad_glBindAttribLocationARB == NULL && sf_glad_glBindAttribLocation != NULL) sf_glad_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)sf_glad_glBindAttribLocation;
    if (sf_glad_glBindBuffer == NULL && sf_glad_glBindBufferARB != NULL) sf_glad_glBindBuffer = (PFNGLBINDBUFFERPROC)sf_glad_glBindBufferARB;
    if (sf_glad_glBindBufferARB == NULL && sf_glad_glBindBuffer != NULL) sf_glad_glBindBufferARB = (PFNGLBINDBUFFERARBPROC)sf_glad_glBindBuffer;
    if (sf_glad_glBindBufferBase == NULL && sf_glad_glBindBufferBaseEXT != NULL) sf_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)sf_glad_glBindBufferBaseEXT;
    if (sf_glad_glBindBufferBase == NULL && sf_glad_glBindBufferBaseNV != NULL) sf_glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)sf_glad_glBindBufferBaseNV;
    if (sf_glad_glBindBufferBaseEXT == NULL && sf_glad_glBindBufferBase != NULL) sf_glad_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)sf_glad_glBindBufferBase;
    if (sf_glad_glBindBufferBaseEXT == NULL && sf_glad_glBindBufferBaseNV != NULL) sf_glad_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)sf_glad_glBindBufferBaseNV;
    if (sf_glad_glBindBufferBaseNV == NULL && sf_glad_glBindBufferBase != NULL) sf_glad_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)sf_glad_glBindBufferBase;
    if (sf_glad_glBindBufferBaseNV == NULL && sf_glad_glBindBufferBaseEXT != NULL) sf_glad_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)sf_glad_glBindBufferBaseEXT;
    if (sf_glad_glBindBufferOffsetEXT == NULL && sf_glad_glBindBufferOffsetNV != NULL) sf_glad_glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC)sf_glad_glBindBufferOffsetNV;
    if (sf_glad_glBindBufferOffsetNV == NULL && sf_glad_glBindBufferOffsetEXT != NULL) sf_glad_glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)sf_glad_glBindBufferOffsetEXT;
    if (sf_glad_glBindBufferRange == NULL && sf_glad_glBindBufferRangeEXT != NULL) sf_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)sf_glad_glBindBufferRangeEXT;
    if (sf_glad_glBindBufferRange == NULL && sf_glad_glBindBufferRangeNV != NULL) sf_glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)sf_glad_glBindBufferRangeNV;
    if (sf_glad_glBindBufferRangeEXT == NULL && sf_glad_glBindBufferRange != NULL) sf_glad_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)sf_glad_glBindBufferRange;
    if (sf_glad_glBindBufferRangeEXT == NULL && sf_glad_glBindBufferRangeNV != NULL) sf_glad_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)sf_glad_glBindBufferRangeNV;
    if (sf_glad_glBindBufferRangeNV == NULL && sf_glad_glBindBufferRange != NULL) sf_glad_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)sf_glad_glBindBufferRange;
    if (sf_glad_glBindBufferRangeNV == NULL && sf_glad_glBindBufferRangeEXT != NULL) sf_glad_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)sf_glad_glBindBufferRangeEXT;
    if (sf_glad_glBindFragDataLocation == NULL && sf_glad_glBindFragDataLocationEXT != NULL) sf_glad_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)sf_glad_glBindFragDataLocationEXT;
    if (sf_glad_glBindFragDataLocationEXT == NULL && sf_glad_glBindFragDataLocation != NULL) sf_glad_glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)sf_glad_glBindFragDataLocation;
    if (sf_glad_glBindProgramARB == NULL && sf_glad_glBindProgramNV != NULL) sf_glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)sf_glad_glBindProgramNV;
    if (sf_glad_glBindProgramNV == NULL && sf_glad_glBindProgramARB != NULL) sf_glad_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)sf_glad_glBindProgramARB;
    if (sf_glad_glBindTexture == NULL && sf_glad_glBindTextureEXT != NULL) sf_glad_glBindTexture = (PFNGLBINDTEXTUREPROC)sf_glad_glBindTextureEXT;
    if (sf_glad_glBindTextureEXT == NULL && sf_glad_glBindTexture != NULL) sf_glad_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)sf_glad_glBindTexture;
    if (sf_glad_glBindVertexArray == NULL && sf_glad_glBindVertexArrayOES != NULL) sf_glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)sf_glad_glBindVertexArrayOES;
    if (sf_glad_glBindVertexArrayOES == NULL && sf_glad_glBindVertexArray != NULL) sf_glad_glBindVertexArrayOES = (PFNGLBINDVERTEXARRAYOESPROC)sf_glad_glBindVertexArray;
    if (sf_glad_glBlendColor == NULL && sf_glad_glBlendColorEXT != NULL) sf_glad_glBlendColor = (PFNGLBLENDCOLORPROC)sf_glad_glBlendColorEXT;
    if (sf_glad_glBlendColorEXT == NULL && sf_glad_glBlendColor != NULL) sf_glad_glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)sf_glad_glBlendColor;
    if (sf_glad_glBlendEquation == NULL && sf_glad_glBlendEquationEXT != NULL) sf_glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC)sf_glad_glBlendEquationEXT;
    if (sf_glad_glBlendEquationEXT == NULL && sf_glad_glBlendEquation != NULL) sf_glad_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)sf_glad_glBlendEquation;
    if (sf_glad_glBlendEquationi == NULL && sf_glad_glBlendEquationIndexedAMD != NULL) sf_glad_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)sf_glad_glBlendEquationIndexedAMD;
    if (sf_glad_glBlendEquationi == NULL && sf_glad_glBlendEquationiARB != NULL) sf_glad_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)sf_glad_glBlendEquationiARB;
    if (sf_glad_glBlendEquationiARB == NULL && sf_glad_glBlendEquationIndexedAMD != NULL) sf_glad_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)sf_glad_glBlendEquationIndexedAMD;
    if (sf_glad_glBlendEquationiARB == NULL && sf_glad_glBlendEquationi != NULL) sf_glad_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)sf_glad_glBlendEquationi;
    if (sf_glad_glBlendEquationIndexedAMD == NULL && sf_glad_glBlendEquationi != NULL) sf_glad_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC)sf_glad_glBlendEquationi;
    if (sf_glad_glBlendEquationIndexedAMD == NULL && sf_glad_glBlendEquationiARB != NULL) sf_glad_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC)sf_glad_glBlendEquationiARB;
    if (sf_glad_glBlendEquationSeparate == NULL && sf_glad_glBlendEquationSeparateEXT != NULL) sf_glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)sf_glad_glBlendEquationSeparateEXT;
    if (sf_glad_glBlendEquationSeparateEXT == NULL && sf_glad_glBlendEquationSeparate != NULL) sf_glad_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)sf_glad_glBlendEquationSeparate;
    if (sf_glad_glBlendEquationSeparatei == NULL && sf_glad_glBlendEquationSeparateIndexedAMD != NULL) sf_glad_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)sf_glad_glBlendEquationSeparateIndexedAMD;
    if (sf_glad_glBlendEquationSeparatei == NULL && sf_glad_glBlendEquationSeparateiARB != NULL) sf_glad_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)sf_glad_glBlendEquationSeparateiARB;
    if (sf_glad_glBlendEquationSeparateiARB == NULL && sf_glad_glBlendEquationSeparateIndexedAMD != NULL) sf_glad_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)sf_glad_glBlendEquationSeparateIndexedAMD;
    if (sf_glad_glBlendEquationSeparateiARB == NULL && sf_glad_glBlendEquationSeparatei != NULL) sf_glad_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)sf_glad_glBlendEquationSeparatei;
    if (sf_glad_glBlendEquationSeparateIndexedAMD == NULL && sf_glad_glBlendEquationSeparatei != NULL) sf_glad_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)sf_glad_glBlendEquationSeparatei;
    if (sf_glad_glBlendEquationSeparateIndexedAMD == NULL && sf_glad_glBlendEquationSeparateiARB != NULL) sf_glad_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)sf_glad_glBlendEquationSeparateiARB;
    if (sf_glad_glBlendFunci == NULL && sf_glad_glBlendFuncIndexedAMD != NULL) sf_glad_glBlendFunci = (PFNGLBLENDFUNCIPROC)sf_glad_glBlendFuncIndexedAMD;
    if (sf_glad_glBlendFunci == NULL && sf_glad_glBlendFunciARB != NULL) sf_glad_glBlendFunci = (PFNGLBLENDFUNCIPROC)sf_glad_glBlendFunciARB;
    if (sf_glad_glBlendFunciARB == NULL && sf_glad_glBlendFuncIndexedAMD != NULL) sf_glad_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)sf_glad_glBlendFuncIndexedAMD;
    if (sf_glad_glBlendFunciARB == NULL && sf_glad_glBlendFunci != NULL) sf_glad_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)sf_glad_glBlendFunci;
    if (sf_glad_glBlendFuncIndexedAMD == NULL && sf_glad_glBlendFunci != NULL) sf_glad_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC)sf_glad_glBlendFunci;
    if (sf_glad_glBlendFuncIndexedAMD == NULL && sf_glad_glBlendFunciARB != NULL) sf_glad_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC)sf_glad_glBlendFunciARB;
    if (sf_glad_glBlendFuncSeparate == NULL && sf_glad_glBlendFuncSeparateEXT != NULL) sf_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)sf_glad_glBlendFuncSeparateEXT;
    if (sf_glad_glBlendFuncSeparate == NULL && sf_glad_glBlendFuncSeparateINGR != NULL) sf_glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)sf_glad_glBlendFuncSeparateINGR;
    if (sf_glad_glBlendFuncSeparateEXT == NULL && sf_glad_glBlendFuncSeparate != NULL) sf_glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)sf_glad_glBlendFuncSeparate;
    if (sf_glad_glBlendFuncSeparateEXT == NULL && sf_glad_glBlendFuncSeparateINGR != NULL) sf_glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)sf_glad_glBlendFuncSeparateINGR;
    if (sf_glad_glBlendFuncSeparatei == NULL && sf_glad_glBlendFuncSeparateIndexedAMD != NULL) sf_glad_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)sf_glad_glBlendFuncSeparateIndexedAMD;
    if (sf_glad_glBlendFuncSeparatei == NULL && sf_glad_glBlendFuncSeparateiARB != NULL) sf_glad_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)sf_glad_glBlendFuncSeparateiARB;
    if (sf_glad_glBlendFuncSeparateiARB == NULL && sf_glad_glBlendFuncSeparateIndexedAMD != NULL) sf_glad_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)sf_glad_glBlendFuncSeparateIndexedAMD;
    if (sf_glad_glBlendFuncSeparateiARB == NULL && sf_glad_glBlendFuncSeparatei != NULL) sf_glad_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)sf_glad_glBlendFuncSeparatei;
    if (sf_glad_glBlendFuncSeparateIndexedAMD == NULL && sf_glad_glBlendFuncSeparatei != NULL) sf_glad_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)sf_glad_glBlendFuncSeparatei;
    if (sf_glad_glBlendFuncSeparateIndexedAMD == NULL && sf_glad_glBlendFuncSeparateiARB != NULL) sf_glad_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)sf_glad_glBlendFuncSeparateiARB;
    if (sf_glad_glBlendFuncSeparateINGR == NULL && sf_glad_glBlendFuncSeparate != NULL) sf_glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)sf_glad_glBlendFuncSeparate;
    if (sf_glad_glBlendFuncSeparateINGR == NULL && sf_glad_glBlendFuncSeparateEXT != NULL) sf_glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)sf_glad_glBlendFuncSeparateEXT;
    if (sf_glad_glBlitFramebuffer == NULL && sf_glad_glBlitFramebufferEXT != NULL) sf_glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)sf_glad_glBlitFramebufferEXT;
    if (sf_glad_glBlitFramebufferEXT == NULL && sf_glad_glBlitFramebuffer != NULL) sf_glad_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)sf_glad_glBlitFramebuffer;
    if (sf_glad_glBufferData == NULL && sf_glad_glBufferDataARB != NULL) sf_glad_glBufferData = (PFNGLBUFFERDATAPROC)sf_glad_glBufferDataARB;
    if (sf_glad_glBufferDataARB == NULL && sf_glad_glBufferData != NULL) sf_glad_glBufferDataARB = (PFNGLBUFFERDATAARBPROC)sf_glad_glBufferData;
    if (sf_glad_glBufferSubData == NULL && sf_glad_glBufferSubDataARB != NULL) sf_glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC)sf_glad_glBufferSubDataARB;
    if (sf_glad_glBufferSubDataARB == NULL && sf_glad_glBufferSubData != NULL) sf_glad_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)sf_glad_glBufferSubData;
    if (sf_glad_glCheckFramebufferStatus == NULL && sf_glad_glCheckFramebufferStatusEXT != NULL) sf_glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)sf_glad_glCheckFramebufferStatusEXT;
    if (sf_glad_glCheckFramebufferStatusEXT == NULL && sf_glad_glCheckFramebufferStatus != NULL) sf_glad_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)sf_glad_glCheckFramebufferStatus;
    if (sf_glad_glClampColor == NULL && sf_glad_glClampColorARB != NULL) sf_glad_glClampColor = (PFNGLCLAMPCOLORPROC)sf_glad_glClampColorARB;
    if (sf_glad_glClampColorARB == NULL && sf_glad_glClampColor != NULL) sf_glad_glClampColorARB = (PFNGLCLAMPCOLORARBPROC)sf_glad_glClampColor;
    if (sf_glad_glClearDepthf == NULL && sf_glad_glClearDepthfOES != NULL) sf_glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC)sf_glad_glClearDepthfOES;
    if (sf_glad_glClearDepthfOES == NULL && sf_glad_glClearDepthf != NULL) sf_glad_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)sf_glad_glClearDepthf;
    if (sf_glad_glClientActiveTexture == NULL && sf_glad_glClientActiveTextureARB != NULL) sf_glad_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)sf_glad_glClientActiveTextureARB;
    if (sf_glad_glClientActiveTextureARB == NULL && sf_glad_glClientActiveTexture != NULL) sf_glad_glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)sf_glad_glClientActiveTexture;
    if (sf_glad_glClientWaitSync == NULL && sf_glad_glClientWaitSyncAPPLE != NULL) sf_glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)sf_glad_glClientWaitSyncAPPLE;
    if (sf_glad_glClientWaitSyncAPPLE == NULL && sf_glad_glClientWaitSync != NULL) sf_glad_glClientWaitSyncAPPLE = (PFNGLCLIENTWAITSYNCAPPLEPROC)sf_glad_glClientWaitSync;
    if (sf_glad_glColorMaski == NULL && sf_glad_glColorMaskIndexedEXT != NULL) sf_glad_glColorMaski = (PFNGLCOLORMASKIPROC)sf_glad_glColorMaskIndexedEXT;
    if (sf_glad_glColorMaskIndexedEXT == NULL && sf_glad_glColorMaski != NULL) sf_glad_glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)sf_glad_glColorMaski;
    if (sf_glad_glColorSubTable == NULL && sf_glad_glColorSubTableEXT != NULL) sf_glad_glColorSubTable = (PFNGLCOLORSUBTABLEPROC)sf_glad_glColorSubTableEXT;
    if (sf_glad_glColorSubTableEXT == NULL && sf_glad_glColorSubTable != NULL) sf_glad_glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC)sf_glad_glColorSubTable;
    if (sf_glad_glColorTable == NULL && sf_glad_glColorTableEXT != NULL) sf_glad_glColorTable = (PFNGLCOLORTABLEPROC)sf_glad_glColorTableEXT;
    if (sf_glad_glColorTable == NULL && sf_glad_glColorTableSGI != NULL) sf_glad_glColorTable = (PFNGLCOLORTABLEPROC)sf_glad_glColorTableSGI;
    if (sf_glad_glColorTableEXT == NULL && sf_glad_glColorTable != NULL) sf_glad_glColorTableEXT = (PFNGLCOLORTABLEEXTPROC)sf_glad_glColorTable;
    if (sf_glad_glColorTableEXT == NULL && sf_glad_glColorTableSGI != NULL) sf_glad_glColorTableEXT = (PFNGLCOLORTABLEEXTPROC)sf_glad_glColorTableSGI;
    if (sf_glad_glColorTableParameterfv == NULL && sf_glad_glColorTableParameterfvSGI != NULL) sf_glad_glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)sf_glad_glColorTableParameterfvSGI;
    if (sf_glad_glColorTableParameterfvSGI == NULL && sf_glad_glColorTableParameterfv != NULL) sf_glad_glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)sf_glad_glColorTableParameterfv;
    if (sf_glad_glColorTableParameteriv == NULL && sf_glad_glColorTableParameterivSGI != NULL) sf_glad_glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)sf_glad_glColorTableParameterivSGI;
    if (sf_glad_glColorTableParameterivSGI == NULL && sf_glad_glColorTableParameteriv != NULL) sf_glad_glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)sf_glad_glColorTableParameteriv;
    if (sf_glad_glColorTableSGI == NULL && sf_glad_glColorTable != NULL) sf_glad_glColorTableSGI = (PFNGLCOLORTABLESGIPROC)sf_glad_glColorTable;
    if (sf_glad_glColorTableSGI == NULL && sf_glad_glColorTableEXT != NULL) sf_glad_glColorTableSGI = (PFNGLCOLORTABLESGIPROC)sf_glad_glColorTableEXT;
    if (sf_glad_glCompileShader == NULL && sf_glad_glCompileShaderARB != NULL) sf_glad_glCompileShader = (PFNGLCOMPILESHADERPROC)sf_glad_glCompileShaderARB;
    if (sf_glad_glCompileShaderARB == NULL && sf_glad_glCompileShader != NULL) sf_glad_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)sf_glad_glCompileShader;
    if (sf_glad_glCompressedTexImage1D == NULL && sf_glad_glCompressedTexImage1DARB != NULL) sf_glad_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)sf_glad_glCompressedTexImage1DARB;
    if (sf_glad_glCompressedTexImage1DARB == NULL && sf_glad_glCompressedTexImage1D != NULL) sf_glad_glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)sf_glad_glCompressedTexImage1D;
    if (sf_glad_glCompressedTexImage2D == NULL && sf_glad_glCompressedTexImage2DARB != NULL) sf_glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)sf_glad_glCompressedTexImage2DARB;
    if (sf_glad_glCompressedTexImage2DARB == NULL && sf_glad_glCompressedTexImage2D != NULL) sf_glad_glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)sf_glad_glCompressedTexImage2D;
    if (sf_glad_glCompressedTexImage3D == NULL && sf_glad_glCompressedTexImage3DARB != NULL) sf_glad_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)sf_glad_glCompressedTexImage3DARB;
    if (sf_glad_glCompressedTexImage3DARB == NULL && sf_glad_glCompressedTexImage3D != NULL) sf_glad_glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)sf_glad_glCompressedTexImage3D;
    if (sf_glad_glCompressedTexSubImage1D == NULL && sf_glad_glCompressedTexSubImage1DARB != NULL) sf_glad_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)sf_glad_glCompressedTexSubImage1DARB;
    if (sf_glad_glCompressedTexSubImage1DARB == NULL && sf_glad_glCompressedTexSubImage1D != NULL) sf_glad_glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)sf_glad_glCompressedTexSubImage1D;
    if (sf_glad_glCompressedTexSubImage2D == NULL && sf_glad_glCompressedTexSubImage2DARB != NULL) sf_glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)sf_glad_glCompressedTexSubImage2DARB;
    if (sf_glad_glCompressedTexSubImage2DARB == NULL && sf_glad_glCompressedTexSubImage2D != NULL) sf_glad_glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)sf_glad_glCompressedTexSubImage2D;
    if (sf_glad_glCompressedTexSubImage3D == NULL && sf_glad_glCompressedTexSubImage3DARB != NULL) sf_glad_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)sf_glad_glCompressedTexSubImage3DARB;
    if (sf_glad_glCompressedTexSubImage3DARB == NULL && sf_glad_glCompressedTexSubImage3D != NULL) sf_glad_glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)sf_glad_glCompressedTexSubImage3D;
    if (sf_glad_glConvolutionFilter1D == NULL && sf_glad_glConvolutionFilter1DEXT != NULL) sf_glad_glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)sf_glad_glConvolutionFilter1DEXT;
    if (sf_glad_glConvolutionFilter1DEXT == NULL && sf_glad_glConvolutionFilter1D != NULL) sf_glad_glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC)sf_glad_glConvolutionFilter1D;
    if (sf_glad_glConvolutionFilter2D == NULL && sf_glad_glConvolutionFilter2DEXT != NULL) sf_glad_glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)sf_glad_glConvolutionFilter2DEXT;
    if (sf_glad_glConvolutionFilter2DEXT == NULL && sf_glad_glConvolutionFilter2D != NULL) sf_glad_glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC)sf_glad_glConvolutionFilter2D;
    if (sf_glad_glConvolutionParameterf == NULL && sf_glad_glConvolutionParameterfEXT != NULL) sf_glad_glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)sf_glad_glConvolutionParameterfEXT;
    if (sf_glad_glConvolutionParameterfEXT == NULL && sf_glad_glConvolutionParameterf != NULL) sf_glad_glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)sf_glad_glConvolutionParameterf;
    if (sf_glad_glConvolutionParameterfv == NULL && sf_glad_glConvolutionParameterfvEXT != NULL) sf_glad_glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)sf_glad_glConvolutionParameterfvEXT;
    if (sf_glad_glConvolutionParameterfvEXT == NULL && sf_glad_glConvolutionParameterfv != NULL) sf_glad_glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)sf_glad_glConvolutionParameterfv;
    if (sf_glad_glConvolutionParameteri == NULL && sf_glad_glConvolutionParameteriEXT != NULL) sf_glad_glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)sf_glad_glConvolutionParameteriEXT;
    if (sf_glad_glConvolutionParameteriEXT == NULL && sf_glad_glConvolutionParameteri != NULL) sf_glad_glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)sf_glad_glConvolutionParameteri;
    if (sf_glad_glConvolutionParameteriv == NULL && sf_glad_glConvolutionParameterivEXT != NULL) sf_glad_glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)sf_glad_glConvolutionParameterivEXT;
    if (sf_glad_glConvolutionParameterivEXT == NULL && sf_glad_glConvolutionParameteriv != NULL) sf_glad_glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)sf_glad_glConvolutionParameteriv;
    if (sf_glad_glCopyColorSubTable == NULL && sf_glad_glCopyColorSubTableEXT != NULL) sf_glad_glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)sf_glad_glCopyColorSubTableEXT;
    if (sf_glad_glCopyColorSubTableEXT == NULL && sf_glad_glCopyColorSubTable != NULL) sf_glad_glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC)sf_glad_glCopyColorSubTable;
    if (sf_glad_glCopyColorTable == NULL && sf_glad_glCopyColorTableSGI != NULL) sf_glad_glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)sf_glad_glCopyColorTableSGI;
    if (sf_glad_glCopyColorTableSGI == NULL && sf_glad_glCopyColorTable != NULL) sf_glad_glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC)sf_glad_glCopyColorTable;
    if (sf_glad_glCopyConvolutionFilter1D == NULL && sf_glad_glCopyConvolutionFilter1DEXT != NULL) sf_glad_glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)sf_glad_glCopyConvolutionFilter1DEXT;
    if (sf_glad_glCopyConvolutionFilter1DEXT == NULL && sf_glad_glCopyConvolutionFilter1D != NULL) sf_glad_glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)sf_glad_glCopyConvolutionFilter1D;
    if (sf_glad_glCopyConvolutionFilter2D == NULL && sf_glad_glCopyConvolutionFilter2DEXT != NULL) sf_glad_glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)sf_glad_glCopyConvolutionFilter2DEXT;
    if (sf_glad_glCopyConvolutionFilter2DEXT == NULL && sf_glad_glCopyConvolutionFilter2D != NULL) sf_glad_glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)sf_glad_glCopyConvolutionFilter2D;
    if (sf_glad_glCopyTexImage1D == NULL && sf_glad_glCopyTexImage1DEXT != NULL) sf_glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)sf_glad_glCopyTexImage1DEXT;
    if (sf_glad_glCopyTexImage1DEXT == NULL && sf_glad_glCopyTexImage1D != NULL) sf_glad_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)sf_glad_glCopyTexImage1D;
    if (sf_glad_glCopyTexImage2D == NULL && sf_glad_glCopyTexImage2DEXT != NULL) sf_glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)sf_glad_glCopyTexImage2DEXT;
    if (sf_glad_glCopyTexImage2DEXT == NULL && sf_glad_glCopyTexImage2D != NULL) sf_glad_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)sf_glad_glCopyTexImage2D;
    if (sf_glad_glCopyTexSubImage1D == NULL && sf_glad_glCopyTexSubImage1DEXT != NULL) sf_glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)sf_glad_glCopyTexSubImage1DEXT;
    if (sf_glad_glCopyTexSubImage1DEXT == NULL && sf_glad_glCopyTexSubImage1D != NULL) sf_glad_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)sf_glad_glCopyTexSubImage1D;
    if (sf_glad_glCopyTexSubImage2D == NULL && sf_glad_glCopyTexSubImage2DEXT != NULL) sf_glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)sf_glad_glCopyTexSubImage2DEXT;
    if (sf_glad_glCopyTexSubImage2DEXT == NULL && sf_glad_glCopyTexSubImage2D != NULL) sf_glad_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)sf_glad_glCopyTexSubImage2D;
    if (sf_glad_glCopyTexSubImage3D == NULL && sf_glad_glCopyTexSubImage3DEXT != NULL) sf_glad_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)sf_glad_glCopyTexSubImage3DEXT;
    if (sf_glad_glCopyTexSubImage3DEXT == NULL && sf_glad_glCopyTexSubImage3D != NULL) sf_glad_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)sf_glad_glCopyTexSubImage3D;
    if (sf_glad_glCreateProgram == NULL && sf_glad_glCreateProgramObjectARB != NULL) sf_glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC)sf_glad_glCreateProgramObjectARB;
    if (sf_glad_glCreateProgramObjectARB == NULL && sf_glad_glCreateProgram != NULL) sf_glad_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)sf_glad_glCreateProgram;
    if (sf_glad_glCreateShader == NULL && sf_glad_glCreateShaderObjectARB != NULL) sf_glad_glCreateShader = (PFNGLCREATESHADERPROC)sf_glad_glCreateShaderObjectARB;
    if (sf_glad_glCreateShaderObjectARB == NULL && sf_glad_glCreateShader != NULL) sf_glad_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)sf_glad_glCreateShader;
    if (sf_glad_glDebugMessageCallback == NULL && sf_glad_glDebugMessageCallbackARB != NULL) sf_glad_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)sf_glad_glDebugMessageCallbackARB;
    if (sf_glad_glDebugMessageCallbackARB == NULL && sf_glad_glDebugMessageCallback != NULL) sf_glad_glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC)sf_glad_glDebugMessageCallback;
    if (sf_glad_glDebugMessageControl == NULL && sf_glad_glDebugMessageControlARB != NULL) sf_glad_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)sf_glad_glDebugMessageControlARB;
    if (sf_glad_glDebugMessageControlARB == NULL && sf_glad_glDebugMessageControl != NULL) sf_glad_glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC)sf_glad_glDebugMessageControl;
    if (sf_glad_glDebugMessageInsert == NULL && sf_glad_glDebugMessageInsertARB != NULL) sf_glad_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)sf_glad_glDebugMessageInsertARB;
    if (sf_glad_glDebugMessageInsertARB == NULL && sf_glad_glDebugMessageInsert != NULL) sf_glad_glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC)sf_glad_glDebugMessageInsert;
    if (sf_glad_glDeleteBuffers == NULL && sf_glad_glDeleteBuffersARB != NULL) sf_glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)sf_glad_glDeleteBuffersARB;
    if (sf_glad_glDeleteBuffersARB == NULL && sf_glad_glDeleteBuffers != NULL) sf_glad_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)sf_glad_glDeleteBuffers;
    if (sf_glad_glDeleteFramebuffers == NULL && sf_glad_glDeleteFramebuffersEXT != NULL) sf_glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)sf_glad_glDeleteFramebuffersEXT;
    if (sf_glad_glDeleteFramebuffersEXT == NULL && sf_glad_glDeleteFramebuffers != NULL) sf_glad_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)sf_glad_glDeleteFramebuffers;
    if (sf_glad_glDeleteProgramsARB == NULL && sf_glad_glDeleteProgramsNV != NULL) sf_glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)sf_glad_glDeleteProgramsNV;
    if (sf_glad_glDeleteProgramsNV == NULL && sf_glad_glDeleteProgramsARB != NULL) sf_glad_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)sf_glad_glDeleteProgramsARB;
    if (sf_glad_glDeleteQueries == NULL && sf_glad_glDeleteQueriesARB != NULL) sf_glad_glDeleteQueries = (PFNGLDELETEQUERIESPROC)sf_glad_glDeleteQueriesARB;
    if (sf_glad_glDeleteQueriesARB == NULL && sf_glad_glDeleteQueries != NULL) sf_glad_glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)sf_glad_glDeleteQueries;
    if (sf_glad_glDeleteRenderbuffers == NULL && sf_glad_glDeleteRenderbuffersEXT != NULL) sf_glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)sf_glad_glDeleteRenderbuffersEXT;
    if (sf_glad_glDeleteRenderbuffersEXT == NULL && sf_glad_glDeleteRenderbuffers != NULL) sf_glad_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)sf_glad_glDeleteRenderbuffers;
    if (sf_glad_glDeleteSync == NULL && sf_glad_glDeleteSyncAPPLE != NULL) sf_glad_glDeleteSync = (PFNGLDELETESYNCPROC)sf_glad_glDeleteSyncAPPLE;
    if (sf_glad_glDeleteSyncAPPLE == NULL && sf_glad_glDeleteSync != NULL) sf_glad_glDeleteSyncAPPLE = (PFNGLDELETESYNCAPPLEPROC)sf_glad_glDeleteSync;
    if (sf_glad_glDeleteTransformFeedbacks == NULL && sf_glad_glDeleteTransformFeedbacksNV != NULL) sf_glad_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)sf_glad_glDeleteTransformFeedbacksNV;
    if (sf_glad_glDeleteTransformFeedbacksNV == NULL && sf_glad_glDeleteTransformFeedbacks != NULL) sf_glad_glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC)sf_glad_glDeleteTransformFeedbacks;
    if (sf_glad_glDeleteVertexArrays == NULL && sf_glad_glDeleteVertexArraysAPPLE != NULL) sf_glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)sf_glad_glDeleteVertexArraysAPPLE;
    if (sf_glad_glDeleteVertexArrays == NULL && sf_glad_glDeleteVertexArraysOES != NULL) sf_glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)sf_glad_glDeleteVertexArraysOES;
    if (sf_glad_glDeleteVertexArraysAPPLE == NULL && sf_glad_glDeleteVertexArrays != NULL) sf_glad_glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)sf_glad_glDeleteVertexArrays;
    if (sf_glad_glDeleteVertexArraysAPPLE == NULL && sf_glad_glDeleteVertexArraysOES != NULL) sf_glad_glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)sf_glad_glDeleteVertexArraysOES;
    if (sf_glad_glDeleteVertexArraysOES == NULL && sf_glad_glDeleteVertexArrays != NULL) sf_glad_glDeleteVertexArraysOES = (PFNGLDELETEVERTEXARRAYSOESPROC)sf_glad_glDeleteVertexArrays;
    if (sf_glad_glDeleteVertexArraysOES == NULL && sf_glad_glDeleteVertexArraysAPPLE != NULL) sf_glad_glDeleteVertexArraysOES = (PFNGLDELETEVERTEXARRAYSOESPROC)sf_glad_glDeleteVertexArraysAPPLE;
    if (sf_glad_glDepthRangef == NULL && sf_glad_glDepthRangefOES != NULL) sf_glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC)sf_glad_glDepthRangefOES;
    if (sf_glad_glDepthRangefOES == NULL && sf_glad_glDepthRangef != NULL) sf_glad_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)sf_glad_glDepthRangef;
    if (sf_glad_glDetachObjectARB == NULL && sf_glad_glDetachShader != NULL) sf_glad_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)sf_glad_glDetachShader;
    if (sf_glad_glDetachShader == NULL && sf_glad_glDetachObjectARB != NULL) sf_glad_glDetachShader = (PFNGLDETACHSHADERPROC)sf_glad_glDetachObjectARB;
    if (sf_glad_glDisablei == NULL && sf_glad_glDisableIndexedEXT != NULL) sf_glad_glDisablei = (PFNGLDISABLEIPROC)sf_glad_glDisableIndexedEXT;
    if (sf_glad_glDisableIndexedEXT == NULL && sf_glad_glDisablei != NULL) sf_glad_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)sf_glad_glDisablei;
    if (sf_glad_glDisableVertexAttribArray == NULL && sf_glad_glDisableVertexAttribArrayARB != NULL) sf_glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)sf_glad_glDisableVertexAttribArrayARB;
    if (sf_glad_glDisableVertexAttribArrayARB == NULL && sf_glad_glDisableVertexAttribArray != NULL) sf_glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)sf_glad_glDisableVertexAttribArray;
    if (sf_glad_glDrawArrays == NULL && sf_glad_glDrawArraysEXT != NULL) sf_glad_glDrawArrays = (PFNGLDRAWARRAYSPROC)sf_glad_glDrawArraysEXT;
    if (sf_glad_glDrawArraysEXT == NULL && sf_glad_glDrawArrays != NULL) sf_glad_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)sf_glad_glDrawArrays;
    if (sf_glad_glDrawArraysInstanced == NULL && sf_glad_glDrawArraysInstancedARB != NULL) sf_glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)sf_glad_glDrawArraysInstancedARB;
    if (sf_glad_glDrawArraysInstanced == NULL && sf_glad_glDrawArraysInstancedEXT != NULL) sf_glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)sf_glad_glDrawArraysInstancedEXT;
    if (sf_glad_glDrawArraysInstancedARB == NULL && sf_glad_glDrawArraysInstanced != NULL) sf_glad_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)sf_glad_glDrawArraysInstanced;
    if (sf_glad_glDrawArraysInstancedARB == NULL && sf_glad_glDrawArraysInstancedEXT != NULL) sf_glad_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)sf_glad_glDrawArraysInstancedEXT;
    if (sf_glad_glDrawArraysInstancedEXT == NULL && sf_glad_glDrawArraysInstanced != NULL) sf_glad_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)sf_glad_glDrawArraysInstanced;
    if (sf_glad_glDrawArraysInstancedEXT == NULL && sf_glad_glDrawArraysInstancedARB != NULL) sf_glad_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)sf_glad_glDrawArraysInstancedARB;
    if (sf_glad_glDrawBuffers == NULL && sf_glad_glDrawBuffersARB != NULL) sf_glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC)sf_glad_glDrawBuffersARB;
    if (sf_glad_glDrawBuffers == NULL && sf_glad_glDrawBuffersATI != NULL) sf_glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC)sf_glad_glDrawBuffersATI;
    if (sf_glad_glDrawBuffersARB == NULL && sf_glad_glDrawBuffers != NULL) sf_glad_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)sf_glad_glDrawBuffers;
    if (sf_glad_glDrawBuffersARB == NULL && sf_glad_glDrawBuffersATI != NULL) sf_glad_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)sf_glad_glDrawBuffersATI;
    if (sf_glad_glDrawBuffersATI == NULL && sf_glad_glDrawBuffers != NULL) sf_glad_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)sf_glad_glDrawBuffers;
    if (sf_glad_glDrawBuffersATI == NULL && sf_glad_glDrawBuffersARB != NULL) sf_glad_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)sf_glad_glDrawBuffersARB;
    if (sf_glad_glDrawElementsInstanced == NULL && sf_glad_glDrawElementsInstancedARB != NULL) sf_glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)sf_glad_glDrawElementsInstancedARB;
    if (sf_glad_glDrawElementsInstanced == NULL && sf_glad_glDrawElementsInstancedEXT != NULL) sf_glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)sf_glad_glDrawElementsInstancedEXT;
    if (sf_glad_glDrawElementsInstancedARB == NULL && sf_glad_glDrawElementsInstanced != NULL) sf_glad_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)sf_glad_glDrawElementsInstanced;
    if (sf_glad_glDrawElementsInstancedARB == NULL && sf_glad_glDrawElementsInstancedEXT != NULL) sf_glad_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)sf_glad_glDrawElementsInstancedEXT;
    if (sf_glad_glDrawElementsInstancedEXT == NULL && sf_glad_glDrawElementsInstanced != NULL) sf_glad_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)sf_glad_glDrawElementsInstanced;
    if (sf_glad_glDrawElementsInstancedEXT == NULL && sf_glad_glDrawElementsInstancedARB != NULL) sf_glad_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)sf_glad_glDrawElementsInstancedARB;
    if (sf_glad_glDrawRangeElements == NULL && sf_glad_glDrawRangeElementsEXT != NULL) sf_glad_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)sf_glad_glDrawRangeElementsEXT;
    if (sf_glad_glDrawRangeElementsEXT == NULL && sf_glad_glDrawRangeElements != NULL) sf_glad_glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)sf_glad_glDrawRangeElements;
    if (sf_glad_glDrawTransformFeedback == NULL && sf_glad_glDrawTransformFeedbackNV != NULL) sf_glad_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)sf_glad_glDrawTransformFeedbackNV;
    if (sf_glad_glDrawTransformFeedbackNV == NULL && sf_glad_glDrawTransformFeedback != NULL) sf_glad_glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC)sf_glad_glDrawTransformFeedback;
    if (sf_glad_glEnablei == NULL && sf_glad_glEnableIndexedEXT != NULL) sf_glad_glEnablei = (PFNGLENABLEIPROC)sf_glad_glEnableIndexedEXT;
    if (sf_glad_glEnableIndexedEXT == NULL && sf_glad_glEnablei != NULL) sf_glad_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)sf_glad_glEnablei;
    if (sf_glad_glEnableVertexAttribArray == NULL && sf_glad_glEnableVertexAttribArrayARB != NULL) sf_glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)sf_glad_glEnableVertexAttribArrayARB;
    if (sf_glad_glEnableVertexAttribArrayARB == NULL && sf_glad_glEnableVertexAttribArray != NULL) sf_glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)sf_glad_glEnableVertexAttribArray;
    if (sf_glad_glEndConditionalRender == NULL && sf_glad_glEndConditionalRenderNV != NULL) sf_glad_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)sf_glad_glEndConditionalRenderNV;
    if (sf_glad_glEndConditionalRender == NULL && sf_glad_glEndConditionalRenderNVX != NULL) sf_glad_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)sf_glad_glEndConditionalRenderNVX;
    if (sf_glad_glEndConditionalRenderNV == NULL && sf_glad_glEndConditionalRender != NULL) sf_glad_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)sf_glad_glEndConditionalRender;
    if (sf_glad_glEndConditionalRenderNV == NULL && sf_glad_glEndConditionalRenderNVX != NULL) sf_glad_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)sf_glad_glEndConditionalRenderNVX;
    if (sf_glad_glEndConditionalRenderNVX == NULL && sf_glad_glEndConditionalRender != NULL) sf_glad_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)sf_glad_glEndConditionalRender;
    if (sf_glad_glEndConditionalRenderNVX == NULL && sf_glad_glEndConditionalRenderNV != NULL) sf_glad_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)sf_glad_glEndConditionalRenderNV;
    if (sf_glad_glEndQuery == NULL && sf_glad_glEndQueryARB != NULL) sf_glad_glEndQuery = (PFNGLENDQUERYPROC)sf_glad_glEndQueryARB;
    if (sf_glad_glEndQueryARB == NULL && sf_glad_glEndQuery != NULL) sf_glad_glEndQueryARB = (PFNGLENDQUERYARBPROC)sf_glad_glEndQuery;
    if (sf_glad_glEndTransformFeedback == NULL && sf_glad_glEndTransformFeedbackEXT != NULL) sf_glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)sf_glad_glEndTransformFeedbackEXT;
    if (sf_glad_glEndTransformFeedback == NULL && sf_glad_glEndTransformFeedbackNV != NULL) sf_glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)sf_glad_glEndTransformFeedbackNV;
    if (sf_glad_glEndTransformFeedbackEXT == NULL && sf_glad_glEndTransformFeedback != NULL) sf_glad_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)sf_glad_glEndTransformFeedback;
    if (sf_glad_glEndTransformFeedbackEXT == NULL && sf_glad_glEndTransformFeedbackNV != NULL) sf_glad_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)sf_glad_glEndTransformFeedbackNV;
    if (sf_glad_glEndTransformFeedbackNV == NULL && sf_glad_glEndTransformFeedback != NULL) sf_glad_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)sf_glad_glEndTransformFeedback;
    if (sf_glad_glEndTransformFeedbackNV == NULL && sf_glad_glEndTransformFeedbackEXT != NULL) sf_glad_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)sf_glad_glEndTransformFeedbackEXT;
    if (sf_glad_glFenceSync == NULL && sf_glad_glFenceSyncAPPLE != NULL) sf_glad_glFenceSync = (PFNGLFENCESYNCPROC)sf_glad_glFenceSyncAPPLE;
    if (sf_glad_glFenceSyncAPPLE == NULL && sf_glad_glFenceSync != NULL) sf_glad_glFenceSyncAPPLE = (PFNGLFENCESYNCAPPLEPROC)sf_glad_glFenceSync;
    if (sf_glad_glFlushMappedBufferRange == NULL && sf_glad_glFlushMappedBufferRangeAPPLE != NULL) sf_glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)sf_glad_glFlushMappedBufferRangeAPPLE;
    if (sf_glad_glFlushMappedBufferRange == NULL && sf_glad_glFlushMappedBufferRangeEXT != NULL) sf_glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)sf_glad_glFlushMappedBufferRangeEXT;
    if (sf_glad_glFlushMappedBufferRangeAPPLE == NULL && sf_glad_glFlushMappedBufferRange != NULL) sf_glad_glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)sf_glad_glFlushMappedBufferRange;
    if (sf_glad_glFlushMappedBufferRangeAPPLE == NULL && sf_glad_glFlushMappedBufferRangeEXT != NULL) sf_glad_glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)sf_glad_glFlushMappedBufferRangeEXT;
    if (sf_glad_glFlushMappedBufferRangeEXT == NULL && sf_glad_glFlushMappedBufferRange != NULL) sf_glad_glFlushMappedBufferRangeEXT = (PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC)sf_glad_glFlushMappedBufferRange;
    if (sf_glad_glFlushMappedBufferRangeEXT == NULL && sf_glad_glFlushMappedBufferRangeAPPLE != NULL) sf_glad_glFlushMappedBufferRangeEXT = (PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC)sf_glad_glFlushMappedBufferRangeAPPLE;
    if (sf_glad_glFogCoordd == NULL && sf_glad_glFogCoorddEXT != NULL) sf_glad_glFogCoordd = (PFNGLFOGCOORDDPROC)sf_glad_glFogCoorddEXT;
    if (sf_glad_glFogCoorddEXT == NULL && sf_glad_glFogCoordd != NULL) sf_glad_glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)sf_glad_glFogCoordd;
    if (sf_glad_glFogCoorddv == NULL && sf_glad_glFogCoorddvEXT != NULL) sf_glad_glFogCoorddv = (PFNGLFOGCOORDDVPROC)sf_glad_glFogCoorddvEXT;
    if (sf_glad_glFogCoorddvEXT == NULL && sf_glad_glFogCoorddv != NULL) sf_glad_glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)sf_glad_glFogCoorddv;
    if (sf_glad_glFogCoordf == NULL && sf_glad_glFogCoordfEXT != NULL) sf_glad_glFogCoordf = (PFNGLFOGCOORDFPROC)sf_glad_glFogCoordfEXT;
    if (sf_glad_glFogCoordfEXT == NULL && sf_glad_glFogCoordf != NULL) sf_glad_glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)sf_glad_glFogCoordf;
    if (sf_glad_glFogCoordfv == NULL && sf_glad_glFogCoordfvEXT != NULL) sf_glad_glFogCoordfv = (PFNGLFOGCOORDFVPROC)sf_glad_glFogCoordfvEXT;
    if (sf_glad_glFogCoordfvEXT == NULL && sf_glad_glFogCoordfv != NULL) sf_glad_glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)sf_glad_glFogCoordfv;
    if (sf_glad_glFogCoordPointer == NULL && sf_glad_glFogCoordPointerEXT != NULL) sf_glad_glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)sf_glad_glFogCoordPointerEXT;
    if (sf_glad_glFogCoordPointerEXT == NULL && sf_glad_glFogCoordPointer != NULL) sf_glad_glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)sf_glad_glFogCoordPointer;
    if (sf_glad_glFramebufferRenderbuffer == NULL && sf_glad_glFramebufferRenderbufferEXT != NULL) sf_glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)sf_glad_glFramebufferRenderbufferEXT;
    if (sf_glad_glFramebufferRenderbufferEXT == NULL && sf_glad_glFramebufferRenderbuffer != NULL) sf_glad_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)sf_glad_glFramebufferRenderbuffer;
    if (sf_glad_glFramebufferTexture == NULL && sf_glad_glFramebufferTextureARB != NULL) sf_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)sf_glad_glFramebufferTextureARB;
    if (sf_glad_glFramebufferTexture == NULL && sf_glad_glFramebufferTextureEXT != NULL) sf_glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)sf_glad_glFramebufferTextureEXT;
    if (sf_glad_glFramebufferTexture1D == NULL && sf_glad_glFramebufferTexture1DEXT != NULL) sf_glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)sf_glad_glFramebufferTexture1DEXT;
    if (sf_glad_glFramebufferTexture1DEXT == NULL && sf_glad_glFramebufferTexture1D != NULL) sf_glad_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)sf_glad_glFramebufferTexture1D;
    if (sf_glad_glFramebufferTexture2D == NULL && sf_glad_glFramebufferTexture2DEXT != NULL) sf_glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)sf_glad_glFramebufferTexture2DEXT;
    if (sf_glad_glFramebufferTexture2DEXT == NULL && sf_glad_glFramebufferTexture2D != NULL) sf_glad_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)sf_glad_glFramebufferTexture2D;
    if (sf_glad_glFramebufferTexture3D == NULL && sf_glad_glFramebufferTexture3DEXT != NULL) sf_glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)sf_glad_glFramebufferTexture3DEXT;
    if (sf_glad_glFramebufferTexture3DEXT == NULL && sf_glad_glFramebufferTexture3D != NULL) sf_glad_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)sf_glad_glFramebufferTexture3D;
    if (sf_glad_glFramebufferTextureARB == NULL && sf_glad_glFramebufferTexture != NULL) sf_glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)sf_glad_glFramebufferTexture;
    if (sf_glad_glFramebufferTextureARB == NULL && sf_glad_glFramebufferTextureEXT != NULL) sf_glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)sf_glad_glFramebufferTextureEXT;
    if (sf_glad_glFramebufferTextureEXT == NULL && sf_glad_glFramebufferTexture != NULL) sf_glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)sf_glad_glFramebufferTexture;
    if (sf_glad_glFramebufferTextureEXT == NULL && sf_glad_glFramebufferTextureARB != NULL) sf_glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)sf_glad_glFramebufferTextureARB;
    if (sf_glad_glFramebufferTextureFaceARB == NULL && sf_glad_glFramebufferTextureFaceEXT != NULL) sf_glad_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)sf_glad_glFramebufferTextureFaceEXT;
    if (sf_glad_glFramebufferTextureFaceEXT == NULL && sf_glad_glFramebufferTextureFaceARB != NULL) sf_glad_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)sf_glad_glFramebufferTextureFaceARB;
    if (sf_glad_glFramebufferTextureLayer == NULL && sf_glad_glFramebufferTextureLayerARB != NULL) sf_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)sf_glad_glFramebufferTextureLayerARB;
    if (sf_glad_glFramebufferTextureLayer == NULL && sf_glad_glFramebufferTextureLayerEXT != NULL) sf_glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)sf_glad_glFramebufferTextureLayerEXT;
    if (sf_glad_glFramebufferTextureLayerARB == NULL && sf_glad_glFramebufferTextureLayer != NULL) sf_glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)sf_glad_glFramebufferTextureLayer;
    if (sf_glad_glFramebufferTextureLayerARB == NULL && sf_glad_glFramebufferTextureLayerEXT != NULL) sf_glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)sf_glad_glFramebufferTextureLayerEXT;
    if (sf_glad_glFramebufferTextureLayerEXT == NULL && sf_glad_glFramebufferTextureLayer != NULL) sf_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)sf_glad_glFramebufferTextureLayer;
    if (sf_glad_glFramebufferTextureLayerEXT == NULL && sf_glad_glFramebufferTextureLayerARB != NULL) sf_glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)sf_glad_glFramebufferTextureLayerARB;
    if (sf_glad_glGenBuffers == NULL && sf_glad_glGenBuffersARB != NULL) sf_glad_glGenBuffers = (PFNGLGENBUFFERSPROC)sf_glad_glGenBuffersARB;
    if (sf_glad_glGenBuffersARB == NULL && sf_glad_glGenBuffers != NULL) sf_glad_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)sf_glad_glGenBuffers;
    if (sf_glad_glGenerateMipmap == NULL && sf_glad_glGenerateMipmapEXT != NULL) sf_glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)sf_glad_glGenerateMipmapEXT;
    if (sf_glad_glGenerateMipmapEXT == NULL && sf_glad_glGenerateMipmap != NULL) sf_glad_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)sf_glad_glGenerateMipmap;
    if (sf_glad_glGenFramebuffers == NULL && sf_glad_glGenFramebuffersEXT != NULL) sf_glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)sf_glad_glGenFramebuffersEXT;
    if (sf_glad_glGenFramebuffersEXT == NULL && sf_glad_glGenFramebuffers != NULL) sf_glad_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)sf_glad_glGenFramebuffers;
    if (sf_glad_glGenProgramsARB == NULL && sf_glad_glGenProgramsNV != NULL) sf_glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)sf_glad_glGenProgramsNV;
    if (sf_glad_glGenProgramsNV == NULL && sf_glad_glGenProgramsARB != NULL) sf_glad_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)sf_glad_glGenProgramsARB;
    if (sf_glad_glGenQueries == NULL && sf_glad_glGenQueriesARB != NULL) sf_glad_glGenQueries = (PFNGLGENQUERIESPROC)sf_glad_glGenQueriesARB;
    if (sf_glad_glGenQueriesARB == NULL && sf_glad_glGenQueries != NULL) sf_glad_glGenQueriesARB = (PFNGLGENQUERIESARBPROC)sf_glad_glGenQueries;
    if (sf_glad_glGenRenderbuffers == NULL && sf_glad_glGenRenderbuffersEXT != NULL) sf_glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)sf_glad_glGenRenderbuffersEXT;
    if (sf_glad_glGenRenderbuffersEXT == NULL && sf_glad_glGenRenderbuffers != NULL) sf_glad_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)sf_glad_glGenRenderbuffers;
    if (sf_glad_glGenTransformFeedbacks == NULL && sf_glad_glGenTransformFeedbacksNV != NULL) sf_glad_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)sf_glad_glGenTransformFeedbacksNV;
    if (sf_glad_glGenTransformFeedbacksNV == NULL && sf_glad_glGenTransformFeedbacks != NULL) sf_glad_glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC)sf_glad_glGenTransformFeedbacks;
    if (sf_glad_glGenVertexArrays == NULL && sf_glad_glGenVertexArraysAPPLE != NULL) sf_glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)sf_glad_glGenVertexArraysAPPLE;
    if (sf_glad_glGenVertexArrays == NULL && sf_glad_glGenVertexArraysOES != NULL) sf_glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)sf_glad_glGenVertexArraysOES;
    if (sf_glad_glGenVertexArraysAPPLE == NULL && sf_glad_glGenVertexArrays != NULL) sf_glad_glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)sf_glad_glGenVertexArrays;
    if (sf_glad_glGenVertexArraysAPPLE == NULL && sf_glad_glGenVertexArraysOES != NULL) sf_glad_glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)sf_glad_glGenVertexArraysOES;
    if (sf_glad_glGenVertexArraysOES == NULL && sf_glad_glGenVertexArrays != NULL) sf_glad_glGenVertexArraysOES = (PFNGLGENVERTEXARRAYSOESPROC)sf_glad_glGenVertexArrays;
    if (sf_glad_glGenVertexArraysOES == NULL && sf_glad_glGenVertexArraysAPPLE != NULL) sf_glad_glGenVertexArraysOES = (PFNGLGENVERTEXARRAYSOESPROC)sf_glad_glGenVertexArraysAPPLE;
    if (sf_glad_glGetActiveAttrib == NULL && sf_glad_glGetActiveAttribARB != NULL) sf_glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)sf_glad_glGetActiveAttribARB;
    if (sf_glad_glGetActiveAttribARB == NULL && sf_glad_glGetActiveAttrib != NULL) sf_glad_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)sf_glad_glGetActiveAttrib;
    if (sf_glad_glGetActiveUniform == NULL && sf_glad_glGetActiveUniformARB != NULL) sf_glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)sf_glad_glGetActiveUniformARB;
    if (sf_glad_glGetActiveUniformARB == NULL && sf_glad_glGetActiveUniform != NULL) sf_glad_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)sf_glad_glGetActiveUniform;
    if (sf_glad_glGetAttribLocation == NULL && sf_glad_glGetAttribLocationARB != NULL) sf_glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)sf_glad_glGetAttribLocationARB;
    if (sf_glad_glGetAttribLocationARB == NULL && sf_glad_glGetAttribLocation != NULL) sf_glad_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)sf_glad_glGetAttribLocation;
    if (sf_glad_glGetBooleani_v == NULL && sf_glad_glGetBooleanIndexedvEXT != NULL) sf_glad_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)sf_glad_glGetBooleanIndexedvEXT;
    if (sf_glad_glGetBooleanIndexedvEXT == NULL && sf_glad_glGetBooleani_v != NULL) sf_glad_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)sf_glad_glGetBooleani_v;
    if (sf_glad_glGetBufferParameteriv == NULL && sf_glad_glGetBufferParameterivARB != NULL) sf_glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)sf_glad_glGetBufferParameterivARB;
    if (sf_glad_glGetBufferParameterivARB == NULL && sf_glad_glGetBufferParameteriv != NULL) sf_glad_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)sf_glad_glGetBufferParameteriv;
    if (sf_glad_glGetBufferPointerv == NULL && sf_glad_glGetBufferPointervARB != NULL) sf_glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)sf_glad_glGetBufferPointervARB;
    if (sf_glad_glGetBufferPointerv == NULL && sf_glad_glGetBufferPointervOES != NULL) sf_glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)sf_glad_glGetBufferPointervOES;
    if (sf_glad_glGetBufferPointervARB == NULL && sf_glad_glGetBufferPointerv != NULL) sf_glad_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)sf_glad_glGetBufferPointerv;
    if (sf_glad_glGetBufferPointervARB == NULL && sf_glad_glGetBufferPointervOES != NULL) sf_glad_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)sf_glad_glGetBufferPointervOES;
    if (sf_glad_glGetBufferPointervOES == NULL && sf_glad_glGetBufferPointerv != NULL) sf_glad_glGetBufferPointervOES = (PFNGLGETBUFFERPOINTERVOESPROC)sf_glad_glGetBufferPointerv;
    if (sf_glad_glGetBufferPointervOES == NULL && sf_glad_glGetBufferPointervARB != NULL) sf_glad_glGetBufferPointervOES = (PFNGLGETBUFFERPOINTERVOESPROC)sf_glad_glGetBufferPointervARB;
    if (sf_glad_glGetBufferSubData == NULL && sf_glad_glGetBufferSubDataARB != NULL) sf_glad_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)sf_glad_glGetBufferSubDataARB;
    if (sf_glad_glGetBufferSubDataARB == NULL && sf_glad_glGetBufferSubData != NULL) sf_glad_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)sf_glad_glGetBufferSubData;
    if (sf_glad_glGetColorTable == NULL && sf_glad_glGetColorTableEXT != NULL) sf_glad_glGetColorTable = (PFNGLGETCOLORTABLEPROC)sf_glad_glGetColorTableEXT;
    if (sf_glad_glGetColorTableEXT == NULL && sf_glad_glGetColorTable != NULL) sf_glad_glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC)sf_glad_glGetColorTable;
    if (sf_glad_glGetColorTableParameterfv == NULL && sf_glad_glGetColorTableParameterfvEXT != NULL) sf_glad_glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)sf_glad_glGetColorTableParameterfvEXT;
    if (sf_glad_glGetColorTableParameterfvEXT == NULL && sf_glad_glGetColorTableParameterfv != NULL) sf_glad_glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)sf_glad_glGetColorTableParameterfv;
    if (sf_glad_glGetColorTableParameteriv == NULL && sf_glad_glGetColorTableParameterivEXT != NULL) sf_glad_glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)sf_glad_glGetColorTableParameterivEXT;
    if (sf_glad_glGetColorTableParameterivEXT == NULL && sf_glad_glGetColorTableParameteriv != NULL) sf_glad_glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)sf_glad_glGetColorTableParameteriv;
    if (sf_glad_glGetCompressedTexImage == NULL && sf_glad_glGetCompressedTexImageARB != NULL) sf_glad_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)sf_glad_glGetCompressedTexImageARB;
    if (sf_glad_glGetCompressedTexImageARB == NULL && sf_glad_glGetCompressedTexImage != NULL) sf_glad_glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)sf_glad_glGetCompressedTexImage;
    if (sf_glad_glGetDebugMessageLog == NULL && sf_glad_glGetDebugMessageLogARB != NULL) sf_glad_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)sf_glad_glGetDebugMessageLogARB;
    if (sf_glad_glGetDebugMessageLogARB == NULL && sf_glad_glGetDebugMessageLog != NULL) sf_glad_glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC)sf_glad_glGetDebugMessageLog;
    if (sf_glad_glGetDoublei_v == NULL && sf_glad_glGetDoubleIndexedvEXT != NULL) sf_glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)sf_glad_glGetDoubleIndexedvEXT;
    if (sf_glad_glGetDoublei_v == NULL && sf_glad_glGetDoublei_vEXT != NULL) sf_glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)sf_glad_glGetDoublei_vEXT;
    if (sf_glad_glGetDoublei_vEXT == NULL && sf_glad_glGetDoubleIndexedvEXT != NULL) sf_glad_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC)sf_glad_glGetDoubleIndexedvEXT;
    if (sf_glad_glGetDoublei_vEXT == NULL && sf_glad_glGetDoublei_v != NULL) sf_glad_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC)sf_glad_glGetDoublei_v;
    if (sf_glad_glGetDoubleIndexedvEXT == NULL && sf_glad_glGetDoublei_v != NULL) sf_glad_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)sf_glad_glGetDoublei_v;
    if (sf_glad_glGetDoubleIndexedvEXT == NULL && sf_glad_glGetDoublei_vEXT != NULL) sf_glad_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)sf_glad_glGetDoublei_vEXT;
    if (sf_glad_glGetFloati_v == NULL && sf_glad_glGetFloatIndexedvEXT != NULL) sf_glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC)sf_glad_glGetFloatIndexedvEXT;
    if (sf_glad_glGetFloati_v == NULL && sf_glad_glGetFloati_vEXT != NULL) sf_glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC)sf_glad_glGetFloati_vEXT;
    if (sf_glad_glGetFloati_vEXT == NULL && sf_glad_glGetFloatIndexedvEXT != NULL) sf_glad_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC)sf_glad_glGetFloatIndexedvEXT;
    if (sf_glad_glGetFloati_vEXT == NULL && sf_glad_glGetFloati_v != NULL) sf_glad_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC)sf_glad_glGetFloati_v;
    if (sf_glad_glGetFloatIndexedvEXT == NULL && sf_glad_glGetFloati_v != NULL) sf_glad_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)sf_glad_glGetFloati_v;
    if (sf_glad_glGetFloatIndexedvEXT == NULL && sf_glad_glGetFloati_vEXT != NULL) sf_glad_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)sf_glad_glGetFloati_vEXT;
    if (sf_glad_glGetFragDataLocation == NULL && sf_glad_glGetFragDataLocationEXT != NULL) sf_glad_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)sf_glad_glGetFragDataLocationEXT;
    if (sf_glad_glGetFragDataLocationEXT == NULL && sf_glad_glGetFragDataLocation != NULL) sf_glad_glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)sf_glad_glGetFragDataLocation;
    if (sf_glad_glGetFramebufferAttachmentParameteriv == NULL && sf_glad_glGetFramebufferAttachmentParameterivEXT != NULL) sf_glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)sf_glad_glGetFramebufferAttachmentParameterivEXT;
    if (sf_glad_glGetFramebufferAttachmentParameterivEXT == NULL && sf_glad_glGetFramebufferAttachmentParameteriv != NULL) sf_glad_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)sf_glad_glGetFramebufferAttachmentParameteriv;
    if (sf_glad_glGetGraphicsResetStatus == NULL && sf_glad_glGetGraphicsResetStatusEXT != NULL) sf_glad_glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC)sf_glad_glGetGraphicsResetStatusEXT;
    if (sf_glad_glGetGraphicsResetStatusEXT == NULL && sf_glad_glGetGraphicsResetStatus != NULL) sf_glad_glGetGraphicsResetStatusEXT = (PFNGLGETGRAPHICSRESETSTATUSEXTPROC)sf_glad_glGetGraphicsResetStatus;
    if (sf_glad_glGetInteger64v == NULL && sf_glad_glGetInteger64vAPPLE != NULL) sf_glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC)sf_glad_glGetInteger64vAPPLE;
    if (sf_glad_glGetInteger64vAPPLE == NULL && sf_glad_glGetInteger64v != NULL) sf_glad_glGetInteger64vAPPLE = (PFNGLGETINTEGER64VAPPLEPROC)sf_glad_glGetInteger64v;
    if (sf_glad_glGetIntegeri_v == NULL && sf_glad_glGetIntegerIndexedvEXT != NULL) sf_glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)sf_glad_glGetIntegerIndexedvEXT;
    if (sf_glad_glGetIntegerIndexedvEXT == NULL && sf_glad_glGetIntegeri_v != NULL) sf_glad_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)sf_glad_glGetIntegeri_v;
    if (sf_glad_glGetMultisamplefv == NULL && sf_glad_glGetMultisamplefvNV != NULL) sf_glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)sf_glad_glGetMultisamplefvNV;
    if (sf_glad_glGetMultisamplefvNV == NULL && sf_glad_glGetMultisamplefv != NULL) sf_glad_glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC)sf_glad_glGetMultisamplefv;
    if (sf_glad_glGetnUniformfv == NULL && sf_glad_glGetnUniformfvEXT != NULL) sf_glad_glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC)sf_glad_glGetnUniformfvEXT;
    if (sf_glad_glGetnUniformfvEXT == NULL && sf_glad_glGetnUniformfv != NULL) sf_glad_glGetnUniformfvEXT = (PFNGLGETNUNIFORMFVEXTPROC)sf_glad_glGetnUniformfv;
    if (sf_glad_glGetnUniformiv == NULL && sf_glad_glGetnUniformivEXT != NULL) sf_glad_glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC)sf_glad_glGetnUniformivEXT;
    if (sf_glad_glGetnUniformivEXT == NULL && sf_glad_glGetnUniformiv != NULL) sf_glad_glGetnUniformivEXT = (PFNGLGETNUNIFORMIVEXTPROC)sf_glad_glGetnUniformiv;
    if (sf_glad_glGetPointerv == NULL && sf_glad_glGetPointervEXT != NULL) sf_glad_glGetPointerv = (PFNGLGETPOINTERVPROC)sf_glad_glGetPointervEXT;
    if (sf_glad_glGetPointervEXT == NULL && sf_glad_glGetPointerv != NULL) sf_glad_glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)sf_glad_glGetPointerv;
    if (sf_glad_glGetQueryiv == NULL && sf_glad_glGetQueryivARB != NULL) sf_glad_glGetQueryiv = (PFNGLGETQUERYIVPROC)sf_glad_glGetQueryivARB;
    if (sf_glad_glGetQueryivARB == NULL && sf_glad_glGetQueryiv != NULL) sf_glad_glGetQueryivARB = (PFNGLGETQUERYIVARBPROC)sf_glad_glGetQueryiv;
    if (sf_glad_glGetQueryObjecti64v == NULL && sf_glad_glGetQueryObjecti64vEXT != NULL) sf_glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)sf_glad_glGetQueryObjecti64vEXT;
    if (sf_glad_glGetQueryObjecti64vEXT == NULL && sf_glad_glGetQueryObjecti64v != NULL) sf_glad_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC)sf_glad_glGetQueryObjecti64v;
    if (sf_glad_glGetQueryObjectiv == NULL && sf_glad_glGetQueryObjectivARB != NULL) sf_glad_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)sf_glad_glGetQueryObjectivARB;
    if (sf_glad_glGetQueryObjectivARB == NULL && sf_glad_glGetQueryObjectiv != NULL) sf_glad_glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)sf_glad_glGetQueryObjectiv;
    if (sf_glad_glGetQueryObjectui64v == NULL && sf_glad_glGetQueryObjectui64vEXT != NULL) sf_glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)sf_glad_glGetQueryObjectui64vEXT;
    if (sf_glad_glGetQueryObjectui64vEXT == NULL && sf_glad_glGetQueryObjectui64v != NULL) sf_glad_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC)sf_glad_glGetQueryObjectui64v;
    if (sf_glad_glGetQueryObjectuiv == NULL && sf_glad_glGetQueryObjectuivARB != NULL) sf_glad_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)sf_glad_glGetQueryObjectuivARB;
    if (sf_glad_glGetQueryObjectuivARB == NULL && sf_glad_glGetQueryObjectuiv != NULL) sf_glad_glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)sf_glad_glGetQueryObjectuiv;
    if (sf_glad_glGetRenderbufferParameteriv == NULL && sf_glad_glGetRenderbufferParameterivEXT != NULL) sf_glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)sf_glad_glGetRenderbufferParameterivEXT;
    if (sf_glad_glGetRenderbufferParameterivEXT == NULL && sf_glad_glGetRenderbufferParameteriv != NULL) sf_glad_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)sf_glad_glGetRenderbufferParameteriv;
    if (sf_glad_glGetShaderSource == NULL && sf_glad_glGetShaderSourceARB != NULL) sf_glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)sf_glad_glGetShaderSourceARB;
    if (sf_glad_glGetShaderSourceARB == NULL && sf_glad_glGetShaderSource != NULL) sf_glad_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)sf_glad_glGetShaderSource;
    if (sf_glad_glGetSynciv == NULL && sf_glad_glGetSyncivAPPLE != NULL) sf_glad_glGetSynciv = (PFNGLGETSYNCIVPROC)sf_glad_glGetSyncivAPPLE;
    if (sf_glad_glGetSyncivAPPLE == NULL && sf_glad_glGetSynciv != NULL) sf_glad_glGetSyncivAPPLE = (PFNGLGETSYNCIVAPPLEPROC)sf_glad_glGetSynciv;
    if (sf_glad_glGetTexParameterIiv == NULL && sf_glad_glGetTexParameterIivEXT != NULL) sf_glad_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)sf_glad_glGetTexParameterIivEXT;
    if (sf_glad_glGetTexParameterIivEXT == NULL && sf_glad_glGetTexParameterIiv != NULL) sf_glad_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)sf_glad_glGetTexParameterIiv;
    if (sf_glad_glGetTexParameterIuiv == NULL && sf_glad_glGetTexParameterIuivEXT != NULL) sf_glad_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)sf_glad_glGetTexParameterIuivEXT;
    if (sf_glad_glGetTexParameterIuivEXT == NULL && sf_glad_glGetTexParameterIuiv != NULL) sf_glad_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)sf_glad_glGetTexParameterIuiv;
    if (sf_glad_glGetTransformFeedbackVarying == NULL && sf_glad_glGetTransformFeedbackVaryingEXT != NULL) sf_glad_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)sf_glad_glGetTransformFeedbackVaryingEXT;
    if (sf_glad_glGetTransformFeedbackVaryingEXT == NULL && sf_glad_glGetTransformFeedbackVarying != NULL) sf_glad_glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)sf_glad_glGetTransformFeedbackVarying;
    if (sf_glad_glGetUniformfv == NULL && sf_glad_glGetUniformfvARB != NULL) sf_glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC)sf_glad_glGetUniformfvARB;
    if (sf_glad_glGetUniformfvARB == NULL && sf_glad_glGetUniformfv != NULL) sf_glad_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)sf_glad_glGetUniformfv;
    if (sf_glad_glGetUniformiv == NULL && sf_glad_glGetUniformivARB != NULL) sf_glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC)sf_glad_glGetUniformivARB;
    if (sf_glad_glGetUniformivARB == NULL && sf_glad_glGetUniformiv != NULL) sf_glad_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)sf_glad_glGetUniformiv;
    if (sf_glad_glGetUniformLocation == NULL && sf_glad_glGetUniformLocationARB != NULL) sf_glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)sf_glad_glGetUniformLocationARB;
    if (sf_glad_glGetUniformLocationARB == NULL && sf_glad_glGetUniformLocation != NULL) sf_glad_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)sf_glad_glGetUniformLocation;
    if (sf_glad_glGetUniformuiv == NULL && sf_glad_glGetUniformuivEXT != NULL) sf_glad_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)sf_glad_glGetUniformuivEXT;
    if (sf_glad_glGetUniformuivEXT == NULL && sf_glad_glGetUniformuiv != NULL) sf_glad_glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)sf_glad_glGetUniformuiv;
    if (sf_glad_glGetVertexAttribdv == NULL && sf_glad_glGetVertexAttribdvARB != NULL) sf_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)sf_glad_glGetVertexAttribdvARB;
    if (sf_glad_glGetVertexAttribdv == NULL && sf_glad_glGetVertexAttribdvNV != NULL) sf_glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)sf_glad_glGetVertexAttribdvNV;
    if (sf_glad_glGetVertexAttribdvARB == NULL && sf_glad_glGetVertexAttribdv != NULL) sf_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)sf_glad_glGetVertexAttribdv;
    if (sf_glad_glGetVertexAttribdvARB == NULL && sf_glad_glGetVertexAttribdvNV != NULL) sf_glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)sf_glad_glGetVertexAttribdvNV;
    if (sf_glad_glGetVertexAttribdvNV == NULL && sf_glad_glGetVertexAttribdv != NULL) sf_glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)sf_glad_glGetVertexAttribdv;
    if (sf_glad_glGetVertexAttribdvNV == NULL && sf_glad_glGetVertexAttribdvARB != NULL) sf_glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)sf_glad_glGetVertexAttribdvARB;
    if (sf_glad_glGetVertexAttribfv == NULL && sf_glad_glGetVertexAttribfvARB != NULL) sf_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)sf_glad_glGetVertexAttribfvARB;
    if (sf_glad_glGetVertexAttribfv == NULL && sf_glad_glGetVertexAttribfvNV != NULL) sf_glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)sf_glad_glGetVertexAttribfvNV;
    if (sf_glad_glGetVertexAttribfvARB == NULL && sf_glad_glGetVertexAttribfv != NULL) sf_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)sf_glad_glGetVertexAttribfv;
    if (sf_glad_glGetVertexAttribfvARB == NULL && sf_glad_glGetVertexAttribfvNV != NULL) sf_glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)sf_glad_glGetVertexAttribfvNV;
    if (sf_glad_glGetVertexAttribfvNV == NULL && sf_glad_glGetVertexAttribfv != NULL) sf_glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)sf_glad_glGetVertexAttribfv;
    if (sf_glad_glGetVertexAttribfvNV == NULL && sf_glad_glGetVertexAttribfvARB != NULL) sf_glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)sf_glad_glGetVertexAttribfvARB;
    if (sf_glad_glGetVertexAttribIiv == NULL && sf_glad_glGetVertexAttribIivEXT != NULL) sf_glad_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)sf_glad_glGetVertexAttribIivEXT;
    if (sf_glad_glGetVertexAttribIivEXT == NULL && sf_glad_glGetVertexAttribIiv != NULL) sf_glad_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)sf_glad_glGetVertexAttribIiv;
    if (sf_glad_glGetVertexAttribIuiv == NULL && sf_glad_glGetVertexAttribIuivEXT != NULL) sf_glad_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)sf_glad_glGetVertexAttribIuivEXT;
    if (sf_glad_glGetVertexAttribIuivEXT == NULL && sf_glad_glGetVertexAttribIuiv != NULL) sf_glad_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)sf_glad_glGetVertexAttribIuiv;
    if (sf_glad_glGetVertexAttribiv == NULL && sf_glad_glGetVertexAttribivARB != NULL) sf_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)sf_glad_glGetVertexAttribivARB;
    if (sf_glad_glGetVertexAttribiv == NULL && sf_glad_glGetVertexAttribivNV != NULL) sf_glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)sf_glad_glGetVertexAttribivNV;
    if (sf_glad_glGetVertexAttribivARB == NULL && sf_glad_glGetVertexAttribiv != NULL) sf_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)sf_glad_glGetVertexAttribiv;
    if (sf_glad_glGetVertexAttribivARB == NULL && sf_glad_glGetVertexAttribivNV != NULL) sf_glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)sf_glad_glGetVertexAttribivNV;
    if (sf_glad_glGetVertexAttribivNV == NULL && sf_glad_glGetVertexAttribiv != NULL) sf_glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)sf_glad_glGetVertexAttribiv;
    if (sf_glad_glGetVertexAttribivNV == NULL && sf_glad_glGetVertexAttribivARB != NULL) sf_glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)sf_glad_glGetVertexAttribivARB;
    if (sf_glad_glGetVertexAttribLdv == NULL && sf_glad_glGetVertexAttribLdvEXT != NULL) sf_glad_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)sf_glad_glGetVertexAttribLdvEXT;
    if (sf_glad_glGetVertexAttribLdvEXT == NULL && sf_glad_glGetVertexAttribLdv != NULL) sf_glad_glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC)sf_glad_glGetVertexAttribLdv;
    if (sf_glad_glGetVertexAttribPointerv == NULL && sf_glad_glGetVertexAttribPointervARB != NULL) sf_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)sf_glad_glGetVertexAttribPointervARB;
    if (sf_glad_glGetVertexAttribPointerv == NULL && sf_glad_glGetVertexAttribPointervNV != NULL) sf_glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)sf_glad_glGetVertexAttribPointervNV;
    if (sf_glad_glGetVertexAttribPointervARB == NULL && sf_glad_glGetVertexAttribPointerv != NULL) sf_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)sf_glad_glGetVertexAttribPointerv;
    if (sf_glad_glGetVertexAttribPointervARB == NULL && sf_glad_glGetVertexAttribPointervNV != NULL) sf_glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)sf_glad_glGetVertexAttribPointervNV;
    if (sf_glad_glGetVertexAttribPointervNV == NULL && sf_glad_glGetVertexAttribPointerv != NULL) sf_glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)sf_glad_glGetVertexAttribPointerv;
    if (sf_glad_glGetVertexAttribPointervNV == NULL && sf_glad_glGetVertexAttribPointervARB != NULL) sf_glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)sf_glad_glGetVertexAttribPointervARB;
    if (sf_glad_glHistogram == NULL && sf_glad_glHistogramEXT != NULL) sf_glad_glHistogram = (PFNGLHISTOGRAMPROC)sf_glad_glHistogramEXT;
    if (sf_glad_glHistogramEXT == NULL && sf_glad_glHistogram != NULL) sf_glad_glHistogramEXT = (PFNGLHISTOGRAMEXTPROC)sf_glad_glHistogram;
    if (sf_glad_glIsBuffer == NULL && sf_glad_glIsBufferARB != NULL) sf_glad_glIsBuffer = (PFNGLISBUFFERPROC)sf_glad_glIsBufferARB;
    if (sf_glad_glIsBufferARB == NULL && sf_glad_glIsBuffer != NULL) sf_glad_glIsBufferARB = (PFNGLISBUFFERARBPROC)sf_glad_glIsBuffer;
    if (sf_glad_glIsEnabledi == NULL && sf_glad_glIsEnabledIndexedEXT != NULL) sf_glad_glIsEnabledi = (PFNGLISENABLEDIPROC)sf_glad_glIsEnabledIndexedEXT;
    if (sf_glad_glIsEnabledIndexedEXT == NULL && sf_glad_glIsEnabledi != NULL) sf_glad_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)sf_glad_glIsEnabledi;
    if (sf_glad_glIsFramebuffer == NULL && sf_glad_glIsFramebufferEXT != NULL) sf_glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)sf_glad_glIsFramebufferEXT;
    if (sf_glad_glIsFramebufferEXT == NULL && sf_glad_glIsFramebuffer != NULL) sf_glad_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)sf_glad_glIsFramebuffer;
    if (sf_glad_glIsProgramARB == NULL && sf_glad_glIsProgramNV != NULL) sf_glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC)sf_glad_glIsProgramNV;
    if (sf_glad_glIsProgramNV == NULL && sf_glad_glIsProgramARB != NULL) sf_glad_glIsProgramNV = (PFNGLISPROGRAMNVPROC)sf_glad_glIsProgramARB;
    if (sf_glad_glIsQuery == NULL && sf_glad_glIsQueryARB != NULL) sf_glad_glIsQuery = (PFNGLISQUERYPROC)sf_glad_glIsQueryARB;
    if (sf_glad_glIsQueryARB == NULL && sf_glad_glIsQuery != NULL) sf_glad_glIsQueryARB = (PFNGLISQUERYARBPROC)sf_glad_glIsQuery;
    if (sf_glad_glIsRenderbuffer == NULL && sf_glad_glIsRenderbufferEXT != NULL) sf_glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)sf_glad_glIsRenderbufferEXT;
    if (sf_glad_glIsRenderbufferEXT == NULL && sf_glad_glIsRenderbuffer != NULL) sf_glad_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)sf_glad_glIsRenderbuffer;
    if (sf_glad_glIsSync == NULL && sf_glad_glIsSyncAPPLE != NULL) sf_glad_glIsSync = (PFNGLISSYNCPROC)sf_glad_glIsSyncAPPLE;
    if (sf_glad_glIsSyncAPPLE == NULL && sf_glad_glIsSync != NULL) sf_glad_glIsSyncAPPLE = (PFNGLISSYNCAPPLEPROC)sf_glad_glIsSync;
    if (sf_glad_glIsTransformFeedback == NULL && sf_glad_glIsTransformFeedbackNV != NULL) sf_glad_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)sf_glad_glIsTransformFeedbackNV;
    if (sf_glad_glIsTransformFeedbackNV == NULL && sf_glad_glIsTransformFeedback != NULL) sf_glad_glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC)sf_glad_glIsTransformFeedback;
    if (sf_glad_glIsVertexArray == NULL && sf_glad_glIsVertexArrayAPPLE != NULL) sf_glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC)sf_glad_glIsVertexArrayAPPLE;
    if (sf_glad_glIsVertexArray == NULL && sf_glad_glIsVertexArrayOES != NULL) sf_glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC)sf_glad_glIsVertexArrayOES;
    if (sf_glad_glIsVertexArrayAPPLE == NULL && sf_glad_glIsVertexArray != NULL) sf_glad_glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)sf_glad_glIsVertexArray;
    if (sf_glad_glIsVertexArrayAPPLE == NULL && sf_glad_glIsVertexArrayOES != NULL) sf_glad_glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)sf_glad_glIsVertexArrayOES;
    if (sf_glad_glIsVertexArrayOES == NULL && sf_glad_glIsVertexArray != NULL) sf_glad_glIsVertexArrayOES = (PFNGLISVERTEXARRAYOESPROC)sf_glad_glIsVertexArray;
    if (sf_glad_glIsVertexArrayOES == NULL && sf_glad_glIsVertexArrayAPPLE != NULL) sf_glad_glIsVertexArrayOES = (PFNGLISVERTEXARRAYOESPROC)sf_glad_glIsVertexArrayAPPLE;
    if (sf_glad_glLinkProgram == NULL && sf_glad_glLinkProgramARB != NULL) sf_glad_glLinkProgram = (PFNGLLINKPROGRAMPROC)sf_glad_glLinkProgramARB;
    if (sf_glad_glLinkProgramARB == NULL && sf_glad_glLinkProgram != NULL) sf_glad_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)sf_glad_glLinkProgram;
    if (sf_glad_glLoadTransposeMatrixd == NULL && sf_glad_glLoadTransposeMatrixdARB != NULL) sf_glad_glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)sf_glad_glLoadTransposeMatrixdARB;
    if (sf_glad_glLoadTransposeMatrixdARB == NULL && sf_glad_glLoadTransposeMatrixd != NULL) sf_glad_glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)sf_glad_glLoadTransposeMatrixd;
    if (sf_glad_glLoadTransposeMatrixf == NULL && sf_glad_glLoadTransposeMatrixfARB != NULL) sf_glad_glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)sf_glad_glLoadTransposeMatrixfARB;
    if (sf_glad_glLoadTransposeMatrixfARB == NULL && sf_glad_glLoadTransposeMatrixf != NULL) sf_glad_glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)sf_glad_glLoadTransposeMatrixf;
    if (sf_glad_glMapBuffer == NULL && sf_glad_glMapBufferARB != NULL) sf_glad_glMapBuffer = (PFNGLMAPBUFFERPROC)sf_glad_glMapBufferARB;
    if (sf_glad_glMapBuffer == NULL && sf_glad_glMapBufferOES != NULL) sf_glad_glMapBuffer = (PFNGLMAPBUFFERPROC)sf_glad_glMapBufferOES;
    if (sf_glad_glMapBufferARB == NULL && sf_glad_glMapBuffer != NULL) sf_glad_glMapBufferARB = (PFNGLMAPBUFFERARBPROC)sf_glad_glMapBuffer;
    if (sf_glad_glMapBufferARB == NULL && sf_glad_glMapBufferOES != NULL) sf_glad_glMapBufferARB = (PFNGLMAPBUFFERARBPROC)sf_glad_glMapBufferOES;
    if (sf_glad_glMapBufferOES == NULL && sf_glad_glMapBuffer != NULL) sf_glad_glMapBufferOES = (PFNGLMAPBUFFEROESPROC)sf_glad_glMapBuffer;
    if (sf_glad_glMapBufferOES == NULL && sf_glad_glMapBufferARB != NULL) sf_glad_glMapBufferOES = (PFNGLMAPBUFFEROESPROC)sf_glad_glMapBufferARB;
    if (sf_glad_glMapBufferRange == NULL && sf_glad_glMapBufferRangeEXT != NULL) sf_glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)sf_glad_glMapBufferRangeEXT;
    if (sf_glad_glMapBufferRangeEXT == NULL && sf_glad_glMapBufferRange != NULL) sf_glad_glMapBufferRangeEXT = (PFNGLMAPBUFFERRANGEEXTPROC)sf_glad_glMapBufferRange;
    if (sf_glad_glMaxShaderCompilerThreadsARB == NULL && sf_glad_glMaxShaderCompilerThreadsKHR != NULL) sf_glad_glMaxShaderCompilerThreadsARB = (PFNGLMAXSHADERCOMPILERTHREADSARBPROC)sf_glad_glMaxShaderCompilerThreadsKHR;
    if (sf_glad_glMaxShaderCompilerThreadsKHR == NULL && sf_glad_glMaxShaderCompilerThreadsARB != NULL) sf_glad_glMaxShaderCompilerThreadsKHR = (PFNGLMAXSHADERCOMPILERTHREADSKHRPROC)sf_glad_glMaxShaderCompilerThreadsARB;
    if (sf_glad_glMemoryBarrier == NULL && sf_glad_glMemoryBarrierEXT != NULL) sf_glad_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)sf_glad_glMemoryBarrierEXT;
    if (sf_glad_glMemoryBarrierEXT == NULL && sf_glad_glMemoryBarrier != NULL) sf_glad_glMemoryBarrierEXT = (PFNGLMEMORYBARRIEREXTPROC)sf_glad_glMemoryBarrier;
    if (sf_glad_glMinmax == NULL && sf_glad_glMinmaxEXT != NULL) sf_glad_glMinmax = (PFNGLMINMAXPROC)sf_glad_glMinmaxEXT;
    if (sf_glad_glMinmaxEXT == NULL && sf_glad_glMinmax != NULL) sf_glad_glMinmaxEXT = (PFNGLMINMAXEXTPROC)sf_glad_glMinmax;
    if (sf_glad_glMinSampleShading == NULL && sf_glad_glMinSampleShadingARB != NULL) sf_glad_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)sf_glad_glMinSampleShadingARB;
    if (sf_glad_glMinSampleShadingARB == NULL && sf_glad_glMinSampleShading != NULL) sf_glad_glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC)sf_glad_glMinSampleShading;
    if (sf_glad_glMultiDrawArrays == NULL && sf_glad_glMultiDrawArraysEXT != NULL) sf_glad_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)sf_glad_glMultiDrawArraysEXT;
    if (sf_glad_glMultiDrawArraysEXT == NULL && sf_glad_glMultiDrawArrays != NULL) sf_glad_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)sf_glad_glMultiDrawArrays;
    if (sf_glad_glMultiDrawArraysIndirect == NULL && sf_glad_glMultiDrawArraysIndirectAMD != NULL) sf_glad_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)sf_glad_glMultiDrawArraysIndirectAMD;
    if (sf_glad_glMultiDrawArraysIndirectAMD == NULL && sf_glad_glMultiDrawArraysIndirect != NULL) sf_glad_glMultiDrawArraysIndirectAMD = (PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)sf_glad_glMultiDrawArraysIndirect;
    if (sf_glad_glMultiDrawArraysIndirectCount == NULL && sf_glad_glMultiDrawArraysIndirectCountARB != NULL) sf_glad_glMultiDrawArraysIndirectCount = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)sf_glad_glMultiDrawArraysIndirectCountARB;
    if (sf_glad_glMultiDrawArraysIndirectCountARB == NULL && sf_glad_glMultiDrawArraysIndirectCount != NULL) sf_glad_glMultiDrawArraysIndirectCountARB = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)sf_glad_glMultiDrawArraysIndirectCount;
    if (sf_glad_glMultiDrawElements == NULL && sf_glad_glMultiDrawElementsEXT != NULL) sf_glad_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)sf_glad_glMultiDrawElementsEXT;
    if (sf_glad_glMultiDrawElementsEXT == NULL && sf_glad_glMultiDrawElements != NULL) sf_glad_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)sf_glad_glMultiDrawElements;
    if (sf_glad_glMultiDrawElementsIndirect == NULL && sf_glad_glMultiDrawElementsIndirectAMD != NULL) sf_glad_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)sf_glad_glMultiDrawElementsIndirectAMD;
    if (sf_glad_glMultiDrawElementsIndirectAMD == NULL && sf_glad_glMultiDrawElementsIndirect != NULL) sf_glad_glMultiDrawElementsIndirectAMD = (PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)sf_glad_glMultiDrawElementsIndirect;
    if (sf_glad_glMultiDrawElementsIndirectCount == NULL && sf_glad_glMultiDrawElementsIndirectCountARB != NULL) sf_glad_glMultiDrawElementsIndirectCount = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)sf_glad_glMultiDrawElementsIndirectCountARB;
    if (sf_glad_glMultiDrawElementsIndirectCountARB == NULL && sf_glad_glMultiDrawElementsIndirectCount != NULL) sf_glad_glMultiDrawElementsIndirectCountARB = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)sf_glad_glMultiDrawElementsIndirectCount;
    if (sf_glad_glMultiTexCoord1d == NULL && sf_glad_glMultiTexCoord1dARB != NULL) sf_glad_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)sf_glad_glMultiTexCoord1dARB;
    if (sf_glad_glMultiTexCoord1dARB == NULL && sf_glad_glMultiTexCoord1d != NULL) sf_glad_glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)sf_glad_glMultiTexCoord1d;
    if (sf_glad_glMultiTexCoord1dv == NULL && sf_glad_glMultiTexCoord1dvARB != NULL) sf_glad_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)sf_glad_glMultiTexCoord1dvARB;
    if (sf_glad_glMultiTexCoord1dvARB == NULL && sf_glad_glMultiTexCoord1dv != NULL) sf_glad_glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)sf_glad_glMultiTexCoord1dv;
    if (sf_glad_glMultiTexCoord1f == NULL && sf_glad_glMultiTexCoord1fARB != NULL) sf_glad_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)sf_glad_glMultiTexCoord1fARB;
    if (sf_glad_glMultiTexCoord1fARB == NULL && sf_glad_glMultiTexCoord1f != NULL) sf_glad_glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)sf_glad_glMultiTexCoord1f;
    if (sf_glad_glMultiTexCoord1fv == NULL && sf_glad_glMultiTexCoord1fvARB != NULL) sf_glad_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)sf_glad_glMultiTexCoord1fvARB;
    if (sf_glad_glMultiTexCoord1fvARB == NULL && sf_glad_glMultiTexCoord1fv != NULL) sf_glad_glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)sf_glad_glMultiTexCoord1fv;
    if (sf_glad_glMultiTexCoord1i == NULL && sf_glad_glMultiTexCoord1iARB != NULL) sf_glad_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)sf_glad_glMultiTexCoord1iARB;
    if (sf_glad_glMultiTexCoord1iARB == NULL && sf_glad_glMultiTexCoord1i != NULL) sf_glad_glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)sf_glad_glMultiTexCoord1i;
    if (sf_glad_glMultiTexCoord1iv == NULL && sf_glad_glMultiTexCoord1ivARB != NULL) sf_glad_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)sf_glad_glMultiTexCoord1ivARB;
    if (sf_glad_glMultiTexCoord1ivARB == NULL && sf_glad_glMultiTexCoord1iv != NULL) sf_glad_glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)sf_glad_glMultiTexCoord1iv;
    if (sf_glad_glMultiTexCoord1s == NULL && sf_glad_glMultiTexCoord1sARB != NULL) sf_glad_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)sf_glad_glMultiTexCoord1sARB;
    if (sf_glad_glMultiTexCoord1sARB == NULL && sf_glad_glMultiTexCoord1s != NULL) sf_glad_glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)sf_glad_glMultiTexCoord1s;
    if (sf_glad_glMultiTexCoord1sv == NULL && sf_glad_glMultiTexCoord1svARB != NULL) sf_glad_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)sf_glad_glMultiTexCoord1svARB;
    if (sf_glad_glMultiTexCoord1svARB == NULL && sf_glad_glMultiTexCoord1sv != NULL) sf_glad_glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)sf_glad_glMultiTexCoord1sv;
    if (sf_glad_glMultiTexCoord2d == NULL && sf_glad_glMultiTexCoord2dARB != NULL) sf_glad_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)sf_glad_glMultiTexCoord2dARB;
    if (sf_glad_glMultiTexCoord2dARB == NULL && sf_glad_glMultiTexCoord2d != NULL) sf_glad_glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)sf_glad_glMultiTexCoord2d;
    if (sf_glad_glMultiTexCoord2dv == NULL && sf_glad_glMultiTexCoord2dvARB != NULL) sf_glad_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)sf_glad_glMultiTexCoord2dvARB;
    if (sf_glad_glMultiTexCoord2dvARB == NULL && sf_glad_glMultiTexCoord2dv != NULL) sf_glad_glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)sf_glad_glMultiTexCoord2dv;
    if (sf_glad_glMultiTexCoord2f == NULL && sf_glad_glMultiTexCoord2fARB != NULL) sf_glad_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)sf_glad_glMultiTexCoord2fARB;
    if (sf_glad_glMultiTexCoord2fARB == NULL && sf_glad_glMultiTexCoord2f != NULL) sf_glad_glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)sf_glad_glMultiTexCoord2f;
    if (sf_glad_glMultiTexCoord2fv == NULL && sf_glad_glMultiTexCoord2fvARB != NULL) sf_glad_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)sf_glad_glMultiTexCoord2fvARB;
    if (sf_glad_glMultiTexCoord2fvARB == NULL && sf_glad_glMultiTexCoord2fv != NULL) sf_glad_glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)sf_glad_glMultiTexCoord2fv;
    if (sf_glad_glMultiTexCoord2i == NULL && sf_glad_glMultiTexCoord2iARB != NULL) sf_glad_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)sf_glad_glMultiTexCoord2iARB;
    if (sf_glad_glMultiTexCoord2iARB == NULL && sf_glad_glMultiTexCoord2i != NULL) sf_glad_glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)sf_glad_glMultiTexCoord2i;
    if (sf_glad_glMultiTexCoord2iv == NULL && sf_glad_glMultiTexCoord2ivARB != NULL) sf_glad_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)sf_glad_glMultiTexCoord2ivARB;
    if (sf_glad_glMultiTexCoord2ivARB == NULL && sf_glad_glMultiTexCoord2iv != NULL) sf_glad_glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)sf_glad_glMultiTexCoord2iv;
    if (sf_glad_glMultiTexCoord2s == NULL && sf_glad_glMultiTexCoord2sARB != NULL) sf_glad_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)sf_glad_glMultiTexCoord2sARB;
    if (sf_glad_glMultiTexCoord2sARB == NULL && sf_glad_glMultiTexCoord2s != NULL) sf_glad_glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)sf_glad_glMultiTexCoord2s;
    if (sf_glad_glMultiTexCoord2sv == NULL && sf_glad_glMultiTexCoord2svARB != NULL) sf_glad_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)sf_glad_glMultiTexCoord2svARB;
    if (sf_glad_glMultiTexCoord2svARB == NULL && sf_glad_glMultiTexCoord2sv != NULL) sf_glad_glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)sf_glad_glMultiTexCoord2sv;
    if (sf_glad_glMultiTexCoord3d == NULL && sf_glad_glMultiTexCoord3dARB != NULL) sf_glad_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)sf_glad_glMultiTexCoord3dARB;
    if (sf_glad_glMultiTexCoord3dARB == NULL && sf_glad_glMultiTexCoord3d != NULL) sf_glad_glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)sf_glad_glMultiTexCoord3d;
    if (sf_glad_glMultiTexCoord3dv == NULL && sf_glad_glMultiTexCoord3dvARB != NULL) sf_glad_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)sf_glad_glMultiTexCoord3dvARB;
    if (sf_glad_glMultiTexCoord3dvARB == NULL && sf_glad_glMultiTexCoord3dv != NULL) sf_glad_glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)sf_glad_glMultiTexCoord3dv;
    if (sf_glad_glMultiTexCoord3f == NULL && sf_glad_glMultiTexCoord3fARB != NULL) sf_glad_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)sf_glad_glMultiTexCoord3fARB;
    if (sf_glad_glMultiTexCoord3fARB == NULL && sf_glad_glMultiTexCoord3f != NULL) sf_glad_glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)sf_glad_glMultiTexCoord3f;
    if (sf_glad_glMultiTexCoord3fv == NULL && sf_glad_glMultiTexCoord3fvARB != NULL) sf_glad_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)sf_glad_glMultiTexCoord3fvARB;
    if (sf_glad_glMultiTexCoord3fvARB == NULL && sf_glad_glMultiTexCoord3fv != NULL) sf_glad_glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)sf_glad_glMultiTexCoord3fv;
    if (sf_glad_glMultiTexCoord3i == NULL && sf_glad_glMultiTexCoord3iARB != NULL) sf_glad_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)sf_glad_glMultiTexCoord3iARB;
    if (sf_glad_glMultiTexCoord3iARB == NULL && sf_glad_glMultiTexCoord3i != NULL) sf_glad_glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)sf_glad_glMultiTexCoord3i;
    if (sf_glad_glMultiTexCoord3iv == NULL && sf_glad_glMultiTexCoord3ivARB != NULL) sf_glad_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)sf_glad_glMultiTexCoord3ivARB;
    if (sf_glad_glMultiTexCoord3ivARB == NULL && sf_glad_glMultiTexCoord3iv != NULL) sf_glad_glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)sf_glad_glMultiTexCoord3iv;
    if (sf_glad_glMultiTexCoord3s == NULL && sf_glad_glMultiTexCoord3sARB != NULL) sf_glad_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)sf_glad_glMultiTexCoord3sARB;
    if (sf_glad_glMultiTexCoord3sARB == NULL && sf_glad_glMultiTexCoord3s != NULL) sf_glad_glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)sf_glad_glMultiTexCoord3s;
    if (sf_glad_glMultiTexCoord3sv == NULL && sf_glad_glMultiTexCoord3svARB != NULL) sf_glad_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)sf_glad_glMultiTexCoord3svARB;
    if (sf_glad_glMultiTexCoord3svARB == NULL && sf_glad_glMultiTexCoord3sv != NULL) sf_glad_glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)sf_glad_glMultiTexCoord3sv;
    if (sf_glad_glMultiTexCoord4d == NULL && sf_glad_glMultiTexCoord4dARB != NULL) sf_glad_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)sf_glad_glMultiTexCoord4dARB;
    if (sf_glad_glMultiTexCoord4dARB == NULL && sf_glad_glMultiTexCoord4d != NULL) sf_glad_glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)sf_glad_glMultiTexCoord4d;
    if (sf_glad_glMultiTexCoord4dv == NULL && sf_glad_glMultiTexCoord4dvARB != NULL) sf_glad_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)sf_glad_glMultiTexCoord4dvARB;
    if (sf_glad_glMultiTexCoord4dvARB == NULL && sf_glad_glMultiTexCoord4dv != NULL) sf_glad_glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)sf_glad_glMultiTexCoord4dv;
    if (sf_glad_glMultiTexCoord4f == NULL && sf_glad_glMultiTexCoord4fARB != NULL) sf_glad_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)sf_glad_glMultiTexCoord4fARB;
    if (sf_glad_glMultiTexCoord4fARB == NULL && sf_glad_glMultiTexCoord4f != NULL) sf_glad_glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)sf_glad_glMultiTexCoord4f;
    if (sf_glad_glMultiTexCoord4fv == NULL && sf_glad_glMultiTexCoord4fvARB != NULL) sf_glad_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)sf_glad_glMultiTexCoord4fvARB;
    if (sf_glad_glMultiTexCoord4fvARB == NULL && sf_glad_glMultiTexCoord4fv != NULL) sf_glad_glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)sf_glad_glMultiTexCoord4fv;
    if (sf_glad_glMultiTexCoord4i == NULL && sf_glad_glMultiTexCoord4iARB != NULL) sf_glad_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)sf_glad_glMultiTexCoord4iARB;
    if (sf_glad_glMultiTexCoord4iARB == NULL && sf_glad_glMultiTexCoord4i != NULL) sf_glad_glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)sf_glad_glMultiTexCoord4i;
    if (sf_glad_glMultiTexCoord4iv == NULL && sf_glad_glMultiTexCoord4ivARB != NULL) sf_glad_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)sf_glad_glMultiTexCoord4ivARB;
    if (sf_glad_glMultiTexCoord4ivARB == NULL && sf_glad_glMultiTexCoord4iv != NULL) sf_glad_glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)sf_glad_glMultiTexCoord4iv;
    if (sf_glad_glMultiTexCoord4s == NULL && sf_glad_glMultiTexCoord4sARB != NULL) sf_glad_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)sf_glad_glMultiTexCoord4sARB;
    if (sf_glad_glMultiTexCoord4sARB == NULL && sf_glad_glMultiTexCoord4s != NULL) sf_glad_glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)sf_glad_glMultiTexCoord4s;
    if (sf_glad_glMultiTexCoord4sv == NULL && sf_glad_glMultiTexCoord4svARB != NULL) sf_glad_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)sf_glad_glMultiTexCoord4svARB;
    if (sf_glad_glMultiTexCoord4svARB == NULL && sf_glad_glMultiTexCoord4sv != NULL) sf_glad_glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)sf_glad_glMultiTexCoord4sv;
    if (sf_glad_glMultTransposeMatrixd == NULL && sf_glad_glMultTransposeMatrixdARB != NULL) sf_glad_glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)sf_glad_glMultTransposeMatrixdARB;
    if (sf_glad_glMultTransposeMatrixdARB == NULL && sf_glad_glMultTransposeMatrixd != NULL) sf_glad_glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)sf_glad_glMultTransposeMatrixd;
    if (sf_glad_glMultTransposeMatrixf == NULL && sf_glad_glMultTransposeMatrixfARB != NULL) sf_glad_glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)sf_glad_glMultTransposeMatrixfARB;
    if (sf_glad_glMultTransposeMatrixfARB == NULL && sf_glad_glMultTransposeMatrixf != NULL) sf_glad_glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)sf_glad_glMultTransposeMatrixf;
    if (sf_glad_glNamedBufferStorage == NULL && sf_glad_glNamedBufferStorageEXT != NULL) sf_glad_glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC)sf_glad_glNamedBufferStorageEXT;
    if (sf_glad_glNamedBufferStorageEXT == NULL && sf_glad_glNamedBufferStorage != NULL) sf_glad_glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC)sf_glad_glNamedBufferStorage;
    if (sf_glad_glNamedBufferSubData == NULL && sf_glad_glNamedBufferSubDataEXT != NULL) sf_glad_glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC)sf_glad_glNamedBufferSubDataEXT;
    if (sf_glad_glNamedBufferSubDataEXT == NULL && sf_glad_glNamedBufferSubData != NULL) sf_glad_glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC)sf_glad_glNamedBufferSubData;
    if (sf_glad_glPauseTransformFeedback == NULL && sf_glad_glPauseTransformFeedbackNV != NULL) sf_glad_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)sf_glad_glPauseTransformFeedbackNV;
    if (sf_glad_glPauseTransformFeedbackNV == NULL && sf_glad_glPauseTransformFeedback != NULL) sf_glad_glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC)sf_glad_glPauseTransformFeedback;
    if (sf_glad_glPointParameterf == NULL && sf_glad_glPointParameterfARB != NULL) sf_glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)sf_glad_glPointParameterfARB;
    if (sf_glad_glPointParameterf == NULL && sf_glad_glPointParameterfEXT != NULL) sf_glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)sf_glad_glPointParameterfEXT;
    if (sf_glad_glPointParameterf == NULL && sf_glad_glPointParameterfSGIS != NULL) sf_glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)sf_glad_glPointParameterfSGIS;
    if (sf_glad_glPointParameterfARB == NULL && sf_glad_glPointParameterf != NULL) sf_glad_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)sf_glad_glPointParameterf;
    if (sf_glad_glPointParameterfARB == NULL && sf_glad_glPointParameterfEXT != NULL) sf_glad_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)sf_glad_glPointParameterfEXT;
    if (sf_glad_glPointParameterfARB == NULL && sf_glad_glPointParameterfSGIS != NULL) sf_glad_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)sf_glad_glPointParameterfSGIS;
    if (sf_glad_glPointParameterfEXT == NULL && sf_glad_glPointParameterf != NULL) sf_glad_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)sf_glad_glPointParameterf;
    if (sf_glad_glPointParameterfEXT == NULL && sf_glad_glPointParameterfARB != NULL) sf_glad_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)sf_glad_glPointParameterfARB;
    if (sf_glad_glPointParameterfEXT == NULL && sf_glad_glPointParameterfSGIS != NULL) sf_glad_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)sf_glad_glPointParameterfSGIS;
    if (sf_glad_glPointParameterfSGIS == NULL && sf_glad_glPointParameterf != NULL) sf_glad_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)sf_glad_glPointParameterf;
    if (sf_glad_glPointParameterfSGIS == NULL && sf_glad_glPointParameterfARB != NULL) sf_glad_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)sf_glad_glPointParameterfARB;
    if (sf_glad_glPointParameterfSGIS == NULL && sf_glad_glPointParameterfEXT != NULL) sf_glad_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)sf_glad_glPointParameterfEXT;
    if (sf_glad_glPointParameterfv == NULL && sf_glad_glPointParameterfvARB != NULL) sf_glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)sf_glad_glPointParameterfvARB;
    if (sf_glad_glPointParameterfv == NULL && sf_glad_glPointParameterfvEXT != NULL) sf_glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)sf_glad_glPointParameterfvEXT;
    if (sf_glad_glPointParameterfv == NULL && sf_glad_glPointParameterfvSGIS != NULL) sf_glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)sf_glad_glPointParameterfvSGIS;
    if (sf_glad_glPointParameterfvARB == NULL && sf_glad_glPointParameterfv != NULL) sf_glad_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)sf_glad_glPointParameterfv;
    if (sf_glad_glPointParameterfvARB == NULL && sf_glad_glPointParameterfvEXT != NULL) sf_glad_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)sf_glad_glPointParameterfvEXT;
    if (sf_glad_glPointParameterfvARB == NULL && sf_glad_glPointParameterfvSGIS != NULL) sf_glad_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)sf_glad_glPointParameterfvSGIS;
    if (sf_glad_glPointParameterfvEXT == NULL && sf_glad_glPointParameterfv != NULL) sf_glad_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)sf_glad_glPointParameterfv;
    if (sf_glad_glPointParameterfvEXT == NULL && sf_glad_glPointParameterfvARB != NULL) sf_glad_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)sf_glad_glPointParameterfvARB;
    if (sf_glad_glPointParameterfvEXT == NULL && sf_glad_glPointParameterfvSGIS != NULL) sf_glad_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)sf_glad_glPointParameterfvSGIS;
    if (sf_glad_glPointParameterfvSGIS == NULL && sf_glad_glPointParameterfv != NULL) sf_glad_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)sf_glad_glPointParameterfv;
    if (sf_glad_glPointParameterfvSGIS == NULL && sf_glad_glPointParameterfvARB != NULL) sf_glad_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)sf_glad_glPointParameterfvARB;
    if (sf_glad_glPointParameterfvSGIS == NULL && sf_glad_glPointParameterfvEXT != NULL) sf_glad_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)sf_glad_glPointParameterfvEXT;
    if (sf_glad_glPointParameteri == NULL && sf_glad_glPointParameteriNV != NULL) sf_glad_glPointParameteri = (PFNGLPOINTPARAMETERIPROC)sf_glad_glPointParameteriNV;
    if (sf_glad_glPointParameteriNV == NULL && sf_glad_glPointParameteri != NULL) sf_glad_glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)sf_glad_glPointParameteri;
    if (sf_glad_glPointParameteriv == NULL && sf_glad_glPointParameterivNV != NULL) sf_glad_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)sf_glad_glPointParameterivNV;
    if (sf_glad_glPointParameterivNV == NULL && sf_glad_glPointParameteriv != NULL) sf_glad_glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)sf_glad_glPointParameteriv;
    if (sf_glad_glPolygonOffsetClamp == NULL && sf_glad_glPolygonOffsetClampEXT != NULL) sf_glad_glPolygonOffsetClamp = (PFNGLPOLYGONOFFSETCLAMPPROC)sf_glad_glPolygonOffsetClampEXT;
    if (sf_glad_glPolygonOffsetClampEXT == NULL && sf_glad_glPolygonOffsetClamp != NULL) sf_glad_glPolygonOffsetClampEXT = (PFNGLPOLYGONOFFSETCLAMPEXTPROC)sf_glad_glPolygonOffsetClamp;
    if (sf_glad_glPrioritizeTextures == NULL && sf_glad_glPrioritizeTexturesEXT != NULL) sf_glad_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC)sf_glad_glPrioritizeTexturesEXT;
    if (sf_glad_glPrioritizeTexturesEXT == NULL && sf_glad_glPrioritizeTextures != NULL) sf_glad_glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)sf_glad_glPrioritizeTextures;
    if (sf_glad_glProgramParameteri == NULL && sf_glad_glProgramParameteriARB != NULL) sf_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)sf_glad_glProgramParameteriARB;
    if (sf_glad_glProgramParameteri == NULL && sf_glad_glProgramParameteriEXT != NULL) sf_glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)sf_glad_glProgramParameteriEXT;
    if (sf_glad_glProgramParameteriARB == NULL && sf_glad_glProgramParameteri != NULL) sf_glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)sf_glad_glProgramParameteri;
    if (sf_glad_glProgramParameteriARB == NULL && sf_glad_glProgramParameteriEXT != NULL) sf_glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)sf_glad_glProgramParameteriEXT;
    if (sf_glad_glProgramParameteriEXT == NULL && sf_glad_glProgramParameteri != NULL) sf_glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)sf_glad_glProgramParameteri;
    if (sf_glad_glProgramParameteriEXT == NULL && sf_glad_glProgramParameteriARB != NULL) sf_glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)sf_glad_glProgramParameteriARB;
    if (sf_glad_glProgramUniform1f == NULL && sf_glad_glProgramUniform1fEXT != NULL) sf_glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)sf_glad_glProgramUniform1fEXT;
    if (sf_glad_glProgramUniform1fEXT == NULL && sf_glad_glProgramUniform1f != NULL) sf_glad_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)sf_glad_glProgramUniform1f;
    if (sf_glad_glProgramUniform1fv == NULL && sf_glad_glProgramUniform1fvEXT != NULL) sf_glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)sf_glad_glProgramUniform1fvEXT;
    if (sf_glad_glProgramUniform1fvEXT == NULL && sf_glad_glProgramUniform1fv != NULL) sf_glad_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)sf_glad_glProgramUniform1fv;
    if (sf_glad_glProgramUniform1i == NULL && sf_glad_glProgramUniform1iEXT != NULL) sf_glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)sf_glad_glProgramUniform1iEXT;
    if (sf_glad_glProgramUniform1iEXT == NULL && sf_glad_glProgramUniform1i != NULL) sf_glad_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)sf_glad_glProgramUniform1i;
    if (sf_glad_glProgramUniform1iv == NULL && sf_glad_glProgramUniform1ivEXT != NULL) sf_glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)sf_glad_glProgramUniform1ivEXT;
    if (sf_glad_glProgramUniform1ivEXT == NULL && sf_glad_glProgramUniform1iv != NULL) sf_glad_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)sf_glad_glProgramUniform1iv;
    if (sf_glad_glProgramUniform1ui == NULL && sf_glad_glProgramUniform1uiEXT != NULL) sf_glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)sf_glad_glProgramUniform1uiEXT;
    if (sf_glad_glProgramUniform1uiEXT == NULL && sf_glad_glProgramUniform1ui != NULL) sf_glad_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)sf_glad_glProgramUniform1ui;
    if (sf_glad_glProgramUniform1uiv == NULL && sf_glad_glProgramUniform1uivEXT != NULL) sf_glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)sf_glad_glProgramUniform1uivEXT;
    if (sf_glad_glProgramUniform1uivEXT == NULL && sf_glad_glProgramUniform1uiv != NULL) sf_glad_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)sf_glad_glProgramUniform1uiv;
    if (sf_glad_glProgramUniform2f == NULL && sf_glad_glProgramUniform2fEXT != NULL) sf_glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)sf_glad_glProgramUniform2fEXT;
    if (sf_glad_glProgramUniform2fEXT == NULL && sf_glad_glProgramUniform2f != NULL) sf_glad_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)sf_glad_glProgramUniform2f;
    if (sf_glad_glProgramUniform2fv == NULL && sf_glad_glProgramUniform2fvEXT != NULL) sf_glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)sf_glad_glProgramUniform2fvEXT;
    if (sf_glad_glProgramUniform2fvEXT == NULL && sf_glad_glProgramUniform2fv != NULL) sf_glad_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)sf_glad_glProgramUniform2fv;
    if (sf_glad_glProgramUniform2i == NULL && sf_glad_glProgramUniform2iEXT != NULL) sf_glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)sf_glad_glProgramUniform2iEXT;
    if (sf_glad_glProgramUniform2iEXT == NULL && sf_glad_glProgramUniform2i != NULL) sf_glad_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)sf_glad_glProgramUniform2i;
    if (sf_glad_glProgramUniform2iv == NULL && sf_glad_glProgramUniform2ivEXT != NULL) sf_glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)sf_glad_glProgramUniform2ivEXT;
    if (sf_glad_glProgramUniform2ivEXT == NULL && sf_glad_glProgramUniform2iv != NULL) sf_glad_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)sf_glad_glProgramUniform2iv;
    if (sf_glad_glProgramUniform2ui == NULL && sf_glad_glProgramUniform2uiEXT != NULL) sf_glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)sf_glad_glProgramUniform2uiEXT;
    if (sf_glad_glProgramUniform2uiEXT == NULL && sf_glad_glProgramUniform2ui != NULL) sf_glad_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)sf_glad_glProgramUniform2ui;
    if (sf_glad_glProgramUniform2uiv == NULL && sf_glad_glProgramUniform2uivEXT != NULL) sf_glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)sf_glad_glProgramUniform2uivEXT;
    if (sf_glad_glProgramUniform2uivEXT == NULL && sf_glad_glProgramUniform2uiv != NULL) sf_glad_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)sf_glad_glProgramUniform2uiv;
    if (sf_glad_glProgramUniform3f == NULL && sf_glad_glProgramUniform3fEXT != NULL) sf_glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)sf_glad_glProgramUniform3fEXT;
    if (sf_glad_glProgramUniform3fEXT == NULL && sf_glad_glProgramUniform3f != NULL) sf_glad_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)sf_glad_glProgramUniform3f;
    if (sf_glad_glProgramUniform3fv == NULL && sf_glad_glProgramUniform3fvEXT != NULL) sf_glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)sf_glad_glProgramUniform3fvEXT;
    if (sf_glad_glProgramUniform3fvEXT == NULL && sf_glad_glProgramUniform3fv != NULL) sf_glad_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)sf_glad_glProgramUniform3fv;
    if (sf_glad_glProgramUniform3i == NULL && sf_glad_glProgramUniform3iEXT != NULL) sf_glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)sf_glad_glProgramUniform3iEXT;
    if (sf_glad_glProgramUniform3iEXT == NULL && sf_glad_glProgramUniform3i != NULL) sf_glad_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)sf_glad_glProgramUniform3i;
    if (sf_glad_glProgramUniform3iv == NULL && sf_glad_glProgramUniform3ivEXT != NULL) sf_glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)sf_glad_glProgramUniform3ivEXT;
    if (sf_glad_glProgramUniform3ivEXT == NULL && sf_glad_glProgramUniform3iv != NULL) sf_glad_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)sf_glad_glProgramUniform3iv;
    if (sf_glad_glProgramUniform3ui == NULL && sf_glad_glProgramUniform3uiEXT != NULL) sf_glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)sf_glad_glProgramUniform3uiEXT;
    if (sf_glad_glProgramUniform3uiEXT == NULL && sf_glad_glProgramUniform3ui != NULL) sf_glad_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)sf_glad_glProgramUniform3ui;
    if (sf_glad_glProgramUniform3uiv == NULL && sf_glad_glProgramUniform3uivEXT != NULL) sf_glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)sf_glad_glProgramUniform3uivEXT;
    if (sf_glad_glProgramUniform3uivEXT == NULL && sf_glad_glProgramUniform3uiv != NULL) sf_glad_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)sf_glad_glProgramUniform3uiv;
    if (sf_glad_glProgramUniform4f == NULL && sf_glad_glProgramUniform4fEXT != NULL) sf_glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)sf_glad_glProgramUniform4fEXT;
    if (sf_glad_glProgramUniform4fEXT == NULL && sf_glad_glProgramUniform4f != NULL) sf_glad_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)sf_glad_glProgramUniform4f;
    if (sf_glad_glProgramUniform4fv == NULL && sf_glad_glProgramUniform4fvEXT != NULL) sf_glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)sf_glad_glProgramUniform4fvEXT;
    if (sf_glad_glProgramUniform4fvEXT == NULL && sf_glad_glProgramUniform4fv != NULL) sf_glad_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)sf_glad_glProgramUniform4fv;
    if (sf_glad_glProgramUniform4i == NULL && sf_glad_glProgramUniform4iEXT != NULL) sf_glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)sf_glad_glProgramUniform4iEXT;
    if (sf_glad_glProgramUniform4iEXT == NULL && sf_glad_glProgramUniform4i != NULL) sf_glad_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)sf_glad_glProgramUniform4i;
    if (sf_glad_glProgramUniform4iv == NULL && sf_glad_glProgramUniform4ivEXT != NULL) sf_glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)sf_glad_glProgramUniform4ivEXT;
    if (sf_glad_glProgramUniform4ivEXT == NULL && sf_glad_glProgramUniform4iv != NULL) sf_glad_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)sf_glad_glProgramUniform4iv;
    if (sf_glad_glProgramUniform4ui == NULL && sf_glad_glProgramUniform4uiEXT != NULL) sf_glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)sf_glad_glProgramUniform4uiEXT;
    if (sf_glad_glProgramUniform4uiEXT == NULL && sf_glad_glProgramUniform4ui != NULL) sf_glad_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)sf_glad_glProgramUniform4ui;
    if (sf_glad_glProgramUniform4uiv == NULL && sf_glad_glProgramUniform4uivEXT != NULL) sf_glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)sf_glad_glProgramUniform4uivEXT;
    if (sf_glad_glProgramUniform4uivEXT == NULL && sf_glad_glProgramUniform4uiv != NULL) sf_glad_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)sf_glad_glProgramUniform4uiv;
    if (sf_glad_glProgramUniformMatrix2fv == NULL && sf_glad_glProgramUniformMatrix2fvEXT != NULL) sf_glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)sf_glad_glProgramUniformMatrix2fvEXT;
    if (sf_glad_glProgramUniformMatrix2fvEXT == NULL && sf_glad_glProgramUniformMatrix2fv != NULL) sf_glad_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)sf_glad_glProgramUniformMatrix2fv;
    if (sf_glad_glProgramUniformMatrix2x3fv == NULL && sf_glad_glProgramUniformMatrix2x3fvEXT != NULL) sf_glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)sf_glad_glProgramUniformMatrix2x3fvEXT;
    if (sf_glad_glProgramUniformMatrix2x3fvEXT == NULL && sf_glad_glProgramUniformMatrix2x3fv != NULL) sf_glad_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)sf_glad_glProgramUniformMatrix2x3fv;
    if (sf_glad_glProgramUniformMatrix2x4fv == NULL && sf_glad_glProgramUniformMatrix2x4fvEXT != NULL) sf_glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)sf_glad_glProgramUniformMatrix2x4fvEXT;
    if (sf_glad_glProgramUniformMatrix2x4fvEXT == NULL && sf_glad_glProgramUniformMatrix2x4fv != NULL) sf_glad_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)sf_glad_glProgramUniformMatrix2x4fv;
    if (sf_glad_glProgramUniformMatrix3fv == NULL && sf_glad_glProgramUniformMatrix3fvEXT != NULL) sf_glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)sf_glad_glProgramUniformMatrix3fvEXT;
    if (sf_glad_glProgramUniformMatrix3fvEXT == NULL && sf_glad_glProgramUniformMatrix3fv != NULL) sf_glad_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)sf_glad_glProgramUniformMatrix3fv;
    if (sf_glad_glProgramUniformMatrix3x2fv == NULL && sf_glad_glProgramUniformMatrix3x2fvEXT != NULL) sf_glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)sf_glad_glProgramUniformMatrix3x2fvEXT;
    if (sf_glad_glProgramUniformMatrix3x2fvEXT == NULL && sf_glad_glProgramUniformMatrix3x2fv != NULL) sf_glad_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)sf_glad_glProgramUniformMatrix3x2fv;
    if (sf_glad_glProgramUniformMatrix3x4fv == NULL && sf_glad_glProgramUniformMatrix3x4fvEXT != NULL) sf_glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)sf_glad_glProgramUniformMatrix3x4fvEXT;
    if (sf_glad_glProgramUniformMatrix3x4fvEXT == NULL && sf_glad_glProgramUniformMatrix3x4fv != NULL) sf_glad_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)sf_glad_glProgramUniformMatrix3x4fv;
    if (sf_glad_glProgramUniformMatrix4fv == NULL && sf_glad_glProgramUniformMatrix4fvEXT != NULL) sf_glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)sf_glad_glProgramUniformMatrix4fvEXT;
    if (sf_glad_glProgramUniformMatrix4fvEXT == NULL && sf_glad_glProgramUniformMatrix4fv != NULL) sf_glad_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)sf_glad_glProgramUniformMatrix4fv;
    if (sf_glad_glProgramUniformMatrix4x2fv == NULL && sf_glad_glProgramUniformMatrix4x2fvEXT != NULL) sf_glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)sf_glad_glProgramUniformMatrix4x2fvEXT;
    if (sf_glad_glProgramUniformMatrix4x2fvEXT == NULL && sf_glad_glProgramUniformMatrix4x2fv != NULL) sf_glad_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)sf_glad_glProgramUniformMatrix4x2fv;
    if (sf_glad_glProgramUniformMatrix4x3fv == NULL && sf_glad_glProgramUniformMatrix4x3fvEXT != NULL) sf_glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)sf_glad_glProgramUniformMatrix4x3fvEXT;
    if (sf_glad_glProgramUniformMatrix4x3fvEXT == NULL && sf_glad_glProgramUniformMatrix4x3fv != NULL) sf_glad_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)sf_glad_glProgramUniformMatrix4x3fv;
    if (sf_glad_glProvokingVertex == NULL && sf_glad_glProvokingVertexEXT != NULL) sf_glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)sf_glad_glProvokingVertexEXT;
    if (sf_glad_glProvokingVertexEXT == NULL && sf_glad_glProvokingVertex != NULL) sf_glad_glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC)sf_glad_glProvokingVertex;
    if (sf_glad_glReadnPixels == NULL && sf_glad_glReadnPixelsARB != NULL) sf_glad_glReadnPixels = (PFNGLREADNPIXELSPROC)sf_glad_glReadnPixelsARB;
    if (sf_glad_glReadnPixels == NULL && sf_glad_glReadnPixelsEXT != NULL) sf_glad_glReadnPixels = (PFNGLREADNPIXELSPROC)sf_glad_glReadnPixelsEXT;
    if (sf_glad_glReadnPixelsARB == NULL && sf_glad_glReadnPixels != NULL) sf_glad_glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC)sf_glad_glReadnPixels;
    if (sf_glad_glReadnPixelsARB == NULL && sf_glad_glReadnPixelsEXT != NULL) sf_glad_glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC)sf_glad_glReadnPixelsEXT;
    if (sf_glad_glReadnPixelsEXT == NULL && sf_glad_glReadnPixels != NULL) sf_glad_glReadnPixelsEXT = (PFNGLREADNPIXELSEXTPROC)sf_glad_glReadnPixels;
    if (sf_glad_glReadnPixelsEXT == NULL && sf_glad_glReadnPixelsARB != NULL) sf_glad_glReadnPixelsEXT = (PFNGLREADNPIXELSEXTPROC)sf_glad_glReadnPixelsARB;
    if (sf_glad_glRenderbufferStorage == NULL && sf_glad_glRenderbufferStorageEXT != NULL) sf_glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)sf_glad_glRenderbufferStorageEXT;
    if (sf_glad_glRenderbufferStorageEXT == NULL && sf_glad_glRenderbufferStorage != NULL) sf_glad_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)sf_glad_glRenderbufferStorage;
    if (sf_glad_glRenderbufferStorageMultisample == NULL && sf_glad_glRenderbufferStorageMultisampleEXT != NULL) sf_glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)sf_glad_glRenderbufferStorageMultisampleEXT;
    if (sf_glad_glRenderbufferStorageMultisampleEXT == NULL && sf_glad_glRenderbufferStorageMultisample != NULL) sf_glad_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)sf_glad_glRenderbufferStorageMultisample;
    if (sf_glad_glResetHistogram == NULL && sf_glad_glResetHistogramEXT != NULL) sf_glad_glResetHistogram = (PFNGLRESETHISTOGRAMPROC)sf_glad_glResetHistogramEXT;
    if (sf_glad_glResetHistogramEXT == NULL && sf_glad_glResetHistogram != NULL) sf_glad_glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC)sf_glad_glResetHistogram;
    if (sf_glad_glResetMinmax == NULL && sf_glad_glResetMinmaxEXT != NULL) sf_glad_glResetMinmax = (PFNGLRESETMINMAXPROC)sf_glad_glResetMinmaxEXT;
    if (sf_glad_glResetMinmaxEXT == NULL && sf_glad_glResetMinmax != NULL) sf_glad_glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC)sf_glad_glResetMinmax;
    if (sf_glad_glResumeTransformFeedback == NULL && sf_glad_glResumeTransformFeedbackNV != NULL) sf_glad_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)sf_glad_glResumeTransformFeedbackNV;
    if (sf_glad_glResumeTransformFeedbackNV == NULL && sf_glad_glResumeTransformFeedback != NULL) sf_glad_glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC)sf_glad_glResumeTransformFeedback;
    if (sf_glad_glSampleCoverage == NULL && sf_glad_glSampleCoverageARB != NULL) sf_glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)sf_glad_glSampleCoverageARB;
    if (sf_glad_glSampleCoverageARB == NULL && sf_glad_glSampleCoverage != NULL) sf_glad_glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)sf_glad_glSampleCoverage;
    if (sf_glad_glSampleMaskEXT == NULL && sf_glad_glSampleMaskSGIS != NULL) sf_glad_glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC)sf_glad_glSampleMaskSGIS;
    if (sf_glad_glSampleMaskSGIS == NULL && sf_glad_glSampleMaskEXT != NULL) sf_glad_glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC)sf_glad_glSampleMaskEXT;
    if (sf_glad_glSamplePatternEXT == NULL && sf_glad_glSamplePatternSGIS != NULL) sf_glad_glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC)sf_glad_glSamplePatternSGIS;
    if (sf_glad_glSamplePatternSGIS == NULL && sf_glad_glSamplePatternEXT != NULL) sf_glad_glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC)sf_glad_glSamplePatternEXT;
    if (sf_glad_glSecondaryColor3b == NULL && sf_glad_glSecondaryColor3bEXT != NULL) sf_glad_glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)sf_glad_glSecondaryColor3bEXT;
    if (sf_glad_glSecondaryColor3bEXT == NULL && sf_glad_glSecondaryColor3b != NULL) sf_glad_glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)sf_glad_glSecondaryColor3b;
    if (sf_glad_glSecondaryColor3bv == NULL && sf_glad_glSecondaryColor3bvEXT != NULL) sf_glad_glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)sf_glad_glSecondaryColor3bvEXT;
    if (sf_glad_glSecondaryColor3bvEXT == NULL && sf_glad_glSecondaryColor3bv != NULL) sf_glad_glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)sf_glad_glSecondaryColor3bv;
    if (sf_glad_glSecondaryColor3d == NULL && sf_glad_glSecondaryColor3dEXT != NULL) sf_glad_glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)sf_glad_glSecondaryColor3dEXT;
    if (sf_glad_glSecondaryColor3dEXT == NULL && sf_glad_glSecondaryColor3d != NULL) sf_glad_glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)sf_glad_glSecondaryColor3d;
    if (sf_glad_glSecondaryColor3dv == NULL && sf_glad_glSecondaryColor3dvEXT != NULL) sf_glad_glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)sf_glad_glSecondaryColor3dvEXT;
    if (sf_glad_glSecondaryColor3dvEXT == NULL && sf_glad_glSecondaryColor3dv != NULL) sf_glad_glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)sf_glad_glSecondaryColor3dv;
    if (sf_glad_glSecondaryColor3f == NULL && sf_glad_glSecondaryColor3fEXT != NULL) sf_glad_glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)sf_glad_glSecondaryColor3fEXT;
    if (sf_glad_glSecondaryColor3fEXT == NULL && sf_glad_glSecondaryColor3f != NULL) sf_glad_glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)sf_glad_glSecondaryColor3f;
    if (sf_glad_glSecondaryColor3fv == NULL && sf_glad_glSecondaryColor3fvEXT != NULL) sf_glad_glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)sf_glad_glSecondaryColor3fvEXT;
    if (sf_glad_glSecondaryColor3fvEXT == NULL && sf_glad_glSecondaryColor3fv != NULL) sf_glad_glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)sf_glad_glSecondaryColor3fv;
    if (sf_glad_glSecondaryColor3i == NULL && sf_glad_glSecondaryColor3iEXT != NULL) sf_glad_glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)sf_glad_glSecondaryColor3iEXT;
    if (sf_glad_glSecondaryColor3iEXT == NULL && sf_glad_glSecondaryColor3i != NULL) sf_glad_glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)sf_glad_glSecondaryColor3i;
    if (sf_glad_glSecondaryColor3iv == NULL && sf_glad_glSecondaryColor3ivEXT != NULL) sf_glad_glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)sf_glad_glSecondaryColor3ivEXT;
    if (sf_glad_glSecondaryColor3ivEXT == NULL && sf_glad_glSecondaryColor3iv != NULL) sf_glad_glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)sf_glad_glSecondaryColor3iv;
    if (sf_glad_glSecondaryColor3s == NULL && sf_glad_glSecondaryColor3sEXT != NULL) sf_glad_glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)sf_glad_glSecondaryColor3sEXT;
    if (sf_glad_glSecondaryColor3sEXT == NULL && sf_glad_glSecondaryColor3s != NULL) sf_glad_glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)sf_glad_glSecondaryColor3s;
    if (sf_glad_glSecondaryColor3sv == NULL && sf_glad_glSecondaryColor3svEXT != NULL) sf_glad_glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)sf_glad_glSecondaryColor3svEXT;
    if (sf_glad_glSecondaryColor3svEXT == NULL && sf_glad_glSecondaryColor3sv != NULL) sf_glad_glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)sf_glad_glSecondaryColor3sv;
    if (sf_glad_glSecondaryColor3ub == NULL && sf_glad_glSecondaryColor3ubEXT != NULL) sf_glad_glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)sf_glad_glSecondaryColor3ubEXT;
    if (sf_glad_glSecondaryColor3ubEXT == NULL && sf_glad_glSecondaryColor3ub != NULL) sf_glad_glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)sf_glad_glSecondaryColor3ub;
    if (sf_glad_glSecondaryColor3ubv == NULL && sf_glad_glSecondaryColor3ubvEXT != NULL) sf_glad_glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)sf_glad_glSecondaryColor3ubvEXT;
    if (sf_glad_glSecondaryColor3ubvEXT == NULL && sf_glad_glSecondaryColor3ubv != NULL) sf_glad_glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)sf_glad_glSecondaryColor3ubv;
    if (sf_glad_glSecondaryColor3ui == NULL && sf_glad_glSecondaryColor3uiEXT != NULL) sf_glad_glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)sf_glad_glSecondaryColor3uiEXT;
    if (sf_glad_glSecondaryColor3uiEXT == NULL && sf_glad_glSecondaryColor3ui != NULL) sf_glad_glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)sf_glad_glSecondaryColor3ui;
    if (sf_glad_glSecondaryColor3uiv == NULL && sf_glad_glSecondaryColor3uivEXT != NULL) sf_glad_glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)sf_glad_glSecondaryColor3uivEXT;
    if (sf_glad_glSecondaryColor3uivEXT == NULL && sf_glad_glSecondaryColor3uiv != NULL) sf_glad_glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)sf_glad_glSecondaryColor3uiv;
    if (sf_glad_glSecondaryColor3us == NULL && sf_glad_glSecondaryColor3usEXT != NULL) sf_glad_glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)sf_glad_glSecondaryColor3usEXT;
    if (sf_glad_glSecondaryColor3usEXT == NULL && sf_glad_glSecondaryColor3us != NULL) sf_glad_glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)sf_glad_glSecondaryColor3us;
    if (sf_glad_glSecondaryColor3usv == NULL && sf_glad_glSecondaryColor3usvEXT != NULL) sf_glad_glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)sf_glad_glSecondaryColor3usvEXT;
    if (sf_glad_glSecondaryColor3usvEXT == NULL && sf_glad_glSecondaryColor3usv != NULL) sf_glad_glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)sf_glad_glSecondaryColor3usv;
    if (sf_glad_glSecondaryColorPointer == NULL && sf_glad_glSecondaryColorPointerEXT != NULL) sf_glad_glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)sf_glad_glSecondaryColorPointerEXT;
    if (sf_glad_glSecondaryColorPointerEXT == NULL && sf_glad_glSecondaryColorPointer != NULL) sf_glad_glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)sf_glad_glSecondaryColorPointer;
    if (sf_glad_glSeparableFilter2D == NULL && sf_glad_glSeparableFilter2DEXT != NULL) sf_glad_glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)sf_glad_glSeparableFilter2DEXT;
    if (sf_glad_glSeparableFilter2DEXT == NULL && sf_glad_glSeparableFilter2D != NULL) sf_glad_glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC)sf_glad_glSeparableFilter2D;
    if (sf_glad_glShaderSource == NULL && sf_glad_glShaderSourceARB != NULL) sf_glad_glShaderSource = (PFNGLSHADERSOURCEPROC)sf_glad_glShaderSourceARB;
    if (sf_glad_glShaderSourceARB == NULL && sf_glad_glShaderSource != NULL) sf_glad_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)sf_glad_glShaderSource;
    if (sf_glad_glSpecializeShader == NULL && sf_glad_glSpecializeShaderARB != NULL) sf_glad_glSpecializeShader = (PFNGLSPECIALIZESHADERPROC)sf_glad_glSpecializeShaderARB;
    if (sf_glad_glSpecializeShaderARB == NULL && sf_glad_glSpecializeShader != NULL) sf_glad_glSpecializeShaderARB = (PFNGLSPECIALIZESHADERARBPROC)sf_glad_glSpecializeShader;
    if (sf_glad_glStencilOpSeparate == NULL && sf_glad_glStencilOpSeparateATI != NULL) sf_glad_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)sf_glad_glStencilOpSeparateATI;
    if (sf_glad_glStencilOpSeparateATI == NULL && sf_glad_glStencilOpSeparate != NULL) sf_glad_glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)sf_glad_glStencilOpSeparate;
    if (sf_glad_glTexBuffer == NULL && sf_glad_glTexBufferARB != NULL) sf_glad_glTexBuffer = (PFNGLTEXBUFFERPROC)sf_glad_glTexBufferARB;
    if (sf_glad_glTexBuffer == NULL && sf_glad_glTexBufferEXT != NULL) sf_glad_glTexBuffer = (PFNGLTEXBUFFERPROC)sf_glad_glTexBufferEXT;
    if (sf_glad_glTexBufferARB == NULL && sf_glad_glTexBuffer != NULL) sf_glad_glTexBufferARB = (PFNGLTEXBUFFERARBPROC)sf_glad_glTexBuffer;
    if (sf_glad_glTexBufferARB == NULL && sf_glad_glTexBufferEXT != NULL) sf_glad_glTexBufferARB = (PFNGLTEXBUFFERARBPROC)sf_glad_glTexBufferEXT;
    if (sf_glad_glTexBufferEXT == NULL && sf_glad_glTexBuffer != NULL) sf_glad_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)sf_glad_glTexBuffer;
    if (sf_glad_glTexBufferEXT == NULL && sf_glad_glTexBufferARB != NULL) sf_glad_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)sf_glad_glTexBufferARB;
    if (sf_glad_glTexImage3D == NULL && sf_glad_glTexImage3DEXT != NULL) sf_glad_glTexImage3D = (PFNGLTEXIMAGE3DPROC)sf_glad_glTexImage3DEXT;
    if (sf_glad_glTexImage3DEXT == NULL && sf_glad_glTexImage3D != NULL) sf_glad_glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)sf_glad_glTexImage3D;
    if (sf_glad_glTexParameterIiv == NULL && sf_glad_glTexParameterIivEXT != NULL) sf_glad_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)sf_glad_glTexParameterIivEXT;
    if (sf_glad_glTexParameterIivEXT == NULL && sf_glad_glTexParameterIiv != NULL) sf_glad_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)sf_glad_glTexParameterIiv;
    if (sf_glad_glTexParameterIuiv == NULL && sf_glad_glTexParameterIuivEXT != NULL) sf_glad_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)sf_glad_glTexParameterIuivEXT;
    if (sf_glad_glTexParameterIuivEXT == NULL && sf_glad_glTexParameterIuiv != NULL) sf_glad_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)sf_glad_glTexParameterIuiv;
    if (sf_glad_glTexStorage1D == NULL && sf_glad_glTexStorage1DEXT != NULL) sf_glad_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)sf_glad_glTexStorage1DEXT;
    if (sf_glad_glTexStorage1DEXT == NULL && sf_glad_glTexStorage1D != NULL) sf_glad_glTexStorage1DEXT = (PFNGLTEXSTORAGE1DEXTPROC)sf_glad_glTexStorage1D;
    if (sf_glad_glTexStorage2D == NULL && sf_glad_glTexStorage2DEXT != NULL) sf_glad_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)sf_glad_glTexStorage2DEXT;
    if (sf_glad_glTexStorage2DEXT == NULL && sf_glad_glTexStorage2D != NULL) sf_glad_glTexStorage2DEXT = (PFNGLTEXSTORAGE2DEXTPROC)sf_glad_glTexStorage2D;
    if (sf_glad_glTexStorage3D == NULL && sf_glad_glTexStorage3DEXT != NULL) sf_glad_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)sf_glad_glTexStorage3DEXT;
    if (sf_glad_glTexStorage3DEXT == NULL && sf_glad_glTexStorage3D != NULL) sf_glad_glTexStorage3DEXT = (PFNGLTEXSTORAGE3DEXTPROC)sf_glad_glTexStorage3D;
    if (sf_glad_glTexSubImage1D == NULL && sf_glad_glTexSubImage1DEXT != NULL) sf_glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)sf_glad_glTexSubImage1DEXT;
    if (sf_glad_glTexSubImage1DEXT == NULL && sf_glad_glTexSubImage1D != NULL) sf_glad_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)sf_glad_glTexSubImage1D;
    if (sf_glad_glTexSubImage2D == NULL && sf_glad_glTexSubImage2DEXT != NULL) sf_glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)sf_glad_glTexSubImage2DEXT;
    if (sf_glad_glTexSubImage2DEXT == NULL && sf_glad_glTexSubImage2D != NULL) sf_glad_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)sf_glad_glTexSubImage2D;
    if (sf_glad_glTexSubImage3D == NULL && sf_glad_glTexSubImage3DEXT != NULL) sf_glad_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)sf_glad_glTexSubImage3DEXT;
    if (sf_glad_glTexSubImage3DEXT == NULL && sf_glad_glTexSubImage3D != NULL) sf_glad_glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)sf_glad_glTexSubImage3D;
    if (sf_glad_glTransformFeedbackVaryings == NULL && sf_glad_glTransformFeedbackVaryingsEXT != NULL) sf_glad_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)sf_glad_glTransformFeedbackVaryingsEXT;
    if (sf_glad_glTransformFeedbackVaryingsEXT == NULL && sf_glad_glTransformFeedbackVaryings != NULL) sf_glad_glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)sf_glad_glTransformFeedbackVaryings;
    if (sf_glad_glUniform1f == NULL && sf_glad_glUniform1fARB != NULL) sf_glad_glUniform1f = (PFNGLUNIFORM1FPROC)sf_glad_glUniform1fARB;
    if (sf_glad_glUniform1fARB == NULL && sf_glad_glUniform1f != NULL) sf_glad_glUniform1fARB = (PFNGLUNIFORM1FARBPROC)sf_glad_glUniform1f;
    if (sf_glad_glUniform1fv == NULL && sf_glad_glUniform1fvARB != NULL) sf_glad_glUniform1fv = (PFNGLUNIFORM1FVPROC)sf_glad_glUniform1fvARB;
    if (sf_glad_glUniform1fvARB == NULL && sf_glad_glUniform1fv != NULL) sf_glad_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)sf_glad_glUniform1fv;
    if (sf_glad_glUniform1i == NULL && sf_glad_glUniform1iARB != NULL) sf_glad_glUniform1i = (PFNGLUNIFORM1IPROC)sf_glad_glUniform1iARB;
    if (sf_glad_glUniform1iARB == NULL && sf_glad_glUniform1i != NULL) sf_glad_glUniform1iARB = (PFNGLUNIFORM1IARBPROC)sf_glad_glUniform1i;
    if (sf_glad_glUniform1iv == NULL && sf_glad_glUniform1ivARB != NULL) sf_glad_glUniform1iv = (PFNGLUNIFORM1IVPROC)sf_glad_glUniform1ivARB;
    if (sf_glad_glUniform1ivARB == NULL && sf_glad_glUniform1iv != NULL) sf_glad_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)sf_glad_glUniform1iv;
    if (sf_glad_glUniform1ui == NULL && sf_glad_glUniform1uiEXT != NULL) sf_glad_glUniform1ui = (PFNGLUNIFORM1UIPROC)sf_glad_glUniform1uiEXT;
    if (sf_glad_glUniform1uiEXT == NULL && sf_glad_glUniform1ui != NULL) sf_glad_glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)sf_glad_glUniform1ui;
    if (sf_glad_glUniform1uiv == NULL && sf_glad_glUniform1uivEXT != NULL) sf_glad_glUniform1uiv = (PFNGLUNIFORM1UIVPROC)sf_glad_glUniform1uivEXT;
    if (sf_glad_glUniform1uivEXT == NULL && sf_glad_glUniform1uiv != NULL) sf_glad_glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)sf_glad_glUniform1uiv;
    if (sf_glad_glUniform2f == NULL && sf_glad_glUniform2fARB != NULL) sf_glad_glUniform2f = (PFNGLUNIFORM2FPROC)sf_glad_glUniform2fARB;
    if (sf_glad_glUniform2fARB == NULL && sf_glad_glUniform2f != NULL) sf_glad_glUniform2fARB = (PFNGLUNIFORM2FARBPROC)sf_glad_glUniform2f;
    if (sf_glad_glUniform2fv == NULL && sf_glad_glUniform2fvARB != NULL) sf_glad_glUniform2fv = (PFNGLUNIFORM2FVPROC)sf_glad_glUniform2fvARB;
    if (sf_glad_glUniform2fvARB == NULL && sf_glad_glUniform2fv != NULL) sf_glad_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)sf_glad_glUniform2fv;
    if (sf_glad_glUniform2i == NULL && sf_glad_glUniform2iARB != NULL) sf_glad_glUniform2i = (PFNGLUNIFORM2IPROC)sf_glad_glUniform2iARB;
    if (sf_glad_glUniform2iARB == NULL && sf_glad_glUniform2i != NULL) sf_glad_glUniform2iARB = (PFNGLUNIFORM2IARBPROC)sf_glad_glUniform2i;
    if (sf_glad_glUniform2iv == NULL && sf_glad_glUniform2ivARB != NULL) sf_glad_glUniform2iv = (PFNGLUNIFORM2IVPROC)sf_glad_glUniform2ivARB;
    if (sf_glad_glUniform2ivARB == NULL && sf_glad_glUniform2iv != NULL) sf_glad_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)sf_glad_glUniform2iv;
    if (sf_glad_glUniform2ui == NULL && sf_glad_glUniform2uiEXT != NULL) sf_glad_glUniform2ui = (PFNGLUNIFORM2UIPROC)sf_glad_glUniform2uiEXT;
    if (sf_glad_glUniform2uiEXT == NULL && sf_glad_glUniform2ui != NULL) sf_glad_glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)sf_glad_glUniform2ui;
    if (sf_glad_glUniform2uiv == NULL && sf_glad_glUniform2uivEXT != NULL) sf_glad_glUniform2uiv = (PFNGLUNIFORM2UIVPROC)sf_glad_glUniform2uivEXT;
    if (sf_glad_glUniform2uivEXT == NULL && sf_glad_glUniform2uiv != NULL) sf_glad_glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)sf_glad_glUniform2uiv;
    if (sf_glad_glUniform3f == NULL && sf_glad_glUniform3fARB != NULL) sf_glad_glUniform3f = (PFNGLUNIFORM3FPROC)sf_glad_glUniform3fARB;
    if (sf_glad_glUniform3fARB == NULL && sf_glad_glUniform3f != NULL) sf_glad_glUniform3fARB = (PFNGLUNIFORM3FARBPROC)sf_glad_glUniform3f;
    if (sf_glad_glUniform3fv == NULL && sf_glad_glUniform3fvARB != NULL) sf_glad_glUniform3fv = (PFNGLUNIFORM3FVPROC)sf_glad_glUniform3fvARB;
    if (sf_glad_glUniform3fvARB == NULL && sf_glad_glUniform3fv != NULL) sf_glad_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)sf_glad_glUniform3fv;
    if (sf_glad_glUniform3i == NULL && sf_glad_glUniform3iARB != NULL) sf_glad_glUniform3i = (PFNGLUNIFORM3IPROC)sf_glad_glUniform3iARB;
    if (sf_glad_glUniform3iARB == NULL && sf_glad_glUniform3i != NULL) sf_glad_glUniform3iARB = (PFNGLUNIFORM3IARBPROC)sf_glad_glUniform3i;
    if (sf_glad_glUniform3iv == NULL && sf_glad_glUniform3ivARB != NULL) sf_glad_glUniform3iv = (PFNGLUNIFORM3IVPROC)sf_glad_glUniform3ivARB;
    if (sf_glad_glUniform3ivARB == NULL && sf_glad_glUniform3iv != NULL) sf_glad_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)sf_glad_glUniform3iv;
    if (sf_glad_glUniform3ui == NULL && sf_glad_glUniform3uiEXT != NULL) sf_glad_glUniform3ui = (PFNGLUNIFORM3UIPROC)sf_glad_glUniform3uiEXT;
    if (sf_glad_glUniform3uiEXT == NULL && sf_glad_glUniform3ui != NULL) sf_glad_glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)sf_glad_glUniform3ui;
    if (sf_glad_glUniform3uiv == NULL && sf_glad_glUniform3uivEXT != NULL) sf_glad_glUniform3uiv = (PFNGLUNIFORM3UIVPROC)sf_glad_glUniform3uivEXT;
    if (sf_glad_glUniform3uivEXT == NULL && sf_glad_glUniform3uiv != NULL) sf_glad_glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)sf_glad_glUniform3uiv;
    if (sf_glad_glUniform4f == NULL && sf_glad_glUniform4fARB != NULL) sf_glad_glUniform4f = (PFNGLUNIFORM4FPROC)sf_glad_glUniform4fARB;
    if (sf_glad_glUniform4fARB == NULL && sf_glad_glUniform4f != NULL) sf_glad_glUniform4fARB = (PFNGLUNIFORM4FARBPROC)sf_glad_glUniform4f;
    if (sf_glad_glUniform4fv == NULL && sf_glad_glUniform4fvARB != NULL) sf_glad_glUniform4fv = (PFNGLUNIFORM4FVPROC)sf_glad_glUniform4fvARB;
    if (sf_glad_glUniform4fvARB == NULL && sf_glad_glUniform4fv != NULL) sf_glad_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)sf_glad_glUniform4fv;
    if (sf_glad_glUniform4i == NULL && sf_glad_glUniform4iARB != NULL) sf_glad_glUniform4i = (PFNGLUNIFORM4IPROC)sf_glad_glUniform4iARB;
    if (sf_glad_glUniform4iARB == NULL && sf_glad_glUniform4i != NULL) sf_glad_glUniform4iARB = (PFNGLUNIFORM4IARBPROC)sf_glad_glUniform4i;
    if (sf_glad_glUniform4iv == NULL && sf_glad_glUniform4ivARB != NULL) sf_glad_glUniform4iv = (PFNGLUNIFORM4IVPROC)sf_glad_glUniform4ivARB;
    if (sf_glad_glUniform4ivARB == NULL && sf_glad_glUniform4iv != NULL) sf_glad_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)sf_glad_glUniform4iv;
    if (sf_glad_glUniform4ui == NULL && sf_glad_glUniform4uiEXT != NULL) sf_glad_glUniform4ui = (PFNGLUNIFORM4UIPROC)sf_glad_glUniform4uiEXT;
    if (sf_glad_glUniform4uiEXT == NULL && sf_glad_glUniform4ui != NULL) sf_glad_glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)sf_glad_glUniform4ui;
    if (sf_glad_glUniform4uiv == NULL && sf_glad_glUniform4uivEXT != NULL) sf_glad_glUniform4uiv = (PFNGLUNIFORM4UIVPROC)sf_glad_glUniform4uivEXT;
    if (sf_glad_glUniform4uivEXT == NULL && sf_glad_glUniform4uiv != NULL) sf_glad_glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)sf_glad_glUniform4uiv;
    if (sf_glad_glUniformMatrix2fv == NULL && sf_glad_glUniformMatrix2fvARB != NULL) sf_glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)sf_glad_glUniformMatrix2fvARB;
    if (sf_glad_glUniformMatrix2fvARB == NULL && sf_glad_glUniformMatrix2fv != NULL) sf_glad_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)sf_glad_glUniformMatrix2fv;
    if (sf_glad_glUniformMatrix3fv == NULL && sf_glad_glUniformMatrix3fvARB != NULL) sf_glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)sf_glad_glUniformMatrix3fvARB;
    if (sf_glad_glUniformMatrix3fvARB == NULL && sf_glad_glUniformMatrix3fv != NULL) sf_glad_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)sf_glad_glUniformMatrix3fv;
    if (sf_glad_glUniformMatrix4fv == NULL && sf_glad_glUniformMatrix4fvARB != NULL) sf_glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)sf_glad_glUniformMatrix4fvARB;
    if (sf_glad_glUniformMatrix4fvARB == NULL && sf_glad_glUniformMatrix4fv != NULL) sf_glad_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)sf_glad_glUniformMatrix4fv;
    if (sf_glad_glUnmapBuffer == NULL && sf_glad_glUnmapBufferARB != NULL) sf_glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)sf_glad_glUnmapBufferARB;
    if (sf_glad_glUnmapBuffer == NULL && sf_glad_glUnmapBufferOES != NULL) sf_glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)sf_glad_glUnmapBufferOES;
    if (sf_glad_glUnmapBufferARB == NULL && sf_glad_glUnmapBuffer != NULL) sf_glad_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)sf_glad_glUnmapBuffer;
    if (sf_glad_glUnmapBufferARB == NULL && sf_glad_glUnmapBufferOES != NULL) sf_glad_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)sf_glad_glUnmapBufferOES;
    if (sf_glad_glUnmapBufferOES == NULL && sf_glad_glUnmapBuffer != NULL) sf_glad_glUnmapBufferOES = (PFNGLUNMAPBUFFEROESPROC)sf_glad_glUnmapBuffer;
    if (sf_glad_glUnmapBufferOES == NULL && sf_glad_glUnmapBufferARB != NULL) sf_glad_glUnmapBufferOES = (PFNGLUNMAPBUFFEROESPROC)sf_glad_glUnmapBufferARB;
    if (sf_glad_glUseProgram == NULL && sf_glad_glUseProgramObjectARB != NULL) sf_glad_glUseProgram = (PFNGLUSEPROGRAMPROC)sf_glad_glUseProgramObjectARB;
    if (sf_glad_glUseProgramObjectARB == NULL && sf_glad_glUseProgram != NULL) sf_glad_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)sf_glad_glUseProgram;
    if (sf_glad_glValidateProgram == NULL && sf_glad_glValidateProgramARB != NULL) sf_glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)sf_glad_glValidateProgramARB;
    if (sf_glad_glValidateProgramARB == NULL && sf_glad_glValidateProgram != NULL) sf_glad_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)sf_glad_glValidateProgram;
    if (sf_glad_glVertexAttrib1d == NULL && sf_glad_glVertexAttrib1dARB != NULL) sf_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)sf_glad_glVertexAttrib1dARB;
    if (sf_glad_glVertexAttrib1d == NULL && sf_glad_glVertexAttrib1dNV != NULL) sf_glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)sf_glad_glVertexAttrib1dNV;
    if (sf_glad_glVertexAttrib1dARB == NULL && sf_glad_glVertexAttrib1d != NULL) sf_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)sf_glad_glVertexAttrib1d;
    if (sf_glad_glVertexAttrib1dARB == NULL && sf_glad_glVertexAttrib1dNV != NULL) sf_glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)sf_glad_glVertexAttrib1dNV;
    if (sf_glad_glVertexAttrib1dNV == NULL && sf_glad_glVertexAttrib1d != NULL) sf_glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)sf_glad_glVertexAttrib1d;
    if (sf_glad_glVertexAttrib1dNV == NULL && sf_glad_glVertexAttrib1dARB != NULL) sf_glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)sf_glad_glVertexAttrib1dARB;
    if (sf_glad_glVertexAttrib1dv == NULL && sf_glad_glVertexAttrib1dvARB != NULL) sf_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)sf_glad_glVertexAttrib1dvARB;
    if (sf_glad_glVertexAttrib1dv == NULL && sf_glad_glVertexAttrib1dvNV != NULL) sf_glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)sf_glad_glVertexAttrib1dvNV;
    if (sf_glad_glVertexAttrib1dvARB == NULL && sf_glad_glVertexAttrib1dv != NULL) sf_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)sf_glad_glVertexAttrib1dv;
    if (sf_glad_glVertexAttrib1dvARB == NULL && sf_glad_glVertexAttrib1dvNV != NULL) sf_glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)sf_glad_glVertexAttrib1dvNV;
    if (sf_glad_glVertexAttrib1dvNV == NULL && sf_glad_glVertexAttrib1dv != NULL) sf_glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)sf_glad_glVertexAttrib1dv;
    if (sf_glad_glVertexAttrib1dvNV == NULL && sf_glad_glVertexAttrib1dvARB != NULL) sf_glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)sf_glad_glVertexAttrib1dvARB;
    if (sf_glad_glVertexAttrib1f == NULL && sf_glad_glVertexAttrib1fARB != NULL) sf_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)sf_glad_glVertexAttrib1fARB;
    if (sf_glad_glVertexAttrib1f == NULL && sf_glad_glVertexAttrib1fNV != NULL) sf_glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)sf_glad_glVertexAttrib1fNV;
    if (sf_glad_glVertexAttrib1fARB == NULL && sf_glad_glVertexAttrib1f != NULL) sf_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)sf_glad_glVertexAttrib1f;
    if (sf_glad_glVertexAttrib1fARB == NULL && sf_glad_glVertexAttrib1fNV != NULL) sf_glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)sf_glad_glVertexAttrib1fNV;
    if (sf_glad_glVertexAttrib1fNV == NULL && sf_glad_glVertexAttrib1f != NULL) sf_glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)sf_glad_glVertexAttrib1f;
    if (sf_glad_glVertexAttrib1fNV == NULL && sf_glad_glVertexAttrib1fARB != NULL) sf_glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)sf_glad_glVertexAttrib1fARB;
    if (sf_glad_glVertexAttrib1fv == NULL && sf_glad_glVertexAttrib1fvARB != NULL) sf_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)sf_glad_glVertexAttrib1fvARB;
    if (sf_glad_glVertexAttrib1fv == NULL && sf_glad_glVertexAttrib1fvNV != NULL) sf_glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)sf_glad_glVertexAttrib1fvNV;
    if (sf_glad_glVertexAttrib1fvARB == NULL && sf_glad_glVertexAttrib1fv != NULL) sf_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)sf_glad_glVertexAttrib1fv;
    if (sf_glad_glVertexAttrib1fvARB == NULL && sf_glad_glVertexAttrib1fvNV != NULL) sf_glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)sf_glad_glVertexAttrib1fvNV;
    if (sf_glad_glVertexAttrib1fvNV == NULL && sf_glad_glVertexAttrib1fv != NULL) sf_glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)sf_glad_glVertexAttrib1fv;
    if (sf_glad_glVertexAttrib1fvNV == NULL && sf_glad_glVertexAttrib1fvARB != NULL) sf_glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)sf_glad_glVertexAttrib1fvARB;
    if (sf_glad_glVertexAttrib1s == NULL && sf_glad_glVertexAttrib1sARB != NULL) sf_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)sf_glad_glVertexAttrib1sARB;
    if (sf_glad_glVertexAttrib1s == NULL && sf_glad_glVertexAttrib1sNV != NULL) sf_glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)sf_glad_glVertexAttrib1sNV;
    if (sf_glad_glVertexAttrib1sARB == NULL && sf_glad_glVertexAttrib1s != NULL) sf_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)sf_glad_glVertexAttrib1s;
    if (sf_glad_glVertexAttrib1sARB == NULL && sf_glad_glVertexAttrib1sNV != NULL) sf_glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)sf_glad_glVertexAttrib1sNV;
    if (sf_glad_glVertexAttrib1sNV == NULL && sf_glad_glVertexAttrib1s != NULL) sf_glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)sf_glad_glVertexAttrib1s;
    if (sf_glad_glVertexAttrib1sNV == NULL && sf_glad_glVertexAttrib1sARB != NULL) sf_glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)sf_glad_glVertexAttrib1sARB;
    if (sf_glad_glVertexAttrib1sv == NULL && sf_glad_glVertexAttrib1svARB != NULL) sf_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)sf_glad_glVertexAttrib1svARB;
    if (sf_glad_glVertexAttrib1sv == NULL && sf_glad_glVertexAttrib1svNV != NULL) sf_glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)sf_glad_glVertexAttrib1svNV;
    if (sf_glad_glVertexAttrib1svARB == NULL && sf_glad_glVertexAttrib1sv != NULL) sf_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)sf_glad_glVertexAttrib1sv;
    if (sf_glad_glVertexAttrib1svARB == NULL && sf_glad_glVertexAttrib1svNV != NULL) sf_glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)sf_glad_glVertexAttrib1svNV;
    if (sf_glad_glVertexAttrib1svNV == NULL && sf_glad_glVertexAttrib1sv != NULL) sf_glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)sf_glad_glVertexAttrib1sv;
    if (sf_glad_glVertexAttrib1svNV == NULL && sf_glad_glVertexAttrib1svARB != NULL) sf_glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)sf_glad_glVertexAttrib1svARB;
    if (sf_glad_glVertexAttrib2d == NULL && sf_glad_glVertexAttrib2dARB != NULL) sf_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)sf_glad_glVertexAttrib2dARB;
    if (sf_glad_glVertexAttrib2d == NULL && sf_glad_glVertexAttrib2dNV != NULL) sf_glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)sf_glad_glVertexAttrib2dNV;
    if (sf_glad_glVertexAttrib2dARB == NULL && sf_glad_glVertexAttrib2d != NULL) sf_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)sf_glad_glVertexAttrib2d;
    if (sf_glad_glVertexAttrib2dARB == NULL && sf_glad_glVertexAttrib2dNV != NULL) sf_glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)sf_glad_glVertexAttrib2dNV;
    if (sf_glad_glVertexAttrib2dNV == NULL && sf_glad_glVertexAttrib2d != NULL) sf_glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)sf_glad_glVertexAttrib2d;
    if (sf_glad_glVertexAttrib2dNV == NULL && sf_glad_glVertexAttrib2dARB != NULL) sf_glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)sf_glad_glVertexAttrib2dARB;
    if (sf_glad_glVertexAttrib2dv == NULL && sf_glad_glVertexAttrib2dvARB != NULL) sf_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)sf_glad_glVertexAttrib2dvARB;
    if (sf_glad_glVertexAttrib2dv == NULL && sf_glad_glVertexAttrib2dvNV != NULL) sf_glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)sf_glad_glVertexAttrib2dvNV;
    if (sf_glad_glVertexAttrib2dvARB == NULL && sf_glad_glVertexAttrib2dv != NULL) sf_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)sf_glad_glVertexAttrib2dv;
    if (sf_glad_glVertexAttrib2dvARB == NULL && sf_glad_glVertexAttrib2dvNV != NULL) sf_glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)sf_glad_glVertexAttrib2dvNV;
    if (sf_glad_glVertexAttrib2dvNV == NULL && sf_glad_glVertexAttrib2dv != NULL) sf_glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)sf_glad_glVertexAttrib2dv;
    if (sf_glad_glVertexAttrib2dvNV == NULL && sf_glad_glVertexAttrib2dvARB != NULL) sf_glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)sf_glad_glVertexAttrib2dvARB;
    if (sf_glad_glVertexAttrib2f == NULL && sf_glad_glVertexAttrib2fARB != NULL) sf_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)sf_glad_glVertexAttrib2fARB;
    if (sf_glad_glVertexAttrib2f == NULL && sf_glad_glVertexAttrib2fNV != NULL) sf_glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)sf_glad_glVertexAttrib2fNV;
    if (sf_glad_glVertexAttrib2fARB == NULL && sf_glad_glVertexAttrib2f != NULL) sf_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)sf_glad_glVertexAttrib2f;
    if (sf_glad_glVertexAttrib2fARB == NULL && sf_glad_glVertexAttrib2fNV != NULL) sf_glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)sf_glad_glVertexAttrib2fNV;
    if (sf_glad_glVertexAttrib2fNV == NULL && sf_glad_glVertexAttrib2f != NULL) sf_glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)sf_glad_glVertexAttrib2f;
    if (sf_glad_glVertexAttrib2fNV == NULL && sf_glad_glVertexAttrib2fARB != NULL) sf_glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)sf_glad_glVertexAttrib2fARB;
    if (sf_glad_glVertexAttrib2fv == NULL && sf_glad_glVertexAttrib2fvARB != NULL) sf_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)sf_glad_glVertexAttrib2fvARB;
    if (sf_glad_glVertexAttrib2fv == NULL && sf_glad_glVertexAttrib2fvNV != NULL) sf_glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)sf_glad_glVertexAttrib2fvNV;
    if (sf_glad_glVertexAttrib2fvARB == NULL && sf_glad_glVertexAttrib2fv != NULL) sf_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)sf_glad_glVertexAttrib2fv;
    if (sf_glad_glVertexAttrib2fvARB == NULL && sf_glad_glVertexAttrib2fvNV != NULL) sf_glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)sf_glad_glVertexAttrib2fvNV;
    if (sf_glad_glVertexAttrib2fvNV == NULL && sf_glad_glVertexAttrib2fv != NULL) sf_glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)sf_glad_glVertexAttrib2fv;
    if (sf_glad_glVertexAttrib2fvNV == NULL && sf_glad_glVertexAttrib2fvARB != NULL) sf_glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)sf_glad_glVertexAttrib2fvARB;
    if (sf_glad_glVertexAttrib2s == NULL && sf_glad_glVertexAttrib2sARB != NULL) sf_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)sf_glad_glVertexAttrib2sARB;
    if (sf_glad_glVertexAttrib2s == NULL && sf_glad_glVertexAttrib2sNV != NULL) sf_glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)sf_glad_glVertexAttrib2sNV;
    if (sf_glad_glVertexAttrib2sARB == NULL && sf_glad_glVertexAttrib2s != NULL) sf_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)sf_glad_glVertexAttrib2s;
    if (sf_glad_glVertexAttrib2sARB == NULL && sf_glad_glVertexAttrib2sNV != NULL) sf_glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)sf_glad_glVertexAttrib2sNV;
    if (sf_glad_glVertexAttrib2sNV == NULL && sf_glad_glVertexAttrib2s != NULL) sf_glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)sf_glad_glVertexAttrib2s;
    if (sf_glad_glVertexAttrib2sNV == NULL && sf_glad_glVertexAttrib2sARB != NULL) sf_glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)sf_glad_glVertexAttrib2sARB;
    if (sf_glad_glVertexAttrib2sv == NULL && sf_glad_glVertexAttrib2svARB != NULL) sf_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)sf_glad_glVertexAttrib2svARB;
    if (sf_glad_glVertexAttrib2sv == NULL && sf_glad_glVertexAttrib2svNV != NULL) sf_glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)sf_glad_glVertexAttrib2svNV;
    if (sf_glad_glVertexAttrib2svARB == NULL && sf_glad_glVertexAttrib2sv != NULL) sf_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)sf_glad_glVertexAttrib2sv;
    if (sf_glad_glVertexAttrib2svARB == NULL && sf_glad_glVertexAttrib2svNV != NULL) sf_glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)sf_glad_glVertexAttrib2svNV;
    if (sf_glad_glVertexAttrib2svNV == NULL && sf_glad_glVertexAttrib2sv != NULL) sf_glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)sf_glad_glVertexAttrib2sv;
    if (sf_glad_glVertexAttrib2svNV == NULL && sf_glad_glVertexAttrib2svARB != NULL) sf_glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)sf_glad_glVertexAttrib2svARB;
    if (sf_glad_glVertexAttrib3d == NULL && sf_glad_glVertexAttrib3dARB != NULL) sf_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)sf_glad_glVertexAttrib3dARB;
    if (sf_glad_glVertexAttrib3d == NULL && sf_glad_glVertexAttrib3dNV != NULL) sf_glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)sf_glad_glVertexAttrib3dNV;
    if (sf_glad_glVertexAttrib3dARB == NULL && sf_glad_glVertexAttrib3d != NULL) sf_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)sf_glad_glVertexAttrib3d;
    if (sf_glad_glVertexAttrib3dARB == NULL && sf_glad_glVertexAttrib3dNV != NULL) sf_glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)sf_glad_glVertexAttrib3dNV;
    if (sf_glad_glVertexAttrib3dNV == NULL && sf_glad_glVertexAttrib3d != NULL) sf_glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)sf_glad_glVertexAttrib3d;
    if (sf_glad_glVertexAttrib3dNV == NULL && sf_glad_glVertexAttrib3dARB != NULL) sf_glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)sf_glad_glVertexAttrib3dARB;
    if (sf_glad_glVertexAttrib3dv == NULL && sf_glad_glVertexAttrib3dvARB != NULL) sf_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)sf_glad_glVertexAttrib3dvARB;
    if (sf_glad_glVertexAttrib3dv == NULL && sf_glad_glVertexAttrib3dvNV != NULL) sf_glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)sf_glad_glVertexAttrib3dvNV;
    if (sf_glad_glVertexAttrib3dvARB == NULL && sf_glad_glVertexAttrib3dv != NULL) sf_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)sf_glad_glVertexAttrib3dv;
    if (sf_glad_glVertexAttrib3dvARB == NULL && sf_glad_glVertexAttrib3dvNV != NULL) sf_glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)sf_glad_glVertexAttrib3dvNV;
    if (sf_glad_glVertexAttrib3dvNV == NULL && sf_glad_glVertexAttrib3dv != NULL) sf_glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)sf_glad_glVertexAttrib3dv;
    if (sf_glad_glVertexAttrib3dvNV == NULL && sf_glad_glVertexAttrib3dvARB != NULL) sf_glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)sf_glad_glVertexAttrib3dvARB;
    if (sf_glad_glVertexAttrib3f == NULL && sf_glad_glVertexAttrib3fARB != NULL) sf_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)sf_glad_glVertexAttrib3fARB;
    if (sf_glad_glVertexAttrib3f == NULL && sf_glad_glVertexAttrib3fNV != NULL) sf_glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)sf_glad_glVertexAttrib3fNV;
    if (sf_glad_glVertexAttrib3fARB == NULL && sf_glad_glVertexAttrib3f != NULL) sf_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)sf_glad_glVertexAttrib3f;
    if (sf_glad_glVertexAttrib3fARB == NULL && sf_glad_glVertexAttrib3fNV != NULL) sf_glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)sf_glad_glVertexAttrib3fNV;
    if (sf_glad_glVertexAttrib3fNV == NULL && sf_glad_glVertexAttrib3f != NULL) sf_glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)sf_glad_glVertexAttrib3f;
    if (sf_glad_glVertexAttrib3fNV == NULL && sf_glad_glVertexAttrib3fARB != NULL) sf_glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)sf_glad_glVertexAttrib3fARB;
    if (sf_glad_glVertexAttrib3fv == NULL && sf_glad_glVertexAttrib3fvARB != NULL) sf_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)sf_glad_glVertexAttrib3fvARB;
    if (sf_glad_glVertexAttrib3fv == NULL && sf_glad_glVertexAttrib3fvNV != NULL) sf_glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)sf_glad_glVertexAttrib3fvNV;
    if (sf_glad_glVertexAttrib3fvARB == NULL && sf_glad_glVertexAttrib3fv != NULL) sf_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)sf_glad_glVertexAttrib3fv;
    if (sf_glad_glVertexAttrib3fvARB == NULL && sf_glad_glVertexAttrib3fvNV != NULL) sf_glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)sf_glad_glVertexAttrib3fvNV;
    if (sf_glad_glVertexAttrib3fvNV == NULL && sf_glad_glVertexAttrib3fv != NULL) sf_glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)sf_glad_glVertexAttrib3fv;
    if (sf_glad_glVertexAttrib3fvNV == NULL && sf_glad_glVertexAttrib3fvARB != NULL) sf_glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)sf_glad_glVertexAttrib3fvARB;
    if (sf_glad_glVertexAttrib3s == NULL && sf_glad_glVertexAttrib3sARB != NULL) sf_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)sf_glad_glVertexAttrib3sARB;
    if (sf_glad_glVertexAttrib3s == NULL && sf_glad_glVertexAttrib3sNV != NULL) sf_glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)sf_glad_glVertexAttrib3sNV;
    if (sf_glad_glVertexAttrib3sARB == NULL && sf_glad_glVertexAttrib3s != NULL) sf_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)sf_glad_glVertexAttrib3s;
    if (sf_glad_glVertexAttrib3sARB == NULL && sf_glad_glVertexAttrib3sNV != NULL) sf_glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)sf_glad_glVertexAttrib3sNV;
    if (sf_glad_glVertexAttrib3sNV == NULL && sf_glad_glVertexAttrib3s != NULL) sf_glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)sf_glad_glVertexAttrib3s;
    if (sf_glad_glVertexAttrib3sNV == NULL && sf_glad_glVertexAttrib3sARB != NULL) sf_glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)sf_glad_glVertexAttrib3sARB;
    if (sf_glad_glVertexAttrib3sv == NULL && sf_glad_glVertexAttrib3svARB != NULL) sf_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)sf_glad_glVertexAttrib3svARB;
    if (sf_glad_glVertexAttrib3sv == NULL && sf_glad_glVertexAttrib3svNV != NULL) sf_glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)sf_glad_glVertexAttrib3svNV;
    if (sf_glad_glVertexAttrib3svARB == NULL && sf_glad_glVertexAttrib3sv != NULL) sf_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)sf_glad_glVertexAttrib3sv;
    if (sf_glad_glVertexAttrib3svARB == NULL && sf_glad_glVertexAttrib3svNV != NULL) sf_glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)sf_glad_glVertexAttrib3svNV;
    if (sf_glad_glVertexAttrib3svNV == NULL && sf_glad_glVertexAttrib3sv != NULL) sf_glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)sf_glad_glVertexAttrib3sv;
    if (sf_glad_glVertexAttrib3svNV == NULL && sf_glad_glVertexAttrib3svARB != NULL) sf_glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)sf_glad_glVertexAttrib3svARB;
    if (sf_glad_glVertexAttrib4bv == NULL && sf_glad_glVertexAttrib4bvARB != NULL) sf_glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)sf_glad_glVertexAttrib4bvARB;
    if (sf_glad_glVertexAttrib4bvARB == NULL && sf_glad_glVertexAttrib4bv != NULL) sf_glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)sf_glad_glVertexAttrib4bv;
    if (sf_glad_glVertexAttrib4d == NULL && sf_glad_glVertexAttrib4dARB != NULL) sf_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)sf_glad_glVertexAttrib4dARB;
    if (sf_glad_glVertexAttrib4d == NULL && sf_glad_glVertexAttrib4dNV != NULL) sf_glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)sf_glad_glVertexAttrib4dNV;
    if (sf_glad_glVertexAttrib4dARB == NULL && sf_glad_glVertexAttrib4d != NULL) sf_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)sf_glad_glVertexAttrib4d;
    if (sf_glad_glVertexAttrib4dARB == NULL && sf_glad_glVertexAttrib4dNV != NULL) sf_glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)sf_glad_glVertexAttrib4dNV;
    if (sf_glad_glVertexAttrib4dNV == NULL && sf_glad_glVertexAttrib4d != NULL) sf_glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)sf_glad_glVertexAttrib4d;
    if (sf_glad_glVertexAttrib4dNV == NULL && sf_glad_glVertexAttrib4dARB != NULL) sf_glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)sf_glad_glVertexAttrib4dARB;
    if (sf_glad_glVertexAttrib4dv == NULL && sf_glad_glVertexAttrib4dvARB != NULL) sf_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)sf_glad_glVertexAttrib4dvARB;
    if (sf_glad_glVertexAttrib4dv == NULL && sf_glad_glVertexAttrib4dvNV != NULL) sf_glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)sf_glad_glVertexAttrib4dvNV;
    if (sf_glad_glVertexAttrib4dvARB == NULL && sf_glad_glVertexAttrib4dv != NULL) sf_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)sf_glad_glVertexAttrib4dv;
    if (sf_glad_glVertexAttrib4dvARB == NULL && sf_glad_glVertexAttrib4dvNV != NULL) sf_glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)sf_glad_glVertexAttrib4dvNV;
    if (sf_glad_glVertexAttrib4dvNV == NULL && sf_glad_glVertexAttrib4dv != NULL) sf_glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)sf_glad_glVertexAttrib4dv;
    if (sf_glad_glVertexAttrib4dvNV == NULL && sf_glad_glVertexAttrib4dvARB != NULL) sf_glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)sf_glad_glVertexAttrib4dvARB;
    if (sf_glad_glVertexAttrib4f == NULL && sf_glad_glVertexAttrib4fARB != NULL) sf_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)sf_glad_glVertexAttrib4fARB;
    if (sf_glad_glVertexAttrib4f == NULL && sf_glad_glVertexAttrib4fNV != NULL) sf_glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)sf_glad_glVertexAttrib4fNV;
    if (sf_glad_glVertexAttrib4fARB == NULL && sf_glad_glVertexAttrib4f != NULL) sf_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)sf_glad_glVertexAttrib4f;
    if (sf_glad_glVertexAttrib4fARB == NULL && sf_glad_glVertexAttrib4fNV != NULL) sf_glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)sf_glad_glVertexAttrib4fNV;
    if (sf_glad_glVertexAttrib4fNV == NULL && sf_glad_glVertexAttrib4f != NULL) sf_glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)sf_glad_glVertexAttrib4f;
    if (sf_glad_glVertexAttrib4fNV == NULL && sf_glad_glVertexAttrib4fARB != NULL) sf_glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)sf_glad_glVertexAttrib4fARB;
    if (sf_glad_glVertexAttrib4fv == NULL && sf_glad_glVertexAttrib4fvARB != NULL) sf_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)sf_glad_glVertexAttrib4fvARB;
    if (sf_glad_glVertexAttrib4fv == NULL && sf_glad_glVertexAttrib4fvNV != NULL) sf_glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)sf_glad_glVertexAttrib4fvNV;
    if (sf_glad_glVertexAttrib4fvARB == NULL && sf_glad_glVertexAttrib4fv != NULL) sf_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)sf_glad_glVertexAttrib4fv;
    if (sf_glad_glVertexAttrib4fvARB == NULL && sf_glad_glVertexAttrib4fvNV != NULL) sf_glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)sf_glad_glVertexAttrib4fvNV;
    if (sf_glad_glVertexAttrib4fvNV == NULL && sf_glad_glVertexAttrib4fv != NULL) sf_glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)sf_glad_glVertexAttrib4fv;
    if (sf_glad_glVertexAttrib4fvNV == NULL && sf_glad_glVertexAttrib4fvARB != NULL) sf_glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)sf_glad_glVertexAttrib4fvARB;
    if (sf_glad_glVertexAttrib4iv == NULL && sf_glad_glVertexAttrib4ivARB != NULL) sf_glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)sf_glad_glVertexAttrib4ivARB;
    if (sf_glad_glVertexAttrib4ivARB == NULL && sf_glad_glVertexAttrib4iv != NULL) sf_glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)sf_glad_glVertexAttrib4iv;
    if (sf_glad_glVertexAttrib4Nbv == NULL && sf_glad_glVertexAttrib4NbvARB != NULL) sf_glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)sf_glad_glVertexAttrib4NbvARB;
    if (sf_glad_glVertexAttrib4NbvARB == NULL && sf_glad_glVertexAttrib4Nbv != NULL) sf_glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)sf_glad_glVertexAttrib4Nbv;
    if (sf_glad_glVertexAttrib4Niv == NULL && sf_glad_glVertexAttrib4NivARB != NULL) sf_glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)sf_glad_glVertexAttrib4NivARB;
    if (sf_glad_glVertexAttrib4NivARB == NULL && sf_glad_glVertexAttrib4Niv != NULL) sf_glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)sf_glad_glVertexAttrib4Niv;
    if (sf_glad_glVertexAttrib4Nsv == NULL && sf_glad_glVertexAttrib4NsvARB != NULL) sf_glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)sf_glad_glVertexAttrib4NsvARB;
    if (sf_glad_glVertexAttrib4NsvARB == NULL && sf_glad_glVertexAttrib4Nsv != NULL) sf_glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)sf_glad_glVertexAttrib4Nsv;
    if (sf_glad_glVertexAttrib4Nub == NULL && sf_glad_glVertexAttrib4NubARB != NULL) sf_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)sf_glad_glVertexAttrib4NubARB;
    if (sf_glad_glVertexAttrib4Nub == NULL && sf_glad_glVertexAttrib4ubNV != NULL) sf_glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)sf_glad_glVertexAttrib4ubNV;
    if (sf_glad_glVertexAttrib4NubARB == NULL && sf_glad_glVertexAttrib4Nub != NULL) sf_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)sf_glad_glVertexAttrib4Nub;
    if (sf_glad_glVertexAttrib4NubARB == NULL && sf_glad_glVertexAttrib4ubNV != NULL) sf_glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)sf_glad_glVertexAttrib4ubNV;
    if (sf_glad_glVertexAttrib4Nubv == NULL && sf_glad_glVertexAttrib4NubvARB != NULL) sf_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)sf_glad_glVertexAttrib4NubvARB;
    if (sf_glad_glVertexAttrib4Nubv == NULL && sf_glad_glVertexAttrib4ubvNV != NULL) sf_glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)sf_glad_glVertexAttrib4ubvNV;
    if (sf_glad_glVertexAttrib4NubvARB == NULL && sf_glad_glVertexAttrib4Nubv != NULL) sf_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)sf_glad_glVertexAttrib4Nubv;
    if (sf_glad_glVertexAttrib4NubvARB == NULL && sf_glad_glVertexAttrib4ubvNV != NULL) sf_glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)sf_glad_glVertexAttrib4ubvNV;
    if (sf_glad_glVertexAttrib4Nuiv == NULL && sf_glad_glVertexAttrib4NuivARB != NULL) sf_glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)sf_glad_glVertexAttrib4NuivARB;
    if (sf_glad_glVertexAttrib4NuivARB == NULL && sf_glad_glVertexAttrib4Nuiv != NULL) sf_glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)sf_glad_glVertexAttrib4Nuiv;
    if (sf_glad_glVertexAttrib4Nusv == NULL && sf_glad_glVertexAttrib4NusvARB != NULL) sf_glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)sf_glad_glVertexAttrib4NusvARB;
    if (sf_glad_glVertexAttrib4NusvARB == NULL && sf_glad_glVertexAttrib4Nusv != NULL) sf_glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)sf_glad_glVertexAttrib4Nusv;
    if (sf_glad_glVertexAttrib4s == NULL && sf_glad_glVertexAttrib4sARB != NULL) sf_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)sf_glad_glVertexAttrib4sARB;
    if (sf_glad_glVertexAttrib4s == NULL && sf_glad_glVertexAttrib4sNV != NULL) sf_glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)sf_glad_glVertexAttrib4sNV;
    if (sf_glad_glVertexAttrib4sARB == NULL && sf_glad_glVertexAttrib4s != NULL) sf_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)sf_glad_glVertexAttrib4s;
    if (sf_glad_glVertexAttrib4sARB == NULL && sf_glad_glVertexAttrib4sNV != NULL) sf_glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)sf_glad_glVertexAttrib4sNV;
    if (sf_glad_glVertexAttrib4sNV == NULL && sf_glad_glVertexAttrib4s != NULL) sf_glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)sf_glad_glVertexAttrib4s;
    if (sf_glad_glVertexAttrib4sNV == NULL && sf_glad_glVertexAttrib4sARB != NULL) sf_glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)sf_glad_glVertexAttrib4sARB;
    if (sf_glad_glVertexAttrib4sv == NULL && sf_glad_glVertexAttrib4svARB != NULL) sf_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)sf_glad_glVertexAttrib4svARB;
    if (sf_glad_glVertexAttrib4sv == NULL && sf_glad_glVertexAttrib4svNV != NULL) sf_glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)sf_glad_glVertexAttrib4svNV;
    if (sf_glad_glVertexAttrib4svARB == NULL && sf_glad_glVertexAttrib4sv != NULL) sf_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)sf_glad_glVertexAttrib4sv;
    if (sf_glad_glVertexAttrib4svARB == NULL && sf_glad_glVertexAttrib4svNV != NULL) sf_glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)sf_glad_glVertexAttrib4svNV;
    if (sf_glad_glVertexAttrib4svNV == NULL && sf_glad_glVertexAttrib4sv != NULL) sf_glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)sf_glad_glVertexAttrib4sv;
    if (sf_glad_glVertexAttrib4svNV == NULL && sf_glad_glVertexAttrib4svARB != NULL) sf_glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)sf_glad_glVertexAttrib4svARB;
    if (sf_glad_glVertexAttrib4ubNV == NULL && sf_glad_glVertexAttrib4Nub != NULL) sf_glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)sf_glad_glVertexAttrib4Nub;
    if (sf_glad_glVertexAttrib4ubNV == NULL && sf_glad_glVertexAttrib4NubARB != NULL) sf_glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)sf_glad_glVertexAttrib4NubARB;
    if (sf_glad_glVertexAttrib4ubv == NULL && sf_glad_glVertexAttrib4ubvARB != NULL) sf_glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)sf_glad_glVertexAttrib4ubvARB;
    if (sf_glad_glVertexAttrib4ubvARB == NULL && sf_glad_glVertexAttrib4ubv != NULL) sf_glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)sf_glad_glVertexAttrib4ubv;
    if (sf_glad_glVertexAttrib4ubvNV == NULL && sf_glad_glVertexAttrib4Nubv != NULL) sf_glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)sf_glad_glVertexAttrib4Nubv;
    if (sf_glad_glVertexAttrib4ubvNV == NULL && sf_glad_glVertexAttrib4NubvARB != NULL) sf_glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)sf_glad_glVertexAttrib4NubvARB;
    if (sf_glad_glVertexAttrib4uiv == NULL && sf_glad_glVertexAttrib4uivARB != NULL) sf_glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)sf_glad_glVertexAttrib4uivARB;
    if (sf_glad_glVertexAttrib4uivARB == NULL && sf_glad_glVertexAttrib4uiv != NULL) sf_glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)sf_glad_glVertexAttrib4uiv;
    if (sf_glad_glVertexAttrib4usv == NULL && sf_glad_glVertexAttrib4usvARB != NULL) sf_glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)sf_glad_glVertexAttrib4usvARB;
    if (sf_glad_glVertexAttrib4usvARB == NULL && sf_glad_glVertexAttrib4usv != NULL) sf_glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)sf_glad_glVertexAttrib4usv;
    if (sf_glad_glVertexAttribDivisor == NULL && sf_glad_glVertexAttribDivisorARB != NULL) sf_glad_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)sf_glad_glVertexAttribDivisorARB;
    if (sf_glad_glVertexAttribDivisorARB == NULL && sf_glad_glVertexAttribDivisor != NULL) sf_glad_glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC)sf_glad_glVertexAttribDivisor;
    if (sf_glad_glVertexAttribI1i == NULL && sf_glad_glVertexAttribI1iEXT != NULL) sf_glad_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)sf_glad_glVertexAttribI1iEXT;
    if (sf_glad_glVertexAttribI1iEXT == NULL && sf_glad_glVertexAttribI1i != NULL) sf_glad_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)sf_glad_glVertexAttribI1i;
    if (sf_glad_glVertexAttribI1iv == NULL && sf_glad_glVertexAttribI1ivEXT != NULL) sf_glad_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)sf_glad_glVertexAttribI1ivEXT;
    if (sf_glad_glVertexAttribI1ivEXT == NULL && sf_glad_glVertexAttribI1iv != NULL) sf_glad_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)sf_glad_glVertexAttribI1iv;
    if (sf_glad_glVertexAttribI1ui == NULL && sf_glad_glVertexAttribI1uiEXT != NULL) sf_glad_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)sf_glad_glVertexAttribI1uiEXT;
    if (sf_glad_glVertexAttribI1uiEXT == NULL && sf_glad_glVertexAttribI1ui != NULL) sf_glad_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)sf_glad_glVertexAttribI1ui;
    if (sf_glad_glVertexAttribI1uiv == NULL && sf_glad_glVertexAttribI1uivEXT != NULL) sf_glad_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)sf_glad_glVertexAttribI1uivEXT;
    if (sf_glad_glVertexAttribI1uivEXT == NULL && sf_glad_glVertexAttribI1uiv != NULL) sf_glad_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)sf_glad_glVertexAttribI1uiv;
    if (sf_glad_glVertexAttribI2i == NULL && sf_glad_glVertexAttribI2iEXT != NULL) sf_glad_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)sf_glad_glVertexAttribI2iEXT;
    if (sf_glad_glVertexAttribI2iEXT == NULL && sf_glad_glVertexAttribI2i != NULL) sf_glad_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)sf_glad_glVertexAttribI2i;
    if (sf_glad_glVertexAttribI2iv == NULL && sf_glad_glVertexAttribI2ivEXT != NULL) sf_glad_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)sf_glad_glVertexAttribI2ivEXT;
    if (sf_glad_glVertexAttribI2ivEXT == NULL && sf_glad_glVertexAttribI2iv != NULL) sf_glad_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)sf_glad_glVertexAttribI2iv;
    if (sf_glad_glVertexAttribI2ui == NULL && sf_glad_glVertexAttribI2uiEXT != NULL) sf_glad_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)sf_glad_glVertexAttribI2uiEXT;
    if (sf_glad_glVertexAttribI2uiEXT == NULL && sf_glad_glVertexAttribI2ui != NULL) sf_glad_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)sf_glad_glVertexAttribI2ui;
    if (sf_glad_glVertexAttribI2uiv == NULL && sf_glad_glVertexAttribI2uivEXT != NULL) sf_glad_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)sf_glad_glVertexAttribI2uivEXT;
    if (sf_glad_glVertexAttribI2uivEXT == NULL && sf_glad_glVertexAttribI2uiv != NULL) sf_glad_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)sf_glad_glVertexAttribI2uiv;
    if (sf_glad_glVertexAttribI3i == NULL && sf_glad_glVertexAttribI3iEXT != NULL) sf_glad_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)sf_glad_glVertexAttribI3iEXT;
    if (sf_glad_glVertexAttribI3iEXT == NULL && sf_glad_glVertexAttribI3i != NULL) sf_glad_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)sf_glad_glVertexAttribI3i;
    if (sf_glad_glVertexAttribI3iv == NULL && sf_glad_glVertexAttribI3ivEXT != NULL) sf_glad_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)sf_glad_glVertexAttribI3ivEXT;
    if (sf_glad_glVertexAttribI3ivEXT == NULL && sf_glad_glVertexAttribI3iv != NULL) sf_glad_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)sf_glad_glVertexAttribI3iv;
    if (sf_glad_glVertexAttribI3ui == NULL && sf_glad_glVertexAttribI3uiEXT != NULL) sf_glad_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)sf_glad_glVertexAttribI3uiEXT;
    if (sf_glad_glVertexAttribI3uiEXT == NULL && sf_glad_glVertexAttribI3ui != NULL) sf_glad_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)sf_glad_glVertexAttribI3ui;
    if (sf_glad_glVertexAttribI3uiv == NULL && sf_glad_glVertexAttribI3uivEXT != NULL) sf_glad_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)sf_glad_glVertexAttribI3uivEXT;
    if (sf_glad_glVertexAttribI3uivEXT == NULL && sf_glad_glVertexAttribI3uiv != NULL) sf_glad_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)sf_glad_glVertexAttribI3uiv;
    if (sf_glad_glVertexAttribI4bv == NULL && sf_glad_glVertexAttribI4bvEXT != NULL) sf_glad_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)sf_glad_glVertexAttribI4bvEXT;
    if (sf_glad_glVertexAttribI4bvEXT == NULL && sf_glad_glVertexAttribI4bv != NULL) sf_glad_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)sf_glad_glVertexAttribI4bv;
    if (sf_glad_glVertexAttribI4i == NULL && sf_glad_glVertexAttribI4iEXT != NULL) sf_glad_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)sf_glad_glVertexAttribI4iEXT;
    if (sf_glad_glVertexAttribI4iEXT == NULL && sf_glad_glVertexAttribI4i != NULL) sf_glad_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)sf_glad_glVertexAttribI4i;
    if (sf_glad_glVertexAttribI4iv == NULL && sf_glad_glVertexAttribI4ivEXT != NULL) sf_glad_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)sf_glad_glVertexAttribI4ivEXT;
    if (sf_glad_glVertexAttribI4ivEXT == NULL && sf_glad_glVertexAttribI4iv != NULL) sf_glad_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)sf_glad_glVertexAttribI4iv;
    if (sf_glad_glVertexAttribI4sv == NULL && sf_glad_glVertexAttribI4svEXT != NULL) sf_glad_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)sf_glad_glVertexAttribI4svEXT;
    if (sf_glad_glVertexAttribI4svEXT == NULL && sf_glad_glVertexAttribI4sv != NULL) sf_glad_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)sf_glad_glVertexAttribI4sv;
    if (sf_glad_glVertexAttribI4ubv == NULL && sf_glad_glVertexAttribI4ubvEXT != NULL) sf_glad_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)sf_glad_glVertexAttribI4ubvEXT;
    if (sf_glad_glVertexAttribI4ubvEXT == NULL && sf_glad_glVertexAttribI4ubv != NULL) sf_glad_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)sf_glad_glVertexAttribI4ubv;
    if (sf_glad_glVertexAttribI4ui == NULL && sf_glad_glVertexAttribI4uiEXT != NULL) sf_glad_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)sf_glad_glVertexAttribI4uiEXT;
    if (sf_glad_glVertexAttribI4uiEXT == NULL && sf_glad_glVertexAttribI4ui != NULL) sf_glad_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)sf_glad_glVertexAttribI4ui;
    if (sf_glad_glVertexAttribI4uiv == NULL && sf_glad_glVertexAttribI4uivEXT != NULL) sf_glad_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)sf_glad_glVertexAttribI4uivEXT;
    if (sf_glad_glVertexAttribI4uivEXT == NULL && sf_glad_glVertexAttribI4uiv != NULL) sf_glad_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)sf_glad_glVertexAttribI4uiv;
    if (sf_glad_glVertexAttribI4usv == NULL && sf_glad_glVertexAttribI4usvEXT != NULL) sf_glad_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)sf_glad_glVertexAttribI4usvEXT;
    if (sf_glad_glVertexAttribI4usvEXT == NULL && sf_glad_glVertexAttribI4usv != NULL) sf_glad_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)sf_glad_glVertexAttribI4usv;
    if (sf_glad_glVertexAttribIPointer == NULL && sf_glad_glVertexAttribIPointerEXT != NULL) sf_glad_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)sf_glad_glVertexAttribIPointerEXT;
    if (sf_glad_glVertexAttribIPointerEXT == NULL && sf_glad_glVertexAttribIPointer != NULL) sf_glad_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)sf_glad_glVertexAttribIPointer;
    if (sf_glad_glVertexAttribL1d == NULL && sf_glad_glVertexAttribL1dEXT != NULL) sf_glad_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)sf_glad_glVertexAttribL1dEXT;
    if (sf_glad_glVertexAttribL1dEXT == NULL && sf_glad_glVertexAttribL1d != NULL) sf_glad_glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC)sf_glad_glVertexAttribL1d;
    if (sf_glad_glVertexAttribL1dv == NULL && sf_glad_glVertexAttribL1dvEXT != NULL) sf_glad_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)sf_glad_glVertexAttribL1dvEXT;
    if (sf_glad_glVertexAttribL1dvEXT == NULL && sf_glad_glVertexAttribL1dv != NULL) sf_glad_glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC)sf_glad_glVertexAttribL1dv;
    if (sf_glad_glVertexAttribL2d == NULL && sf_glad_glVertexAttribL2dEXT != NULL) sf_glad_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)sf_glad_glVertexAttribL2dEXT;
    if (sf_glad_glVertexAttribL2dEXT == NULL && sf_glad_glVertexAttribL2d != NULL) sf_glad_glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC)sf_glad_glVertexAttribL2d;
    if (sf_glad_glVertexAttribL2dv == NULL && sf_glad_glVertexAttribL2dvEXT != NULL) sf_glad_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)sf_glad_glVertexAttribL2dvEXT;
    if (sf_glad_glVertexAttribL2dvEXT == NULL && sf_glad_glVertexAttribL2dv != NULL) sf_glad_glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC)sf_glad_glVertexAttribL2dv;
    if (sf_glad_glVertexAttribL3d == NULL && sf_glad_glVertexAttribL3dEXT != NULL) sf_glad_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)sf_glad_glVertexAttribL3dEXT;
    if (sf_glad_glVertexAttribL3dEXT == NULL && sf_glad_glVertexAttribL3d != NULL) sf_glad_glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC)sf_glad_glVertexAttribL3d;
    if (sf_glad_glVertexAttribL3dv == NULL && sf_glad_glVertexAttribL3dvEXT != NULL) sf_glad_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)sf_glad_glVertexAttribL3dvEXT;
    if (sf_glad_glVertexAttribL3dvEXT == NULL && sf_glad_glVertexAttribL3dv != NULL) sf_glad_glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC)sf_glad_glVertexAttribL3dv;
    if (sf_glad_glVertexAttribL4d == NULL && sf_glad_glVertexAttribL4dEXT != NULL) sf_glad_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)sf_glad_glVertexAttribL4dEXT;
    if (sf_glad_glVertexAttribL4dEXT == NULL && sf_glad_glVertexAttribL4d != NULL) sf_glad_glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC)sf_glad_glVertexAttribL4d;
    if (sf_glad_glVertexAttribL4dv == NULL && sf_glad_glVertexAttribL4dvEXT != NULL) sf_glad_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)sf_glad_glVertexAttribL4dvEXT;
    if (sf_glad_glVertexAttribL4dvEXT == NULL && sf_glad_glVertexAttribL4dv != NULL) sf_glad_glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC)sf_glad_glVertexAttribL4dv;
    if (sf_glad_glVertexAttribLPointer == NULL && sf_glad_glVertexAttribLPointerEXT != NULL) sf_glad_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)sf_glad_glVertexAttribLPointerEXT;
    if (sf_glad_glVertexAttribLPointerEXT == NULL && sf_glad_glVertexAttribLPointer != NULL) sf_glad_glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC)sf_glad_glVertexAttribLPointer;
    if (sf_glad_glVertexAttribPointer == NULL && sf_glad_glVertexAttribPointerARB != NULL) sf_glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)sf_glad_glVertexAttribPointerARB;
    if (sf_glad_glVertexAttribPointerARB == NULL && sf_glad_glVertexAttribPointer != NULL) sf_glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)sf_glad_glVertexAttribPointer;
    if (sf_glad_glWaitSync == NULL && sf_glad_glWaitSyncAPPLE != NULL) sf_glad_glWaitSync = (PFNGLWAITSYNCPROC)sf_glad_glWaitSyncAPPLE;
    if (sf_glad_glWaitSyncAPPLE == NULL && sf_glad_glWaitSync != NULL) sf_glad_glWaitSyncAPPLE = (PFNGLWAITSYNCAPPLEPROC)sf_glad_glWaitSync;
    if (sf_glad_glWindowPos2d == NULL && sf_glad_glWindowPos2dARB != NULL) sf_glad_glWindowPos2d = (PFNGLWINDOWPOS2DPROC)sf_glad_glWindowPos2dARB;
    if (sf_glad_glWindowPos2d == NULL && sf_glad_glWindowPos2dMESA != NULL) sf_glad_glWindowPos2d = (PFNGLWINDOWPOS2DPROC)sf_glad_glWindowPos2dMESA;
    if (sf_glad_glWindowPos2dARB == NULL && sf_glad_glWindowPos2d != NULL) sf_glad_glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC)sf_glad_glWindowPos2d;
    if (sf_glad_glWindowPos2dARB == NULL && sf_glad_glWindowPos2dMESA != NULL) sf_glad_glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC)sf_glad_glWindowPos2dMESA;
    if (sf_glad_glWindowPos2dMESA == NULL && sf_glad_glWindowPos2d != NULL) sf_glad_glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC)sf_glad_glWindowPos2d;
    if (sf_glad_glWindowPos2dMESA == NULL && sf_glad_glWindowPos2dARB != NULL) sf_glad_glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC)sf_glad_glWindowPos2dARB;
    if (sf_glad_glWindowPos2dv == NULL && sf_glad_glWindowPos2dvARB != NULL) sf_glad_glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)sf_glad_glWindowPos2dvARB;
    if (sf_glad_glWindowPos2dv == NULL && sf_glad_glWindowPos2dvMESA != NULL) sf_glad_glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)sf_glad_glWindowPos2dvMESA;
    if (sf_glad_glWindowPos2dvARB == NULL && sf_glad_glWindowPos2dv != NULL) sf_glad_glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC)sf_glad_glWindowPos2dv;
    if (sf_glad_glWindowPos2dvARB == NULL && sf_glad_glWindowPos2dvMESA != NULL) sf_glad_glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC)sf_glad_glWindowPos2dvMESA;
    if (sf_glad_glWindowPos2dvMESA == NULL && sf_glad_glWindowPos2dv != NULL) sf_glad_glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC)sf_glad_glWindowPos2dv;
    if (sf_glad_glWindowPos2dvMESA == NULL && sf_glad_glWindowPos2dvARB != NULL) sf_glad_glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC)sf_glad_glWindowPos2dvARB;
    if (sf_glad_glWindowPos2f == NULL && sf_glad_glWindowPos2fARB != NULL) sf_glad_glWindowPos2f = (PFNGLWINDOWPOS2FPROC)sf_glad_glWindowPos2fARB;
    if (sf_glad_glWindowPos2f == NULL && sf_glad_glWindowPos2fMESA != NULL) sf_glad_glWindowPos2f = (PFNGLWINDOWPOS2FPROC)sf_glad_glWindowPos2fMESA;
    if (sf_glad_glWindowPos2fARB == NULL && sf_glad_glWindowPos2f != NULL) sf_glad_glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC)sf_glad_glWindowPos2f;
    if (sf_glad_glWindowPos2fARB == NULL && sf_glad_glWindowPos2fMESA != NULL) sf_glad_glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC)sf_glad_glWindowPos2fMESA;
    if (sf_glad_glWindowPos2fMESA == NULL && sf_glad_glWindowPos2f != NULL) sf_glad_glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC)sf_glad_glWindowPos2f;
    if (sf_glad_glWindowPos2fMESA == NULL && sf_glad_glWindowPos2fARB != NULL) sf_glad_glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC)sf_glad_glWindowPos2fARB;
    if (sf_glad_glWindowPos2fv == NULL && sf_glad_glWindowPos2fvARB != NULL) sf_glad_glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)sf_glad_glWindowPos2fvARB;
    if (sf_glad_glWindowPos2fv == NULL && sf_glad_glWindowPos2fvMESA != NULL) sf_glad_glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)sf_glad_glWindowPos2fvMESA;
    if (sf_glad_glWindowPos2fvARB == NULL && sf_glad_glWindowPos2fv != NULL) sf_glad_glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC)sf_glad_glWindowPos2fv;
    if (sf_glad_glWindowPos2fvARB == NULL && sf_glad_glWindowPos2fvMESA != NULL) sf_glad_glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC)sf_glad_glWindowPos2fvMESA;
    if (sf_glad_glWindowPos2fvMESA == NULL && sf_glad_glWindowPos2fv != NULL) sf_glad_glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC)sf_glad_glWindowPos2fv;
    if (sf_glad_glWindowPos2fvMESA == NULL && sf_glad_glWindowPos2fvARB != NULL) sf_glad_glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC)sf_glad_glWindowPos2fvARB;
    if (sf_glad_glWindowPos2i == NULL && sf_glad_glWindowPos2iARB != NULL) sf_glad_glWindowPos2i = (PFNGLWINDOWPOS2IPROC)sf_glad_glWindowPos2iARB;
    if (sf_glad_glWindowPos2i == NULL && sf_glad_glWindowPos2iMESA != NULL) sf_glad_glWindowPos2i = (PFNGLWINDOWPOS2IPROC)sf_glad_glWindowPos2iMESA;
    if (sf_glad_glWindowPos2iARB == NULL && sf_glad_glWindowPos2i != NULL) sf_glad_glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC)sf_glad_glWindowPos2i;
    if (sf_glad_glWindowPos2iARB == NULL && sf_glad_glWindowPos2iMESA != NULL) sf_glad_glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC)sf_glad_glWindowPos2iMESA;
    if (sf_glad_glWindowPos2iMESA == NULL && sf_glad_glWindowPos2i != NULL) sf_glad_glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC)sf_glad_glWindowPos2i;
    if (sf_glad_glWindowPos2iMESA == NULL && sf_glad_glWindowPos2iARB != NULL) sf_glad_glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC)sf_glad_glWindowPos2iARB;
    if (sf_glad_glWindowPos2iv == NULL && sf_glad_glWindowPos2ivARB != NULL) sf_glad_glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)sf_glad_glWindowPos2ivARB;
    if (sf_glad_glWindowPos2iv == NULL && sf_glad_glWindowPos2ivMESA != NULL) sf_glad_glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)sf_glad_glWindowPos2ivMESA;
    if (sf_glad_glWindowPos2ivARB == NULL && sf_glad_glWindowPos2iv != NULL) sf_glad_glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC)sf_glad_glWindowPos2iv;
    if (sf_glad_glWindowPos2ivARB == NULL && sf_glad_glWindowPos2ivMESA != NULL) sf_glad_glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC)sf_glad_glWindowPos2ivMESA;
    if (sf_glad_glWindowPos2ivMESA == NULL && sf_glad_glWindowPos2iv != NULL) sf_glad_glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC)sf_glad_glWindowPos2iv;
    if (sf_glad_glWindowPos2ivMESA == NULL && sf_glad_glWindowPos2ivARB != NULL) sf_glad_glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC)sf_glad_glWindowPos2ivARB;
    if (sf_glad_glWindowPos2s == NULL && sf_glad_glWindowPos2sARB != NULL) sf_glad_glWindowPos2s = (PFNGLWINDOWPOS2SPROC)sf_glad_glWindowPos2sARB;
    if (sf_glad_glWindowPos2s == NULL && sf_glad_glWindowPos2sMESA != NULL) sf_glad_glWindowPos2s = (PFNGLWINDOWPOS2SPROC)sf_glad_glWindowPos2sMESA;
    if (sf_glad_glWindowPos2sARB == NULL && sf_glad_glWindowPos2s != NULL) sf_glad_glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC)sf_glad_glWindowPos2s;
    if (sf_glad_glWindowPos2sARB == NULL && sf_glad_glWindowPos2sMESA != NULL) sf_glad_glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC)sf_glad_glWindowPos2sMESA;
    if (sf_glad_glWindowPos2sMESA == NULL && sf_glad_glWindowPos2s != NULL) sf_glad_glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC)sf_glad_glWindowPos2s;
    if (sf_glad_glWindowPos2sMESA == NULL && sf_glad_glWindowPos2sARB != NULL) sf_glad_glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC)sf_glad_glWindowPos2sARB;
    if (sf_glad_glWindowPos2sv == NULL && sf_glad_glWindowPos2svARB != NULL) sf_glad_glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)sf_glad_glWindowPos2svARB;
    if (sf_glad_glWindowPos2sv == NULL && sf_glad_glWindowPos2svMESA != NULL) sf_glad_glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)sf_glad_glWindowPos2svMESA;
    if (sf_glad_glWindowPos2svARB == NULL && sf_glad_glWindowPos2sv != NULL) sf_glad_glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC)sf_glad_glWindowPos2sv;
    if (sf_glad_glWindowPos2svARB == NULL && sf_glad_glWindowPos2svMESA != NULL) sf_glad_glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC)sf_glad_glWindowPos2svMESA;
    if (sf_glad_glWindowPos2svMESA == NULL && sf_glad_glWindowPos2sv != NULL) sf_glad_glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC)sf_glad_glWindowPos2sv;
    if (sf_glad_glWindowPos2svMESA == NULL && sf_glad_glWindowPos2svARB != NULL) sf_glad_glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC)sf_glad_glWindowPos2svARB;
    if (sf_glad_glWindowPos3d == NULL && sf_glad_glWindowPos3dARB != NULL) sf_glad_glWindowPos3d = (PFNGLWINDOWPOS3DPROC)sf_glad_glWindowPos3dARB;
    if (sf_glad_glWindowPos3d == NULL && sf_glad_glWindowPos3dMESA != NULL) sf_glad_glWindowPos3d = (PFNGLWINDOWPOS3DPROC)sf_glad_glWindowPos3dMESA;
    if (sf_glad_glWindowPos3dARB == NULL && sf_glad_glWindowPos3d != NULL) sf_glad_glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC)sf_glad_glWindowPos3d;
    if (sf_glad_glWindowPos3dARB == NULL && sf_glad_glWindowPos3dMESA != NULL) sf_glad_glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC)sf_glad_glWindowPos3dMESA;
    if (sf_glad_glWindowPos3dMESA == NULL && sf_glad_glWindowPos3d != NULL) sf_glad_glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC)sf_glad_glWindowPos3d;
    if (sf_glad_glWindowPos3dMESA == NULL && sf_glad_glWindowPos3dARB != NULL) sf_glad_glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC)sf_glad_glWindowPos3dARB;
    if (sf_glad_glWindowPos3dv == NULL && sf_glad_glWindowPos3dvARB != NULL) sf_glad_glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)sf_glad_glWindowPos3dvARB;
    if (sf_glad_glWindowPos3dv == NULL && sf_glad_glWindowPos3dvMESA != NULL) sf_glad_glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)sf_glad_glWindowPos3dvMESA;
    if (sf_glad_glWindowPos3dvARB == NULL && sf_glad_glWindowPos3dv != NULL) sf_glad_glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC)sf_glad_glWindowPos3dv;
    if (sf_glad_glWindowPos3dvARB == NULL && sf_glad_glWindowPos3dvMESA != NULL) sf_glad_glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC)sf_glad_glWindowPos3dvMESA;
    if (sf_glad_glWindowPos3dvMESA == NULL && sf_glad_glWindowPos3dv != NULL) sf_glad_glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC)sf_glad_glWindowPos3dv;
    if (sf_glad_glWindowPos3dvMESA == NULL && sf_glad_glWindowPos3dvARB != NULL) sf_glad_glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC)sf_glad_glWindowPos3dvARB;
    if (sf_glad_glWindowPos3f == NULL && sf_glad_glWindowPos3fARB != NULL) sf_glad_glWindowPos3f = (PFNGLWINDOWPOS3FPROC)sf_glad_glWindowPos3fARB;
    if (sf_glad_glWindowPos3f == NULL && sf_glad_glWindowPos3fMESA != NULL) sf_glad_glWindowPos3f = (PFNGLWINDOWPOS3FPROC)sf_glad_glWindowPos3fMESA;
    if (sf_glad_glWindowPos3fARB == NULL && sf_glad_glWindowPos3f != NULL) sf_glad_glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC)sf_glad_glWindowPos3f;
    if (sf_glad_glWindowPos3fARB == NULL && sf_glad_glWindowPos3fMESA != NULL) sf_glad_glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC)sf_glad_glWindowPos3fMESA;
    if (sf_glad_glWindowPos3fMESA == NULL && sf_glad_glWindowPos3f != NULL) sf_glad_glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC)sf_glad_glWindowPos3f;
    if (sf_glad_glWindowPos3fMESA == NULL && sf_glad_glWindowPos3fARB != NULL) sf_glad_glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC)sf_glad_glWindowPos3fARB;
    if (sf_glad_glWindowPos3fv == NULL && sf_glad_glWindowPos3fvARB != NULL) sf_glad_glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)sf_glad_glWindowPos3fvARB;
    if (sf_glad_glWindowPos3fv == NULL && sf_glad_glWindowPos3fvMESA != NULL) sf_glad_glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)sf_glad_glWindowPos3fvMESA;
    if (sf_glad_glWindowPos3fvARB == NULL && sf_glad_glWindowPos3fv != NULL) sf_glad_glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC)sf_glad_glWindowPos3fv;
    if (sf_glad_glWindowPos3fvARB == NULL && sf_glad_glWindowPos3fvMESA != NULL) sf_glad_glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC)sf_glad_glWindowPos3fvMESA;
    if (sf_glad_glWindowPos3fvMESA == NULL && sf_glad_glWindowPos3fv != NULL) sf_glad_glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC)sf_glad_glWindowPos3fv;
    if (sf_glad_glWindowPos3fvMESA == NULL && sf_glad_glWindowPos3fvARB != NULL) sf_glad_glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC)sf_glad_glWindowPos3fvARB;
    if (sf_glad_glWindowPos3i == NULL && sf_glad_glWindowPos3iARB != NULL) sf_glad_glWindowPos3i = (PFNGLWINDOWPOS3IPROC)sf_glad_glWindowPos3iARB;
    if (sf_glad_glWindowPos3i == NULL && sf_glad_glWindowPos3iMESA != NULL) sf_glad_glWindowPos3i = (PFNGLWINDOWPOS3IPROC)sf_glad_glWindowPos3iMESA;
    if (sf_glad_glWindowPos3iARB == NULL && sf_glad_glWindowPos3i != NULL) sf_glad_glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC)sf_glad_glWindowPos3i;
    if (sf_glad_glWindowPos3iARB == NULL && sf_glad_glWindowPos3iMESA != NULL) sf_glad_glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC)sf_glad_glWindowPos3iMESA;
    if (sf_glad_glWindowPos3iMESA == NULL && sf_glad_glWindowPos3i != NULL) sf_glad_glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC)sf_glad_glWindowPos3i;
    if (sf_glad_glWindowPos3iMESA == NULL && sf_glad_glWindowPos3iARB != NULL) sf_glad_glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC)sf_glad_glWindowPos3iARB;
    if (sf_glad_glWindowPos3iv == NULL && sf_glad_glWindowPos3ivARB != NULL) sf_glad_glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)sf_glad_glWindowPos3ivARB;
    if (sf_glad_glWindowPos3iv == NULL && sf_glad_glWindowPos3ivMESA != NULL) sf_glad_glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)sf_glad_glWindowPos3ivMESA;
    if (sf_glad_glWindowPos3ivARB == NULL && sf_glad_glWindowPos3iv != NULL) sf_glad_glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC)sf_glad_glWindowPos3iv;
    if (sf_glad_glWindowPos3ivARB == NULL && sf_glad_glWindowPos3ivMESA != NULL) sf_glad_glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC)sf_glad_glWindowPos3ivMESA;
    if (sf_glad_glWindowPos3ivMESA == NULL && sf_glad_glWindowPos3iv != NULL) sf_glad_glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC)sf_glad_glWindowPos3iv;
    if (sf_glad_glWindowPos3ivMESA == NULL && sf_glad_glWindowPos3ivARB != NULL) sf_glad_glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC)sf_glad_glWindowPos3ivARB;
    if (sf_glad_glWindowPos3s == NULL && sf_glad_glWindowPos3sARB != NULL) sf_glad_glWindowPos3s = (PFNGLWINDOWPOS3SPROC)sf_glad_glWindowPos3sARB;
    if (sf_glad_glWindowPos3s == NULL && sf_glad_glWindowPos3sMESA != NULL) sf_glad_glWindowPos3s = (PFNGLWINDOWPOS3SPROC)sf_glad_glWindowPos3sMESA;
    if (sf_glad_glWindowPos3sARB == NULL && sf_glad_glWindowPos3s != NULL) sf_glad_glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC)sf_glad_glWindowPos3s;
    if (sf_glad_glWindowPos3sARB == NULL && sf_glad_glWindowPos3sMESA != NULL) sf_glad_glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC)sf_glad_glWindowPos3sMESA;
    if (sf_glad_glWindowPos3sMESA == NULL && sf_glad_glWindowPos3s != NULL) sf_glad_glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC)sf_glad_glWindowPos3s;
    if (sf_glad_glWindowPos3sMESA == NULL && sf_glad_glWindowPos3sARB != NULL) sf_glad_glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC)sf_glad_glWindowPos3sARB;
    if (sf_glad_glWindowPos3sv == NULL && sf_glad_glWindowPos3svARB != NULL) sf_glad_glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)sf_glad_glWindowPos3svARB;
    if (sf_glad_glWindowPos3sv == NULL && sf_glad_glWindowPos3svMESA != NULL) sf_glad_glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)sf_glad_glWindowPos3svMESA;
    if (sf_glad_glWindowPos3svARB == NULL && sf_glad_glWindowPos3sv != NULL) sf_glad_glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC)sf_glad_glWindowPos3sv;
    if (sf_glad_glWindowPos3svARB == NULL && sf_glad_glWindowPos3svMESA != NULL) sf_glad_glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC)sf_glad_glWindowPos3svMESA;
    if (sf_glad_glWindowPos3svMESA == NULL && sf_glad_glWindowPos3sv != NULL) sf_glad_glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC)sf_glad_glWindowPos3sv;
    if (sf_glad_glWindowPos3svMESA == NULL && sf_glad_glWindowPos3svARB != NULL) sf_glad_glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC)sf_glad_glWindowPos3svARB;
}

static void sf_glad_gl_free_extensions(char **exts_i) {
    if (exts_i != NULL) {
        unsigned int index;
        for(index = 0; exts_i[index]; index++) {
            free((void *) (exts_i[index]));
        }
        free((void *)exts_i);
        exts_i = NULL;
    }
}
static int sf_glad_gl_get_extensions( const char **out_exts, char ***out_exts_i) {
#if defined(GL_ES_VERSION_3_0) || defined(GL_VERSION_3_0)
    if (sf_glad_glGetStringi != NULL && sf_glad_glGetIntegerv != NULL) {
        unsigned int index = 0;
        unsigned int num_exts_i = 0;
        char **exts_i = NULL;
        sf_glad_glGetIntegerv(GL_NUM_EXTENSIONS, (int*) &num_exts_i);
        exts_i = (char **) malloc((num_exts_i + 1) * (sizeof *exts_i));
        if (exts_i == NULL) {
            return 0;
        }
        for(index = 0; index < num_exts_i; index++) {
            const char *gl_str_tmp = (const char*) sf_glad_glGetStringi(GL_EXTENSIONS, index);
            size_t len = strlen(gl_str_tmp) + 1;

            char *local_str = (char*) malloc(len * sizeof(char));
            if(local_str == NULL) {
                exts_i[index] = NULL;
                sf_glad_gl_free_extensions(exts_i);
                return 0;
            }

            memcpy(local_str, gl_str_tmp, len * sizeof(char));
            exts_i[index] = local_str;
        }
        exts_i[index] = NULL;

        *out_exts_i = exts_i;

        return 1;
    }
#else
    GLAD_UNUSED(out_exts_i);
#endif
    if (sf_glad_glGetString == NULL) {
        return 0;
    }
    *out_exts = (const char *)sf_glad_glGetString(GL_EXTENSIONS);
    return 1;
}
static int sf_glad_gl_has_extension(const char *exts, char **exts_i, const char *ext) {
    if(exts_i) {
        unsigned int index;
        for(index = 0; exts_i[index]; index++) {
            const char *e = exts_i[index];
            if(strcmp(e, ext) == 0) {
                return 1;
            }
        }
    } else {
        const char *extensions;
        const char *loc;
        const char *terminator;
        extensions = exts;
        if(extensions == NULL || ext == NULL) {
            return 0;
        }
        while(1) {
            loc = strstr(extensions, ext);
            if(loc == NULL) {
                return 0;
            }
            terminator = loc + strlen(ext);
            if((loc == extensions || *(loc - 1) == ' ') &&
                (*terminator == ' ' || *terminator == '\0')) {
                return 1;
            }
            extensions = terminator;
        }
    }
    return 0;
}

static GLADapiproc sf_glad_gl_get_proc_from_userptr(void *userptr, const char* name) {
    return (GLAD_GNUC_EXTENSION (GLADapiproc (*)(const char *name)) userptr)(name);
}

static int sf_glad_gl_find_extensions_gl(void) {
    const char *exts = NULL;
    char **exts_i = NULL;
    if (!sf_glad_gl_get_extensions(&exts, &exts_i)) return 0;

    SF_GLAD_GL_3DFX_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_3DFX_multisample");
    SF_GLAD_GL_3DFX_tbuffer = sf_glad_gl_has_extension(exts, exts_i, "GL_3DFX_tbuffer");
    SF_GLAD_GL_3DFX_texture_compression_FXT1 = sf_glad_gl_has_extension(exts, exts_i, "GL_3DFX_texture_compression_FXT1");
    SF_GLAD_GL_AMD_blend_minmax_factor = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_blend_minmax_factor");
    SF_GLAD_GL_AMD_conservative_depth = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_conservative_depth");
    SF_GLAD_GL_AMD_debug_output = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_debug_output");
    SF_GLAD_GL_AMD_depth_clamp_separate = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_depth_clamp_separate");
    SF_GLAD_GL_AMD_draw_buffers_blend = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_draw_buffers_blend");
    SF_GLAD_GL_AMD_framebuffer_multisample_advanced = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_framebuffer_multisample_advanced");
    SF_GLAD_GL_AMD_framebuffer_sample_positions = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_framebuffer_sample_positions");
    SF_GLAD_GL_AMD_gcn_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_gcn_shader");
    SF_GLAD_GL_AMD_gpu_shader_half_float = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_gpu_shader_half_float");
    SF_GLAD_GL_AMD_gpu_shader_int16 = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_gpu_shader_int16");
    SF_GLAD_GL_AMD_gpu_shader_int64 = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_gpu_shader_int64");
    SF_GLAD_GL_AMD_interleaved_elements = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_interleaved_elements");
    SF_GLAD_GL_AMD_multi_draw_indirect = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_multi_draw_indirect");
    SF_GLAD_GL_AMD_name_gen_delete = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_name_gen_delete");
    SF_GLAD_GL_AMD_occlusion_query_event = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_occlusion_query_event");
    SF_GLAD_GL_AMD_performance_monitor = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_performance_monitor");
    SF_GLAD_GL_AMD_pinned_memory = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_pinned_memory");
    SF_GLAD_GL_AMD_query_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_query_buffer_object");
    SF_GLAD_GL_AMD_sample_positions = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_sample_positions");
    SF_GLAD_GL_AMD_seamless_cubemap_per_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_seamless_cubemap_per_texture");
    SF_GLAD_GL_AMD_shader_atomic_counter_ops = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_shader_atomic_counter_ops");
    SF_GLAD_GL_AMD_shader_ballot = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_shader_ballot");
    SF_GLAD_GL_AMD_shader_explicit_vertex_parameter = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_shader_explicit_vertex_parameter");
    SF_GLAD_GL_AMD_shader_gpu_shader_half_float_fetch = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_shader_gpu_shader_half_float_fetch");
    SF_GLAD_GL_AMD_shader_image_load_store_lod = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_shader_image_load_store_lod");
    SF_GLAD_GL_AMD_shader_stencil_export = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_shader_stencil_export");
    SF_GLAD_GL_AMD_shader_trinary_minmax = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_shader_trinary_minmax");
    SF_GLAD_GL_AMD_sparse_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_sparse_texture");
    SF_GLAD_GL_AMD_stencil_operation_extended = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_stencil_operation_extended");
    SF_GLAD_GL_AMD_texture_gather_bias_lod = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_texture_gather_bias_lod");
    SF_GLAD_GL_AMD_texture_texture4 = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_texture_texture4");
    SF_GLAD_GL_AMD_transform_feedback3_lines_triangles = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_transform_feedback3_lines_triangles");
    SF_GLAD_GL_AMD_transform_feedback4 = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_transform_feedback4");
    SF_GLAD_GL_AMD_vertex_shader_layer = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_vertex_shader_layer");
    SF_GLAD_GL_AMD_vertex_shader_tessellator = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_vertex_shader_tessellator");
    SF_GLAD_GL_AMD_vertex_shader_viewport_index = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_vertex_shader_viewport_index");
    SF_GLAD_GL_APPLE_aux_depth_stencil = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_aux_depth_stencil");
    SF_GLAD_GL_APPLE_client_storage = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_client_storage");
    SF_GLAD_GL_APPLE_element_array = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_element_array");
    SF_GLAD_GL_APPLE_fence = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_fence");
    SF_GLAD_GL_APPLE_float_pixels = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_float_pixels");
    SF_GLAD_GL_APPLE_flush_buffer_range = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_flush_buffer_range");
    SF_GLAD_GL_APPLE_object_purgeable = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_object_purgeable");
    SF_GLAD_GL_APPLE_rgb_422 = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_rgb_422");
    SF_GLAD_GL_APPLE_row_bytes = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_row_bytes");
    SF_GLAD_GL_APPLE_specular_vector = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_specular_vector");
    SF_GLAD_GL_APPLE_texture_range = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_texture_range");
    SF_GLAD_GL_APPLE_transform_hint = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_transform_hint");
    SF_GLAD_GL_APPLE_vertex_array_object = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_vertex_array_object");
    SF_GLAD_GL_APPLE_vertex_array_range = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_vertex_array_range");
    SF_GLAD_GL_APPLE_vertex_program_evaluators = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_vertex_program_evaluators");
    SF_GLAD_GL_APPLE_ycbcr_422 = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_ycbcr_422");
    SF_GLAD_GL_ARB_ES2_compatibility = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_ES2_compatibility");
    SF_GLAD_GL_ARB_ES3_1_compatibility = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_ES3_1_compatibility");
    SF_GLAD_GL_ARB_ES3_2_compatibility = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_ES3_2_compatibility");
    SF_GLAD_GL_ARB_ES3_compatibility = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_ES3_compatibility");
    SF_GLAD_GL_ARB_arrays_of_arrays = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_arrays_of_arrays");
    SF_GLAD_GL_ARB_base_instance = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_base_instance");
    SF_GLAD_GL_ARB_bindless_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_bindless_texture");
    SF_GLAD_GL_ARB_blend_func_extended = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_blend_func_extended");
    SF_GLAD_GL_ARB_buffer_storage = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_buffer_storage");
    SF_GLAD_GL_ARB_cl_event = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_cl_event");
    SF_GLAD_GL_ARB_clear_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_clear_buffer_object");
    SF_GLAD_GL_ARB_clear_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_clear_texture");
    SF_GLAD_GL_ARB_clip_control = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_clip_control");
    SF_GLAD_GL_ARB_color_buffer_float = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_color_buffer_float");
    SF_GLAD_GL_ARB_compatibility = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_compatibility");
    SF_GLAD_GL_ARB_compressed_texture_pixel_storage = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_compressed_texture_pixel_storage");
    SF_GLAD_GL_ARB_compute_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_compute_shader");
    SF_GLAD_GL_ARB_compute_variable_group_size = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_compute_variable_group_size");
    SF_GLAD_GL_ARB_conditional_render_inverted = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_conditional_render_inverted");
    SF_GLAD_GL_ARB_conservative_depth = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_conservative_depth");
    SF_GLAD_GL_ARB_copy_buffer = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_copy_buffer");
    SF_GLAD_GL_ARB_copy_image = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_copy_image");
    SF_GLAD_GL_ARB_cull_distance = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_cull_distance");
    SF_GLAD_GL_ARB_debug_output = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_debug_output");
    SF_GLAD_GL_ARB_depth_buffer_float = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_depth_buffer_float");
    SF_GLAD_GL_ARB_depth_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_depth_clamp");
    SF_GLAD_GL_ARB_depth_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_depth_texture");
    SF_GLAD_GL_ARB_derivative_control = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_derivative_control");
    SF_GLAD_GL_ARB_direct_state_access = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_direct_state_access");
    SF_GLAD_GL_ARB_draw_buffers = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_draw_buffers");
    SF_GLAD_GL_ARB_draw_buffers_blend = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_draw_buffers_blend");
    SF_GLAD_GL_ARB_draw_elements_base_vertex = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_draw_elements_base_vertex");
    SF_GLAD_GL_ARB_draw_indirect = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_draw_indirect");
    SF_GLAD_GL_ARB_draw_instanced = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_draw_instanced");
    SF_GLAD_GL_ARB_enhanced_layouts = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_enhanced_layouts");
    SF_GLAD_GL_ARB_explicit_attrib_location = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_explicit_attrib_location");
    SF_GLAD_GL_ARB_explicit_uniform_location = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_explicit_uniform_location");
    SF_GLAD_GL_ARB_fragment_coord_conventions = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_fragment_coord_conventions");
    SF_GLAD_GL_ARB_fragment_layer_viewport = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_fragment_layer_viewport");
    SF_GLAD_GL_ARB_fragment_program = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_fragment_program");
    SF_GLAD_GL_ARB_fragment_program_shadow = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_fragment_program_shadow");
    SF_GLAD_GL_ARB_fragment_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_fragment_shader");
    SF_GLAD_GL_ARB_fragment_shader_interlock = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_fragment_shader_interlock");
    SF_GLAD_GL_ARB_framebuffer_no_attachments = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_framebuffer_no_attachments");
    SF_GLAD_GL_ARB_framebuffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_framebuffer_object");
    SF_GLAD_GL_ARB_framebuffer_sRGB = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_framebuffer_sRGB");
    SF_GLAD_GL_ARB_geometry_shader4 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_geometry_shader4");
    SF_GLAD_GL_ARB_get_program_binary = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_get_program_binary");
    SF_GLAD_GL_ARB_get_texture_sub_image = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_get_texture_sub_image");
    SF_GLAD_GL_ARB_gl_spirv = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_gl_spirv");
    SF_GLAD_GL_ARB_gpu_shader5 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_gpu_shader5");
    SF_GLAD_GL_ARB_gpu_shader_fp64 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_gpu_shader_fp64");
    SF_GLAD_GL_ARB_gpu_shader_int64 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_gpu_shader_int64");
    SF_GLAD_GL_ARB_half_float_pixel = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_half_float_pixel");
    SF_GLAD_GL_ARB_half_float_vertex = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_half_float_vertex");
    SF_GLAD_GL_ARB_imaging = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_imaging");
    SF_GLAD_GL_ARB_indirect_parameters = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_indirect_parameters");
    SF_GLAD_GL_ARB_instanced_arrays = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_instanced_arrays");
    SF_GLAD_GL_ARB_internalformat_query = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_internalformat_query");
    SF_GLAD_GL_ARB_internalformat_query2 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_internalformat_query2");
    SF_GLAD_GL_ARB_invalidate_subdata = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_invalidate_subdata");
    SF_GLAD_GL_ARB_map_buffer_alignment = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_map_buffer_alignment");
    SF_GLAD_GL_ARB_map_buffer_range = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_map_buffer_range");
    SF_GLAD_GL_ARB_matrix_palette = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_matrix_palette");
    SF_GLAD_GL_ARB_multi_bind = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_multi_bind");
    SF_GLAD_GL_ARB_multi_draw_indirect = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_multi_draw_indirect");
    SF_GLAD_GL_ARB_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_multisample");
    SF_GLAD_GL_ARB_multitexture = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_multitexture");
    SF_GLAD_GL_ARB_occlusion_query = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_occlusion_query");
    SF_GLAD_GL_ARB_occlusion_query2 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_occlusion_query2");
    SF_GLAD_GL_ARB_parallel_shader_compile = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_parallel_shader_compile");
    SF_GLAD_GL_ARB_pipeline_statistics_query = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_pipeline_statistics_query");
    SF_GLAD_GL_ARB_pixel_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_pixel_buffer_object");
    SF_GLAD_GL_ARB_point_parameters = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_point_parameters");
    SF_GLAD_GL_ARB_point_sprite = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_point_sprite");
    SF_GLAD_GL_ARB_polygon_offset_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_polygon_offset_clamp");
    SF_GLAD_GL_ARB_post_depth_coverage = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_post_depth_coverage");
    SF_GLAD_GL_ARB_program_interface_query = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_program_interface_query");
    SF_GLAD_GL_ARB_provoking_vertex = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_provoking_vertex");
    SF_GLAD_GL_ARB_query_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_query_buffer_object");
    SF_GLAD_GL_ARB_robust_buffer_access_behavior = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_robust_buffer_access_behavior");
    SF_GLAD_GL_ARB_robustness = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_robustness");
    SF_GLAD_GL_ARB_robustness_isolation = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_robustness_isolation");
    SF_GLAD_GL_ARB_sample_locations = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_sample_locations");
    SF_GLAD_GL_ARB_sample_shading = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_sample_shading");
    SF_GLAD_GL_ARB_sampler_objects = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_sampler_objects");
    SF_GLAD_GL_ARB_seamless_cube_map = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_seamless_cube_map");
    SF_GLAD_GL_ARB_seamless_cubemap_per_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_seamless_cubemap_per_texture");
    SF_GLAD_GL_ARB_separate_shader_objects = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_separate_shader_objects");
    SF_GLAD_GL_ARB_shader_atomic_counter_ops = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_atomic_counter_ops");
    SF_GLAD_GL_ARB_shader_atomic_counters = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_atomic_counters");
    SF_GLAD_GL_ARB_shader_ballot = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_ballot");
    SF_GLAD_GL_ARB_shader_bit_encoding = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_bit_encoding");
    SF_GLAD_GL_ARB_shader_clock = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_clock");
    SF_GLAD_GL_ARB_shader_draw_parameters = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_draw_parameters");
    SF_GLAD_GL_ARB_shader_group_vote = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_group_vote");
    SF_GLAD_GL_ARB_shader_image_load_store = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_image_load_store");
    SF_GLAD_GL_ARB_shader_image_size = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_image_size");
    SF_GLAD_GL_ARB_shader_objects = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_objects");
    SF_GLAD_GL_ARB_shader_precision = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_precision");
    SF_GLAD_GL_ARB_shader_stencil_export = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_stencil_export");
    SF_GLAD_GL_ARB_shader_storage_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_storage_buffer_object");
    SF_GLAD_GL_ARB_shader_subroutine = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_subroutine");
    SF_GLAD_GL_ARB_shader_texture_image_samples = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_texture_image_samples");
    SF_GLAD_GL_ARB_shader_texture_lod = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_texture_lod");
    SF_GLAD_GL_ARB_shader_viewport_layer_array = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shader_viewport_layer_array");
    SF_GLAD_GL_ARB_shading_language_100 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shading_language_100");
    SF_GLAD_GL_ARB_shading_language_420pack = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shading_language_420pack");
    SF_GLAD_GL_ARB_shading_language_include = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shading_language_include");
    SF_GLAD_GL_ARB_shading_language_packing = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shading_language_packing");
    SF_GLAD_GL_ARB_shadow = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shadow");
    SF_GLAD_GL_ARB_shadow_ambient = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_shadow_ambient");
    SF_GLAD_GL_ARB_sparse_buffer = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_sparse_buffer");
    SF_GLAD_GL_ARB_sparse_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_sparse_texture");
    SF_GLAD_GL_ARB_sparse_texture2 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_sparse_texture2");
    SF_GLAD_GL_ARB_sparse_texture_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_sparse_texture_clamp");
    SF_GLAD_GL_ARB_spirv_extensions = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_spirv_extensions");
    SF_GLAD_GL_ARB_stencil_texturing = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_stencil_texturing");
    SF_GLAD_GL_ARB_sync = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_sync");
    SF_GLAD_GL_ARB_tessellation_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_tessellation_shader");
    SF_GLAD_GL_ARB_texture_barrier = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_barrier");
    SF_GLAD_GL_ARB_texture_border_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_border_clamp");
    SF_GLAD_GL_ARB_texture_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_buffer_object");
    SF_GLAD_GL_ARB_texture_buffer_object_rgb32 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_buffer_object_rgb32");
    SF_GLAD_GL_ARB_texture_buffer_range = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_buffer_range");
    SF_GLAD_GL_ARB_texture_compression = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_compression");
    SF_GLAD_GL_ARB_texture_compression_bptc = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_compression_bptc");
    SF_GLAD_GL_ARB_texture_compression_rgtc = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_compression_rgtc");
    SF_GLAD_GL_ARB_texture_cube_map = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_cube_map");
    SF_GLAD_GL_ARB_texture_cube_map_array = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_cube_map_array");
    SF_GLAD_GL_ARB_texture_env_add = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_env_add");
    SF_GLAD_GL_ARB_texture_env_combine = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_env_combine");
    SF_GLAD_GL_ARB_texture_env_crossbar = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_env_crossbar");
    SF_GLAD_GL_ARB_texture_env_dot3 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_env_dot3");
    SF_GLAD_GL_ARB_texture_filter_anisotropic = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_filter_anisotropic");
    SF_GLAD_GL_ARB_texture_filter_minmax = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_filter_minmax");
    SF_GLAD_GL_ARB_texture_float = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_float");
    SF_GLAD_GL_ARB_texture_gather = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_gather");
    SF_GLAD_GL_ARB_texture_mirror_clamp_to_edge = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_mirror_clamp_to_edge");
    SF_GLAD_GL_ARB_texture_mirrored_repeat = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_mirrored_repeat");
    SF_GLAD_GL_ARB_texture_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_multisample");
    SF_GLAD_GL_ARB_texture_non_power_of_two = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_non_power_of_two");
    SF_GLAD_GL_ARB_texture_query_levels = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_query_levels");
    SF_GLAD_GL_ARB_texture_query_lod = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_query_lod");
    SF_GLAD_GL_ARB_texture_rectangle = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_rectangle");
    SF_GLAD_GL_ARB_texture_rg = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_rg");
    SF_GLAD_GL_ARB_texture_rgb10_a2ui = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_rgb10_a2ui");
    SF_GLAD_GL_ARB_texture_stencil8 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_stencil8");
    SF_GLAD_GL_ARB_texture_storage = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_storage");
    SF_GLAD_GL_ARB_texture_storage_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_storage_multisample");
    SF_GLAD_GL_ARB_texture_swizzle = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_swizzle");
    SF_GLAD_GL_ARB_texture_view = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_texture_view");
    SF_GLAD_GL_ARB_timer_query = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_timer_query");
    SF_GLAD_GL_ARB_transform_feedback2 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_transform_feedback2");
    SF_GLAD_GL_ARB_transform_feedback3 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_transform_feedback3");
    SF_GLAD_GL_ARB_transform_feedback_instanced = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_transform_feedback_instanced");
    SF_GLAD_GL_ARB_transform_feedback_overflow_query = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_transform_feedback_overflow_query");
    SF_GLAD_GL_ARB_transpose_matrix = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_transpose_matrix");
    SF_GLAD_GL_ARB_uniform_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_uniform_buffer_object");
    SF_GLAD_GL_ARB_vertex_array_bgra = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_vertex_array_bgra");
    SF_GLAD_GL_ARB_vertex_array_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_vertex_array_object");
    SF_GLAD_GL_ARB_vertex_attrib_64bit = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_vertex_attrib_64bit");
    SF_GLAD_GL_ARB_vertex_attrib_binding = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_vertex_attrib_binding");
    SF_GLAD_GL_ARB_vertex_blend = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_vertex_blend");
    SF_GLAD_GL_ARB_vertex_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_vertex_buffer_object");
    SF_GLAD_GL_ARB_vertex_program = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_vertex_program");
    SF_GLAD_GL_ARB_vertex_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_vertex_shader");
    SF_GLAD_GL_ARB_vertex_type_10f_11f_11f_rev = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_vertex_type_10f_11f_11f_rev");
    SF_GLAD_GL_ARB_vertex_type_2_10_10_10_rev = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_vertex_type_2_10_10_10_rev");
    SF_GLAD_GL_ARB_viewport_array = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_viewport_array");
    SF_GLAD_GL_ARB_window_pos = sf_glad_gl_has_extension(exts, exts_i, "GL_ARB_window_pos");
    SF_GLAD_GL_ATI_draw_buffers = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_draw_buffers");
    SF_GLAD_GL_ATI_element_array = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_element_array");
    SF_GLAD_GL_ATI_envmap_bumpmap = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_envmap_bumpmap");
    SF_GLAD_GL_ATI_fragment_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_fragment_shader");
    SF_GLAD_GL_ATI_map_object_buffer = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_map_object_buffer");
    SF_GLAD_GL_ATI_meminfo = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_meminfo");
    SF_GLAD_GL_ATI_pixel_format_float = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_pixel_format_float");
    SF_GLAD_GL_ATI_pn_triangles = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_pn_triangles");
    SF_GLAD_GL_ATI_separate_stencil = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_separate_stencil");
    SF_GLAD_GL_ATI_text_fragment_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_text_fragment_shader");
    SF_GLAD_GL_ATI_texture_env_combine3 = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_texture_env_combine3");
    SF_GLAD_GL_ATI_texture_float = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_texture_float");
    SF_GLAD_GL_ATI_texture_mirror_once = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_texture_mirror_once");
    SF_GLAD_GL_ATI_vertex_array_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_vertex_array_object");
    SF_GLAD_GL_ATI_vertex_attrib_array_object = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_vertex_attrib_array_object");
    SF_GLAD_GL_ATI_vertex_streams = sf_glad_gl_has_extension(exts, exts_i, "GL_ATI_vertex_streams");
    SF_GLAD_GL_EXT_422_pixels = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_422_pixels");
    SF_GLAD_GL_EXT_EGL_image_storage = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_EGL_image_storage");
    SF_GLAD_GL_EXT_EGL_sync = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_EGL_sync");
    SF_GLAD_GL_EXT_abgr = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_abgr");
    SF_GLAD_GL_EXT_bgra = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_bgra");
    SF_GLAD_GL_EXT_bindable_uniform = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_bindable_uniform");
    SF_GLAD_GL_EXT_blend_color = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_blend_color");
    SF_GLAD_GL_EXT_blend_equation_separate = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_blend_equation_separate");
    SF_GLAD_GL_EXT_blend_func_separate = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_blend_func_separate");
    SF_GLAD_GL_EXT_blend_logic_op = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_blend_logic_op");
    SF_GLAD_GL_EXT_blend_minmax = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_blend_minmax");
    SF_GLAD_GL_EXT_blend_subtract = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_blend_subtract");
    SF_GLAD_GL_EXT_clip_volume_hint = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_clip_volume_hint");
    SF_GLAD_GL_EXT_cmyka = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_cmyka");
    SF_GLAD_GL_EXT_color_subtable = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_color_subtable");
    SF_GLAD_GL_EXT_compiled_vertex_array = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_compiled_vertex_array");
    SF_GLAD_GL_EXT_convolution = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_convolution");
    SF_GLAD_GL_EXT_coordinate_frame = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_coordinate_frame");
    SF_GLAD_GL_EXT_copy_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_copy_texture");
    SF_GLAD_GL_EXT_cull_vertex = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_cull_vertex");
    SF_GLAD_GL_EXT_debug_label = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_debug_label");
    SF_GLAD_GL_EXT_debug_marker = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_debug_marker");
    SF_GLAD_GL_EXT_depth_bounds_test = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_depth_bounds_test");
    SF_GLAD_GL_EXT_direct_state_access = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_direct_state_access");
    SF_GLAD_GL_EXT_draw_buffers2 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_draw_buffers2");
    SF_GLAD_GL_EXT_draw_instanced = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_draw_instanced");
    SF_GLAD_GL_EXT_draw_range_elements = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_draw_range_elements");
    SF_GLAD_GL_EXT_external_buffer = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_external_buffer");
    SF_GLAD_GL_EXT_fog_coord = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_fog_coord");
    SF_GLAD_GL_EXT_framebuffer_blit = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_framebuffer_blit");
    SF_GLAD_GL_EXT_framebuffer_blit_layers = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_framebuffer_blit_layers");
    SF_GLAD_GL_EXT_framebuffer_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_framebuffer_multisample");
    SF_GLAD_GL_EXT_framebuffer_multisample_blit_scaled = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_framebuffer_multisample_blit_scaled");
    SF_GLAD_GL_EXT_framebuffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_framebuffer_object");
    SF_GLAD_GL_EXT_framebuffer_sRGB = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_framebuffer_sRGB");
    SF_GLAD_GL_EXT_geometry_shader4 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_geometry_shader4");
    SF_GLAD_GL_EXT_gpu_program_parameters = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_gpu_program_parameters");
    SF_GLAD_GL_EXT_gpu_shader4 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_gpu_shader4");
    SF_GLAD_GL_EXT_histogram = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_histogram");
    SF_GLAD_GL_EXT_index_array_formats = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_index_array_formats");
    SF_GLAD_GL_EXT_index_func = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_index_func");
    SF_GLAD_GL_EXT_index_material = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_index_material");
    SF_GLAD_GL_EXT_index_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_index_texture");
    SF_GLAD_GL_EXT_light_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_light_texture");
    SF_GLAD_GL_EXT_memory_object = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_memory_object");
    SF_GLAD_GL_EXT_memory_object_fd = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_memory_object_fd");
    SF_GLAD_GL_EXT_memory_object_win32 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_memory_object_win32");
    SF_GLAD_GL_EXT_misc_attribute = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_misc_attribute");
    SF_GLAD_GL_EXT_multi_draw_arrays = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_multi_draw_arrays");
    SF_GLAD_GL_EXT_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_multisample");
    SF_GLAD_GL_EXT_multiview_tessellation_geometry_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_multiview_tessellation_geometry_shader");
    SF_GLAD_GL_EXT_multiview_texture_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_multiview_texture_multisample");
    SF_GLAD_GL_EXT_multiview_timer_query = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_multiview_timer_query");
    SF_GLAD_GL_EXT_packed_depth_stencil = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_packed_depth_stencil");
    SF_GLAD_GL_EXT_packed_float = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_packed_float");
    SF_GLAD_GL_EXT_packed_pixels = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_packed_pixels");
    SF_GLAD_GL_EXT_paletted_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_paletted_texture");
    SF_GLAD_GL_EXT_pixel_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_pixel_buffer_object");
    SF_GLAD_GL_EXT_pixel_transform = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_pixel_transform");
    SF_GLAD_GL_EXT_pixel_transform_color_table = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_pixel_transform_color_table");
    SF_GLAD_GL_EXT_point_parameters = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_point_parameters");
    SF_GLAD_GL_EXT_polygon_offset = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_polygon_offset");
    SF_GLAD_GL_EXT_polygon_offset_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_polygon_offset_clamp");
    SF_GLAD_GL_EXT_post_depth_coverage = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_post_depth_coverage");
    SF_GLAD_GL_EXT_provoking_vertex = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_provoking_vertex");
    SF_GLAD_GL_EXT_raster_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_raster_multisample");
    SF_GLAD_GL_EXT_rescale_normal = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_rescale_normal");
    SF_GLAD_GL_EXT_secondary_color = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_secondary_color");
    SF_GLAD_GL_EXT_semaphore = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_semaphore");
    SF_GLAD_GL_EXT_semaphore_fd = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_semaphore_fd");
    SF_GLAD_GL_EXT_semaphore_win32 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_semaphore_win32");
    SF_GLAD_GL_EXT_separate_shader_objects = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_separate_shader_objects");
    SF_GLAD_GL_EXT_separate_specular_color = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_separate_specular_color");
    SF_GLAD_GL_EXT_shader_framebuffer_fetch = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_shader_framebuffer_fetch");
    SF_GLAD_GL_EXT_shader_framebuffer_fetch_non_coherent = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_shader_framebuffer_fetch_non_coherent");
    SF_GLAD_GL_EXT_shader_image_load_formatted = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_shader_image_load_formatted");
    SF_GLAD_GL_EXT_shader_image_load_store = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_shader_image_load_store");
    SF_GLAD_GL_EXT_shader_integer_mix = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_shader_integer_mix");
    SF_GLAD_GL_EXT_shader_samples_identical = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_shader_samples_identical");
    SF_GLAD_GL_EXT_shadow_funcs = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_shadow_funcs");
    SF_GLAD_GL_EXT_shared_texture_palette = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_shared_texture_palette");
    SF_GLAD_GL_EXT_sparse_texture2 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_sparse_texture2");
    SF_GLAD_GL_EXT_stencil_clear_tag = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_stencil_clear_tag");
    SF_GLAD_GL_EXT_stencil_two_side = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_stencil_two_side");
    SF_GLAD_GL_EXT_stencil_wrap = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_stencil_wrap");
    SF_GLAD_GL_EXT_subtexture = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_subtexture");
    SF_GLAD_GL_EXT_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture");
    SF_GLAD_GL_EXT_texture3D = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture3D");
    SF_GLAD_GL_EXT_texture_array = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_array");
    SF_GLAD_GL_EXT_texture_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_buffer_object");
    SF_GLAD_GL_EXT_texture_compression_latc = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_compression_latc");
    SF_GLAD_GL_EXT_texture_compression_rgtc = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_compression_rgtc");
    SF_GLAD_GL_EXT_texture_compression_s3tc = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_compression_s3tc");
    SF_GLAD_GL_EXT_texture_cube_map = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_cube_map");
    SF_GLAD_GL_EXT_texture_env_add = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_env_add");
    SF_GLAD_GL_EXT_texture_env_combine = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_env_combine");
    SF_GLAD_GL_EXT_texture_env_dot3 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_env_dot3");
    SF_GLAD_GL_EXT_texture_filter_anisotropic = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_filter_anisotropic");
    SF_GLAD_GL_EXT_texture_filter_minmax = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_filter_minmax");
    SF_GLAD_GL_EXT_texture_integer = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_integer");
    SF_GLAD_GL_EXT_texture_lod_bias = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_lod_bias");
    SF_GLAD_GL_EXT_texture_mirror_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_mirror_clamp");
    SF_GLAD_GL_EXT_texture_object = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_object");
    SF_GLAD_GL_EXT_texture_perturb_normal = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_perturb_normal");
    SF_GLAD_GL_EXT_texture_sRGB = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_sRGB");
    SF_GLAD_GL_EXT_texture_sRGB_R8 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_sRGB_R8");
    SF_GLAD_GL_EXT_texture_sRGB_RG8 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_sRGB_RG8");
    SF_GLAD_GL_EXT_texture_sRGB_decode = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_sRGB_decode");
    SF_GLAD_GL_EXT_texture_shadow_lod = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_shadow_lod");
    SF_GLAD_GL_EXT_texture_shared_exponent = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_shared_exponent");
    SF_GLAD_GL_EXT_texture_snorm = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_snorm");
    SF_GLAD_GL_EXT_texture_storage = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_storage");
    SF_GLAD_GL_EXT_texture_swizzle = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_swizzle");
    SF_GLAD_GL_EXT_timer_query = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_timer_query");
    SF_GLAD_GL_EXT_transform_feedback = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_transform_feedback");
    SF_GLAD_GL_EXT_vertex_array = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_vertex_array");
    SF_GLAD_GL_EXT_vertex_array_bgra = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_vertex_array_bgra");
    SF_GLAD_GL_EXT_vertex_attrib_64bit = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_vertex_attrib_64bit");
    SF_GLAD_GL_EXT_vertex_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_vertex_shader");
    SF_GLAD_GL_EXT_vertex_weighting = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_vertex_weighting");
    SF_GLAD_GL_EXT_win32_keyed_mutex = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_win32_keyed_mutex");
    SF_GLAD_GL_EXT_window_rectangles = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_window_rectangles");
    SF_GLAD_GL_EXT_x11_sync_object = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_x11_sync_object");
    SF_GLAD_GL_GREMEDY_frame_terminator = sf_glad_gl_has_extension(exts, exts_i, "GL_GREMEDY_frame_terminator");
    SF_GLAD_GL_GREMEDY_string_marker = sf_glad_gl_has_extension(exts, exts_i, "GL_GREMEDY_string_marker");
    SF_GLAD_GL_HP_convolution_border_modes = sf_glad_gl_has_extension(exts, exts_i, "GL_HP_convolution_border_modes");
    SF_GLAD_GL_HP_image_transform = sf_glad_gl_has_extension(exts, exts_i, "GL_HP_image_transform");
    SF_GLAD_GL_HP_occlusion_test = sf_glad_gl_has_extension(exts, exts_i, "GL_HP_occlusion_test");
    SF_GLAD_GL_HP_texture_lighting = sf_glad_gl_has_extension(exts, exts_i, "GL_HP_texture_lighting");
    SF_GLAD_GL_IBM_cull_vertex = sf_glad_gl_has_extension(exts, exts_i, "GL_IBM_cull_vertex");
    SF_GLAD_GL_IBM_multimode_draw_arrays = sf_glad_gl_has_extension(exts, exts_i, "GL_IBM_multimode_draw_arrays");
    SF_GLAD_GL_IBM_rasterpos_clip = sf_glad_gl_has_extension(exts, exts_i, "GL_IBM_rasterpos_clip");
    SF_GLAD_GL_IBM_static_data = sf_glad_gl_has_extension(exts, exts_i, "GL_IBM_static_data");
    SF_GLAD_GL_IBM_texture_mirrored_repeat = sf_glad_gl_has_extension(exts, exts_i, "GL_IBM_texture_mirrored_repeat");
    SF_GLAD_GL_IBM_vertex_array_lists = sf_glad_gl_has_extension(exts, exts_i, "GL_IBM_vertex_array_lists");
    SF_GLAD_GL_INGR_blend_func_separate = sf_glad_gl_has_extension(exts, exts_i, "GL_INGR_blend_func_separate");
    SF_GLAD_GL_INGR_color_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_INGR_color_clamp");
    SF_GLAD_GL_INGR_interlace_read = sf_glad_gl_has_extension(exts, exts_i, "GL_INGR_interlace_read");
    SF_GLAD_GL_INTEL_blackhole_render = sf_glad_gl_has_extension(exts, exts_i, "GL_INTEL_blackhole_render");
    SF_GLAD_GL_INTEL_conservative_rasterization = sf_glad_gl_has_extension(exts, exts_i, "GL_INTEL_conservative_rasterization");
    SF_GLAD_GL_INTEL_fragment_shader_ordering = sf_glad_gl_has_extension(exts, exts_i, "GL_INTEL_fragment_shader_ordering");
    SF_GLAD_GL_INTEL_framebuffer_CMAA = sf_glad_gl_has_extension(exts, exts_i, "GL_INTEL_framebuffer_CMAA");
    SF_GLAD_GL_INTEL_map_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_INTEL_map_texture");
    SF_GLAD_GL_INTEL_parallel_arrays = sf_glad_gl_has_extension(exts, exts_i, "GL_INTEL_parallel_arrays");
    SF_GLAD_GL_INTEL_performance_query = sf_glad_gl_has_extension(exts, exts_i, "GL_INTEL_performance_query");
    SF_GLAD_GL_KHR_blend_equation_advanced = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_blend_equation_advanced");
    SF_GLAD_GL_KHR_blend_equation_advanced_coherent = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_blend_equation_advanced_coherent");
    SF_GLAD_GL_KHR_context_flush_control = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_context_flush_control");
    SF_GLAD_GL_KHR_debug = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_debug");
    SF_GLAD_GL_KHR_no_error = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_no_error");
    SF_GLAD_GL_KHR_parallel_shader_compile = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_parallel_shader_compile");
    SF_GLAD_GL_KHR_robust_buffer_access_behavior = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_robust_buffer_access_behavior");
    SF_GLAD_GL_KHR_robustness = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_robustness");
    SF_GLAD_GL_KHR_shader_subgroup = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_shader_subgroup");
    SF_GLAD_GL_KHR_texture_compression_astc_hdr = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_texture_compression_astc_hdr");
    SF_GLAD_GL_KHR_texture_compression_astc_ldr = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_texture_compression_astc_ldr");
    SF_GLAD_GL_KHR_texture_compression_astc_sliced_3d = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_texture_compression_astc_sliced_3d");
    SF_GLAD_GL_MESAX_texture_stack = sf_glad_gl_has_extension(exts, exts_i, "GL_MESAX_texture_stack");
    SF_GLAD_GL_MESA_framebuffer_flip_x = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_framebuffer_flip_x");
    SF_GLAD_GL_MESA_framebuffer_flip_y = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_framebuffer_flip_y");
    SF_GLAD_GL_MESA_framebuffer_swap_xy = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_framebuffer_swap_xy");
    SF_GLAD_GL_MESA_pack_invert = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_pack_invert");
    SF_GLAD_GL_MESA_program_binary_formats = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_program_binary_formats");
    SF_GLAD_GL_MESA_resize_buffers = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_resize_buffers");
    SF_GLAD_GL_MESA_shader_integer_functions = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_shader_integer_functions");
    SF_GLAD_GL_MESA_texture_const_bandwidth = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_texture_const_bandwidth");
    SF_GLAD_GL_MESA_tile_raster_order = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_tile_raster_order");
    SF_GLAD_GL_MESA_window_pos = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_window_pos");
    SF_GLAD_GL_MESA_ycbcr_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_MESA_ycbcr_texture");
    SF_GLAD_GL_NVX_blend_equation_advanced_multi_draw_buffers = sf_glad_gl_has_extension(exts, exts_i, "GL_NVX_blend_equation_advanced_multi_draw_buffers");
    SF_GLAD_GL_NVX_conditional_render = sf_glad_gl_has_extension(exts, exts_i, "GL_NVX_conditional_render");
    SF_GLAD_GL_NVX_gpu_memory_info = sf_glad_gl_has_extension(exts, exts_i, "GL_NVX_gpu_memory_info");
    SF_GLAD_GL_NVX_gpu_multicast2 = sf_glad_gl_has_extension(exts, exts_i, "GL_NVX_gpu_multicast2");
    SF_GLAD_GL_NVX_linked_gpu_multicast = sf_glad_gl_has_extension(exts, exts_i, "GL_NVX_linked_gpu_multicast");
    SF_GLAD_GL_NVX_progress_fence = sf_glad_gl_has_extension(exts, exts_i, "GL_NVX_progress_fence");
    SF_GLAD_GL_NV_alpha_to_coverage_dither_control = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_alpha_to_coverage_dither_control");
    SF_GLAD_GL_NV_bindless_multi_draw_indirect = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_bindless_multi_draw_indirect");
    SF_GLAD_GL_NV_bindless_multi_draw_indirect_count = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_bindless_multi_draw_indirect_count");
    SF_GLAD_GL_NV_bindless_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_bindless_texture");
    SF_GLAD_GL_NV_blend_equation_advanced = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_blend_equation_advanced");
    SF_GLAD_GL_NV_blend_equation_advanced_coherent = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_blend_equation_advanced_coherent");
    SF_GLAD_GL_NV_blend_minmax_factor = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_blend_minmax_factor");
    SF_GLAD_GL_NV_blend_square = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_blend_square");
    SF_GLAD_GL_NV_clip_space_w_scaling = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_clip_space_w_scaling");
    SF_GLAD_GL_NV_command_list = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_command_list");
    SF_GLAD_GL_NV_compute_program5 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_compute_program5");
    SF_GLAD_GL_NV_compute_shader_derivatives = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_compute_shader_derivatives");
    SF_GLAD_GL_NV_conditional_render = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_conditional_render");
    SF_GLAD_GL_NV_conservative_raster = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_conservative_raster");
    SF_GLAD_GL_NV_conservative_raster_dilate = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_conservative_raster_dilate");
    SF_GLAD_GL_NV_conservative_raster_pre_snap = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_conservative_raster_pre_snap");
    SF_GLAD_GL_NV_conservative_raster_pre_snap_triangles = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_conservative_raster_pre_snap_triangles");
    SF_GLAD_GL_NV_conservative_raster_underestimation = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_conservative_raster_underestimation");
    SF_GLAD_GL_NV_copy_depth_to_color = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_copy_depth_to_color");
    SF_GLAD_GL_NV_copy_image = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_copy_image");
    SF_GLAD_GL_NV_deep_texture3D = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_deep_texture3D");
    SF_GLAD_GL_NV_depth_buffer_float = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_depth_buffer_float");
    SF_GLAD_GL_NV_depth_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_depth_clamp");
    SF_GLAD_GL_NV_draw_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_draw_texture");
    SF_GLAD_GL_NV_draw_vulkan_image = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_draw_vulkan_image");
    SF_GLAD_GL_NV_evaluators = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_evaluators");
    SF_GLAD_GL_NV_explicit_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_explicit_multisample");
    SF_GLAD_GL_NV_fence = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fence");
    SF_GLAD_GL_NV_fill_rectangle = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fill_rectangle");
    SF_GLAD_GL_NV_float_buffer = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_float_buffer");
    SF_GLAD_GL_NV_fog_distance = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fog_distance");
    SF_GLAD_GL_NV_fragment_coverage_to_color = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fragment_coverage_to_color");
    SF_GLAD_GL_NV_fragment_program = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fragment_program");
    SF_GLAD_GL_NV_fragment_program2 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fragment_program2");
    SF_GLAD_GL_NV_fragment_program4 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fragment_program4");
    SF_GLAD_GL_NV_fragment_program_option = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fragment_program_option");
    SF_GLAD_GL_NV_fragment_shader_barycentric = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fragment_shader_barycentric");
    SF_GLAD_GL_NV_fragment_shader_interlock = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fragment_shader_interlock");
    SF_GLAD_GL_NV_framebuffer_mixed_samples = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_framebuffer_mixed_samples");
    SF_GLAD_GL_NV_framebuffer_multisample_coverage = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_framebuffer_multisample_coverage");
    SF_GLAD_GL_NV_geometry_program4 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_geometry_program4");
    SF_GLAD_GL_NV_geometry_shader4 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_geometry_shader4");
    SF_GLAD_GL_NV_geometry_shader_passthrough = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_geometry_shader_passthrough");
    SF_GLAD_GL_NV_gpu_multicast = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_gpu_multicast");
    SF_GLAD_GL_NV_gpu_program4 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_gpu_program4");
    SF_GLAD_GL_NV_gpu_program5 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_gpu_program5");
    SF_GLAD_GL_NV_gpu_program5_mem_extended = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_gpu_program5_mem_extended");
    SF_GLAD_GL_NV_gpu_shader5 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_gpu_shader5");
    SF_GLAD_GL_NV_half_float = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_half_float");
    SF_GLAD_GL_NV_internalformat_sample_query = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_internalformat_sample_query");
    SF_GLAD_GL_NV_light_max_exponent = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_light_max_exponent");
    SF_GLAD_GL_NV_memory_attachment = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_memory_attachment");
    SF_GLAD_GL_NV_memory_object_sparse = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_memory_object_sparse");
    SF_GLAD_GL_NV_mesh_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_mesh_shader");
    SF_GLAD_GL_NV_multisample_coverage = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_multisample_coverage");
    SF_GLAD_GL_NV_multisample_filter_hint = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_multisample_filter_hint");
    SF_GLAD_GL_NV_occlusion_query = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_occlusion_query");
    SF_GLAD_GL_NV_packed_depth_stencil = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_packed_depth_stencil");
    SF_GLAD_GL_NV_parameter_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_parameter_buffer_object");
    SF_GLAD_GL_NV_parameter_buffer_object2 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_parameter_buffer_object2");
    SF_GLAD_GL_NV_path_rendering = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_path_rendering");
    SF_GLAD_GL_NV_path_rendering_shared_edge = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_path_rendering_shared_edge");
    SF_GLAD_GL_NV_pixel_data_range = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_pixel_data_range");
    SF_GLAD_GL_NV_point_sprite = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_point_sprite");
    SF_GLAD_GL_NV_present_video = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_present_video");
    SF_GLAD_GL_NV_primitive_restart = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_primitive_restart");
    SF_GLAD_GL_NV_primitive_shading_rate = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_primitive_shading_rate");
    SF_GLAD_GL_NV_query_resource = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_query_resource");
    SF_GLAD_GL_NV_query_resource_tag = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_query_resource_tag");
    SF_GLAD_GL_NV_register_combiners = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_register_combiners");
    SF_GLAD_GL_NV_register_combiners2 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_register_combiners2");
    SF_GLAD_GL_NV_representative_fragment_test = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_representative_fragment_test");
    SF_GLAD_GL_NV_robustness_video_memory_purge = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_robustness_video_memory_purge");
    SF_GLAD_GL_NV_sample_locations = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_sample_locations");
    SF_GLAD_GL_NV_sample_mask_override_coverage = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_sample_mask_override_coverage");
    SF_GLAD_GL_NV_scissor_exclusive = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_scissor_exclusive");
    SF_GLAD_GL_NV_shader_atomic_counters = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_atomic_counters");
    SF_GLAD_GL_NV_shader_atomic_float = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_atomic_float");
    SF_GLAD_GL_NV_shader_atomic_float64 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_atomic_float64");
    SF_GLAD_GL_NV_shader_atomic_fp16_vector = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_atomic_fp16_vector");
    SF_GLAD_GL_NV_shader_atomic_int64 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_atomic_int64");
    SF_GLAD_GL_NV_shader_buffer_load = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_buffer_load");
    SF_GLAD_GL_NV_shader_buffer_store = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_buffer_store");
    SF_GLAD_GL_NV_shader_storage_buffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_storage_buffer_object");
    SF_GLAD_GL_NV_shader_subgroup_partitioned = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_subgroup_partitioned");
    SF_GLAD_GL_NV_shader_texture_footprint = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_texture_footprint");
    SF_GLAD_GL_NV_shader_thread_group = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_thread_group");
    SF_GLAD_GL_NV_shader_thread_shuffle = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shader_thread_shuffle");
    SF_GLAD_GL_NV_shading_rate_image = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_shading_rate_image");
    SF_GLAD_GL_NV_stereo_view_rendering = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_stereo_view_rendering");
    SF_GLAD_GL_NV_tessellation_program5 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_tessellation_program5");
    SF_GLAD_GL_NV_texgen_emboss = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texgen_emboss");
    SF_GLAD_GL_NV_texgen_reflection = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texgen_reflection");
    SF_GLAD_GL_NV_texture_barrier = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texture_barrier");
    SF_GLAD_GL_NV_texture_compression_vtc = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texture_compression_vtc");
    SF_GLAD_GL_NV_texture_env_combine4 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texture_env_combine4");
    SF_GLAD_GL_NV_texture_expand_normal = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texture_expand_normal");
    SF_GLAD_GL_NV_texture_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texture_multisample");
    SF_GLAD_GL_NV_texture_rectangle = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texture_rectangle");
    SF_GLAD_GL_NV_texture_rectangle_compressed = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texture_rectangle_compressed");
    SF_GLAD_GL_NV_texture_shader = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texture_shader");
    SF_GLAD_GL_NV_texture_shader2 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texture_shader2");
    SF_GLAD_GL_NV_texture_shader3 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_texture_shader3");
    SF_GLAD_GL_NV_timeline_semaphore = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_timeline_semaphore");
    SF_GLAD_GL_NV_transform_feedback = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_transform_feedback");
    SF_GLAD_GL_NV_transform_feedback2 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_transform_feedback2");
    SF_GLAD_GL_NV_uniform_buffer_std430_layout = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_uniform_buffer_std430_layout");
    SF_GLAD_GL_NV_uniform_buffer_unified_memory = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_uniform_buffer_unified_memory");
    SF_GLAD_GL_NV_vdpau_interop = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vdpau_interop");
    SF_GLAD_GL_NV_vdpau_interop2 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vdpau_interop2");
    SF_GLAD_GL_NV_vertex_array_range = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vertex_array_range");
    SF_GLAD_GL_NV_vertex_array_range2 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vertex_array_range2");
    SF_GLAD_GL_NV_vertex_attrib_integer_64bit = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vertex_attrib_integer_64bit");
    SF_GLAD_GL_NV_vertex_buffer_unified_memory = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vertex_buffer_unified_memory");
    SF_GLAD_GL_NV_vertex_program = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vertex_program");
    SF_GLAD_GL_NV_vertex_program1_1 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vertex_program1_1");
    SF_GLAD_GL_NV_vertex_program2 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vertex_program2");
    SF_GLAD_GL_NV_vertex_program2_option = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vertex_program2_option");
    SF_GLAD_GL_NV_vertex_program3 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vertex_program3");
    SF_GLAD_GL_NV_vertex_program4 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_vertex_program4");
    SF_GLAD_GL_NV_video_capture = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_video_capture");
    SF_GLAD_GL_NV_viewport_array2 = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_viewport_array2");
    SF_GLAD_GL_NV_viewport_swizzle = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_viewport_swizzle");
    SF_GLAD_GL_OES_byte_coordinates = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_byte_coordinates");
    SF_GLAD_GL_OES_compressed_paletted_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_compressed_paletted_texture");
    SF_GLAD_GL_OES_fixed_point = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_fixed_point");
    SF_GLAD_GL_OES_query_matrix = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_query_matrix");
    SF_GLAD_GL_OES_read_format = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_read_format");
    SF_GLAD_GL_OES_single_precision = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_single_precision");
    SF_GLAD_GL_OML_interlace = sf_glad_gl_has_extension(exts, exts_i, "GL_OML_interlace");
    SF_GLAD_GL_OML_resample = sf_glad_gl_has_extension(exts, exts_i, "GL_OML_resample");
    SF_GLAD_GL_OML_subsample = sf_glad_gl_has_extension(exts, exts_i, "GL_OML_subsample");
    SF_GLAD_GL_OVR_multiview = sf_glad_gl_has_extension(exts, exts_i, "GL_OVR_multiview");
    SF_GLAD_GL_OVR_multiview2 = sf_glad_gl_has_extension(exts, exts_i, "GL_OVR_multiview2");
    SF_GLAD_GL_PGI_misc_hints = sf_glad_gl_has_extension(exts, exts_i, "GL_PGI_misc_hints");
    SF_GLAD_GL_PGI_vertex_hints = sf_glad_gl_has_extension(exts, exts_i, "GL_PGI_vertex_hints");
    SF_GLAD_GL_REND_screen_coordinates = sf_glad_gl_has_extension(exts, exts_i, "GL_REND_screen_coordinates");
    SF_GLAD_GL_S3_s3tc = sf_glad_gl_has_extension(exts, exts_i, "GL_S3_s3tc");
    SF_GLAD_GL_SGIS_detail_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_detail_texture");
    SF_GLAD_GL_SGIS_fog_function = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_fog_function");
    SF_GLAD_GL_SGIS_generate_mipmap = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_generate_mipmap");
    SF_GLAD_GL_SGIS_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_multisample");
    SF_GLAD_GL_SGIS_pixel_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_pixel_texture");
    SF_GLAD_GL_SGIS_point_line_texgen = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_point_line_texgen");
    SF_GLAD_GL_SGIS_point_parameters = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_point_parameters");
    SF_GLAD_GL_SGIS_sharpen_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_sharpen_texture");
    SF_GLAD_GL_SGIS_texture4D = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_texture4D");
    SF_GLAD_GL_SGIS_texture_border_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_texture_border_clamp");
    SF_GLAD_GL_SGIS_texture_color_mask = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_texture_color_mask");
    SF_GLAD_GL_SGIS_texture_edge_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_texture_edge_clamp");
    SF_GLAD_GL_SGIS_texture_filter4 = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_texture_filter4");
    SF_GLAD_GL_SGIS_texture_lod = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_texture_lod");
    SF_GLAD_GL_SGIS_texture_select = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIS_texture_select");
    SF_GLAD_GL_SGIX_async = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_async");
    SF_GLAD_GL_SGIX_async_histogram = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_async_histogram");
    SF_GLAD_GL_SGIX_async_pixel = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_async_pixel");
    SF_GLAD_GL_SGIX_blend_alpha_minmax = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_blend_alpha_minmax");
    SF_GLAD_GL_SGIX_calligraphic_fragment = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_calligraphic_fragment");
    SF_GLAD_GL_SGIX_clipmap = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_clipmap");
    SF_GLAD_GL_SGIX_convolution_accuracy = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_convolution_accuracy");
    SF_GLAD_GL_SGIX_depth_pass_instrument = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_depth_pass_instrument");
    SF_GLAD_GL_SGIX_depth_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_depth_texture");
    SF_GLAD_GL_SGIX_flush_raster = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_flush_raster");
    SF_GLAD_GL_SGIX_fog_offset = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_fog_offset");
    SF_GLAD_GL_SGIX_fragment_lighting = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_fragment_lighting");
    SF_GLAD_GL_SGIX_framezoom = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_framezoom");
    SF_GLAD_GL_SGIX_igloo_interface = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_igloo_interface");
    SF_GLAD_GL_SGIX_instruments = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_instruments");
    SF_GLAD_GL_SGIX_interlace = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_interlace");
    SF_GLAD_GL_SGIX_ir_instrument1 = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_ir_instrument1");
    SF_GLAD_GL_SGIX_list_priority = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_list_priority");
    SF_GLAD_GL_SGIX_pixel_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_pixel_texture");
    SF_GLAD_GL_SGIX_pixel_tiles = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_pixel_tiles");
    SF_GLAD_GL_SGIX_polynomial_ffd = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_polynomial_ffd");
    SF_GLAD_GL_SGIX_reference_plane = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_reference_plane");
    SF_GLAD_GL_SGIX_resample = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_resample");
    SF_GLAD_GL_SGIX_scalebias_hint = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_scalebias_hint");
    SF_GLAD_GL_SGIX_shadow = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_shadow");
    SF_GLAD_GL_SGIX_shadow_ambient = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_shadow_ambient");
    SF_GLAD_GL_SGIX_sprite = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_sprite");
    SF_GLAD_GL_SGIX_subsample = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_subsample");
    SF_GLAD_GL_SGIX_tag_sample_buffer = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_tag_sample_buffer");
    SF_GLAD_GL_SGIX_texture_add_env = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_texture_add_env");
    SF_GLAD_GL_SGIX_texture_coordinate_clamp = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_texture_coordinate_clamp");
    SF_GLAD_GL_SGIX_texture_lod_bias = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_texture_lod_bias");
    SF_GLAD_GL_SGIX_texture_multi_buffer = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_texture_multi_buffer");
    SF_GLAD_GL_SGIX_texture_scale_bias = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_texture_scale_bias");
    SF_GLAD_GL_SGIX_vertex_preclip = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_vertex_preclip");
    SF_GLAD_GL_SGIX_ycrcb = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_ycrcb");
    SF_GLAD_GL_SGIX_ycrcb_subsample = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_ycrcb_subsample");
    SF_GLAD_GL_SGIX_ycrcba = sf_glad_gl_has_extension(exts, exts_i, "GL_SGIX_ycrcba");
    SF_GLAD_GL_SGI_color_matrix = sf_glad_gl_has_extension(exts, exts_i, "GL_SGI_color_matrix");
    SF_GLAD_GL_SGI_color_table = sf_glad_gl_has_extension(exts, exts_i, "GL_SGI_color_table");
    SF_GLAD_GL_SGI_texture_color_table = sf_glad_gl_has_extension(exts, exts_i, "GL_SGI_texture_color_table");
    SF_GLAD_GL_SUNX_constant_data = sf_glad_gl_has_extension(exts, exts_i, "GL_SUNX_constant_data");
    SF_GLAD_GL_SUN_convolution_border_modes = sf_glad_gl_has_extension(exts, exts_i, "GL_SUN_convolution_border_modes");
    SF_GLAD_GL_SUN_global_alpha = sf_glad_gl_has_extension(exts, exts_i, "GL_SUN_global_alpha");
    SF_GLAD_GL_SUN_mesh_array = sf_glad_gl_has_extension(exts, exts_i, "GL_SUN_mesh_array");
    SF_GLAD_GL_SUN_slice_accum = sf_glad_gl_has_extension(exts, exts_i, "GL_SUN_slice_accum");
    SF_GLAD_GL_SUN_triangle_list = sf_glad_gl_has_extension(exts, exts_i, "GL_SUN_triangle_list");
    SF_GLAD_GL_SUN_vertex = sf_glad_gl_has_extension(exts, exts_i, "GL_SUN_vertex");
    SF_GLAD_GL_WIN_phong_shading = sf_glad_gl_has_extension(exts, exts_i, "GL_WIN_phong_shading");
    SF_GLAD_GL_WIN_specular_fog = sf_glad_gl_has_extension(exts, exts_i, "GL_WIN_specular_fog");

    sf_glad_gl_free_extensions(exts_i);

    return 1;
}

static int sf_glad_gl_find_core_gl(void) {
    int i;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        "OpenGL SC ",
        NULL
    };
    int major = 0;
    int minor = 0;
    version = (const char*) sf_glad_glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    SF_GLAD_GL_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    SF_GLAD_GL_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
    SF_GLAD_GL_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
    SF_GLAD_GL_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
    SF_GLAD_GL_VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
    SF_GLAD_GL_VERSION_1_5 = (major == 1 && minor >= 5) || major > 1;
    SF_GLAD_GL_VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;
    SF_GLAD_GL_VERSION_2_1 = (major == 2 && minor >= 1) || major > 2;
    SF_GLAD_GL_VERSION_3_0 = (major == 3 && minor >= 0) || major > 3;
    SF_GLAD_GL_VERSION_3_1 = (major == 3 && minor >= 1) || major > 3;
    SF_GLAD_GL_VERSION_3_2 = (major == 3 && minor >= 2) || major > 3;
    SF_GLAD_GL_VERSION_3_3 = (major == 3 && minor >= 3) || major > 3;
    SF_GLAD_GL_VERSION_4_0 = (major == 4 && minor >= 0) || major > 4;
    SF_GLAD_GL_VERSION_4_1 = (major == 4 && minor >= 1) || major > 4;
    SF_GLAD_GL_VERSION_4_2 = (major == 4 && minor >= 2) || major > 4;
    SF_GLAD_GL_VERSION_4_3 = (major == 4 && minor >= 3) || major > 4;
    SF_GLAD_GL_VERSION_4_4 = (major == 4 && minor >= 4) || major > 4;
    SF_GLAD_GL_VERSION_4_5 = (major == 4 && minor >= 5) || major > 4;
    SF_GLAD_GL_VERSION_4_6 = (major == 4 && minor >= 6) || major > 4;

    return GLAD_MAKE_VERSION(major, minor);
}

static int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr) {
    int version;

    sf_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    if(sf_glad_glGetString == NULL) return 0;
    version = sf_glad_gl_find_core_gl();

    sf_glad_gl_load_GL_VERSION_1_0(load, userptr);
    sf_glad_gl_load_GL_VERSION_1_1(load, userptr);
    sf_glad_gl_load_GL_VERSION_1_2(load, userptr);
    sf_glad_gl_load_GL_VERSION_1_3(load, userptr);
    sf_glad_gl_load_GL_VERSION_1_4(load, userptr);
    sf_glad_gl_load_GL_VERSION_1_5(load, userptr);
    sf_glad_gl_load_GL_VERSION_2_0(load, userptr);
    sf_glad_gl_load_GL_VERSION_2_1(load, userptr);
    sf_glad_gl_load_GL_VERSION_3_0(load, userptr);
    sf_glad_gl_load_GL_VERSION_3_1(load, userptr);
    sf_glad_gl_load_GL_VERSION_3_2(load, userptr);
    sf_glad_gl_load_GL_VERSION_3_3(load, userptr);
    sf_glad_gl_load_GL_VERSION_4_0(load, userptr);
    sf_glad_gl_load_GL_VERSION_4_1(load, userptr);
    sf_glad_gl_load_GL_VERSION_4_2(load, userptr);
    sf_glad_gl_load_GL_VERSION_4_3(load, userptr);
    sf_glad_gl_load_GL_VERSION_4_4(load, userptr);
    sf_glad_gl_load_GL_VERSION_4_5(load, userptr);
    sf_glad_gl_load_GL_VERSION_4_6(load, userptr);

    if (!sf_glad_gl_find_extensions_gl()) return 0;
    sf_glad_gl_load_GL_3DFX_tbuffer(load, userptr);
    sf_glad_gl_load_GL_AMD_debug_output(load, userptr);
    sf_glad_gl_load_GL_AMD_draw_buffers_blend(load, userptr);
    sf_glad_gl_load_GL_AMD_framebuffer_multisample_advanced(load, userptr);
    sf_glad_gl_load_GL_AMD_framebuffer_sample_positions(load, userptr);
    sf_glad_gl_load_GL_AMD_gpu_shader_int64(load, userptr);
    sf_glad_gl_load_GL_AMD_interleaved_elements(load, userptr);
    sf_glad_gl_load_GL_AMD_multi_draw_indirect(load, userptr);
    sf_glad_gl_load_GL_AMD_name_gen_delete(load, userptr);
    sf_glad_gl_load_GL_AMD_occlusion_query_event(load, userptr);
    sf_glad_gl_load_GL_AMD_performance_monitor(load, userptr);
    sf_glad_gl_load_GL_AMD_sample_positions(load, userptr);
    sf_glad_gl_load_GL_AMD_sparse_texture(load, userptr);
    sf_glad_gl_load_GL_AMD_stencil_operation_extended(load, userptr);
    sf_glad_gl_load_GL_AMD_vertex_shader_tessellator(load, userptr);
    sf_glad_gl_load_GL_APPLE_element_array(load, userptr);
    sf_glad_gl_load_GL_APPLE_fence(load, userptr);
    sf_glad_gl_load_GL_APPLE_flush_buffer_range(load, userptr);
    sf_glad_gl_load_GL_APPLE_object_purgeable(load, userptr);
    sf_glad_gl_load_GL_APPLE_texture_range(load, userptr);
    sf_glad_gl_load_GL_APPLE_vertex_array_object(load, userptr);
    sf_glad_gl_load_GL_APPLE_vertex_array_range(load, userptr);
    sf_glad_gl_load_GL_APPLE_vertex_program_evaluators(load, userptr);
    sf_glad_gl_load_GL_ARB_ES2_compatibility(load, userptr);
    sf_glad_gl_load_GL_ARB_ES3_1_compatibility(load, userptr);
    sf_glad_gl_load_GL_ARB_ES3_2_compatibility(load, userptr);
    sf_glad_gl_load_GL_ARB_base_instance(load, userptr);
    sf_glad_gl_load_GL_ARB_bindless_texture(load, userptr);
    sf_glad_gl_load_GL_ARB_blend_func_extended(load, userptr);
    sf_glad_gl_load_GL_ARB_buffer_storage(load, userptr);
    sf_glad_gl_load_GL_ARB_cl_event(load, userptr);
    sf_glad_gl_load_GL_ARB_clear_buffer_object(load, userptr);
    sf_glad_gl_load_GL_ARB_clear_texture(load, userptr);
    sf_glad_gl_load_GL_ARB_clip_control(load, userptr);
    sf_glad_gl_load_GL_ARB_color_buffer_float(load, userptr);
    sf_glad_gl_load_GL_ARB_compute_shader(load, userptr);
    sf_glad_gl_load_GL_ARB_compute_variable_group_size(load, userptr);
    sf_glad_gl_load_GL_ARB_copy_buffer(load, userptr);
    sf_glad_gl_load_GL_ARB_copy_image(load, userptr);
    sf_glad_gl_load_GL_ARB_debug_output(load, userptr);
    sf_glad_gl_load_GL_ARB_direct_state_access(load, userptr);
    sf_glad_gl_load_GL_ARB_draw_buffers(load, userptr);
    sf_glad_gl_load_GL_ARB_draw_buffers_blend(load, userptr);
    sf_glad_gl_load_GL_ARB_draw_elements_base_vertex(load, userptr);
    sf_glad_gl_load_GL_ARB_draw_indirect(load, userptr);
    sf_glad_gl_load_GL_ARB_draw_instanced(load, userptr);
    sf_glad_gl_load_GL_ARB_fragment_program(load, userptr);
    sf_glad_gl_load_GL_ARB_framebuffer_no_attachments(load, userptr);
    sf_glad_gl_load_GL_ARB_framebuffer_object(load, userptr);
    sf_glad_gl_load_GL_ARB_geometry_shader4(load, userptr);
    sf_glad_gl_load_GL_ARB_get_program_binary(load, userptr);
    sf_glad_gl_load_GL_ARB_get_texture_sub_image(load, userptr);
    sf_glad_gl_load_GL_ARB_gl_spirv(load, userptr);
    sf_glad_gl_load_GL_ARB_gpu_shader_fp64(load, userptr);
    sf_glad_gl_load_GL_ARB_gpu_shader_int64(load, userptr);
    sf_glad_gl_load_GL_ARB_imaging(load, userptr);
    sf_glad_gl_load_GL_ARB_indirect_parameters(load, userptr);
    sf_glad_gl_load_GL_ARB_instanced_arrays(load, userptr);
    sf_glad_gl_load_GL_ARB_internalformat_query(load, userptr);
    sf_glad_gl_load_GL_ARB_internalformat_query2(load, userptr);
    sf_glad_gl_load_GL_ARB_invalidate_subdata(load, userptr);
    sf_glad_gl_load_GL_ARB_map_buffer_range(load, userptr);
    sf_glad_gl_load_GL_ARB_matrix_palette(load, userptr);
    sf_glad_gl_load_GL_ARB_multi_bind(load, userptr);
    sf_glad_gl_load_GL_ARB_multi_draw_indirect(load, userptr);
    sf_glad_gl_load_GL_ARB_multisample(load, userptr);
    sf_glad_gl_load_GL_ARB_multitexture(load, userptr);
    sf_glad_gl_load_GL_ARB_occlusion_query(load, userptr);
    sf_glad_gl_load_GL_ARB_parallel_shader_compile(load, userptr);
    sf_glad_gl_load_GL_ARB_point_parameters(load, userptr);
    sf_glad_gl_load_GL_ARB_polygon_offset_clamp(load, userptr);
    sf_glad_gl_load_GL_ARB_program_interface_query(load, userptr);
    sf_glad_gl_load_GL_ARB_provoking_vertex(load, userptr);
    sf_glad_gl_load_GL_ARB_robustness(load, userptr);
    sf_glad_gl_load_GL_ARB_sample_locations(load, userptr);
    sf_glad_gl_load_GL_ARB_sample_shading(load, userptr);
    sf_glad_gl_load_GL_ARB_sampler_objects(load, userptr);
    sf_glad_gl_load_GL_ARB_separate_shader_objects(load, userptr);
    sf_glad_gl_load_GL_ARB_shader_atomic_counters(load, userptr);
    sf_glad_gl_load_GL_ARB_shader_image_load_store(load, userptr);
    sf_glad_gl_load_GL_ARB_shader_objects(load, userptr);
    sf_glad_gl_load_GL_ARB_shader_storage_buffer_object(load, userptr);
    sf_glad_gl_load_GL_ARB_shader_subroutine(load, userptr);
    sf_glad_gl_load_GL_ARB_shading_language_include(load, userptr);
    sf_glad_gl_load_GL_ARB_sparse_buffer(load, userptr);
    sf_glad_gl_load_GL_ARB_sparse_texture(load, userptr);
    sf_glad_gl_load_GL_ARB_sync(load, userptr);
    sf_glad_gl_load_GL_ARB_tessellation_shader(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_barrier(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_buffer_object(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_buffer_range(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_compression(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_multisample(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_storage(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_storage_multisample(load, userptr);
    sf_glad_gl_load_GL_ARB_texture_view(load, userptr);
    sf_glad_gl_load_GL_ARB_timer_query(load, userptr);
    sf_glad_gl_load_GL_ARB_transform_feedback2(load, userptr);
    sf_glad_gl_load_GL_ARB_transform_feedback3(load, userptr);
    sf_glad_gl_load_GL_ARB_transform_feedback_instanced(load, userptr);
    sf_glad_gl_load_GL_ARB_transpose_matrix(load, userptr);
    sf_glad_gl_load_GL_ARB_uniform_buffer_object(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_array_object(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_attrib_64bit(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_attrib_binding(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_blend(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_buffer_object(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_program(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_shader(load, userptr);
    sf_glad_gl_load_GL_ARB_vertex_type_2_10_10_10_rev(load, userptr);
    sf_glad_gl_load_GL_ARB_viewport_array(load, userptr);
    sf_glad_gl_load_GL_ARB_window_pos(load, userptr);
    sf_glad_gl_load_GL_ATI_draw_buffers(load, userptr);
    sf_glad_gl_load_GL_ATI_element_array(load, userptr);
    sf_glad_gl_load_GL_ATI_envmap_bumpmap(load, userptr);
    sf_glad_gl_load_GL_ATI_fragment_shader(load, userptr);
    sf_glad_gl_load_GL_ATI_map_object_buffer(load, userptr);
    sf_glad_gl_load_GL_ATI_pn_triangles(load, userptr);
    sf_glad_gl_load_GL_ATI_separate_stencil(load, userptr);
    sf_glad_gl_load_GL_ATI_vertex_array_object(load, userptr);
    sf_glad_gl_load_GL_ATI_vertex_attrib_array_object(load, userptr);
    sf_glad_gl_load_GL_ATI_vertex_streams(load, userptr);
    sf_glad_gl_load_GL_EXT_EGL_image_storage(load, userptr);
    sf_glad_gl_load_GL_EXT_bindable_uniform(load, userptr);
    sf_glad_gl_load_GL_EXT_blend_color(load, userptr);
    sf_glad_gl_load_GL_EXT_blend_equation_separate(load, userptr);
    sf_glad_gl_load_GL_EXT_blend_func_separate(load, userptr);
    sf_glad_gl_load_GL_EXT_blend_minmax(load, userptr);
    sf_glad_gl_load_GL_EXT_color_subtable(load, userptr);
    sf_glad_gl_load_GL_EXT_compiled_vertex_array(load, userptr);
    sf_glad_gl_load_GL_EXT_convolution(load, userptr);
    sf_glad_gl_load_GL_EXT_coordinate_frame(load, userptr);
    sf_glad_gl_load_GL_EXT_copy_texture(load, userptr);
    sf_glad_gl_load_GL_EXT_cull_vertex(load, userptr);
    sf_glad_gl_load_GL_EXT_debug_label(load, userptr);
    sf_glad_gl_load_GL_EXT_debug_marker(load, userptr);
    sf_glad_gl_load_GL_EXT_depth_bounds_test(load, userptr);
    sf_glad_gl_load_GL_EXT_direct_state_access(load, userptr);
    sf_glad_gl_load_GL_EXT_draw_buffers2(load, userptr);
    sf_glad_gl_load_GL_EXT_draw_instanced(load, userptr);
    sf_glad_gl_load_GL_EXT_draw_range_elements(load, userptr);
    sf_glad_gl_load_GL_EXT_external_buffer(load, userptr);
    sf_glad_gl_load_GL_EXT_fog_coord(load, userptr);
    sf_glad_gl_load_GL_EXT_framebuffer_blit(load, userptr);
    sf_glad_gl_load_GL_EXT_framebuffer_blit_layers(load, userptr);
    sf_glad_gl_load_GL_EXT_framebuffer_multisample(load, userptr);
    sf_glad_gl_load_GL_EXT_framebuffer_object(load, userptr);
    sf_glad_gl_load_GL_EXT_geometry_shader4(load, userptr);
    sf_glad_gl_load_GL_EXT_gpu_program_parameters(load, userptr);
    sf_glad_gl_load_GL_EXT_gpu_shader4(load, userptr);
    sf_glad_gl_load_GL_EXT_histogram(load, userptr);
    sf_glad_gl_load_GL_EXT_index_func(load, userptr);
    sf_glad_gl_load_GL_EXT_index_material(load, userptr);
    sf_glad_gl_load_GL_EXT_light_texture(load, userptr);
    sf_glad_gl_load_GL_EXT_memory_object(load, userptr);
    sf_glad_gl_load_GL_EXT_memory_object_fd(load, userptr);
    sf_glad_gl_load_GL_EXT_memory_object_win32(load, userptr);
    sf_glad_gl_load_GL_EXT_multi_draw_arrays(load, userptr);
    sf_glad_gl_load_GL_EXT_multisample(load, userptr);
    sf_glad_gl_load_GL_EXT_paletted_texture(load, userptr);
    sf_glad_gl_load_GL_EXT_pixel_transform(load, userptr);
    sf_glad_gl_load_GL_EXT_point_parameters(load, userptr);
    sf_glad_gl_load_GL_EXT_polygon_offset(load, userptr);
    sf_glad_gl_load_GL_EXT_polygon_offset_clamp(load, userptr);
    sf_glad_gl_load_GL_EXT_provoking_vertex(load, userptr);
    sf_glad_gl_load_GL_EXT_raster_multisample(load, userptr);
    sf_glad_gl_load_GL_EXT_secondary_color(load, userptr);
    sf_glad_gl_load_GL_EXT_semaphore(load, userptr);
    sf_glad_gl_load_GL_EXT_semaphore_fd(load, userptr);
    sf_glad_gl_load_GL_EXT_semaphore_win32(load, userptr);
    sf_glad_gl_load_GL_EXT_separate_shader_objects(load, userptr);
    sf_glad_gl_load_GL_EXT_shader_framebuffer_fetch_non_coherent(load, userptr);
    sf_glad_gl_load_GL_EXT_shader_image_load_store(load, userptr);
    sf_glad_gl_load_GL_EXT_stencil_clear_tag(load, userptr);
    sf_glad_gl_load_GL_EXT_stencil_two_side(load, userptr);
    sf_glad_gl_load_GL_EXT_subtexture(load, userptr);
    sf_glad_gl_load_GL_EXT_texture3D(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_array(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_buffer_object(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_integer(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_object(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_perturb_normal(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_storage(load, userptr);
    sf_glad_gl_load_GL_EXT_timer_query(load, userptr);
    sf_glad_gl_load_GL_EXT_transform_feedback(load, userptr);
    sf_glad_gl_load_GL_EXT_vertex_array(load, userptr);
    sf_glad_gl_load_GL_EXT_vertex_attrib_64bit(load, userptr);
    sf_glad_gl_load_GL_EXT_vertex_shader(load, userptr);
    sf_glad_gl_load_GL_EXT_vertex_weighting(load, userptr);
    sf_glad_gl_load_GL_EXT_win32_keyed_mutex(load, userptr);
    sf_glad_gl_load_GL_EXT_window_rectangles(load, userptr);
    sf_glad_gl_load_GL_EXT_x11_sync_object(load, userptr);
    sf_glad_gl_load_GL_GREMEDY_frame_terminator(load, userptr);
    sf_glad_gl_load_GL_GREMEDY_string_marker(load, userptr);
    sf_glad_gl_load_GL_HP_image_transform(load, userptr);
    sf_glad_gl_load_GL_IBM_multimode_draw_arrays(load, userptr);
    sf_glad_gl_load_GL_IBM_static_data(load, userptr);
    sf_glad_gl_load_GL_IBM_vertex_array_lists(load, userptr);
    sf_glad_gl_load_GL_INGR_blend_func_separate(load, userptr);
    sf_glad_gl_load_GL_INTEL_framebuffer_CMAA(load, userptr);
    sf_glad_gl_load_GL_INTEL_map_texture(load, userptr);
    sf_glad_gl_load_GL_INTEL_parallel_arrays(load, userptr);
    sf_glad_gl_load_GL_INTEL_performance_query(load, userptr);
    sf_glad_gl_load_GL_KHR_blend_equation_advanced(load, userptr);
    sf_glad_gl_load_GL_KHR_debug(load, userptr);
    sf_glad_gl_load_GL_KHR_parallel_shader_compile(load, userptr);
    sf_glad_gl_load_GL_KHR_robustness(load, userptr);
    sf_glad_gl_load_GL_MESA_framebuffer_flip_y(load, userptr);
    sf_glad_gl_load_GL_MESA_resize_buffers(load, userptr);
    sf_glad_gl_load_GL_MESA_window_pos(load, userptr);
    sf_glad_gl_load_GL_NVX_conditional_render(load, userptr);
    sf_glad_gl_load_GL_NVX_gpu_multicast2(load, userptr);
    sf_glad_gl_load_GL_NVX_linked_gpu_multicast(load, userptr);
    sf_glad_gl_load_GL_NVX_progress_fence(load, userptr);
    sf_glad_gl_load_GL_NV_alpha_to_coverage_dither_control(load, userptr);
    sf_glad_gl_load_GL_NV_bindless_multi_draw_indirect(load, userptr);
    sf_glad_gl_load_GL_NV_bindless_multi_draw_indirect_count(load, userptr);
    sf_glad_gl_load_GL_NV_bindless_texture(load, userptr);
    sf_glad_gl_load_GL_NV_blend_equation_advanced(load, userptr);
    sf_glad_gl_load_GL_NV_clip_space_w_scaling(load, userptr);
    sf_glad_gl_load_GL_NV_command_list(load, userptr);
    sf_glad_gl_load_GL_NV_conditional_render(load, userptr);
    sf_glad_gl_load_GL_NV_conservative_raster(load, userptr);
    sf_glad_gl_load_GL_NV_conservative_raster_dilate(load, userptr);
    sf_glad_gl_load_GL_NV_conservative_raster_pre_snap_triangles(load, userptr);
    sf_glad_gl_load_GL_NV_copy_image(load, userptr);
    sf_glad_gl_load_GL_NV_depth_buffer_float(load, userptr);
    sf_glad_gl_load_GL_NV_draw_texture(load, userptr);
    sf_glad_gl_load_GL_NV_draw_vulkan_image(load, userptr);
    sf_glad_gl_load_GL_NV_evaluators(load, userptr);
    sf_glad_gl_load_GL_NV_explicit_multisample(load, userptr);
    sf_glad_gl_load_GL_NV_fence(load, userptr);
    sf_glad_gl_load_GL_NV_fragment_coverage_to_color(load, userptr);
    sf_glad_gl_load_GL_NV_fragment_program(load, userptr);
    sf_glad_gl_load_GL_NV_framebuffer_mixed_samples(load, userptr);
    sf_glad_gl_load_GL_NV_framebuffer_multisample_coverage(load, userptr);
    sf_glad_gl_load_GL_NV_geometry_program4(load, userptr);
    sf_glad_gl_load_GL_NV_gpu_multicast(load, userptr);
    sf_glad_gl_load_GL_NV_gpu_program4(load, userptr);
    sf_glad_gl_load_GL_NV_gpu_program5(load, userptr);
    sf_glad_gl_load_GL_NV_gpu_shader5(load, userptr);
    sf_glad_gl_load_GL_NV_half_float(load, userptr);
    sf_glad_gl_load_GL_NV_internalformat_sample_query(load, userptr);
    sf_glad_gl_load_GL_NV_memory_attachment(load, userptr);
    sf_glad_gl_load_GL_NV_memory_object_sparse(load, userptr);
    sf_glad_gl_load_GL_NV_mesh_shader(load, userptr);
    sf_glad_gl_load_GL_NV_occlusion_query(load, userptr);
    sf_glad_gl_load_GL_NV_parameter_buffer_object(load, userptr);
    sf_glad_gl_load_GL_NV_path_rendering(load, userptr);
    sf_glad_gl_load_GL_NV_pixel_data_range(load, userptr);
    sf_glad_gl_load_GL_NV_point_sprite(load, userptr);
    sf_glad_gl_load_GL_NV_present_video(load, userptr);
    sf_glad_gl_load_GL_NV_primitive_restart(load, userptr);
    sf_glad_gl_load_GL_NV_query_resource(load, userptr);
    sf_glad_gl_load_GL_NV_query_resource_tag(load, userptr);
    sf_glad_gl_load_GL_NV_register_combiners(load, userptr);
    sf_glad_gl_load_GL_NV_register_combiners2(load, userptr);
    sf_glad_gl_load_GL_NV_sample_locations(load, userptr);
    sf_glad_gl_load_GL_NV_scissor_exclusive(load, userptr);
    sf_glad_gl_load_GL_NV_shader_buffer_load(load, userptr);
    sf_glad_gl_load_GL_NV_shading_rate_image(load, userptr);
    sf_glad_gl_load_GL_NV_texture_barrier(load, userptr);
    sf_glad_gl_load_GL_NV_texture_multisample(load, userptr);
    sf_glad_gl_load_GL_NV_timeline_semaphore(load, userptr);
    sf_glad_gl_load_GL_NV_transform_feedback(load, userptr);
    sf_glad_gl_load_GL_NV_transform_feedback2(load, userptr);
    sf_glad_gl_load_GL_NV_vdpau_interop(load, userptr);
    sf_glad_gl_load_GL_NV_vdpau_interop2(load, userptr);
    sf_glad_gl_load_GL_NV_vertex_array_range(load, userptr);
    sf_glad_gl_load_GL_NV_vertex_attrib_integer_64bit(load, userptr);
    sf_glad_gl_load_GL_NV_vertex_buffer_unified_memory(load, userptr);
    sf_glad_gl_load_GL_NV_vertex_program(load, userptr);
    sf_glad_gl_load_GL_NV_vertex_program4(load, userptr);
    sf_glad_gl_load_GL_NV_video_capture(load, userptr);
    sf_glad_gl_load_GL_NV_viewport_swizzle(load, userptr);
    sf_glad_gl_load_GL_OES_byte_coordinates(load, userptr);
    sf_glad_gl_load_GL_OES_fixed_point(load, userptr);
    sf_glad_gl_load_GL_OES_query_matrix(load, userptr);
    sf_glad_gl_load_GL_OES_single_precision(load, userptr);
    sf_glad_gl_load_GL_OVR_multiview(load, userptr);
    sf_glad_gl_load_GL_PGI_misc_hints(load, userptr);
    sf_glad_gl_load_GL_SGIS_detail_texture(load, userptr);
    sf_glad_gl_load_GL_SGIS_fog_function(load, userptr);
    sf_glad_gl_load_GL_SGIS_multisample(load, userptr);
    sf_glad_gl_load_GL_SGIS_pixel_texture(load, userptr);
    sf_glad_gl_load_GL_SGIS_point_parameters(load, userptr);
    sf_glad_gl_load_GL_SGIS_sharpen_texture(load, userptr);
    sf_glad_gl_load_GL_SGIS_texture4D(load, userptr);
    sf_glad_gl_load_GL_SGIS_texture_color_mask(load, userptr);
    sf_glad_gl_load_GL_SGIS_texture_filter4(load, userptr);
    sf_glad_gl_load_GL_SGIX_async(load, userptr);
    sf_glad_gl_load_GL_SGIX_flush_raster(load, userptr);
    sf_glad_gl_load_GL_SGIX_fragment_lighting(load, userptr);
    sf_glad_gl_load_GL_SGIX_framezoom(load, userptr);
    sf_glad_gl_load_GL_SGIX_igloo_interface(load, userptr);
    sf_glad_gl_load_GL_SGIX_instruments(load, userptr);
    sf_glad_gl_load_GL_SGIX_list_priority(load, userptr);
    sf_glad_gl_load_GL_SGIX_pixel_texture(load, userptr);
    sf_glad_gl_load_GL_SGIX_polynomial_ffd(load, userptr);
    sf_glad_gl_load_GL_SGIX_reference_plane(load, userptr);
    sf_glad_gl_load_GL_SGIX_sprite(load, userptr);
    sf_glad_gl_load_GL_SGIX_tag_sample_buffer(load, userptr);
    sf_glad_gl_load_GL_SGI_color_table(load, userptr);
    sf_glad_gl_load_GL_SUNX_constant_data(load, userptr);
    sf_glad_gl_load_GL_SUN_global_alpha(load, userptr);
    sf_glad_gl_load_GL_SUN_mesh_array(load, userptr);
    sf_glad_gl_load_GL_SUN_triangle_list(load, userptr);
    sf_glad_gl_load_GL_SUN_vertex(load, userptr);


    sf_glad_gl_resolve_aliases();

    return version;
}


static int gladLoadGL( GLADloadfunc load) {
    return gladLoadGLUserPtr( sf_glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}

static int sf_glad_gl_find_extensions_gles1(void) {
    const char *exts = NULL;
    char **exts_i = NULL;
    if (!sf_glad_gl_get_extensions(&exts, &exts_i)) return 0;

    SF_GLAD_GL_EXT_blend_minmax = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_blend_minmax");
    SF_GLAD_GL_EXT_debug_marker = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_debug_marker");
    SF_GLAD_GL_EXT_multi_draw_arrays = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_multi_draw_arrays");
    SF_GLAD_GL_EXT_texture_filter_anisotropic = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_filter_anisotropic");
    SF_GLAD_GL_EXT_texture_lod_bias = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_lod_bias");
    SF_GLAD_GL_EXT_texture_storage = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_storage");
    SF_GLAD_GL_KHR_debug = sf_glad_gl_has_extension(exts, exts_i, "GL_KHR_debug");
    SF_GLAD_GL_NV_fence = sf_glad_gl_has_extension(exts, exts_i, "GL_NV_fence");
    SF_GLAD_GL_OES_byte_coordinates = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_byte_coordinates");
    SF_GLAD_GL_OES_compressed_paletted_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_compressed_paletted_texture");
    SF_GLAD_GL_OES_fixed_point = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_fixed_point");
    SF_GLAD_GL_OES_query_matrix = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_query_matrix");
    SF_GLAD_GL_OES_read_format = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_read_format");
    SF_GLAD_GL_OES_single_precision = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_single_precision");
    SF_GLAD_GL_AMD_compressed_3DC_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_compressed_3DC_texture");
    SF_GLAD_GL_AMD_compressed_ATC_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_AMD_compressed_ATC_texture");
    SF_GLAD_GL_APPLE_copy_texture_levels = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_copy_texture_levels");
    SF_GLAD_GL_APPLE_framebuffer_multisample = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_framebuffer_multisample");
    SF_GLAD_GL_APPLE_sync = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_sync");
    SF_GLAD_GL_APPLE_texture_2D_limited_npot = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_texture_2D_limited_npot");
    SF_GLAD_GL_APPLE_texture_format_BGRA8888 = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_texture_format_BGRA8888");
    SF_GLAD_GL_APPLE_texture_max_level = sf_glad_gl_has_extension(exts, exts_i, "GL_APPLE_texture_max_level");
    SF_GLAD_GL_ARM_rgba8 = sf_glad_gl_has_extension(exts, exts_i, "GL_ARM_rgba8");
    SF_GLAD_GL_EXT_discard_framebuffer = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_discard_framebuffer");
    SF_GLAD_GL_EXT_map_buffer_range = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_map_buffer_range");
    SF_GLAD_GL_EXT_multisampled_render_to_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_multisampled_render_to_texture");
    SF_GLAD_GL_EXT_read_format_bgra = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_read_format_bgra");
    SF_GLAD_GL_EXT_robustness = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_robustness");
    SF_GLAD_GL_EXT_sRGB = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_sRGB");
    SF_GLAD_GL_EXT_texture_compression_dxt1 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_compression_dxt1");
    SF_GLAD_GL_EXT_texture_format_BGRA8888 = sf_glad_gl_has_extension(exts, exts_i, "GL_EXT_texture_format_BGRA8888");
    SF_GLAD_GL_IMG_multisampled_render_to_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_IMG_multisampled_render_to_texture");
    SF_GLAD_GL_IMG_read_format = sf_glad_gl_has_extension(exts, exts_i, "GL_IMG_read_format");
    SF_GLAD_GL_IMG_texture_compression_pvrtc = sf_glad_gl_has_extension(exts, exts_i, "GL_IMG_texture_compression_pvrtc");
    SF_GLAD_GL_IMG_texture_env_enhanced_fixed_function = sf_glad_gl_has_extension(exts, exts_i, "GL_IMG_texture_env_enhanced_fixed_function");
    SF_GLAD_GL_IMG_user_clip_plane = sf_glad_gl_has_extension(exts, exts_i, "GL_IMG_user_clip_plane");
    SF_GLAD_GL_OES_EGL_image = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_EGL_image");
    SF_GLAD_GL_OES_EGL_image_external = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_EGL_image_external");
    SF_GLAD_GL_OES_blend_equation_separate = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_blend_equation_separate");
    SF_GLAD_GL_OES_blend_func_separate = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_blend_func_separate");
    SF_GLAD_GL_OES_blend_subtract = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_blend_subtract");
    SF_GLAD_GL_OES_compressed_ETC1_RGB8_sub_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_compressed_ETC1_RGB8_sub_texture");
    SF_GLAD_GL_OES_compressed_ETC1_RGB8_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_compressed_ETC1_RGB8_texture");
    SF_GLAD_GL_OES_depth24 = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_depth24");
    SF_GLAD_GL_OES_depth32 = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_depth32");
    SF_GLAD_GL_OES_draw_texture = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_draw_texture");
    SF_GLAD_GL_OES_element_index_uint = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_element_index_uint");
    SF_GLAD_GL_OES_extended_matrix_palette = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_extended_matrix_palette");
    SF_GLAD_GL_OES_fbo_render_mipmap = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_fbo_render_mipmap");
    SF_GLAD_GL_OES_framebuffer_object = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_framebuffer_object");
    SF_GLAD_GL_OES_mapbuffer = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_mapbuffer");
    SF_GLAD_GL_OES_matrix_get = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_matrix_get");
    SF_GLAD_GL_OES_matrix_palette = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_matrix_palette");
    SF_GLAD_GL_OES_packed_depth_stencil = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_packed_depth_stencil");
    SF_GLAD_GL_OES_point_size_array = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_point_size_array");
    SF_GLAD_GL_OES_point_sprite = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_point_sprite");
    SF_GLAD_GL_OES_required_internalformat = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_required_internalformat");
    SF_GLAD_GL_OES_rgb8_rgba8 = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_rgb8_rgba8");
    SF_GLAD_GL_OES_stencil1 = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_stencil1");
    SF_GLAD_GL_OES_stencil4 = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_stencil4");
    SF_GLAD_GL_OES_stencil8 = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_stencil8");
    SF_GLAD_GL_OES_stencil_wrap = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_stencil_wrap");
    SF_GLAD_GL_OES_surfaceless_context = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_surfaceless_context");
    SF_GLAD_GL_OES_texture_cube_map = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_texture_cube_map");
    SF_GLAD_GL_OES_texture_env_crossbar = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_texture_env_crossbar");
    SF_GLAD_GL_OES_texture_mirrored_repeat = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_texture_mirrored_repeat");
    SF_GLAD_GL_OES_texture_npot = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_texture_npot");
    SF_GLAD_GL_OES_vertex_array_object = sf_glad_gl_has_extension(exts, exts_i, "GL_OES_vertex_array_object");
    SF_GLAD_GL_QCOM_driver_control = sf_glad_gl_has_extension(exts, exts_i, "GL_QCOM_driver_control");
    SF_GLAD_GL_QCOM_extended_get = sf_glad_gl_has_extension(exts, exts_i, "GL_QCOM_extended_get");
    SF_GLAD_GL_QCOM_extended_get2 = sf_glad_gl_has_extension(exts, exts_i, "GL_QCOM_extended_get2");
    SF_GLAD_GL_QCOM_perfmon_global_mode = sf_glad_gl_has_extension(exts, exts_i, "GL_QCOM_perfmon_global_mode");
    SF_GLAD_GL_QCOM_tiled_rendering = sf_glad_gl_has_extension(exts, exts_i, "GL_QCOM_tiled_rendering");
    SF_GLAD_GL_QCOM_writeonly_rendering = sf_glad_gl_has_extension(exts, exts_i, "GL_QCOM_writeonly_rendering");

    sf_glad_gl_free_extensions(exts_i);

    return 1;
}

static int sf_glad_gl_find_core_gles1(void) {
    int i;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        "OpenGL SC ",
        NULL
    };
    int major = 0;
    int minor = 0;
    version = (const char*) sf_glad_glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    SF_GLAD_GL_VERSION_ES_CM_1_0 = (major == 1 && minor >= 0) || major > 1;

    return GLAD_MAKE_VERSION(major, minor);
}

static int gladLoadGLES1UserPtr( GLADuserptrloadfunc load, void *userptr) {
    int version;

    sf_glad_glGetString = (PFNGLGETSTRINGPROC) load(userptr, "glGetString");
    if(sf_glad_glGetString == NULL) return 0;
    version = sf_glad_gl_find_core_gles1();

    sf_glad_gl_load_GL_VERSION_ES_CM_1_0(load, userptr);

    if (!sf_glad_gl_find_extensions_gles1()) return 0;
    sf_glad_gl_load_GL_EXT_blend_minmax(load, userptr);
    sf_glad_gl_load_GL_EXT_debug_marker(load, userptr);
    sf_glad_gl_load_GL_EXT_multi_draw_arrays(load, userptr);
    sf_glad_gl_load_GL_EXT_texture_storage(load, userptr);
    sf_glad_gl_load_GL_KHR_debug(load, userptr);
    sf_glad_gl_load_GL_NV_fence(load, userptr);
    sf_glad_gl_load_GL_OES_byte_coordinates(load, userptr);
    sf_glad_gl_load_GL_OES_fixed_point(load, userptr);
    sf_glad_gl_load_GL_OES_query_matrix(load, userptr);
    sf_glad_gl_load_GL_OES_single_precision(load, userptr);
    sf_glad_gl_load_GL_APPLE_copy_texture_levels(load, userptr);
    sf_glad_gl_load_GL_APPLE_framebuffer_multisample(load, userptr);
    sf_glad_gl_load_GL_APPLE_sync(load, userptr);
    sf_glad_gl_load_GL_EXT_discard_framebuffer(load, userptr);
    sf_glad_gl_load_GL_EXT_map_buffer_range(load, userptr);
    sf_glad_gl_load_GL_EXT_multisampled_render_to_texture(load, userptr);
    sf_glad_gl_load_GL_EXT_robustness(load, userptr);
    sf_glad_gl_load_GL_IMG_multisampled_render_to_texture(load, userptr);
    sf_glad_gl_load_GL_IMG_user_clip_plane(load, userptr);
    sf_glad_gl_load_GL_OES_EGL_image(load, userptr);
    sf_glad_gl_load_GL_OES_blend_equation_separate(load, userptr);
    sf_glad_gl_load_GL_OES_blend_func_separate(load, userptr);
    sf_glad_gl_load_GL_OES_blend_subtract(load, userptr);
    sf_glad_gl_load_GL_OES_draw_texture(load, userptr);
    sf_glad_gl_load_GL_OES_framebuffer_object(load, userptr);
    sf_glad_gl_load_GL_OES_mapbuffer(load, userptr);
    sf_glad_gl_load_GL_OES_matrix_palette(load, userptr);
    sf_glad_gl_load_GL_OES_point_size_array(load, userptr);
    sf_glad_gl_load_GL_OES_texture_cube_map(load, userptr);
    sf_glad_gl_load_GL_OES_vertex_array_object(load, userptr);
    sf_glad_gl_load_GL_QCOM_driver_control(load, userptr);
    sf_glad_gl_load_GL_QCOM_extended_get(load, userptr);
    sf_glad_gl_load_GL_QCOM_extended_get2(load, userptr);
    sf_glad_gl_load_GL_QCOM_tiled_rendering(load, userptr);


    sf_glad_gl_resolve_aliases();

    return version;
}


static int gladLoadGLES1( GLADloadfunc load) {
    return gladLoadGLES1UserPtr( sf_glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}



 


#ifdef __cplusplus
}
#endif

#endif /* SF_GLAD_GL_IMPLEMENTATION */

