/**
 * Loader generated by glad 2.0.8 on Sat Apr 19 13:32:28 2025
 *
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 *
 * Generator: C/C++
 * Specification: glx
 * Extensions: 66
 *
 * APIs:
 *  - glx=1.4
 *
 * Options:
 *  - ALIAS = True
 *  - DEBUG = False
 *  - HEADER_ONLY = True
 *  - LOADER = True
 *  - MX = False
 *  - ON_DEMAND = False
 *
 * Commandline:
 *    --api='glx=1.4' --extensions='GLX_3DFX_multisample,GLX_AMD_gpu_association,GLX_ARB_context_flush_control,GLX_ARB_create_context,GLX_ARB_create_context_no_error,GLX_ARB_create_context_profile,GLX_ARB_create_context_robustness,GLX_ARB_fbconfig_float,GLX_ARB_framebuffer_sRGB,GLX_ARB_get_proc_address,GLX_ARB_multisample,GLX_ARB_robustness_application_isolation,GLX_ARB_robustness_share_group_isolation,GLX_ARB_vertex_buffer_object,GLX_EXT_buffer_age,GLX_EXT_context_priority,GLX_EXT_create_context_es2_profile,GLX_EXT_create_context_es_profile,GLX_EXT_fbconfig_packed_float,GLX_EXT_framebuffer_sRGB,GLX_EXT_get_drawable_type,GLX_EXT_import_context,GLX_EXT_libglvnd,GLX_EXT_no_config_context,GLX_EXT_stereo_tree,GLX_EXT_swap_control,GLX_EXT_swap_control_tear,GLX_EXT_texture_from_pixmap,GLX_EXT_visual_info,GLX_EXT_visual_rating,GLX_INTEL_swap_event,GLX_MESA_agp_offset,GLX_MESA_copy_sub_buffer,GLX_MESA_pixmap_colormap,GLX_MESA_query_renderer,GLX_MESA_release_buffers,GLX_MESA_set_3dfx_mode,GLX_MESA_swap_control,GLX_NV_copy_buffer,GLX_NV_copy_image,GLX_NV_delay_before_swap,GLX_NV_float_buffer,GLX_NV_multigpu_context,GLX_NV_multisample_coverage,GLX_NV_present_video,GLX_NV_robustness_video_memory_purge,GLX_NV_swap_group,GLX_NV_video_capture,GLX_NV_video_out,GLX_OML_swap_method,GLX_OML_sync_control,GLX_SGIS_blended_overlay,GLX_SGIS_multisample,GLX_SGIS_shared_multisample,GLX_SGIX_fbconfig,GLX_SGIX_hyperpipe,GLX_SGIX_pbuffer,GLX_SGIX_swap_barrier,GLX_SGIX_swap_group,GLX_SGIX_video_resize,GLX_SGIX_visual_select_group,GLX_SGI_cushion,GLX_SGI_make_current_read,GLX_SGI_swap_control,GLX_SGI_video_sync,GLX_SUN_get_transparent_index' c --alias --header-only --loader
 *
 * Online:
 *    http://glad.sh/#api=glx%3D1.4&extensions=GLX_3DFX_multisample%2CGLX_AMD_gpu_association%2CGLX_ARB_context_flush_control%2CGLX_ARB_create_context%2CGLX_ARB_create_context_no_error%2CGLX_ARB_create_context_profile%2CGLX_ARB_create_context_robustness%2CGLX_ARB_fbconfig_float%2CGLX_ARB_framebuffer_sRGB%2CGLX_ARB_get_proc_address%2CGLX_ARB_multisample%2CGLX_ARB_robustness_application_isolation%2CGLX_ARB_robustness_share_group_isolation%2CGLX_ARB_vertex_buffer_object%2CGLX_EXT_buffer_age%2CGLX_EXT_context_priority%2CGLX_EXT_create_context_es2_profile%2CGLX_EXT_create_context_es_profile%2CGLX_EXT_fbconfig_packed_float%2CGLX_EXT_framebuffer_sRGB%2CGLX_EXT_get_drawable_type%2CGLX_EXT_import_context%2CGLX_EXT_libglvnd%2CGLX_EXT_no_config_context%2CGLX_EXT_stereo_tree%2CGLX_EXT_swap_control%2CGLX_EXT_swap_control_tear%2CGLX_EXT_texture_from_pixmap%2CGLX_EXT_visual_info%2CGLX_EXT_visual_rating%2CGLX_INTEL_swap_event%2CGLX_MESA_agp_offset%2CGLX_MESA_copy_sub_buffer%2CGLX_MESA_pixmap_colormap%2CGLX_MESA_query_renderer%2CGLX_MESA_release_buffers%2CGLX_MESA_set_3dfx_mode%2CGLX_MESA_swap_control%2CGLX_NV_copy_buffer%2CGLX_NV_copy_image%2CGLX_NV_delay_before_swap%2CGLX_NV_float_buffer%2CGLX_NV_multigpu_context%2CGLX_NV_multisample_coverage%2CGLX_NV_present_video%2CGLX_NV_robustness_video_memory_purge%2CGLX_NV_swap_group%2CGLX_NV_video_capture%2CGLX_NV_video_out%2CGLX_OML_swap_method%2CGLX_OML_sync_control%2CGLX_SGIS_blended_overlay%2CGLX_SGIS_multisample%2CGLX_SGIS_shared_multisample%2CGLX_SGIX_fbconfig%2CGLX_SGIX_hyperpipe%2CGLX_SGIX_pbuffer%2CGLX_SGIX_swap_barrier%2CGLX_SGIX_swap_group%2CGLX_SGIX_video_resize%2CGLX_SGIX_visual_select_group%2CGLX_SGI_cushion%2CGLX_SGI_make_current_read%2CGLX_SGI_swap_control%2CGLX_SGI_video_sync%2CGLX_SUN_get_transparent_index&generator=c&options=ALIAS%2CHEADER_ONLY%2CLOADER
 *
 */

#ifndef SF_GLAD_GLX_H_
#define SF_GLAD_GLX_H_

#ifdef GLX_H
  #error GLX header already included (API: glx), remove previous include!
#endif
#define GLX_H 1


#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#include <glad/gl.h>

#define SF_GLAD_GLX
#define GLAD_OPTION_GLX_ALIAS
#define GLAD_OPTION_GLX_HEADER_ONLY
#define GLAD_OPTION_GLX_LOADER

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#define GLAD_UNUSED(x) (void)(x)

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.8"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GLX_3DFX_FULLSCREEN_MODE_MESA 0x2
#define GLX_3DFX_WINDOW_MODE_MESA 0x1
#define GLX_ACCUM_ALPHA_SIZE 17
#define GLX_ACCUM_BLUE_SIZE 16
#define GLX_ACCUM_BUFFER_BIT 0x00000080
#define GLX_ACCUM_BUFFER_BIT_SGIX 0x00000080
#define GLX_ACCUM_GREEN_SIZE 15
#define GLX_ACCUM_RED_SIZE 14
#define GLX_ALPHA_SIZE 11
#define GLX_AUX0_EXT 0x20E2
#define GLX_AUX1_EXT 0x20E3
#define GLX_AUX2_EXT 0x20E4
#define GLX_AUX3_EXT 0x20E5
#define GLX_AUX4_EXT 0x20E6
#define GLX_AUX5_EXT 0x20E7
#define GLX_AUX6_EXT 0x20E8
#define GLX_AUX7_EXT 0x20E9
#define GLX_AUX8_EXT 0x20EA
#define GLX_AUX9_EXT 0x20EB
#define GLX_AUX_BUFFERS 7
#define GLX_AUX_BUFFERS_BIT 0x00000010
#define GLX_AUX_BUFFERS_BIT_SGIX 0x00000010
#define GLX_BACK_BUFFER_AGE_EXT 0x20F4
#define GLX_BACK_EXT 0x20E0
#define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
#define GLX_BACK_LEFT_BUFFER_BIT_SGIX 0x00000004
#define GLX_BACK_LEFT_EXT 0x20E0
#define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
#define GLX_BACK_RIGHT_BUFFER_BIT_SGIX 0x00000008
#define GLX_BACK_RIGHT_EXT 0x20E1
#define GLX_BAD_ATTRIBUTE 2
#define GLX_BAD_CONTEXT 5
#define GLX_BAD_ENUM 7
#define GLX_BAD_HYPERPIPE_CONFIG_SGIX 91
#define GLX_BAD_HYPERPIPE_SGIX 92
#define GLX_BAD_SCREEN 1
#define GLX_BAD_VALUE 6
#define GLX_BAD_VISUAL 4
#define GLX_BIND_TO_MIPMAP_TEXTURE_EXT 0x20D2
#define GLX_BIND_TO_TEXTURE_RGBA_EXT 0x20D1
#define GLX_BIND_TO_TEXTURE_RGB_EXT 0x20D0
#define GLX_BIND_TO_TEXTURE_TARGETS_EXT 0x20D3
#define GLX_BLENDED_RGBA_SGIS 0x8025
#define GLX_BLUE_SIZE 10
#define GLX_BUFFER_CLOBBER_MASK_SGIX 0x08000000
#define GLX_BUFFER_SIZE 2
#define GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK 0x04000000
#define GLX_BufferSwapComplete 1
#define GLX_COLOR_INDEX_BIT 0x00000002
#define GLX_COLOR_INDEX_BIT_SGIX 0x00000002
#define GLX_COLOR_INDEX_TYPE 0x8015
#define GLX_COLOR_INDEX_TYPE_SGIX 0x8015
#define GLX_COLOR_SAMPLES_NV 0x20B3
#define GLX_CONFIG_CAVEAT 0x20
#define GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB 0x2095
#define GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
#define GLX_CONTEXT_CORE_PROFILE_BIT_ARB 0x00000001
#define GLX_CONTEXT_DEBUG_BIT_ARB 0x00000001
#define GLX_CONTEXT_ES2_PROFILE_BIT_EXT 0x00000004
#define GLX_CONTEXT_ES_PROFILE_BIT_EXT 0x00000004
#define GLX_CONTEXT_FLAGS_ARB 0x2094
#define GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x00000002
#define GLX_CONTEXT_MAJOR_VERSION_ARB 0x2091
#define GLX_CONTEXT_MINOR_VERSION_ARB 0x2092
#define GLX_CONTEXT_MULTIGPU_ATTRIB_AFR_NV 0x20AC
#define GLX_CONTEXT_MULTIGPU_ATTRIB_MULTICAST_NV 0x20AD
#define GLX_CONTEXT_MULTIGPU_ATTRIB_MULTI_DISPLAY_MULTICAST_NV 0x20AE
#define GLX_CONTEXT_MULTIGPU_ATTRIB_NV 0x20AA
#define GLX_CONTEXT_MULTIGPU_ATTRIB_SINGLE_NV 0x20AB
#define GLX_CONTEXT_OPENGL_NO_ERROR_ARB 0x31B3
#define GLX_CONTEXT_PRIORITY_HIGH_EXT 0x3101
#define GLX_CONTEXT_PRIORITY_LEVEL_EXT 0x3100
#define GLX_CONTEXT_PRIORITY_LOW_EXT 0x3103
#define GLX_CONTEXT_PRIORITY_MEDIUM_EXT 0x3102
#define GLX_CONTEXT_PROFILE_MASK_ARB 0x9126
#define GLX_CONTEXT_RELEASE_BEHAVIOR_ARB 0x2097
#define GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB 0x2098
#define GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB 0
#define GLX_CONTEXT_RESET_ISOLATION_BIT_ARB 0x00000008
#define GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GLX_COPY_COMPLETE_INTEL 0x8181
#define GLX_COVERAGE_SAMPLES_NV 100001
#define GLX_DAMAGED 0x8020
#define GLX_DAMAGED_SGIX 0x8020
#define GLX_DEPTH_BUFFER_BIT 0x00000020
#define GLX_DEPTH_BUFFER_BIT_SGIX 0x00000020
#define GLX_DEPTH_SIZE 12
#define GLX_DEVICE_ID_NV 0x20CD
#define GLX_DIRECT_COLOR 0x8003
#define GLX_DIRECT_COLOR_EXT 0x8003
#define GLX_DONT_CARE 0xFFFFFFFF
#define GLX_DOUBLEBUFFER 5
#define GLX_DRAWABLE_TYPE 0x8010
#define GLX_DRAWABLE_TYPE_SGIX 0x8010
#define GLX_EVENT_MASK 0x801F
#define GLX_EVENT_MASK_SGIX 0x801F
#define GLX_EXCHANGE_COMPLETE_INTEL 0x8180
#define GLX_EXTENSIONS 0x3
#define GLX_EXTENSION_NAME "GLX"
#define GLX_FBCONFIG_ID 0x8013
#define GLX_FBCONFIG_ID_SGIX 0x8013
#define GLX_FLIP_COMPLETE_INTEL 0x8182
#define GLX_FLOAT_COMPONENTS_NV 0x20B0
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB 0x20B2
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20B2
#define GLX_FRONT_EXT 0x20DE
#define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
#define GLX_FRONT_LEFT_BUFFER_BIT_SGIX 0x00000001
#define GLX_FRONT_LEFT_EXT 0x20DE
#define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
#define GLX_FRONT_RIGHT_BUFFER_BIT_SGIX 0x00000002
#define GLX_FRONT_RIGHT_EXT 0x20DF
#define GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 0x20F7
#define GLX_GPU_CLOCK_AMD 0x21A4
#define GLX_GPU_FASTEST_TARGET_GPUS_AMD 0x21A2
#define GLX_GPU_NUM_PIPES_AMD 0x21A5
#define GLX_GPU_NUM_RB_AMD 0x21A7
#define GLX_GPU_NUM_SIMD_AMD 0x21A6
#define GLX_GPU_NUM_SPI_AMD 0x21A8
#define GLX_GPU_OPENGL_VERSION_STRING_AMD 0x1F02
#define GLX_GPU_RAM_AMD 0x21A3
#define GLX_GPU_RENDERER_STRING_AMD 0x1F01
#define GLX_GPU_VENDOR_AMD 0x1F00
#define GLX_GRAY_SCALE 0x8006
#define GLX_GRAY_SCALE_EXT 0x8006
#define GLX_GREEN_SIZE 9
#define GLX_HEIGHT 0x801E
#define GLX_HEIGHT_SGIX 0x801E
#define GLX_HYPERPIPE_DISPLAY_PIPE_SGIX 0x00000001
#define GLX_HYPERPIPE_ID_SGIX 0x8030
#define GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX 80
#define GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX 0x00000004
#define GLX_HYPERPIPE_RENDER_PIPE_SGIX 0x00000002
#define GLX_HYPERPIPE_STEREO_SGIX 0x00000003
#define GLX_LARGEST_PBUFFER 0x801C
#define GLX_LARGEST_PBUFFER_SGIX 0x801C
#define GLX_LATE_SWAPS_TEAR_EXT 0x20F3
#define GLX_LEVEL 3
#define GLX_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GLX_MAX_PBUFFER_HEIGHT 0x8017
#define GLX_MAX_PBUFFER_HEIGHT_SGIX 0x8017
#define GLX_MAX_PBUFFER_PIXELS 0x8018
#define GLX_MAX_PBUFFER_PIXELS_SGIX 0x8018
#define GLX_MAX_PBUFFER_WIDTH 0x8016
#define GLX_MAX_PBUFFER_WIDTH_SGIX 0x8016
#define GLX_MAX_SWAP_INTERVAL_EXT 0x20F2
#define GLX_MIPMAP_TEXTURE_EXT 0x20D7
#define GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS 0x8027
#define GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS 0x8026
#define GLX_NONE 0x8000
#define GLX_NONE_EXT 0x8000
#define GLX_NON_CONFORMANT_CONFIG 0x800D
#define GLX_NON_CONFORMANT_VISUAL_EXT 0x800D
#define GLX_NO_EXTENSION 3
#define GLX_NO_RESET_NOTIFICATION_ARB 0x8261
#define GLX_NUM_VIDEO_CAPTURE_SLOTS_NV 0x20CF
#define GLX_NUM_VIDEO_SLOTS_NV 0x20F0
#define GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX 0x801A
#define GLX_OPTIMAL_PBUFFER_WIDTH_SGIX 0x8019
#define GLX_PBUFFER 0x8023
#define GLX_PBUFFER_BIT 0x00000004
#define GLX_PBUFFER_BIT_SGIX 0x00000004
#define GLX_PBUFFER_CLOBBER_MASK 0x08000000
#define GLX_PBUFFER_HEIGHT 0x8040
#define GLX_PBUFFER_SGIX 0x8023
#define GLX_PBUFFER_WIDTH 0x8041
#define GLX_PIPE_RECT_LIMITS_SGIX 0x00000002
#define GLX_PIPE_RECT_SGIX 0x00000001
#define GLX_PIXMAP_BIT 0x00000002
#define GLX_PIXMAP_BIT_SGIX 0x00000002
#define GLX_PRESERVED_CONTENTS 0x801B
#define GLX_PRESERVED_CONTENTS_SGIX 0x801B
#define GLX_PSEUDO_COLOR 0x8004
#define GLX_PSEUDO_COLOR_EXT 0x8004
#define GLX_PbufferClobber 0
#define GLX_RED_SIZE 8
#define GLX_RENDERER_ACCELERATED_MESA 0x8186
#define GLX_RENDERER_DEVICE_ID_MESA 0x8184
#define GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA 0x818B
#define GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA 0x818A
#define GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA 0x818D
#define GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA 0x818C
#define GLX_RENDERER_PREFERRED_PROFILE_MESA 0x8189
#define GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA 0x8188
#define GLX_RENDERER_VENDOR_ID_MESA 0x8183
#define GLX_RENDERER_VERSION_MESA 0x8185
#define GLX_RENDERER_VIDEO_MEMORY_MESA 0x8187
#define GLX_RENDER_TYPE 0x8011
#define GLX_RENDER_TYPE_SGIX 0x8011
#define GLX_RGBA 4
#define GLX_RGBA_BIT 0x00000001
#define GLX_RGBA_BIT_SGIX 0x00000001
#define GLX_RGBA_FLOAT_BIT_ARB 0x00000004
#define GLX_RGBA_FLOAT_TYPE_ARB 0x20B9
#define GLX_RGBA_TYPE 0x8014
#define GLX_RGBA_TYPE_SGIX 0x8014
#define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT 0x00000008
#define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT 0x20B1
#define GLX_SAMPLES 100001
#define GLX_SAMPLES_3DFX 0x8051
#define GLX_SAMPLES_ARB 100001
#define GLX_SAMPLES_SGIS 100001
#define GLX_SAMPLE_BUFFERS 100000
#define GLX_SAMPLE_BUFFERS_3DFX 0x8050
#define GLX_SAMPLE_BUFFERS_ARB 100000
#define GLX_SAMPLE_BUFFERS_BIT_SGIX 0x00000100
#define GLX_SAMPLE_BUFFERS_SGIS 100000
#define GLX_SAVED 0x8021
#define GLX_SAVED_SGIX 0x8021
#define GLX_SCREEN 0x800C
#define GLX_SCREEN_EXT 0x800C
#define GLX_SHARE_CONTEXT_EXT 0x800A
#define GLX_SLOW_CONFIG 0x8001
#define GLX_SLOW_VISUAL_EXT 0x8001
#define GLX_STATIC_COLOR 0x8005
#define GLX_STATIC_COLOR_EXT 0x8005
#define GLX_STATIC_GRAY 0x8007
#define GLX_STATIC_GRAY_EXT 0x8007
#define GLX_STENCIL_BUFFER_BIT 0x00000040
#define GLX_STENCIL_BUFFER_BIT_SGIX 0x00000040
#define GLX_STENCIL_SIZE 13
#define GLX_STEREO 6
#define GLX_STEREO_NOTIFY_EXT 0x00000000
#define GLX_STEREO_NOTIFY_MASK_EXT 0x00000001
#define GLX_STEREO_TREE_EXT 0x20F5
#define GLX_SWAP_COPY_OML 0x8062
#define GLX_SWAP_EXCHANGE_OML 0x8061
#define GLX_SWAP_INTERVAL_EXT 0x20F1
#define GLX_SWAP_METHOD_OML 0x8060
#define GLX_SWAP_UNDEFINED_OML 0x8063
#define GLX_SYNC_FRAME_SGIX 0x00000000
#define GLX_SYNC_SWAP_SGIX 0x00000001
#define GLX_TEXTURE_1D_BIT_EXT 0x00000001
#define GLX_TEXTURE_1D_EXT 0x20DB
#define GLX_TEXTURE_2D_BIT_EXT 0x00000002
#define GLX_TEXTURE_2D_EXT 0x20DC
#define GLX_TEXTURE_FORMAT_EXT 0x20D5
#define GLX_TEXTURE_FORMAT_NONE_EXT 0x20D8
#define GLX_TEXTURE_FORMAT_RGBA_EXT 0x20DA
#define GLX_TEXTURE_FORMAT_RGB_EXT 0x20D9
#define GLX_TEXTURE_RECTANGLE_BIT_EXT 0x00000004
#define GLX_TEXTURE_RECTANGLE_EXT 0x20DD
#define GLX_TEXTURE_TARGET_EXT 0x20D6
#define GLX_TRANSPARENT_ALPHA_VALUE 0x28
#define GLX_TRANSPARENT_ALPHA_VALUE_EXT 0x28
#define GLX_TRANSPARENT_BLUE_VALUE 0x27
#define GLX_TRANSPARENT_BLUE_VALUE_EXT 0x27
#define GLX_TRANSPARENT_GREEN_VALUE 0x26
#define GLX_TRANSPARENT_GREEN_VALUE_EXT 0x26
#define GLX_TRANSPARENT_INDEX 0x8009
#define GLX_TRANSPARENT_INDEX_EXT 0x8009
#define GLX_TRANSPARENT_INDEX_VALUE 0x24
#define GLX_TRANSPARENT_INDEX_VALUE_EXT 0x24
#define GLX_TRANSPARENT_RED_VALUE 0x25
#define GLX_TRANSPARENT_RED_VALUE_EXT 0x25
#define GLX_TRANSPARENT_RGB 0x8008
#define GLX_TRANSPARENT_RGB_EXT 0x8008
#define GLX_TRANSPARENT_TYPE 0x23
#define GLX_TRANSPARENT_TYPE_EXT 0x23
#define GLX_TRUE_COLOR 0x8002
#define GLX_TRUE_COLOR_EXT 0x8002
#define GLX_UNIQUE_ID_NV 0x20CE
#define GLX_USE_GL 1
#define GLX_VENDOR 0x1
#define GLX_VENDOR_NAMES_EXT 0x20F6
#define GLX_VERSION 0x2
#define GLX_VIDEO_OUT_ALPHA_NV 0x20C4
#define GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV 0x20C6
#define GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV 0x20C7
#define GLX_VIDEO_OUT_COLOR_NV 0x20C3
#define GLX_VIDEO_OUT_DEPTH_NV 0x20C5
#define GLX_VIDEO_OUT_FIELD_1_NV 0x20C9
#define GLX_VIDEO_OUT_FIELD_2_NV 0x20CA
#define GLX_VIDEO_OUT_FRAME_NV 0x20C8
#define GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV 0x20CB
#define GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV 0x20CC
#define GLX_VISUAL_CAVEAT_EXT 0x20
#define GLX_VISUAL_ID 0x800B
#define GLX_VISUAL_ID_EXT 0x800B
#define GLX_VISUAL_SELECT_GROUP_SGIX 0x8028
#define GLX_WIDTH 0x801D
#define GLX_WIDTH_SGIX 0x801D
#define GLX_WINDOW 0x8022
#define GLX_WINDOW_BIT 0x00000001
#define GLX_WINDOW_BIT_SGIX 0x00000001
#define GLX_WINDOW_SGIX 0x8022
#define GLX_X_RENDERABLE 0x8012
#define GLX_X_RENDERABLE_SGIX 0x8012
#define GLX_X_VISUAL_TYPE 0x22
#define GLX_X_VISUAL_TYPE_EXT 0x22
#define GLX_Y_INVERTED_EXT 0x20D4
#define __GLX_NUMBER_EVENTS 17


#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GLX_OML_sync_control extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif
















#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)

#else

#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)

#else

#endif







typedef XID GLXFBConfigID;
typedef struct __GLXFBConfigRec *GLXFBConfig;
typedef XID GLXContextID;
typedef struct __GLXcontextRec *GLXContext;
typedef XID GLXPixmap;
typedef XID GLXDrawable;
typedef XID GLXWindow;
typedef XID GLXPbuffer;
typedef void (GLAD_API_PTR *__GLXextFuncPtr)(void);
typedef XID GLXVideoCaptureDeviceNV;
typedef unsigned int GLXVideoDeviceNV;
typedef XID GLXVideoSourceSGIX;
typedef XID GLXFBConfigIDSGIX;
typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
typedef XID GLXPbufferSGIX;
typedef struct {
    int event_type;             /* GLX_DAMAGED or GLX_SAVED */
    int draw_type;              /* GLX_WINDOW or GLX_PBUFFER */
    unsigned long serial;       /* # of last request processed by server */
    Bool send_event;            /* true if this came for SendEvent request */
    Display *display;           /* display the event was read from */
    GLXDrawable drawable;       /* XID of Drawable */
    unsigned int buffer_mask;   /* mask indicating which buffers are affected */
    unsigned int aux_buffer;    /* which aux buffer was affected */
    int x, y;
    int width, height;
    int count;                  /* if nonzero, at least this many more */
} GLXPbufferClobberEvent;
typedef struct {
    int type;
    unsigned long serial;       /* # of last request processed by server */
    Bool send_event;            /* true if this came from a SendEvent request */
    Display *display;           /* Display the event was read from */
    GLXDrawable drawable;       /* drawable on which event was requested in event mask */
    int event_type;
    int64_t ust;
    int64_t msc;
    int64_t sbc;
} GLXBufferSwapComplete;
typedef union __GLXEvent {
    GLXPbufferClobberEvent glxpbufferclobber;
    GLXBufferSwapComplete glxbufferswapcomplete;
    long pad[24];
} GLXEvent;
typedef struct {
    int type;
    unsigned long serial;
    Bool send_event;
    Display *display;
    int extension;
    int evtype;
    GLXDrawable window;
    Bool stereo_tree;
} GLXStereoNotifyEventEXT;
typedef struct {
    int type;
    unsigned long serial;   /* # of last request processed by server */
    Bool send_event;        /* true if this came for SendEvent request */
    Display *display;       /* display the event was read from */
    GLXDrawable drawable;   /* i.d. of Drawable */
    int event_type;         /* GLX_DAMAGED_SGIX or GLX_SAVED_SGIX */
    int draw_type;          /* GLX_WINDOW_SGIX or GLX_PBUFFER_SGIX */
    unsigned int mask;      /* mask indicating which buffers are affected*/
    int x, y;
    int width, height;
    int count;              /* if nonzero, at least this many more */
} GLXBufferClobberEventSGIX;
typedef struct {
    char    pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int     networkId;
} GLXHyperpipeNetworkSGIX;
typedef struct {
    char    pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int     channel;
    unsigned int participationType;
    int     timeSlice;
} GLXHyperpipeConfigSGIX;
typedef struct {
    char pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int srcXOrigin, srcYOrigin, srcWidth, srcHeight;
    int destXOrigin, destYOrigin, destWidth, destHeight;
} GLXPipeRect;
typedef struct {
    char pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int XOrigin, YOrigin, maxHeight, maxWidth;
} GLXPipeRectLimits;


#define GLX_VERSION_1_0 1
GLAD_API_CALL int SF_GLAD_GLX_VERSION_1_0;
#define GLX_VERSION_1_1 1
GLAD_API_CALL int SF_GLAD_GLX_VERSION_1_1;
#define GLX_VERSION_1_2 1
GLAD_API_CALL int SF_GLAD_GLX_VERSION_1_2;
#define GLX_VERSION_1_3 1
GLAD_API_CALL int SF_GLAD_GLX_VERSION_1_3;
#define GLX_VERSION_1_4 1
GLAD_API_CALL int SF_GLAD_GLX_VERSION_1_4;
#define GLX_3DFX_multisample 1
GLAD_API_CALL int SF_GLAD_GLX_3DFX_multisample;
#define GLX_AMD_gpu_association 1
GLAD_API_CALL int SF_GLAD_GLX_AMD_gpu_association;
#define GLX_ARB_context_flush_control 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_context_flush_control;
#define GLX_ARB_create_context 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_create_context;
#define GLX_ARB_create_context_no_error 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_create_context_no_error;
#define GLX_ARB_create_context_profile 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_create_context_profile;
#define GLX_ARB_create_context_robustness 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_create_context_robustness;
#define GLX_ARB_fbconfig_float 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_fbconfig_float;
#define GLX_ARB_framebuffer_sRGB 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_framebuffer_sRGB;
#define GLX_ARB_get_proc_address 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_get_proc_address;
#define GLX_ARB_multisample 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_multisample;
#define GLX_ARB_robustness_application_isolation 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_robustness_application_isolation;
#define GLX_ARB_robustness_share_group_isolation 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_robustness_share_group_isolation;
#define GLX_ARB_vertex_buffer_object 1
GLAD_API_CALL int SF_GLAD_GLX_ARB_vertex_buffer_object;
#define GLX_EXT_buffer_age 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_buffer_age;
#define GLX_EXT_context_priority 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_context_priority;
#define GLX_EXT_create_context_es2_profile 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_create_context_es2_profile;
#define GLX_EXT_create_context_es_profile 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_create_context_es_profile;
#define GLX_EXT_fbconfig_packed_float 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_fbconfig_packed_float;
#define GLX_EXT_framebuffer_sRGB 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_framebuffer_sRGB;
#define GLX_EXT_get_drawable_type 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_get_drawable_type;
#define GLX_EXT_import_context 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_import_context;
#define GLX_EXT_libglvnd 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_libglvnd;
#define GLX_EXT_no_config_context 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_no_config_context;
#define GLX_EXT_stereo_tree 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_stereo_tree;
#define GLX_EXT_swap_control 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_swap_control;
#define GLX_EXT_swap_control_tear 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_swap_control_tear;
#define GLX_EXT_texture_from_pixmap 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_texture_from_pixmap;
#define GLX_EXT_visual_info 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_visual_info;
#define GLX_EXT_visual_rating 1
GLAD_API_CALL int SF_GLAD_GLX_EXT_visual_rating;
#define GLX_INTEL_swap_event 1
GLAD_API_CALL int SF_GLAD_GLX_INTEL_swap_event;
#define GLX_MESA_agp_offset 1
GLAD_API_CALL int SF_GLAD_GLX_MESA_agp_offset;
#define GLX_MESA_copy_sub_buffer 1
GLAD_API_CALL int SF_GLAD_GLX_MESA_copy_sub_buffer;
#define GLX_MESA_pixmap_colormap 1
GLAD_API_CALL int SF_GLAD_GLX_MESA_pixmap_colormap;
#define GLX_MESA_query_renderer 1
GLAD_API_CALL int SF_GLAD_GLX_MESA_query_renderer;
#define GLX_MESA_release_buffers 1
GLAD_API_CALL int SF_GLAD_GLX_MESA_release_buffers;
#define GLX_MESA_set_3dfx_mode 1
GLAD_API_CALL int SF_GLAD_GLX_MESA_set_3dfx_mode;
#define GLX_MESA_swap_control 1
GLAD_API_CALL int SF_GLAD_GLX_MESA_swap_control;
#define GLX_NV_copy_buffer 1
GLAD_API_CALL int SF_GLAD_GLX_NV_copy_buffer;
#define GLX_NV_copy_image 1
GLAD_API_CALL int SF_GLAD_GLX_NV_copy_image;
#define GLX_NV_delay_before_swap 1
GLAD_API_CALL int SF_GLAD_GLX_NV_delay_before_swap;
#define GLX_NV_float_buffer 1
GLAD_API_CALL int SF_GLAD_GLX_NV_float_buffer;
#define GLX_NV_multigpu_context 1
GLAD_API_CALL int SF_GLAD_GLX_NV_multigpu_context;
#define GLX_NV_multisample_coverage 1
GLAD_API_CALL int SF_GLAD_GLX_NV_multisample_coverage;
#define GLX_NV_present_video 1
GLAD_API_CALL int SF_GLAD_GLX_NV_present_video;
#define GLX_NV_robustness_video_memory_purge 1
GLAD_API_CALL int SF_GLAD_GLX_NV_robustness_video_memory_purge;
#define GLX_NV_swap_group 1
GLAD_API_CALL int SF_GLAD_GLX_NV_swap_group;
#define GLX_NV_video_capture 1
GLAD_API_CALL int SF_GLAD_GLX_NV_video_capture;
#define GLX_NV_video_out 1
GLAD_API_CALL int SF_GLAD_GLX_NV_video_out;
#define GLX_OML_swap_method 1
GLAD_API_CALL int SF_GLAD_GLX_OML_swap_method;
#define GLX_OML_sync_control 1
GLAD_API_CALL int SF_GLAD_GLX_OML_sync_control;
#define GLX_SGIS_blended_overlay 1
GLAD_API_CALL int SF_GLAD_GLX_SGIS_blended_overlay;
#define GLX_SGIS_multisample 1
GLAD_API_CALL int SF_GLAD_GLX_SGIS_multisample;
#define GLX_SGIS_shared_multisample 1
GLAD_API_CALL int SF_GLAD_GLX_SGIS_shared_multisample;
#define GLX_SGIX_fbconfig 1
GLAD_API_CALL int SF_GLAD_GLX_SGIX_fbconfig;
#define GLX_SGIX_hyperpipe 1
GLAD_API_CALL int SF_GLAD_GLX_SGIX_hyperpipe;
#define GLX_SGIX_pbuffer 1
GLAD_API_CALL int SF_GLAD_GLX_SGIX_pbuffer;
#define GLX_SGIX_swap_barrier 1
GLAD_API_CALL int SF_GLAD_GLX_SGIX_swap_barrier;
#define GLX_SGIX_swap_group 1
GLAD_API_CALL int SF_GLAD_GLX_SGIX_swap_group;
#define GLX_SGIX_video_resize 1
GLAD_API_CALL int SF_GLAD_GLX_SGIX_video_resize;
#define GLX_SGIX_visual_select_group 1
GLAD_API_CALL int SF_GLAD_GLX_SGIX_visual_select_group;
#define GLX_SGI_cushion 1
GLAD_API_CALL int SF_GLAD_GLX_SGI_cushion;
#define GLX_SGI_make_current_read 1
GLAD_API_CALL int SF_GLAD_GLX_SGI_make_current_read;
#define GLX_SGI_swap_control 1
GLAD_API_CALL int SF_GLAD_GLX_SGI_swap_control;
#define GLX_SGI_video_sync 1
GLAD_API_CALL int SF_GLAD_GLX_SGI_video_sync;
#define GLX_SUN_get_transparent_index 1
GLAD_API_CALL int SF_GLAD_GLX_SUN_get_transparent_index;


typedef int (GLAD_API_PTR *PFNGLXBINDCHANNELTOWINDOWSGIXPROC)(Display * display, int screen, int channel, Window window);
typedef int (GLAD_API_PTR *PFNGLXBINDHYPERPIPESGIXPROC)(Display * dpy, int hpId);
typedef Bool (GLAD_API_PTR *PFNGLXBINDSWAPBARRIERNVPROC)(Display * dpy, GLuint group, GLuint barrier);
typedef void (GLAD_API_PTR *PFNGLXBINDSWAPBARRIERSGIXPROC)(Display * dpy, GLXDrawable drawable, int barrier);
typedef void (GLAD_API_PTR *PFNGLXBINDTEXIMAGEEXTPROC)(Display * dpy, GLXDrawable drawable, int buffer, const int * attrib_list);
typedef int (GLAD_API_PTR *PFNGLXBINDVIDEOCAPTUREDEVICENVPROC)(Display * dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
typedef int (GLAD_API_PTR *PFNGLXBINDVIDEODEVICENVPROC)(Display * dpy, unsigned int video_slot, unsigned int video_device, const int * attrib_list);
typedef int (GLAD_API_PTR *PFNGLXBINDVIDEOIMAGENVPROC)(Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
typedef void (GLAD_API_PTR *PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC)(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef int (GLAD_API_PTR *PFNGLXCHANNELRECTSGIXPROC)(Display * display, int screen, int channel, int x, int y, int w, int h);
typedef int (GLAD_API_PTR *PFNGLXCHANNELRECTSYNCSGIXPROC)(Display * display, int screen, int channel, GLenum synctype);
typedef GLXFBConfig * (GLAD_API_PTR *PFNGLXCHOOSEFBCONFIGPROC)(Display * dpy, int screen, const int * attrib_list, int * nelements);
typedef GLXFBConfigSGIX * (GLAD_API_PTR *PFNGLXCHOOSEFBCONFIGSGIXPROC)(Display * dpy, int screen, int * attrib_list, int * nelements);
typedef XVisualInfo * (GLAD_API_PTR *PFNGLXCHOOSEVISUALPROC)(Display * dpy, int screen, int * attribList);
typedef void (GLAD_API_PTR *PFNGLXCOPYBUFFERSUBDATANVPROC)(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLXCOPYCONTEXTPROC)(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask);
typedef void (GLAD_API_PTR *PFNGLXCOPYIMAGESUBDATANVPROC)(Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLXCOPYSUBBUFFERMESAPROC)(Display * dpy, GLXDrawable drawable, int x, int y, int width, int height);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC)(unsigned int id, GLXContext share_list);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)(unsigned int id, GLXContext share_context, const int * attribList);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTPROC)(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTATTRIBSARBPROC)(Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct);
typedef GLXPbufferSGIX (GLAD_API_PTR *PFNGLXCREATEGLXPBUFFERSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int * attrib_list);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEGLXPIXMAPPROC)(Display * dpy, XVisualInfo * visual, Pixmap pixmap);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEGLXPIXMAPMESAPROC)(Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATENEWCONTEXTPROC)(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef GLXPbuffer (GLAD_API_PTR *PFNGLXCREATEPBUFFERPROC)(Display * dpy, GLXFBConfig config, const int * attrib_list);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEPIXMAPPROC)(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list);
typedef GLXWindow (GLAD_API_PTR *PFNGLXCREATEWINDOWPROC)(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list);
typedef void (GLAD_API_PTR *PFNGLXCUSHIONSGIPROC)(Display * dpy, Window window, float cushion);
typedef Bool (GLAD_API_PTR *PFNGLXDELAYBEFORESWAPNVPROC)(Display * dpy, GLXDrawable drawable, GLfloat seconds);
typedef Bool (GLAD_API_PTR *PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC)(GLXContext ctx);
typedef void (GLAD_API_PTR *PFNGLXDESTROYCONTEXTPROC)(Display * dpy, GLXContext ctx);
typedef void (GLAD_API_PTR *PFNGLXDESTROYGLXPBUFFERSGIXPROC)(Display * dpy, GLXPbufferSGIX pbuf);
typedef void (GLAD_API_PTR *PFNGLXDESTROYGLXPIXMAPPROC)(Display * dpy, GLXPixmap pixmap);
typedef int (GLAD_API_PTR *PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC)(Display * dpy, int hpId);
typedef void (GLAD_API_PTR *PFNGLXDESTROYPBUFFERPROC)(Display * dpy, GLXPbuffer pbuf);
typedef void (GLAD_API_PTR *PFNGLXDESTROYPIXMAPPROC)(Display * dpy, GLXPixmap pixmap);
typedef void (GLAD_API_PTR *PFNGLXDESTROYWINDOWPROC)(Display * dpy, GLXWindow win);
typedef GLXVideoCaptureDeviceNV * (GLAD_API_PTR *PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC)(Display * dpy, int screen, int * nelements);
typedef unsigned int * (GLAD_API_PTR *PFNGLXENUMERATEVIDEODEVICESNVPROC)(Display * dpy, int screen, int * nelements);
typedef void (GLAD_API_PTR *PFNGLXFREECONTEXTEXTPROC)(Display * dpy, GLXContext context);
typedef unsigned int (GLAD_API_PTR *PFNGLXGETAGPOFFSETMESAPROC)(const void * pointer);
typedef const char * (GLAD_API_PTR *PFNGLXGETCLIENTSTRINGPROC)(Display * dpy, int name);
typedef int (GLAD_API_PTR *PFNGLXGETCONFIGPROC)(Display * dpy, XVisualInfo * visual, int attrib, int * value);
typedef unsigned int (GLAD_API_PTR *PFNGLXGETCONTEXTGPUIDAMDPROC)(GLXContext ctx);
typedef GLXContextID (GLAD_API_PTR *PFNGLXGETCONTEXTIDEXTPROC)(const GLXContext context);
typedef GLXContext (GLAD_API_PTR *PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC)(void);
typedef GLXContext (GLAD_API_PTR *PFNGLXGETCURRENTCONTEXTPROC)(void);
typedef Display * (GLAD_API_PTR *PFNGLXGETCURRENTDISPLAYPROC)(void);
typedef Display * (GLAD_API_PTR *PFNGLXGETCURRENTDISPLAYEXTPROC)(void);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTDRAWABLEPROC)(void);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTREADDRAWABLEPROC)(void);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTREADDRAWABLESGIPROC)(void);
typedef int (GLAD_API_PTR *PFNGLXGETFBCONFIGATTRIBPROC)(Display * dpy, GLXFBConfig config, int attribute, int * value);
typedef int (GLAD_API_PTR *PFNGLXGETFBCONFIGATTRIBSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, int attribute, int * value);
typedef GLXFBConfigSGIX (GLAD_API_PTR *PFNGLXGETFBCONFIGFROMVISUALSGIXPROC)(Display * dpy, XVisualInfo * vis);
typedef GLXFBConfig * (GLAD_API_PTR *PFNGLXGETFBCONFIGSPROC)(Display * dpy, int screen, int * nelements);
typedef unsigned int (GLAD_API_PTR *PFNGLXGETGPUIDSAMDPROC)(unsigned int maxCount, unsigned int * ids);
typedef int (GLAD_API_PTR *PFNGLXGETGPUINFOAMDPROC)(unsigned int id, int property, GLenum dataType, unsigned int size, void * data);
typedef Bool (GLAD_API_PTR *PFNGLXGETMSCRATEOMLPROC)(Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator);
typedef __GLXextFuncPtr (GLAD_API_PTR *PFNGLXGETPROCADDRESSPROC)(const GLubyte * procName);
typedef __GLXextFuncPtr (GLAD_API_PTR *PFNGLXGETPROCADDRESSARBPROC)(const GLubyte * procName);
typedef void (GLAD_API_PTR *PFNGLXGETSELECTEDEVENTPROC)(Display * dpy, GLXDrawable draw, unsigned long * event_mask);
typedef void (GLAD_API_PTR *PFNGLXGETSELECTEDEVENTSGIXPROC)(Display * dpy, GLXDrawable drawable, unsigned long * mask);
typedef int (GLAD_API_PTR *PFNGLXGETSWAPINTERVALMESAPROC)(void);
typedef Bool (GLAD_API_PTR *PFNGLXGETSYNCVALUESOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef Status (GLAD_API_PTR *PFNGLXGETTRANSPARENTINDEXSUNPROC)(Display * dpy, Window overlay, Window underlay, unsigned long * pTransparentIndex);
typedef int (GLAD_API_PTR *PFNGLXGETVIDEODEVICENVPROC)(Display * dpy, int screen, int numVideoDevices, GLXVideoDeviceNV * pVideoDevice);
typedef int (GLAD_API_PTR *PFNGLXGETVIDEOINFONVPROC)(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo);
typedef int (GLAD_API_PTR *PFNGLXGETVIDEOSYNCSGIPROC)(unsigned int * count);
typedef XVisualInfo * (GLAD_API_PTR *PFNGLXGETVISUALFROMFBCONFIGPROC)(Display * dpy, GLXFBConfig config);
typedef XVisualInfo * (GLAD_API_PTR *PFNGLXGETVISUALFROMFBCONFIGSGIXPROC)(Display * dpy, GLXFBConfigSGIX config);
typedef int (GLAD_API_PTR *PFNGLXHYPERPIPEATTRIBSGIXPROC)(Display * dpy, int timeSlice, int attrib, int size, void * attribList);
typedef int (GLAD_API_PTR *PFNGLXHYPERPIPECONFIGSGIXPROC)(Display * dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId);
typedef GLXContext (GLAD_API_PTR *PFNGLXIMPORTCONTEXTEXTPROC)(Display * dpy, GLXContextID contextID);
typedef Bool (GLAD_API_PTR *PFNGLXISDIRECTPROC)(Display * dpy, GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXJOINSWAPGROUPNVPROC)(Display * dpy, GLXDrawable drawable, GLuint group);
typedef void (GLAD_API_PTR *PFNGLXJOINSWAPGROUPSGIXPROC)(Display * dpy, GLXDrawable drawable, GLXDrawable member);
typedef void (GLAD_API_PTR *PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC)(Display * dpy, GLXVideoCaptureDeviceNV device);
typedef Bool (GLAD_API_PTR *PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)(GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECONTEXTCURRENTPROC)(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECURRENTPROC)(Display * dpy, GLXDrawable drawable, GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECURRENTREADSGIPROC)(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef void (GLAD_API_PTR *PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC)(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef int (GLAD_API_PTR *PFNGLXQUERYCHANNELDELTASSGIXPROC)(Display * display, int screen, int channel, int * x, int * y, int * w, int * h);
typedef int (GLAD_API_PTR *PFNGLXQUERYCHANNELRECTSGIXPROC)(Display * display, int screen, int channel, int * dx, int * dy, int * dw, int * dh);
typedef int (GLAD_API_PTR *PFNGLXQUERYCONTEXTPROC)(Display * dpy, GLXContext ctx, int attribute, int * value);
typedef int (GLAD_API_PTR *PFNGLXQUERYCONTEXTINFOEXTPROC)(Display * dpy, GLXContext context, int attribute, int * value);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC)(int attribute, unsigned int * value);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC)(int attribute);
typedef void (GLAD_API_PTR *PFNGLXQUERYDRAWABLEPROC)(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYEXTENSIONPROC)(Display * dpy, int * errorb, int * event);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYEXTENSIONSSTRINGPROC)(Display * dpy, int screen);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYFRAMECOUNTNVPROC)(Display * dpy, int screen, GLuint * count);
typedef void (GLAD_API_PTR *PFNGLXQUERYGLXPBUFFERSGIXPROC)(Display * dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int * value);
typedef int (GLAD_API_PTR *PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC)(Display * dpy, int timeSlice, int attrib, int size, void * returnAttribList);
typedef int (GLAD_API_PTR *PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC)(Display * dpy, int timeSlice, int attrib, int size, void * attribList, void * returnAttribList);
typedef GLXHyperpipeConfigSGIX * (GLAD_API_PTR *PFNGLXQUERYHYPERPIPECONFIGSGIXPROC)(Display * dpy, int hpId, int * npipes);
typedef GLXHyperpipeNetworkSGIX * (GLAD_API_PTR *PFNGLXQUERYHYPERPIPENETWORKSGIXPROC)(Display * dpy, int * npipes);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC)(Display * dpy, int screen, int * max);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYMAXSWAPGROUPSNVPROC)(Display * dpy, int screen, GLuint * maxGroups, GLuint * maxBarriers);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYRENDERERINTEGERMESAPROC)(Display * dpy, int screen, int renderer, int attribute, unsigned int * value);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYRENDERERSTRINGMESAPROC)(Display * dpy, int screen, int renderer, int attribute);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYSERVERSTRINGPROC)(Display * dpy, int screen, int name);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYSWAPGROUPNVPROC)(Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYVERSIONPROC)(Display * dpy, int * maj, int * min);
typedef int (GLAD_API_PTR *PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC)(Display * dpy, GLXVideoCaptureDeviceNV device, int attribute, int * value);
typedef Bool (GLAD_API_PTR *PFNGLXRELEASEBUFFERSMESAPROC)(Display * dpy, GLXDrawable drawable);
typedef void (GLAD_API_PTR *PFNGLXRELEASETEXIMAGEEXTPROC)(Display * dpy, GLXDrawable drawable, int buffer);
typedef void (GLAD_API_PTR *PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC)(Display * dpy, GLXVideoCaptureDeviceNV device);
typedef int (GLAD_API_PTR *PFNGLXRELEASEVIDEODEVICENVPROC)(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice);
typedef int (GLAD_API_PTR *PFNGLXRELEASEVIDEOIMAGENVPROC)(Display * dpy, GLXPbuffer pbuf);
typedef Bool (GLAD_API_PTR *PFNGLXRESETFRAMECOUNTNVPROC)(Display * dpy, int screen);
typedef void (GLAD_API_PTR *PFNGLXSELECTEVENTPROC)(Display * dpy, GLXDrawable draw, unsigned long event_mask);
typedef void (GLAD_API_PTR *PFNGLXSELECTEVENTSGIXPROC)(Display * dpy, GLXDrawable drawable, unsigned long mask);
typedef int (GLAD_API_PTR *PFNGLXSENDPBUFFERTOVIDEONVPROC)(Display * dpy, GLXPbuffer pbuf, int iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock);
typedef GLboolean (GLAD_API_PTR *PFNGLXSET3DFXMODEMESAPROC)(GLint mode);
typedef void (GLAD_API_PTR *PFNGLXSWAPBUFFERSPROC)(Display * dpy, GLXDrawable drawable);
typedef int64_t (GLAD_API_PTR *PFNGLXSWAPBUFFERSMSCOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
typedef void (GLAD_API_PTR *PFNGLXSWAPINTERVALEXTPROC)(Display * dpy, GLXDrawable drawable, int interval);
typedef int (GLAD_API_PTR *PFNGLXSWAPINTERVALMESAPROC)(unsigned int interval);
typedef int (GLAD_API_PTR *PFNGLXSWAPINTERVALSGIPROC)(int interval);
typedef void (GLAD_API_PTR *PFNGLXUSEXFONTPROC)(Font font, int first, int count, int list);
typedef Bool (GLAD_API_PTR *PFNGLXWAITFORMSCOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef Bool (GLAD_API_PTR *PFNGLXWAITFORSBCOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef void (GLAD_API_PTR *PFNGLXWAITGLPROC)(void);
typedef int (GLAD_API_PTR *PFNGLXWAITVIDEOSYNCSGIPROC)(int divisor, int remainder, unsigned int * count);
typedef void (GLAD_API_PTR *PFNGLXWAITXPROC)(void);

GLAD_API_CALL PFNGLXBINDCHANNELTOWINDOWSGIXPROC sf_glad_glXBindChannelToWindowSGIX;
#define glXBindChannelToWindowSGIX sf_glad_glXBindChannelToWindowSGIX
GLAD_API_CALL PFNGLXBINDHYPERPIPESGIXPROC sf_glad_glXBindHyperpipeSGIX;
#define glXBindHyperpipeSGIX sf_glad_glXBindHyperpipeSGIX
GLAD_API_CALL PFNGLXBINDSWAPBARRIERNVPROC sf_glad_glXBindSwapBarrierNV;
#define glXBindSwapBarrierNV sf_glad_glXBindSwapBarrierNV
GLAD_API_CALL PFNGLXBINDSWAPBARRIERSGIXPROC sf_glad_glXBindSwapBarrierSGIX;
#define glXBindSwapBarrierSGIX sf_glad_glXBindSwapBarrierSGIX
GLAD_API_CALL PFNGLXBINDTEXIMAGEEXTPROC sf_glad_glXBindTexImageEXT;
#define glXBindTexImageEXT sf_glad_glXBindTexImageEXT
GLAD_API_CALL PFNGLXBINDVIDEOCAPTUREDEVICENVPROC sf_glad_glXBindVideoCaptureDeviceNV;
#define glXBindVideoCaptureDeviceNV sf_glad_glXBindVideoCaptureDeviceNV
GLAD_API_CALL PFNGLXBINDVIDEODEVICENVPROC sf_glad_glXBindVideoDeviceNV;
#define glXBindVideoDeviceNV sf_glad_glXBindVideoDeviceNV
GLAD_API_CALL PFNGLXBINDVIDEOIMAGENVPROC sf_glad_glXBindVideoImageNV;
#define glXBindVideoImageNV sf_glad_glXBindVideoImageNV
GLAD_API_CALL PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC sf_glad_glXBlitContextFramebufferAMD;
#define glXBlitContextFramebufferAMD sf_glad_glXBlitContextFramebufferAMD
GLAD_API_CALL PFNGLXCHANNELRECTSGIXPROC sf_glad_glXChannelRectSGIX;
#define glXChannelRectSGIX sf_glad_glXChannelRectSGIX
GLAD_API_CALL PFNGLXCHANNELRECTSYNCSGIXPROC sf_glad_glXChannelRectSyncSGIX;
#define glXChannelRectSyncSGIX sf_glad_glXChannelRectSyncSGIX
GLAD_API_CALL PFNGLXCHOOSEFBCONFIGPROC sf_glad_glXChooseFBConfig;
#define glXChooseFBConfig sf_glad_glXChooseFBConfig
GLAD_API_CALL PFNGLXCHOOSEFBCONFIGSGIXPROC sf_glad_glXChooseFBConfigSGIX;
#define glXChooseFBConfigSGIX sf_glad_glXChooseFBConfigSGIX
GLAD_API_CALL PFNGLXCHOOSEVISUALPROC sf_glad_glXChooseVisual;
#define glXChooseVisual sf_glad_glXChooseVisual
GLAD_API_CALL PFNGLXCOPYBUFFERSUBDATANVPROC sf_glad_glXCopyBufferSubDataNV;
#define glXCopyBufferSubDataNV sf_glad_glXCopyBufferSubDataNV
GLAD_API_CALL PFNGLXCOPYCONTEXTPROC sf_glad_glXCopyContext;
#define glXCopyContext sf_glad_glXCopyContext
GLAD_API_CALL PFNGLXCOPYIMAGESUBDATANVPROC sf_glad_glXCopyImageSubDataNV;
#define glXCopyImageSubDataNV sf_glad_glXCopyImageSubDataNV
GLAD_API_CALL PFNGLXCOPYSUBBUFFERMESAPROC sf_glad_glXCopySubBufferMESA;
#define glXCopySubBufferMESA sf_glad_glXCopySubBufferMESA
GLAD_API_CALL PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC sf_glad_glXCreateAssociatedContextAMD;
#define glXCreateAssociatedContextAMD sf_glad_glXCreateAssociatedContextAMD
GLAD_API_CALL PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC sf_glad_glXCreateAssociatedContextAttribsAMD;
#define glXCreateAssociatedContextAttribsAMD sf_glad_glXCreateAssociatedContextAttribsAMD
GLAD_API_CALL PFNGLXCREATECONTEXTPROC sf_glad_glXCreateContext;
#define glXCreateContext sf_glad_glXCreateContext
GLAD_API_CALL PFNGLXCREATECONTEXTATTRIBSARBPROC sf_glad_glXCreateContextAttribsARB;
#define glXCreateContextAttribsARB sf_glad_glXCreateContextAttribsARB
GLAD_API_CALL PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC sf_glad_glXCreateContextWithConfigSGIX;
#define glXCreateContextWithConfigSGIX sf_glad_glXCreateContextWithConfigSGIX
GLAD_API_CALL PFNGLXCREATEGLXPBUFFERSGIXPROC sf_glad_glXCreateGLXPbufferSGIX;
#define glXCreateGLXPbufferSGIX sf_glad_glXCreateGLXPbufferSGIX
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPPROC sf_glad_glXCreateGLXPixmap;
#define glXCreateGLXPixmap sf_glad_glXCreateGLXPixmap
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPMESAPROC sf_glad_glXCreateGLXPixmapMESA;
#define glXCreateGLXPixmapMESA sf_glad_glXCreateGLXPixmapMESA
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC sf_glad_glXCreateGLXPixmapWithConfigSGIX;
#define glXCreateGLXPixmapWithConfigSGIX sf_glad_glXCreateGLXPixmapWithConfigSGIX
GLAD_API_CALL PFNGLXCREATENEWCONTEXTPROC sf_glad_glXCreateNewContext;
#define glXCreateNewContext sf_glad_glXCreateNewContext
GLAD_API_CALL PFNGLXCREATEPBUFFERPROC sf_glad_glXCreatePbuffer;
#define glXCreatePbuffer sf_glad_glXCreatePbuffer
GLAD_API_CALL PFNGLXCREATEPIXMAPPROC sf_glad_glXCreatePixmap;
#define glXCreatePixmap sf_glad_glXCreatePixmap
GLAD_API_CALL PFNGLXCREATEWINDOWPROC sf_glad_glXCreateWindow;
#define glXCreateWindow sf_glad_glXCreateWindow
GLAD_API_CALL PFNGLXCUSHIONSGIPROC sf_glad_glXCushionSGI;
#define glXCushionSGI sf_glad_glXCushionSGI
GLAD_API_CALL PFNGLXDELAYBEFORESWAPNVPROC sf_glad_glXDelayBeforeSwapNV;
#define glXDelayBeforeSwapNV sf_glad_glXDelayBeforeSwapNV
GLAD_API_CALL PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC sf_glad_glXDeleteAssociatedContextAMD;
#define glXDeleteAssociatedContextAMD sf_glad_glXDeleteAssociatedContextAMD
GLAD_API_CALL PFNGLXDESTROYCONTEXTPROC sf_glad_glXDestroyContext;
#define glXDestroyContext sf_glad_glXDestroyContext
GLAD_API_CALL PFNGLXDESTROYGLXPBUFFERSGIXPROC sf_glad_glXDestroyGLXPbufferSGIX;
#define glXDestroyGLXPbufferSGIX sf_glad_glXDestroyGLXPbufferSGIX
GLAD_API_CALL PFNGLXDESTROYGLXPIXMAPPROC sf_glad_glXDestroyGLXPixmap;
#define glXDestroyGLXPixmap sf_glad_glXDestroyGLXPixmap
GLAD_API_CALL PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC sf_glad_glXDestroyHyperpipeConfigSGIX;
#define glXDestroyHyperpipeConfigSGIX sf_glad_glXDestroyHyperpipeConfigSGIX
GLAD_API_CALL PFNGLXDESTROYPBUFFERPROC sf_glad_glXDestroyPbuffer;
#define glXDestroyPbuffer sf_glad_glXDestroyPbuffer
GLAD_API_CALL PFNGLXDESTROYPIXMAPPROC sf_glad_glXDestroyPixmap;
#define glXDestroyPixmap sf_glad_glXDestroyPixmap
GLAD_API_CALL PFNGLXDESTROYWINDOWPROC sf_glad_glXDestroyWindow;
#define glXDestroyWindow sf_glad_glXDestroyWindow
GLAD_API_CALL PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC sf_glad_glXEnumerateVideoCaptureDevicesNV;
#define glXEnumerateVideoCaptureDevicesNV sf_glad_glXEnumerateVideoCaptureDevicesNV
GLAD_API_CALL PFNGLXENUMERATEVIDEODEVICESNVPROC sf_glad_glXEnumerateVideoDevicesNV;
#define glXEnumerateVideoDevicesNV sf_glad_glXEnumerateVideoDevicesNV
GLAD_API_CALL PFNGLXFREECONTEXTEXTPROC sf_glad_glXFreeContextEXT;
#define glXFreeContextEXT sf_glad_glXFreeContextEXT
GLAD_API_CALL PFNGLXGETAGPOFFSETMESAPROC sf_glad_glXGetAGPOffsetMESA;
#define glXGetAGPOffsetMESA sf_glad_glXGetAGPOffsetMESA
GLAD_API_CALL PFNGLXGETCLIENTSTRINGPROC sf_glad_glXGetClientString;
#define glXGetClientString sf_glad_glXGetClientString
GLAD_API_CALL PFNGLXGETCONFIGPROC sf_glad_glXGetConfig;
#define glXGetConfig sf_glad_glXGetConfig
GLAD_API_CALL PFNGLXGETCONTEXTGPUIDAMDPROC sf_glad_glXGetContextGPUIDAMD;
#define glXGetContextGPUIDAMD sf_glad_glXGetContextGPUIDAMD
GLAD_API_CALL PFNGLXGETCONTEXTIDEXTPROC sf_glad_glXGetContextIDEXT;
#define glXGetContextIDEXT sf_glad_glXGetContextIDEXT
GLAD_API_CALL PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC sf_glad_glXGetCurrentAssociatedContextAMD;
#define glXGetCurrentAssociatedContextAMD sf_glad_glXGetCurrentAssociatedContextAMD
GLAD_API_CALL PFNGLXGETCURRENTCONTEXTPROC sf_glad_glXGetCurrentContext;
#define glXGetCurrentContext sf_glad_glXGetCurrentContext
GLAD_API_CALL PFNGLXGETCURRENTDISPLAYPROC sf_glad_glXGetCurrentDisplay;
#define glXGetCurrentDisplay sf_glad_glXGetCurrentDisplay
GLAD_API_CALL PFNGLXGETCURRENTDISPLAYEXTPROC sf_glad_glXGetCurrentDisplayEXT;
#define glXGetCurrentDisplayEXT sf_glad_glXGetCurrentDisplayEXT
GLAD_API_CALL PFNGLXGETCURRENTDRAWABLEPROC sf_glad_glXGetCurrentDrawable;
#define glXGetCurrentDrawable sf_glad_glXGetCurrentDrawable
GLAD_API_CALL PFNGLXGETCURRENTREADDRAWABLEPROC sf_glad_glXGetCurrentReadDrawable;
#define glXGetCurrentReadDrawable sf_glad_glXGetCurrentReadDrawable
GLAD_API_CALL PFNGLXGETCURRENTREADDRAWABLESGIPROC sf_glad_glXGetCurrentReadDrawableSGI;
#define glXGetCurrentReadDrawableSGI sf_glad_glXGetCurrentReadDrawableSGI
GLAD_API_CALL PFNGLXGETFBCONFIGATTRIBPROC sf_glad_glXGetFBConfigAttrib;
#define glXGetFBConfigAttrib sf_glad_glXGetFBConfigAttrib
GLAD_API_CALL PFNGLXGETFBCONFIGATTRIBSGIXPROC sf_glad_glXGetFBConfigAttribSGIX;
#define glXGetFBConfigAttribSGIX sf_glad_glXGetFBConfigAttribSGIX
GLAD_API_CALL PFNGLXGETFBCONFIGFROMVISUALSGIXPROC sf_glad_glXGetFBConfigFromVisualSGIX;
#define glXGetFBConfigFromVisualSGIX sf_glad_glXGetFBConfigFromVisualSGIX
GLAD_API_CALL PFNGLXGETFBCONFIGSPROC sf_glad_glXGetFBConfigs;
#define glXGetFBConfigs sf_glad_glXGetFBConfigs
GLAD_API_CALL PFNGLXGETGPUIDSAMDPROC sf_glad_glXGetGPUIDsAMD;
#define glXGetGPUIDsAMD sf_glad_glXGetGPUIDsAMD
GLAD_API_CALL PFNGLXGETGPUINFOAMDPROC sf_glad_glXGetGPUInfoAMD;
#define glXGetGPUInfoAMD sf_glad_glXGetGPUInfoAMD
GLAD_API_CALL PFNGLXGETMSCRATEOMLPROC sf_glad_glXGetMscRateOML;
#define glXGetMscRateOML sf_glad_glXGetMscRateOML
GLAD_API_CALL PFNGLXGETPROCADDRESSPROC sf_glad_glXGetProcAddress;
#define glXGetProcAddress sf_glad_glXGetProcAddress
GLAD_API_CALL PFNGLXGETPROCADDRESSARBPROC sf_glad_glXGetProcAddressARB;
#define glXGetProcAddressARB sf_glad_glXGetProcAddressARB
GLAD_API_CALL PFNGLXGETSELECTEDEVENTPROC sf_glad_glXGetSelectedEvent;
#define glXGetSelectedEvent sf_glad_glXGetSelectedEvent
GLAD_API_CALL PFNGLXGETSELECTEDEVENTSGIXPROC sf_glad_glXGetSelectedEventSGIX;
#define glXGetSelectedEventSGIX sf_glad_glXGetSelectedEventSGIX
GLAD_API_CALL PFNGLXGETSWAPINTERVALMESAPROC sf_glad_glXGetSwapIntervalMESA;
#define glXGetSwapIntervalMESA sf_glad_glXGetSwapIntervalMESA
GLAD_API_CALL PFNGLXGETSYNCVALUESOMLPROC sf_glad_glXGetSyncValuesOML;
#define glXGetSyncValuesOML sf_glad_glXGetSyncValuesOML
GLAD_API_CALL PFNGLXGETTRANSPARENTINDEXSUNPROC sf_glad_glXGetTransparentIndexSUN;
#define glXGetTransparentIndexSUN sf_glad_glXGetTransparentIndexSUN
GLAD_API_CALL PFNGLXGETVIDEODEVICENVPROC sf_glad_glXGetVideoDeviceNV;
#define glXGetVideoDeviceNV sf_glad_glXGetVideoDeviceNV
GLAD_API_CALL PFNGLXGETVIDEOINFONVPROC sf_glad_glXGetVideoInfoNV;
#define glXGetVideoInfoNV sf_glad_glXGetVideoInfoNV
GLAD_API_CALL PFNGLXGETVIDEOSYNCSGIPROC sf_glad_glXGetVideoSyncSGI;
#define glXGetVideoSyncSGI sf_glad_glXGetVideoSyncSGI
GLAD_API_CALL PFNGLXGETVISUALFROMFBCONFIGPROC sf_glad_glXGetVisualFromFBConfig;
#define glXGetVisualFromFBConfig sf_glad_glXGetVisualFromFBConfig
GLAD_API_CALL PFNGLXGETVISUALFROMFBCONFIGSGIXPROC sf_glad_glXGetVisualFromFBConfigSGIX;
#define glXGetVisualFromFBConfigSGIX sf_glad_glXGetVisualFromFBConfigSGIX
GLAD_API_CALL PFNGLXHYPERPIPEATTRIBSGIXPROC sf_glad_glXHyperpipeAttribSGIX;
#define glXHyperpipeAttribSGIX sf_glad_glXHyperpipeAttribSGIX
GLAD_API_CALL PFNGLXHYPERPIPECONFIGSGIXPROC sf_glad_glXHyperpipeConfigSGIX;
#define glXHyperpipeConfigSGIX sf_glad_glXHyperpipeConfigSGIX
GLAD_API_CALL PFNGLXIMPORTCONTEXTEXTPROC sf_glad_glXImportContextEXT;
#define glXImportContextEXT sf_glad_glXImportContextEXT
GLAD_API_CALL PFNGLXISDIRECTPROC sf_glad_glXIsDirect;
#define glXIsDirect sf_glad_glXIsDirect
GLAD_API_CALL PFNGLXJOINSWAPGROUPNVPROC sf_glad_glXJoinSwapGroupNV;
#define glXJoinSwapGroupNV sf_glad_glXJoinSwapGroupNV
GLAD_API_CALL PFNGLXJOINSWAPGROUPSGIXPROC sf_glad_glXJoinSwapGroupSGIX;
#define glXJoinSwapGroupSGIX sf_glad_glXJoinSwapGroupSGIX
GLAD_API_CALL PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC sf_glad_glXLockVideoCaptureDeviceNV;
#define glXLockVideoCaptureDeviceNV sf_glad_glXLockVideoCaptureDeviceNV
GLAD_API_CALL PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC sf_glad_glXMakeAssociatedContextCurrentAMD;
#define glXMakeAssociatedContextCurrentAMD sf_glad_glXMakeAssociatedContextCurrentAMD
GLAD_API_CALL PFNGLXMAKECONTEXTCURRENTPROC sf_glad_glXMakeContextCurrent;
#define glXMakeContextCurrent sf_glad_glXMakeContextCurrent
GLAD_API_CALL PFNGLXMAKECURRENTPROC sf_glad_glXMakeCurrent;
#define glXMakeCurrent sf_glad_glXMakeCurrent
GLAD_API_CALL PFNGLXMAKECURRENTREADSGIPROC sf_glad_glXMakeCurrentReadSGI;
#define glXMakeCurrentReadSGI sf_glad_glXMakeCurrentReadSGI
GLAD_API_CALL PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC sf_glad_glXNamedCopyBufferSubDataNV;
#define glXNamedCopyBufferSubDataNV sf_glad_glXNamedCopyBufferSubDataNV
GLAD_API_CALL PFNGLXQUERYCHANNELDELTASSGIXPROC sf_glad_glXQueryChannelDeltasSGIX;
#define glXQueryChannelDeltasSGIX sf_glad_glXQueryChannelDeltasSGIX
GLAD_API_CALL PFNGLXQUERYCHANNELRECTSGIXPROC sf_glad_glXQueryChannelRectSGIX;
#define glXQueryChannelRectSGIX sf_glad_glXQueryChannelRectSGIX
GLAD_API_CALL PFNGLXQUERYCONTEXTPROC sf_glad_glXQueryContext;
#define glXQueryContext sf_glad_glXQueryContext
GLAD_API_CALL PFNGLXQUERYCONTEXTINFOEXTPROC sf_glad_glXQueryContextInfoEXT;
#define glXQueryContextInfoEXT sf_glad_glXQueryContextInfoEXT
GLAD_API_CALL PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC sf_glad_glXQueryCurrentRendererIntegerMESA;
#define glXQueryCurrentRendererIntegerMESA sf_glad_glXQueryCurrentRendererIntegerMESA
GLAD_API_CALL PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC sf_glad_glXQueryCurrentRendererStringMESA;
#define glXQueryCurrentRendererStringMESA sf_glad_glXQueryCurrentRendererStringMESA
GLAD_API_CALL PFNGLXQUERYDRAWABLEPROC sf_glad_glXQueryDrawable;
#define glXQueryDrawable sf_glad_glXQueryDrawable
GLAD_API_CALL PFNGLXQUERYEXTENSIONPROC sf_glad_glXQueryExtension;
#define glXQueryExtension sf_glad_glXQueryExtension
GLAD_API_CALL PFNGLXQUERYEXTENSIONSSTRINGPROC sf_glad_glXQueryExtensionsString;
#define glXQueryExtensionsString sf_glad_glXQueryExtensionsString
GLAD_API_CALL PFNGLXQUERYFRAMECOUNTNVPROC sf_glad_glXQueryFrameCountNV;
#define glXQueryFrameCountNV sf_glad_glXQueryFrameCountNV
GLAD_API_CALL PFNGLXQUERYGLXPBUFFERSGIXPROC sf_glad_glXQueryGLXPbufferSGIX;
#define glXQueryGLXPbufferSGIX sf_glad_glXQueryGLXPbufferSGIX
GLAD_API_CALL PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC sf_glad_glXQueryHyperpipeAttribSGIX;
#define glXQueryHyperpipeAttribSGIX sf_glad_glXQueryHyperpipeAttribSGIX
GLAD_API_CALL PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC sf_glad_glXQueryHyperpipeBestAttribSGIX;
#define glXQueryHyperpipeBestAttribSGIX sf_glad_glXQueryHyperpipeBestAttribSGIX
GLAD_API_CALL PFNGLXQUERYHYPERPIPECONFIGSGIXPROC sf_glad_glXQueryHyperpipeConfigSGIX;
#define glXQueryHyperpipeConfigSGIX sf_glad_glXQueryHyperpipeConfigSGIX
GLAD_API_CALL PFNGLXQUERYHYPERPIPENETWORKSGIXPROC sf_glad_glXQueryHyperpipeNetworkSGIX;
#define glXQueryHyperpipeNetworkSGIX sf_glad_glXQueryHyperpipeNetworkSGIX
GLAD_API_CALL PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC sf_glad_glXQueryMaxSwapBarriersSGIX;
#define glXQueryMaxSwapBarriersSGIX sf_glad_glXQueryMaxSwapBarriersSGIX
GLAD_API_CALL PFNGLXQUERYMAXSWAPGROUPSNVPROC sf_glad_glXQueryMaxSwapGroupsNV;
#define glXQueryMaxSwapGroupsNV sf_glad_glXQueryMaxSwapGroupsNV
GLAD_API_CALL PFNGLXQUERYRENDERERINTEGERMESAPROC sf_glad_glXQueryRendererIntegerMESA;
#define glXQueryRendererIntegerMESA sf_glad_glXQueryRendererIntegerMESA
GLAD_API_CALL PFNGLXQUERYRENDERERSTRINGMESAPROC sf_glad_glXQueryRendererStringMESA;
#define glXQueryRendererStringMESA sf_glad_glXQueryRendererStringMESA
GLAD_API_CALL PFNGLXQUERYSERVERSTRINGPROC sf_glad_glXQueryServerString;
#define glXQueryServerString sf_glad_glXQueryServerString
GLAD_API_CALL PFNGLXQUERYSWAPGROUPNVPROC sf_glad_glXQuerySwapGroupNV;
#define glXQuerySwapGroupNV sf_glad_glXQuerySwapGroupNV
GLAD_API_CALL PFNGLXQUERYVERSIONPROC sf_glad_glXQueryVersion;
#define glXQueryVersion sf_glad_glXQueryVersion
GLAD_API_CALL PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC sf_glad_glXQueryVideoCaptureDeviceNV;
#define glXQueryVideoCaptureDeviceNV sf_glad_glXQueryVideoCaptureDeviceNV
GLAD_API_CALL PFNGLXRELEASEBUFFERSMESAPROC sf_glad_glXReleaseBuffersMESA;
#define glXReleaseBuffersMESA sf_glad_glXReleaseBuffersMESA
GLAD_API_CALL PFNGLXRELEASETEXIMAGEEXTPROC sf_glad_glXReleaseTexImageEXT;
#define glXReleaseTexImageEXT sf_glad_glXReleaseTexImageEXT
GLAD_API_CALL PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC sf_glad_glXReleaseVideoCaptureDeviceNV;
#define glXReleaseVideoCaptureDeviceNV sf_glad_glXReleaseVideoCaptureDeviceNV
GLAD_API_CALL PFNGLXRELEASEVIDEODEVICENVPROC sf_glad_glXReleaseVideoDeviceNV;
#define glXReleaseVideoDeviceNV sf_glad_glXReleaseVideoDeviceNV
GLAD_API_CALL PFNGLXRELEASEVIDEOIMAGENVPROC sf_glad_glXReleaseVideoImageNV;
#define glXReleaseVideoImageNV sf_glad_glXReleaseVideoImageNV
GLAD_API_CALL PFNGLXRESETFRAMECOUNTNVPROC sf_glad_glXResetFrameCountNV;
#define glXResetFrameCountNV sf_glad_glXResetFrameCountNV
GLAD_API_CALL PFNGLXSELECTEVENTPROC sf_glad_glXSelectEvent;
#define glXSelectEvent sf_glad_glXSelectEvent
GLAD_API_CALL PFNGLXSELECTEVENTSGIXPROC sf_glad_glXSelectEventSGIX;
#define glXSelectEventSGIX sf_glad_glXSelectEventSGIX
GLAD_API_CALL PFNGLXSENDPBUFFERTOVIDEONVPROC sf_glad_glXSendPbufferToVideoNV;
#define glXSendPbufferToVideoNV sf_glad_glXSendPbufferToVideoNV
GLAD_API_CALL PFNGLXSET3DFXMODEMESAPROC sf_glad_glXSet3DfxModeMESA;
#define glXSet3DfxModeMESA sf_glad_glXSet3DfxModeMESA
GLAD_API_CALL PFNGLXSWAPBUFFERSPROC sf_glad_glXSwapBuffers;
#define glXSwapBuffers sf_glad_glXSwapBuffers
GLAD_API_CALL PFNGLXSWAPBUFFERSMSCOMLPROC sf_glad_glXSwapBuffersMscOML;
#define glXSwapBuffersMscOML sf_glad_glXSwapBuffersMscOML
GLAD_API_CALL PFNGLXSWAPINTERVALEXTPROC sf_glad_glXSwapIntervalEXT;
#define glXSwapIntervalEXT sf_glad_glXSwapIntervalEXT
GLAD_API_CALL PFNGLXSWAPINTERVALMESAPROC sf_glad_glXSwapIntervalMESA;
#define glXSwapIntervalMESA sf_glad_glXSwapIntervalMESA
GLAD_API_CALL PFNGLXSWAPINTERVALSGIPROC sf_glad_glXSwapIntervalSGI;
#define glXSwapIntervalSGI sf_glad_glXSwapIntervalSGI
GLAD_API_CALL PFNGLXUSEXFONTPROC sf_glad_glXUseXFont;
#define glXUseXFont sf_glad_glXUseXFont
GLAD_API_CALL PFNGLXWAITFORMSCOMLPROC sf_glad_glXWaitForMscOML;
#define glXWaitForMscOML sf_glad_glXWaitForMscOML
GLAD_API_CALL PFNGLXWAITFORSBCOMLPROC sf_glad_glXWaitForSbcOML;
#define glXWaitForSbcOML sf_glad_glXWaitForSbcOML
GLAD_API_CALL PFNGLXWAITGLPROC sf_glad_glXWaitGL;
#define glXWaitGL sf_glad_glXWaitGL
GLAD_API_CALL PFNGLXWAITVIDEOSYNCSGIPROC sf_glad_glXWaitVideoSyncSGI;
#define glXWaitVideoSyncSGI sf_glad_glXWaitVideoSyncSGI
GLAD_API_CALL PFNGLXWAITXPROC sf_glad_glXWaitX;
#define glXWaitX sf_glad_glXWaitX





#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef SF_GLAD_GLX_IMPLEMENTATION
/**
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */

#ifdef __cplusplus
extern "C" {
#endif



int SF_GLAD_GLX_VERSION_1_0 = 0;
int SF_GLAD_GLX_VERSION_1_1 = 0;
int SF_GLAD_GLX_VERSION_1_2 = 0;
int SF_GLAD_GLX_VERSION_1_3 = 0;
int SF_GLAD_GLX_VERSION_1_4 = 0;
int SF_GLAD_GLX_3DFX_multisample = 0;
int SF_GLAD_GLX_AMD_gpu_association = 0;
int SF_GLAD_GLX_ARB_context_flush_control = 0;
int SF_GLAD_GLX_ARB_create_context = 0;
int SF_GLAD_GLX_ARB_create_context_no_error = 0;
int SF_GLAD_GLX_ARB_create_context_profile = 0;
int SF_GLAD_GLX_ARB_create_context_robustness = 0;
int SF_GLAD_GLX_ARB_fbconfig_float = 0;
int SF_GLAD_GLX_ARB_framebuffer_sRGB = 0;
int SF_GLAD_GLX_ARB_get_proc_address = 0;
int SF_GLAD_GLX_ARB_multisample = 0;
int SF_GLAD_GLX_ARB_robustness_application_isolation = 0;
int SF_GLAD_GLX_ARB_robustness_share_group_isolation = 0;
int SF_GLAD_GLX_ARB_vertex_buffer_object = 0;
int SF_GLAD_GLX_EXT_buffer_age = 0;
int SF_GLAD_GLX_EXT_context_priority = 0;
int SF_GLAD_GLX_EXT_create_context_es2_profile = 0;
int SF_GLAD_GLX_EXT_create_context_es_profile = 0;
int SF_GLAD_GLX_EXT_fbconfig_packed_float = 0;
int SF_GLAD_GLX_EXT_framebuffer_sRGB = 0;
int SF_GLAD_GLX_EXT_get_drawable_type = 0;
int SF_GLAD_GLX_EXT_import_context = 0;
int SF_GLAD_GLX_EXT_libglvnd = 0;
int SF_GLAD_GLX_EXT_no_config_context = 0;
int SF_GLAD_GLX_EXT_stereo_tree = 0;
int SF_GLAD_GLX_EXT_swap_control = 0;
int SF_GLAD_GLX_EXT_swap_control_tear = 0;
int SF_GLAD_GLX_EXT_texture_from_pixmap = 0;
int SF_GLAD_GLX_EXT_visual_info = 0;
int SF_GLAD_GLX_EXT_visual_rating = 0;
int SF_GLAD_GLX_INTEL_swap_event = 0;
int SF_GLAD_GLX_MESA_agp_offset = 0;
int SF_GLAD_GLX_MESA_copy_sub_buffer = 0;
int SF_GLAD_GLX_MESA_pixmap_colormap = 0;
int SF_GLAD_GLX_MESA_query_renderer = 0;
int SF_GLAD_GLX_MESA_release_buffers = 0;
int SF_GLAD_GLX_MESA_set_3dfx_mode = 0;
int SF_GLAD_GLX_MESA_swap_control = 0;
int SF_GLAD_GLX_NV_copy_buffer = 0;
int SF_GLAD_GLX_NV_copy_image = 0;
int SF_GLAD_GLX_NV_delay_before_swap = 0;
int SF_GLAD_GLX_NV_float_buffer = 0;
int SF_GLAD_GLX_NV_multigpu_context = 0;
int SF_GLAD_GLX_NV_multisample_coverage = 0;
int SF_GLAD_GLX_NV_present_video = 0;
int SF_GLAD_GLX_NV_robustness_video_memory_purge = 0;
int SF_GLAD_GLX_NV_swap_group = 0;
int SF_GLAD_GLX_NV_video_capture = 0;
int SF_GLAD_GLX_NV_video_out = 0;
int SF_GLAD_GLX_OML_swap_method = 0;
int SF_GLAD_GLX_OML_sync_control = 0;
int SF_GLAD_GLX_SGIS_blended_overlay = 0;
int SF_GLAD_GLX_SGIS_multisample = 0;
int SF_GLAD_GLX_SGIS_shared_multisample = 0;
int SF_GLAD_GLX_SGIX_fbconfig = 0;
int SF_GLAD_GLX_SGIX_hyperpipe = 0;
int SF_GLAD_GLX_SGIX_pbuffer = 0;
int SF_GLAD_GLX_SGIX_swap_barrier = 0;
int SF_GLAD_GLX_SGIX_swap_group = 0;
int SF_GLAD_GLX_SGIX_video_resize = 0;
int SF_GLAD_GLX_SGIX_visual_select_group = 0;
int SF_GLAD_GLX_SGI_cushion = 0;
int SF_GLAD_GLX_SGI_make_current_read = 0;
int SF_GLAD_GLX_SGI_swap_control = 0;
int SF_GLAD_GLX_SGI_video_sync = 0;
int SF_GLAD_GLX_SUN_get_transparent_index = 0;



PFNGLXBINDCHANNELTOWINDOWSGIXPROC sf_glad_glXBindChannelToWindowSGIX = NULL;
PFNGLXBINDHYPERPIPESGIXPROC sf_glad_glXBindHyperpipeSGIX = NULL;
PFNGLXBINDSWAPBARRIERNVPROC sf_glad_glXBindSwapBarrierNV = NULL;
PFNGLXBINDSWAPBARRIERSGIXPROC sf_glad_glXBindSwapBarrierSGIX = NULL;
PFNGLXBINDTEXIMAGEEXTPROC sf_glad_glXBindTexImageEXT = NULL;
PFNGLXBINDVIDEOCAPTUREDEVICENVPROC sf_glad_glXBindVideoCaptureDeviceNV = NULL;
PFNGLXBINDVIDEODEVICENVPROC sf_glad_glXBindVideoDeviceNV = NULL;
PFNGLXBINDVIDEOIMAGENVPROC sf_glad_glXBindVideoImageNV = NULL;
PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC sf_glad_glXBlitContextFramebufferAMD = NULL;
PFNGLXCHANNELRECTSGIXPROC sf_glad_glXChannelRectSGIX = NULL;
PFNGLXCHANNELRECTSYNCSGIXPROC sf_glad_glXChannelRectSyncSGIX = NULL;
PFNGLXCHOOSEFBCONFIGPROC sf_glad_glXChooseFBConfig = NULL;
PFNGLXCHOOSEFBCONFIGSGIXPROC sf_glad_glXChooseFBConfigSGIX = NULL;
PFNGLXCHOOSEVISUALPROC sf_glad_glXChooseVisual = NULL;
PFNGLXCOPYBUFFERSUBDATANVPROC sf_glad_glXCopyBufferSubDataNV = NULL;
PFNGLXCOPYCONTEXTPROC sf_glad_glXCopyContext = NULL;
PFNGLXCOPYIMAGESUBDATANVPROC sf_glad_glXCopyImageSubDataNV = NULL;
PFNGLXCOPYSUBBUFFERMESAPROC sf_glad_glXCopySubBufferMESA = NULL;
PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC sf_glad_glXCreateAssociatedContextAMD = NULL;
PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC sf_glad_glXCreateAssociatedContextAttribsAMD = NULL;
PFNGLXCREATECONTEXTPROC sf_glad_glXCreateContext = NULL;
PFNGLXCREATECONTEXTATTRIBSARBPROC sf_glad_glXCreateContextAttribsARB = NULL;
PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC sf_glad_glXCreateContextWithConfigSGIX = NULL;
PFNGLXCREATEGLXPBUFFERSGIXPROC sf_glad_glXCreateGLXPbufferSGIX = NULL;
PFNGLXCREATEGLXPIXMAPPROC sf_glad_glXCreateGLXPixmap = NULL;
PFNGLXCREATEGLXPIXMAPMESAPROC sf_glad_glXCreateGLXPixmapMESA = NULL;
PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC sf_glad_glXCreateGLXPixmapWithConfigSGIX = NULL;
PFNGLXCREATENEWCONTEXTPROC sf_glad_glXCreateNewContext = NULL;
PFNGLXCREATEPBUFFERPROC sf_glad_glXCreatePbuffer = NULL;
PFNGLXCREATEPIXMAPPROC sf_glad_glXCreatePixmap = NULL;
PFNGLXCREATEWINDOWPROC sf_glad_glXCreateWindow = NULL;
PFNGLXCUSHIONSGIPROC sf_glad_glXCushionSGI = NULL;
PFNGLXDELAYBEFORESWAPNVPROC sf_glad_glXDelayBeforeSwapNV = NULL;
PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC sf_glad_glXDeleteAssociatedContextAMD = NULL;
PFNGLXDESTROYCONTEXTPROC sf_glad_glXDestroyContext = NULL;
PFNGLXDESTROYGLXPBUFFERSGIXPROC sf_glad_glXDestroyGLXPbufferSGIX = NULL;
PFNGLXDESTROYGLXPIXMAPPROC sf_glad_glXDestroyGLXPixmap = NULL;
PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC sf_glad_glXDestroyHyperpipeConfigSGIX = NULL;
PFNGLXDESTROYPBUFFERPROC sf_glad_glXDestroyPbuffer = NULL;
PFNGLXDESTROYPIXMAPPROC sf_glad_glXDestroyPixmap = NULL;
PFNGLXDESTROYWINDOWPROC sf_glad_glXDestroyWindow = NULL;
PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC sf_glad_glXEnumerateVideoCaptureDevicesNV = NULL;
PFNGLXENUMERATEVIDEODEVICESNVPROC sf_glad_glXEnumerateVideoDevicesNV = NULL;
PFNGLXFREECONTEXTEXTPROC sf_glad_glXFreeContextEXT = NULL;
PFNGLXGETAGPOFFSETMESAPROC sf_glad_glXGetAGPOffsetMESA = NULL;
PFNGLXGETCLIENTSTRINGPROC sf_glad_glXGetClientString = NULL;
PFNGLXGETCONFIGPROC sf_glad_glXGetConfig = NULL;
PFNGLXGETCONTEXTGPUIDAMDPROC sf_glad_glXGetContextGPUIDAMD = NULL;
PFNGLXGETCONTEXTIDEXTPROC sf_glad_glXGetContextIDEXT = NULL;
PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC sf_glad_glXGetCurrentAssociatedContextAMD = NULL;
PFNGLXGETCURRENTCONTEXTPROC sf_glad_glXGetCurrentContext = NULL;
PFNGLXGETCURRENTDISPLAYPROC sf_glad_glXGetCurrentDisplay = NULL;
PFNGLXGETCURRENTDISPLAYEXTPROC sf_glad_glXGetCurrentDisplayEXT = NULL;
PFNGLXGETCURRENTDRAWABLEPROC sf_glad_glXGetCurrentDrawable = NULL;
PFNGLXGETCURRENTREADDRAWABLEPROC sf_glad_glXGetCurrentReadDrawable = NULL;
PFNGLXGETCURRENTREADDRAWABLESGIPROC sf_glad_glXGetCurrentReadDrawableSGI = NULL;
PFNGLXGETFBCONFIGATTRIBPROC sf_glad_glXGetFBConfigAttrib = NULL;
PFNGLXGETFBCONFIGATTRIBSGIXPROC sf_glad_glXGetFBConfigAttribSGIX = NULL;
PFNGLXGETFBCONFIGFROMVISUALSGIXPROC sf_glad_glXGetFBConfigFromVisualSGIX = NULL;
PFNGLXGETFBCONFIGSPROC sf_glad_glXGetFBConfigs = NULL;
PFNGLXGETGPUIDSAMDPROC sf_glad_glXGetGPUIDsAMD = NULL;
PFNGLXGETGPUINFOAMDPROC sf_glad_glXGetGPUInfoAMD = NULL;
PFNGLXGETMSCRATEOMLPROC sf_glad_glXGetMscRateOML = NULL;
PFNGLXGETPROCADDRESSPROC sf_glad_glXGetProcAddress = NULL;
PFNGLXGETPROCADDRESSARBPROC sf_glad_glXGetProcAddressARB = NULL;
PFNGLXGETSELECTEDEVENTPROC sf_glad_glXGetSelectedEvent = NULL;
PFNGLXGETSELECTEDEVENTSGIXPROC sf_glad_glXGetSelectedEventSGIX = NULL;
PFNGLXGETSWAPINTERVALMESAPROC sf_glad_glXGetSwapIntervalMESA = NULL;
PFNGLXGETSYNCVALUESOMLPROC sf_glad_glXGetSyncValuesOML = NULL;
PFNGLXGETTRANSPARENTINDEXSUNPROC sf_glad_glXGetTransparentIndexSUN = NULL;
PFNGLXGETVIDEODEVICENVPROC sf_glad_glXGetVideoDeviceNV = NULL;
PFNGLXGETVIDEOINFONVPROC sf_glad_glXGetVideoInfoNV = NULL;
PFNGLXGETVIDEOSYNCSGIPROC sf_glad_glXGetVideoSyncSGI = NULL;
PFNGLXGETVISUALFROMFBCONFIGPROC sf_glad_glXGetVisualFromFBConfig = NULL;
PFNGLXGETVISUALFROMFBCONFIGSGIXPROC sf_glad_glXGetVisualFromFBConfigSGIX = NULL;
PFNGLXHYPERPIPEATTRIBSGIXPROC sf_glad_glXHyperpipeAttribSGIX = NULL;
PFNGLXHYPERPIPECONFIGSGIXPROC sf_glad_glXHyperpipeConfigSGIX = NULL;
PFNGLXIMPORTCONTEXTEXTPROC sf_glad_glXImportContextEXT = NULL;
PFNGLXISDIRECTPROC sf_glad_glXIsDirect = NULL;
PFNGLXJOINSWAPGROUPNVPROC sf_glad_glXJoinSwapGroupNV = NULL;
PFNGLXJOINSWAPGROUPSGIXPROC sf_glad_glXJoinSwapGroupSGIX = NULL;
PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC sf_glad_glXLockVideoCaptureDeviceNV = NULL;
PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC sf_glad_glXMakeAssociatedContextCurrentAMD = NULL;
PFNGLXMAKECONTEXTCURRENTPROC sf_glad_glXMakeContextCurrent = NULL;
PFNGLXMAKECURRENTPROC sf_glad_glXMakeCurrent = NULL;
PFNGLXMAKECURRENTREADSGIPROC sf_glad_glXMakeCurrentReadSGI = NULL;
PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC sf_glad_glXNamedCopyBufferSubDataNV = NULL;
PFNGLXQUERYCHANNELDELTASSGIXPROC sf_glad_glXQueryChannelDeltasSGIX = NULL;
PFNGLXQUERYCHANNELRECTSGIXPROC sf_glad_glXQueryChannelRectSGIX = NULL;
PFNGLXQUERYCONTEXTPROC sf_glad_glXQueryContext = NULL;
PFNGLXQUERYCONTEXTINFOEXTPROC sf_glad_glXQueryContextInfoEXT = NULL;
PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC sf_glad_glXQueryCurrentRendererIntegerMESA = NULL;
PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC sf_glad_glXQueryCurrentRendererStringMESA = NULL;
PFNGLXQUERYDRAWABLEPROC sf_glad_glXQueryDrawable = NULL;
PFNGLXQUERYEXTENSIONPROC sf_glad_glXQueryExtension = NULL;
PFNGLXQUERYEXTENSIONSSTRINGPROC sf_glad_glXQueryExtensionsString = NULL;
PFNGLXQUERYFRAMECOUNTNVPROC sf_glad_glXQueryFrameCountNV = NULL;
PFNGLXQUERYGLXPBUFFERSGIXPROC sf_glad_glXQueryGLXPbufferSGIX = NULL;
PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC sf_glad_glXQueryHyperpipeAttribSGIX = NULL;
PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC sf_glad_glXQueryHyperpipeBestAttribSGIX = NULL;
PFNGLXQUERYHYPERPIPECONFIGSGIXPROC sf_glad_glXQueryHyperpipeConfigSGIX = NULL;
PFNGLXQUERYHYPERPIPENETWORKSGIXPROC sf_glad_glXQueryHyperpipeNetworkSGIX = NULL;
PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC sf_glad_glXQueryMaxSwapBarriersSGIX = NULL;
PFNGLXQUERYMAXSWAPGROUPSNVPROC sf_glad_glXQueryMaxSwapGroupsNV = NULL;
PFNGLXQUERYRENDERERINTEGERMESAPROC sf_glad_glXQueryRendererIntegerMESA = NULL;
PFNGLXQUERYRENDERERSTRINGMESAPROC sf_glad_glXQueryRendererStringMESA = NULL;
PFNGLXQUERYSERVERSTRINGPROC sf_glad_glXQueryServerString = NULL;
PFNGLXQUERYSWAPGROUPNVPROC sf_glad_glXQuerySwapGroupNV = NULL;
PFNGLXQUERYVERSIONPROC sf_glad_glXQueryVersion = NULL;
PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC sf_glad_glXQueryVideoCaptureDeviceNV = NULL;
PFNGLXRELEASEBUFFERSMESAPROC sf_glad_glXReleaseBuffersMESA = NULL;
PFNGLXRELEASETEXIMAGEEXTPROC sf_glad_glXReleaseTexImageEXT = NULL;
PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC sf_glad_glXReleaseVideoCaptureDeviceNV = NULL;
PFNGLXRELEASEVIDEODEVICENVPROC sf_glad_glXReleaseVideoDeviceNV = NULL;
PFNGLXRELEASEVIDEOIMAGENVPROC sf_glad_glXReleaseVideoImageNV = NULL;
PFNGLXRESETFRAMECOUNTNVPROC sf_glad_glXResetFrameCountNV = NULL;
PFNGLXSELECTEVENTPROC sf_glad_glXSelectEvent = NULL;
PFNGLXSELECTEVENTSGIXPROC sf_glad_glXSelectEventSGIX = NULL;
PFNGLXSENDPBUFFERTOVIDEONVPROC sf_glad_glXSendPbufferToVideoNV = NULL;
PFNGLXSET3DFXMODEMESAPROC sf_glad_glXSet3DfxModeMESA = NULL;
PFNGLXSWAPBUFFERSPROC sf_glad_glXSwapBuffers = NULL;
PFNGLXSWAPBUFFERSMSCOMLPROC sf_glad_glXSwapBuffersMscOML = NULL;
PFNGLXSWAPINTERVALEXTPROC sf_glad_glXSwapIntervalEXT = NULL;
PFNGLXSWAPINTERVALMESAPROC sf_glad_glXSwapIntervalMESA = NULL;
PFNGLXSWAPINTERVALSGIPROC sf_glad_glXSwapIntervalSGI = NULL;
PFNGLXUSEXFONTPROC sf_glad_glXUseXFont = NULL;
PFNGLXWAITFORMSCOMLPROC sf_glad_glXWaitForMscOML = NULL;
PFNGLXWAITFORSBCOMLPROC sf_glad_glXWaitForSbcOML = NULL;
PFNGLXWAITGLPROC sf_glad_glXWaitGL = NULL;
PFNGLXWAITVIDEOSYNCSGIPROC sf_glad_glXWaitVideoSyncSGI = NULL;
PFNGLXWAITXPROC sf_glad_glXWaitX = NULL;


static void sf_glad_glx_load_GLX_VERSION_1_0( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_VERSION_1_0) return;
    sf_glad_glXChooseVisual = (PFNGLXCHOOSEVISUALPROC) load(userptr, "glXChooseVisual");
    sf_glad_glXCopyContext = (PFNGLXCOPYCONTEXTPROC) load(userptr, "glXCopyContext");
    sf_glad_glXCreateContext = (PFNGLXCREATECONTEXTPROC) load(userptr, "glXCreateContext");
    sf_glad_glXCreateGLXPixmap = (PFNGLXCREATEGLXPIXMAPPROC) load(userptr, "glXCreateGLXPixmap");
    sf_glad_glXDestroyContext = (PFNGLXDESTROYCONTEXTPROC) load(userptr, "glXDestroyContext");
    sf_glad_glXDestroyGLXPixmap = (PFNGLXDESTROYGLXPIXMAPPROC) load(userptr, "glXDestroyGLXPixmap");
    sf_glad_glXGetConfig = (PFNGLXGETCONFIGPROC) load(userptr, "glXGetConfig");
    sf_glad_glXGetCurrentContext = (PFNGLXGETCURRENTCONTEXTPROC) load(userptr, "glXGetCurrentContext");
    sf_glad_glXGetCurrentDrawable = (PFNGLXGETCURRENTDRAWABLEPROC) load(userptr, "glXGetCurrentDrawable");
    sf_glad_glXIsDirect = (PFNGLXISDIRECTPROC) load(userptr, "glXIsDirect");
    sf_glad_glXMakeCurrent = (PFNGLXMAKECURRENTPROC) load(userptr, "glXMakeCurrent");
    sf_glad_glXQueryExtension = (PFNGLXQUERYEXTENSIONPROC) load(userptr, "glXQueryExtension");
    sf_glad_glXQueryVersion = (PFNGLXQUERYVERSIONPROC) load(userptr, "glXQueryVersion");
    sf_glad_glXSwapBuffers = (PFNGLXSWAPBUFFERSPROC) load(userptr, "glXSwapBuffers");
    sf_glad_glXUseXFont = (PFNGLXUSEXFONTPROC) load(userptr, "glXUseXFont");
    sf_glad_glXWaitGL = (PFNGLXWAITGLPROC) load(userptr, "glXWaitGL");
    sf_glad_glXWaitX = (PFNGLXWAITXPROC) load(userptr, "glXWaitX");
}
static void sf_glad_glx_load_GLX_VERSION_1_1( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_VERSION_1_1) return;
    sf_glad_glXGetClientString = (PFNGLXGETCLIENTSTRINGPROC) load(userptr, "glXGetClientString");
    sf_glad_glXQueryExtensionsString = (PFNGLXQUERYEXTENSIONSSTRINGPROC) load(userptr, "glXQueryExtensionsString");
    sf_glad_glXQueryServerString = (PFNGLXQUERYSERVERSTRINGPROC) load(userptr, "glXQueryServerString");
}
static void sf_glad_glx_load_GLX_VERSION_1_2( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_VERSION_1_2) return;
    sf_glad_glXGetCurrentDisplay = (PFNGLXGETCURRENTDISPLAYPROC) load(userptr, "glXGetCurrentDisplay");
}
static void sf_glad_glx_load_GLX_VERSION_1_3( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_VERSION_1_3) return;
    sf_glad_glXChooseFBConfig = (PFNGLXCHOOSEFBCONFIGPROC) load(userptr, "glXChooseFBConfig");
    sf_glad_glXCreateNewContext = (PFNGLXCREATENEWCONTEXTPROC) load(userptr, "glXCreateNewContext");
    sf_glad_glXCreatePbuffer = (PFNGLXCREATEPBUFFERPROC) load(userptr, "glXCreatePbuffer");
    sf_glad_glXCreatePixmap = (PFNGLXCREATEPIXMAPPROC) load(userptr, "glXCreatePixmap");
    sf_glad_glXCreateWindow = (PFNGLXCREATEWINDOWPROC) load(userptr, "glXCreateWindow");
    sf_glad_glXDestroyPbuffer = (PFNGLXDESTROYPBUFFERPROC) load(userptr, "glXDestroyPbuffer");
    sf_glad_glXDestroyPixmap = (PFNGLXDESTROYPIXMAPPROC) load(userptr, "glXDestroyPixmap");
    sf_glad_glXDestroyWindow = (PFNGLXDESTROYWINDOWPROC) load(userptr, "glXDestroyWindow");
    sf_glad_glXGetCurrentReadDrawable = (PFNGLXGETCURRENTREADDRAWABLEPROC) load(userptr, "glXGetCurrentReadDrawable");
    sf_glad_glXGetFBConfigAttrib = (PFNGLXGETFBCONFIGATTRIBPROC) load(userptr, "glXGetFBConfigAttrib");
    sf_glad_glXGetFBConfigs = (PFNGLXGETFBCONFIGSPROC) load(userptr, "glXGetFBConfigs");
    sf_glad_glXGetSelectedEvent = (PFNGLXGETSELECTEDEVENTPROC) load(userptr, "glXGetSelectedEvent");
    sf_glad_glXGetVisualFromFBConfig = (PFNGLXGETVISUALFROMFBCONFIGPROC) load(userptr, "glXGetVisualFromFBConfig");
    sf_glad_glXMakeContextCurrent = (PFNGLXMAKECONTEXTCURRENTPROC) load(userptr, "glXMakeContextCurrent");
    sf_glad_glXQueryContext = (PFNGLXQUERYCONTEXTPROC) load(userptr, "glXQueryContext");
    sf_glad_glXQueryDrawable = (PFNGLXQUERYDRAWABLEPROC) load(userptr, "glXQueryDrawable");
    sf_glad_glXSelectEvent = (PFNGLXSELECTEVENTPROC) load(userptr, "glXSelectEvent");
}
static void sf_glad_glx_load_GLX_VERSION_1_4( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_VERSION_1_4) return;
    sf_glad_glXGetProcAddress = (PFNGLXGETPROCADDRESSPROC) load(userptr, "glXGetProcAddress");
}
static void sf_glad_glx_load_GLX_AMD_gpu_association( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_AMD_gpu_association) return;
    sf_glad_glXBlitContextFramebufferAMD = (PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC) load(userptr, "glXBlitContextFramebufferAMD");
    sf_glad_glXCreateAssociatedContextAMD = (PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC) load(userptr, "glXCreateAssociatedContextAMD");
    sf_glad_glXCreateAssociatedContextAttribsAMD = (PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC) load(userptr, "glXCreateAssociatedContextAttribsAMD");
    sf_glad_glXDeleteAssociatedContextAMD = (PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC) load(userptr, "glXDeleteAssociatedContextAMD");
    sf_glad_glXGetContextGPUIDAMD = (PFNGLXGETCONTEXTGPUIDAMDPROC) load(userptr, "glXGetContextGPUIDAMD");
    sf_glad_glXGetCurrentAssociatedContextAMD = (PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC) load(userptr, "glXGetCurrentAssociatedContextAMD");
    sf_glad_glXGetGPUIDsAMD = (PFNGLXGETGPUIDSAMDPROC) load(userptr, "glXGetGPUIDsAMD");
    sf_glad_glXGetGPUInfoAMD = (PFNGLXGETGPUINFOAMDPROC) load(userptr, "glXGetGPUInfoAMD");
    sf_glad_glXMakeAssociatedContextCurrentAMD = (PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC) load(userptr, "glXMakeAssociatedContextCurrentAMD");
}
static void sf_glad_glx_load_GLX_ARB_create_context( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_ARB_create_context) return;
    sf_glad_glXCreateContextAttribsARB = (PFNGLXCREATECONTEXTATTRIBSARBPROC) load(userptr, "glXCreateContextAttribsARB");
}
static void sf_glad_glx_load_GLX_ARB_get_proc_address( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_ARB_get_proc_address) return;
    sf_glad_glXGetProcAddressARB = (PFNGLXGETPROCADDRESSARBPROC) load(userptr, "glXGetProcAddressARB");
}
static void sf_glad_glx_load_GLX_EXT_import_context( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_EXT_import_context) return;
    sf_glad_glXFreeContextEXT = (PFNGLXFREECONTEXTEXTPROC) load(userptr, "glXFreeContextEXT");
    sf_glad_glXGetContextIDEXT = (PFNGLXGETCONTEXTIDEXTPROC) load(userptr, "glXGetContextIDEXT");
    sf_glad_glXGetCurrentDisplayEXT = (PFNGLXGETCURRENTDISPLAYEXTPROC) load(userptr, "glXGetCurrentDisplayEXT");
    sf_glad_glXImportContextEXT = (PFNGLXIMPORTCONTEXTEXTPROC) load(userptr, "glXImportContextEXT");
    sf_glad_glXQueryContextInfoEXT = (PFNGLXQUERYCONTEXTINFOEXTPROC) load(userptr, "glXQueryContextInfoEXT");
}
static void sf_glad_glx_load_GLX_EXT_swap_control( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_EXT_swap_control) return;
    sf_glad_glXSwapIntervalEXT = (PFNGLXSWAPINTERVALEXTPROC) load(userptr, "glXSwapIntervalEXT");
}
static void sf_glad_glx_load_GLX_EXT_texture_from_pixmap( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_EXT_texture_from_pixmap) return;
    sf_glad_glXBindTexImageEXT = (PFNGLXBINDTEXIMAGEEXTPROC) load(userptr, "glXBindTexImageEXT");
    sf_glad_glXReleaseTexImageEXT = (PFNGLXRELEASETEXIMAGEEXTPROC) load(userptr, "glXReleaseTexImageEXT");
}
static void sf_glad_glx_load_GLX_MESA_agp_offset( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_MESA_agp_offset) return;
    sf_glad_glXGetAGPOffsetMESA = (PFNGLXGETAGPOFFSETMESAPROC) load(userptr, "glXGetAGPOffsetMESA");
}
static void sf_glad_glx_load_GLX_MESA_copy_sub_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_MESA_copy_sub_buffer) return;
    sf_glad_glXCopySubBufferMESA = (PFNGLXCOPYSUBBUFFERMESAPROC) load(userptr, "glXCopySubBufferMESA");
}
static void sf_glad_glx_load_GLX_MESA_pixmap_colormap( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_MESA_pixmap_colormap) return;
    sf_glad_glXCreateGLXPixmapMESA = (PFNGLXCREATEGLXPIXMAPMESAPROC) load(userptr, "glXCreateGLXPixmapMESA");
}
static void sf_glad_glx_load_GLX_MESA_query_renderer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_MESA_query_renderer) return;
    sf_glad_glXQueryCurrentRendererIntegerMESA = (PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC) load(userptr, "glXQueryCurrentRendererIntegerMESA");
    sf_glad_glXQueryCurrentRendererStringMESA = (PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC) load(userptr, "glXQueryCurrentRendererStringMESA");
    sf_glad_glXQueryRendererIntegerMESA = (PFNGLXQUERYRENDERERINTEGERMESAPROC) load(userptr, "glXQueryRendererIntegerMESA");
    sf_glad_glXQueryRendererStringMESA = (PFNGLXQUERYRENDERERSTRINGMESAPROC) load(userptr, "glXQueryRendererStringMESA");
}
static void sf_glad_glx_load_GLX_MESA_release_buffers( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_MESA_release_buffers) return;
    sf_glad_glXReleaseBuffersMESA = (PFNGLXRELEASEBUFFERSMESAPROC) load(userptr, "glXReleaseBuffersMESA");
}
static void sf_glad_glx_load_GLX_MESA_set_3dfx_mode( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_MESA_set_3dfx_mode) return;
    sf_glad_glXSet3DfxModeMESA = (PFNGLXSET3DFXMODEMESAPROC) load(userptr, "glXSet3DfxModeMESA");
}
static void sf_glad_glx_load_GLX_MESA_swap_control( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_MESA_swap_control) return;
    sf_glad_glXGetSwapIntervalMESA = (PFNGLXGETSWAPINTERVALMESAPROC) load(userptr, "glXGetSwapIntervalMESA");
    sf_glad_glXSwapIntervalMESA = (PFNGLXSWAPINTERVALMESAPROC) load(userptr, "glXSwapIntervalMESA");
}
static void sf_glad_glx_load_GLX_NV_copy_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_NV_copy_buffer) return;
    sf_glad_glXCopyBufferSubDataNV = (PFNGLXCOPYBUFFERSUBDATANVPROC) load(userptr, "glXCopyBufferSubDataNV");
    sf_glad_glXNamedCopyBufferSubDataNV = (PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC) load(userptr, "glXNamedCopyBufferSubDataNV");
}
static void sf_glad_glx_load_GLX_NV_copy_image( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_NV_copy_image) return;
    sf_glad_glXCopyImageSubDataNV = (PFNGLXCOPYIMAGESUBDATANVPROC) load(userptr, "glXCopyImageSubDataNV");
}
static void sf_glad_glx_load_GLX_NV_delay_before_swap( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_NV_delay_before_swap) return;
    sf_glad_glXDelayBeforeSwapNV = (PFNGLXDELAYBEFORESWAPNVPROC) load(userptr, "glXDelayBeforeSwapNV");
}
static void sf_glad_glx_load_GLX_NV_present_video( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_NV_present_video) return;
    sf_glad_glXBindVideoDeviceNV = (PFNGLXBINDVIDEODEVICENVPROC) load(userptr, "glXBindVideoDeviceNV");
    sf_glad_glXEnumerateVideoDevicesNV = (PFNGLXENUMERATEVIDEODEVICESNVPROC) load(userptr, "glXEnumerateVideoDevicesNV");
}
static void sf_glad_glx_load_GLX_NV_swap_group( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_NV_swap_group) return;
    sf_glad_glXBindSwapBarrierNV = (PFNGLXBINDSWAPBARRIERNVPROC) load(userptr, "glXBindSwapBarrierNV");
    sf_glad_glXJoinSwapGroupNV = (PFNGLXJOINSWAPGROUPNVPROC) load(userptr, "glXJoinSwapGroupNV");
    sf_glad_glXQueryFrameCountNV = (PFNGLXQUERYFRAMECOUNTNVPROC) load(userptr, "glXQueryFrameCountNV");
    sf_glad_glXQueryMaxSwapGroupsNV = (PFNGLXQUERYMAXSWAPGROUPSNVPROC) load(userptr, "glXQueryMaxSwapGroupsNV");
    sf_glad_glXQuerySwapGroupNV = (PFNGLXQUERYSWAPGROUPNVPROC) load(userptr, "glXQuerySwapGroupNV");
    sf_glad_glXResetFrameCountNV = (PFNGLXRESETFRAMECOUNTNVPROC) load(userptr, "glXResetFrameCountNV");
}
static void sf_glad_glx_load_GLX_NV_video_capture( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_NV_video_capture) return;
    sf_glad_glXBindVideoCaptureDeviceNV = (PFNGLXBINDVIDEOCAPTUREDEVICENVPROC) load(userptr, "glXBindVideoCaptureDeviceNV");
    sf_glad_glXEnumerateVideoCaptureDevicesNV = (PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC) load(userptr, "glXEnumerateVideoCaptureDevicesNV");
    sf_glad_glXLockVideoCaptureDeviceNV = (PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC) load(userptr, "glXLockVideoCaptureDeviceNV");
    sf_glad_glXQueryVideoCaptureDeviceNV = (PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC) load(userptr, "glXQueryVideoCaptureDeviceNV");
    sf_glad_glXReleaseVideoCaptureDeviceNV = (PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC) load(userptr, "glXReleaseVideoCaptureDeviceNV");
}
static void sf_glad_glx_load_GLX_NV_video_out( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_NV_video_out) return;
    sf_glad_glXBindVideoImageNV = (PFNGLXBINDVIDEOIMAGENVPROC) load(userptr, "glXBindVideoImageNV");
    sf_glad_glXGetVideoDeviceNV = (PFNGLXGETVIDEODEVICENVPROC) load(userptr, "glXGetVideoDeviceNV");
    sf_glad_glXGetVideoInfoNV = (PFNGLXGETVIDEOINFONVPROC) load(userptr, "glXGetVideoInfoNV");
    sf_glad_glXReleaseVideoDeviceNV = (PFNGLXRELEASEVIDEODEVICENVPROC) load(userptr, "glXReleaseVideoDeviceNV");
    sf_glad_glXReleaseVideoImageNV = (PFNGLXRELEASEVIDEOIMAGENVPROC) load(userptr, "glXReleaseVideoImageNV");
    sf_glad_glXSendPbufferToVideoNV = (PFNGLXSENDPBUFFERTOVIDEONVPROC) load(userptr, "glXSendPbufferToVideoNV");
}
static void sf_glad_glx_load_GLX_OML_sync_control( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_OML_sync_control) return;
    sf_glad_glXGetMscRateOML = (PFNGLXGETMSCRATEOMLPROC) load(userptr, "glXGetMscRateOML");
    sf_glad_glXGetSyncValuesOML = (PFNGLXGETSYNCVALUESOMLPROC) load(userptr, "glXGetSyncValuesOML");
    sf_glad_glXSwapBuffersMscOML = (PFNGLXSWAPBUFFERSMSCOMLPROC) load(userptr, "glXSwapBuffersMscOML");
    sf_glad_glXWaitForMscOML = (PFNGLXWAITFORMSCOMLPROC) load(userptr, "glXWaitForMscOML");
    sf_glad_glXWaitForSbcOML = (PFNGLXWAITFORSBCOMLPROC) load(userptr, "glXWaitForSbcOML");
}
static void sf_glad_glx_load_GLX_SGIX_fbconfig( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SGIX_fbconfig) return;
    sf_glad_glXChooseFBConfigSGIX = (PFNGLXCHOOSEFBCONFIGSGIXPROC) load(userptr, "glXChooseFBConfigSGIX");
    sf_glad_glXCreateContextWithConfigSGIX = (PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC) load(userptr, "glXCreateContextWithConfigSGIX");
    sf_glad_glXCreateGLXPixmapWithConfigSGIX = (PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC) load(userptr, "glXCreateGLXPixmapWithConfigSGIX");
    sf_glad_glXGetFBConfigAttribSGIX = (PFNGLXGETFBCONFIGATTRIBSGIXPROC) load(userptr, "glXGetFBConfigAttribSGIX");
    sf_glad_glXGetFBConfigFromVisualSGIX = (PFNGLXGETFBCONFIGFROMVISUALSGIXPROC) load(userptr, "glXGetFBConfigFromVisualSGIX");
    sf_glad_glXGetVisualFromFBConfigSGIX = (PFNGLXGETVISUALFROMFBCONFIGSGIXPROC) load(userptr, "glXGetVisualFromFBConfigSGIX");
}
static void sf_glad_glx_load_GLX_SGIX_hyperpipe( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SGIX_hyperpipe) return;
    sf_glad_glXBindHyperpipeSGIX = (PFNGLXBINDHYPERPIPESGIXPROC) load(userptr, "glXBindHyperpipeSGIX");
    sf_glad_glXDestroyHyperpipeConfigSGIX = (PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC) load(userptr, "glXDestroyHyperpipeConfigSGIX");
    sf_glad_glXHyperpipeAttribSGIX = (PFNGLXHYPERPIPEATTRIBSGIXPROC) load(userptr, "glXHyperpipeAttribSGIX");
    sf_glad_glXHyperpipeConfigSGIX = (PFNGLXHYPERPIPECONFIGSGIXPROC) load(userptr, "glXHyperpipeConfigSGIX");
    sf_glad_glXQueryHyperpipeAttribSGIX = (PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC) load(userptr, "glXQueryHyperpipeAttribSGIX");
    sf_glad_glXQueryHyperpipeBestAttribSGIX = (PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC) load(userptr, "glXQueryHyperpipeBestAttribSGIX");
    sf_glad_glXQueryHyperpipeConfigSGIX = (PFNGLXQUERYHYPERPIPECONFIGSGIXPROC) load(userptr, "glXQueryHyperpipeConfigSGIX");
    sf_glad_glXQueryHyperpipeNetworkSGIX = (PFNGLXQUERYHYPERPIPENETWORKSGIXPROC) load(userptr, "glXQueryHyperpipeNetworkSGIX");
}
static void sf_glad_glx_load_GLX_SGIX_pbuffer( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SGIX_pbuffer) return;
    sf_glad_glXCreateGLXPbufferSGIX = (PFNGLXCREATEGLXPBUFFERSGIXPROC) load(userptr, "glXCreateGLXPbufferSGIX");
    sf_glad_glXDestroyGLXPbufferSGIX = (PFNGLXDESTROYGLXPBUFFERSGIXPROC) load(userptr, "glXDestroyGLXPbufferSGIX");
    sf_glad_glXGetSelectedEventSGIX = (PFNGLXGETSELECTEDEVENTSGIXPROC) load(userptr, "glXGetSelectedEventSGIX");
    sf_glad_glXQueryGLXPbufferSGIX = (PFNGLXQUERYGLXPBUFFERSGIXPROC) load(userptr, "glXQueryGLXPbufferSGIX");
    sf_glad_glXSelectEventSGIX = (PFNGLXSELECTEVENTSGIXPROC) load(userptr, "glXSelectEventSGIX");
}
static void sf_glad_glx_load_GLX_SGIX_swap_barrier( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SGIX_swap_barrier) return;
    sf_glad_glXBindSwapBarrierSGIX = (PFNGLXBINDSWAPBARRIERSGIXPROC) load(userptr, "glXBindSwapBarrierSGIX");
    sf_glad_glXQueryMaxSwapBarriersSGIX = (PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC) load(userptr, "glXQueryMaxSwapBarriersSGIX");
}
static void sf_glad_glx_load_GLX_SGIX_swap_group( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SGIX_swap_group) return;
    sf_glad_glXJoinSwapGroupSGIX = (PFNGLXJOINSWAPGROUPSGIXPROC) load(userptr, "glXJoinSwapGroupSGIX");
}
static void sf_glad_glx_load_GLX_SGIX_video_resize( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SGIX_video_resize) return;
    sf_glad_glXBindChannelToWindowSGIX = (PFNGLXBINDCHANNELTOWINDOWSGIXPROC) load(userptr, "glXBindChannelToWindowSGIX");
    sf_glad_glXChannelRectSGIX = (PFNGLXCHANNELRECTSGIXPROC) load(userptr, "glXChannelRectSGIX");
    sf_glad_glXChannelRectSyncSGIX = (PFNGLXCHANNELRECTSYNCSGIXPROC) load(userptr, "glXChannelRectSyncSGIX");
    sf_glad_glXQueryChannelDeltasSGIX = (PFNGLXQUERYCHANNELDELTASSGIXPROC) load(userptr, "glXQueryChannelDeltasSGIX");
    sf_glad_glXQueryChannelRectSGIX = (PFNGLXQUERYCHANNELRECTSGIXPROC) load(userptr, "glXQueryChannelRectSGIX");
}
static void sf_glad_glx_load_GLX_SGI_cushion( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SGI_cushion) return;
    sf_glad_glXCushionSGI = (PFNGLXCUSHIONSGIPROC) load(userptr, "glXCushionSGI");
}
static void sf_glad_glx_load_GLX_SGI_make_current_read( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SGI_make_current_read) return;
    sf_glad_glXGetCurrentReadDrawableSGI = (PFNGLXGETCURRENTREADDRAWABLESGIPROC) load(userptr, "glXGetCurrentReadDrawableSGI");
    sf_glad_glXMakeCurrentReadSGI = (PFNGLXMAKECURRENTREADSGIPROC) load(userptr, "glXMakeCurrentReadSGI");
}
static void sf_glad_glx_load_GLX_SGI_swap_control( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SGI_swap_control) return;
    sf_glad_glXSwapIntervalSGI = (PFNGLXSWAPINTERVALSGIPROC) load(userptr, "glXSwapIntervalSGI");
}
static void sf_glad_glx_load_GLX_SGI_video_sync( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SGI_video_sync) return;
    sf_glad_glXGetVideoSyncSGI = (PFNGLXGETVIDEOSYNCSGIPROC) load(userptr, "glXGetVideoSyncSGI");
    sf_glad_glXWaitVideoSyncSGI = (PFNGLXWAITVIDEOSYNCSGIPROC) load(userptr, "glXWaitVideoSyncSGI");
}
static void sf_glad_glx_load_GLX_SUN_get_transparent_index( GLADuserptrloadfunc load, void* userptr) {
    if(!SF_GLAD_GLX_SUN_get_transparent_index) return;
    sf_glad_glXGetTransparentIndexSUN = (PFNGLXGETTRANSPARENTINDEXSUNPROC) load(userptr, "glXGetTransparentIndexSUN");
}


static void sf_glad_glx_resolve_aliases(void) {
}

static int sf_glad_glx_has_extension(Display *display, int screen, const char *ext) {
#ifndef GLX_VERSION_1_1
    GLAD_UNUSED(display);
    GLAD_UNUSED(screen);
    GLAD_UNUSED(ext);
#else
    const char *terminator;
    const char *loc;
    const char *extensions;

    if (glXQueryExtensionsString == NULL) {
        return 0;
    }

    extensions = glXQueryExtensionsString(display, screen);

    if(extensions == NULL || ext == NULL) {
        return 0;
    }

    while(1) {
        loc = strstr(extensions, ext);
        if(loc == NULL)
            break;

        terminator = loc + strlen(ext);
        if((loc == extensions || *(loc - 1) == ' ') &&
            (*terminator == ' ' || *terminator == '\0')) {
            return 1;
        }
        extensions = terminator;
    }
#endif

    return 0;
}

static GLADapiproc sf_glad_glx_get_proc_from_userptr(void *userptr, const char* name) {
    return (GLAD_GNUC_EXTENSION (GLADapiproc (*)(const char *name)) userptr)(name);
}

static int sf_glad_glx_find_extensions(Display *display, int screen) {
    SF_GLAD_GLX_3DFX_multisample = sf_glad_glx_has_extension(display, screen, "GLX_3DFX_multisample");
    SF_GLAD_GLX_AMD_gpu_association = sf_glad_glx_has_extension(display, screen, "GLX_AMD_gpu_association");
    SF_GLAD_GLX_ARB_context_flush_control = sf_glad_glx_has_extension(display, screen, "GLX_ARB_context_flush_control");
    SF_GLAD_GLX_ARB_create_context = sf_glad_glx_has_extension(display, screen, "GLX_ARB_create_context");
    SF_GLAD_GLX_ARB_create_context_no_error = sf_glad_glx_has_extension(display, screen, "GLX_ARB_create_context_no_error");
    SF_GLAD_GLX_ARB_create_context_profile = sf_glad_glx_has_extension(display, screen, "GLX_ARB_create_context_profile");
    SF_GLAD_GLX_ARB_create_context_robustness = sf_glad_glx_has_extension(display, screen, "GLX_ARB_create_context_robustness");
    SF_GLAD_GLX_ARB_fbconfig_float = sf_glad_glx_has_extension(display, screen, "GLX_ARB_fbconfig_float");
    SF_GLAD_GLX_ARB_framebuffer_sRGB = sf_glad_glx_has_extension(display, screen, "GLX_ARB_framebuffer_sRGB");
    SF_GLAD_GLX_ARB_get_proc_address = sf_glad_glx_has_extension(display, screen, "GLX_ARB_get_proc_address");
    SF_GLAD_GLX_ARB_multisample = sf_glad_glx_has_extension(display, screen, "GLX_ARB_multisample");
    SF_GLAD_GLX_ARB_robustness_application_isolation = sf_glad_glx_has_extension(display, screen, "GLX_ARB_robustness_application_isolation");
    SF_GLAD_GLX_ARB_robustness_share_group_isolation = sf_glad_glx_has_extension(display, screen, "GLX_ARB_robustness_share_group_isolation");
    SF_GLAD_GLX_ARB_vertex_buffer_object = sf_glad_glx_has_extension(display, screen, "GLX_ARB_vertex_buffer_object");
    SF_GLAD_GLX_EXT_buffer_age = sf_glad_glx_has_extension(display, screen, "GLX_EXT_buffer_age");
    SF_GLAD_GLX_EXT_context_priority = sf_glad_glx_has_extension(display, screen, "GLX_EXT_context_priority");
    SF_GLAD_GLX_EXT_create_context_es2_profile = sf_glad_glx_has_extension(display, screen, "GLX_EXT_create_context_es2_profile");
    SF_GLAD_GLX_EXT_create_context_es_profile = sf_glad_glx_has_extension(display, screen, "GLX_EXT_create_context_es_profile");
    SF_GLAD_GLX_EXT_fbconfig_packed_float = sf_glad_glx_has_extension(display, screen, "GLX_EXT_fbconfig_packed_float");
    SF_GLAD_GLX_EXT_framebuffer_sRGB = sf_glad_glx_has_extension(display, screen, "GLX_EXT_framebuffer_sRGB");
    SF_GLAD_GLX_EXT_get_drawable_type = sf_glad_glx_has_extension(display, screen, "GLX_EXT_get_drawable_type");
    SF_GLAD_GLX_EXT_import_context = sf_glad_glx_has_extension(display, screen, "GLX_EXT_import_context");
    SF_GLAD_GLX_EXT_libglvnd = sf_glad_glx_has_extension(display, screen, "GLX_EXT_libglvnd");
    SF_GLAD_GLX_EXT_no_config_context = sf_glad_glx_has_extension(display, screen, "GLX_EXT_no_config_context");
    SF_GLAD_GLX_EXT_stereo_tree = sf_glad_glx_has_extension(display, screen, "GLX_EXT_stereo_tree");
    SF_GLAD_GLX_EXT_swap_control = sf_glad_glx_has_extension(display, screen, "GLX_EXT_swap_control");
    SF_GLAD_GLX_EXT_swap_control_tear = sf_glad_glx_has_extension(display, screen, "GLX_EXT_swap_control_tear");
    SF_GLAD_GLX_EXT_texture_from_pixmap = sf_glad_glx_has_extension(display, screen, "GLX_EXT_texture_from_pixmap");
    SF_GLAD_GLX_EXT_visual_info = sf_glad_glx_has_extension(display, screen, "GLX_EXT_visual_info");
    SF_GLAD_GLX_EXT_visual_rating = sf_glad_glx_has_extension(display, screen, "GLX_EXT_visual_rating");
    SF_GLAD_GLX_INTEL_swap_event = sf_glad_glx_has_extension(display, screen, "GLX_INTEL_swap_event");
    SF_GLAD_GLX_MESA_agp_offset = sf_glad_glx_has_extension(display, screen, "GLX_MESA_agp_offset");
    SF_GLAD_GLX_MESA_copy_sub_buffer = sf_glad_glx_has_extension(display, screen, "GLX_MESA_copy_sub_buffer");
    SF_GLAD_GLX_MESA_pixmap_colormap = sf_glad_glx_has_extension(display, screen, "GLX_MESA_pixmap_colormap");
    SF_GLAD_GLX_MESA_query_renderer = sf_glad_glx_has_extension(display, screen, "GLX_MESA_query_renderer");
    SF_GLAD_GLX_MESA_release_buffers = sf_glad_glx_has_extension(display, screen, "GLX_MESA_release_buffers");
    SF_GLAD_GLX_MESA_set_3dfx_mode = sf_glad_glx_has_extension(display, screen, "GLX_MESA_set_3dfx_mode");
    SF_GLAD_GLX_MESA_swap_control = sf_glad_glx_has_extension(display, screen, "GLX_MESA_swap_control");
    SF_GLAD_GLX_NV_copy_buffer = sf_glad_glx_has_extension(display, screen, "GLX_NV_copy_buffer");
    SF_GLAD_GLX_NV_copy_image = sf_glad_glx_has_extension(display, screen, "GLX_NV_copy_image");
    SF_GLAD_GLX_NV_delay_before_swap = sf_glad_glx_has_extension(display, screen, "GLX_NV_delay_before_swap");
    SF_GLAD_GLX_NV_float_buffer = sf_glad_glx_has_extension(display, screen, "GLX_NV_float_buffer");
    SF_GLAD_GLX_NV_multigpu_context = sf_glad_glx_has_extension(display, screen, "GLX_NV_multigpu_context");
    SF_GLAD_GLX_NV_multisample_coverage = sf_glad_glx_has_extension(display, screen, "GLX_NV_multisample_coverage");
    SF_GLAD_GLX_NV_present_video = sf_glad_glx_has_extension(display, screen, "GLX_NV_present_video");
    SF_GLAD_GLX_NV_robustness_video_memory_purge = sf_glad_glx_has_extension(display, screen, "GLX_NV_robustness_video_memory_purge");
    SF_GLAD_GLX_NV_swap_group = sf_glad_glx_has_extension(display, screen, "GLX_NV_swap_group");
    SF_GLAD_GLX_NV_video_capture = sf_glad_glx_has_extension(display, screen, "GLX_NV_video_capture");
    SF_GLAD_GLX_NV_video_out = sf_glad_glx_has_extension(display, screen, "GLX_NV_video_out");
    SF_GLAD_GLX_OML_swap_method = sf_glad_glx_has_extension(display, screen, "GLX_OML_swap_method");
    SF_GLAD_GLX_OML_sync_control = sf_glad_glx_has_extension(display, screen, "GLX_OML_sync_control");
    SF_GLAD_GLX_SGIS_blended_overlay = sf_glad_glx_has_extension(display, screen, "GLX_SGIS_blended_overlay");
    SF_GLAD_GLX_SGIS_multisample = sf_glad_glx_has_extension(display, screen, "GLX_SGIS_multisample");
    SF_GLAD_GLX_SGIS_shared_multisample = sf_glad_glx_has_extension(display, screen, "GLX_SGIS_shared_multisample");
    SF_GLAD_GLX_SGIX_fbconfig = sf_glad_glx_has_extension(display, screen, "GLX_SGIX_fbconfig");
    SF_GLAD_GLX_SGIX_hyperpipe = sf_glad_glx_has_extension(display, screen, "GLX_SGIX_hyperpipe");
    SF_GLAD_GLX_SGIX_pbuffer = sf_glad_glx_has_extension(display, screen, "GLX_SGIX_pbuffer");
    SF_GLAD_GLX_SGIX_swap_barrier = sf_glad_glx_has_extension(display, screen, "GLX_SGIX_swap_barrier");
    SF_GLAD_GLX_SGIX_swap_group = sf_glad_glx_has_extension(display, screen, "GLX_SGIX_swap_group");
    SF_GLAD_GLX_SGIX_video_resize = sf_glad_glx_has_extension(display, screen, "GLX_SGIX_video_resize");
    SF_GLAD_GLX_SGIX_visual_select_group = sf_glad_glx_has_extension(display, screen, "GLX_SGIX_visual_select_group");
    SF_GLAD_GLX_SGI_cushion = sf_glad_glx_has_extension(display, screen, "GLX_SGI_cushion");
    SF_GLAD_GLX_SGI_make_current_read = sf_glad_glx_has_extension(display, screen, "GLX_SGI_make_current_read");
    SF_GLAD_GLX_SGI_swap_control = sf_glad_glx_has_extension(display, screen, "GLX_SGI_swap_control");
    SF_GLAD_GLX_SGI_video_sync = sf_glad_glx_has_extension(display, screen, "GLX_SGI_video_sync");
    SF_GLAD_GLX_SUN_get_transparent_index = sf_glad_glx_has_extension(display, screen, "GLX_SUN_get_transparent_index");
    return 1;
}

static int sf_glad_glx_find_core_glx(Display **display, int *screen) {
    int major = 0, minor = 0;
    if(*display == NULL) {
#ifdef SF_GLAD_GLX_NO_X11
        GLAD_UNUSED(screen);
        return 0;
#else
        *display = XOpenDisplay(0);
        if (*display == NULL) {
            return 0;
        }
        *screen = XScreenNumberOfScreen(XDefaultScreenOfDisplay(*display));
#endif
    }
    glXQueryVersion(*display, &major, &minor);
    SF_GLAD_GLX_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    SF_GLAD_GLX_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
    SF_GLAD_GLX_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
    SF_GLAD_GLX_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
    SF_GLAD_GLX_VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
    return GLAD_MAKE_VERSION(major, minor);
}

static int gladLoadGLXUserPtr(Display *display, int screen, GLADuserptrloadfunc load, void *userptr) {
    int version;
    glXQueryVersion = (PFNGLXQUERYVERSIONPROC) load(userptr, "glXQueryVersion");
    if(glXQueryVersion == NULL) return 0;
    version = sf_glad_glx_find_core_glx(&display, &screen);

    sf_glad_glx_load_GLX_VERSION_1_0(load, userptr);
    sf_glad_glx_load_GLX_VERSION_1_1(load, userptr);
    sf_glad_glx_load_GLX_VERSION_1_2(load, userptr);
    sf_glad_glx_load_GLX_VERSION_1_3(load, userptr);
    sf_glad_glx_load_GLX_VERSION_1_4(load, userptr);

    if (!sf_glad_glx_find_extensions(display, screen)) return 0;
    sf_glad_glx_load_GLX_AMD_gpu_association(load, userptr);
    sf_glad_glx_load_GLX_ARB_create_context(load, userptr);
    sf_glad_glx_load_GLX_ARB_get_proc_address(load, userptr);
    sf_glad_glx_load_GLX_EXT_import_context(load, userptr);
    sf_glad_glx_load_GLX_EXT_swap_control(load, userptr);
    sf_glad_glx_load_GLX_EXT_texture_from_pixmap(load, userptr);
    sf_glad_glx_load_GLX_MESA_agp_offset(load, userptr);
    sf_glad_glx_load_GLX_MESA_copy_sub_buffer(load, userptr);
    sf_glad_glx_load_GLX_MESA_pixmap_colormap(load, userptr);
    sf_glad_glx_load_GLX_MESA_query_renderer(load, userptr);
    sf_glad_glx_load_GLX_MESA_release_buffers(load, userptr);
    sf_glad_glx_load_GLX_MESA_set_3dfx_mode(load, userptr);
    sf_glad_glx_load_GLX_MESA_swap_control(load, userptr);
    sf_glad_glx_load_GLX_NV_copy_buffer(load, userptr);
    sf_glad_glx_load_GLX_NV_copy_image(load, userptr);
    sf_glad_glx_load_GLX_NV_delay_before_swap(load, userptr);
    sf_glad_glx_load_GLX_NV_present_video(load, userptr);
    sf_glad_glx_load_GLX_NV_swap_group(load, userptr);
    sf_glad_glx_load_GLX_NV_video_capture(load, userptr);
    sf_glad_glx_load_GLX_NV_video_out(load, userptr);
    sf_glad_glx_load_GLX_OML_sync_control(load, userptr);
    sf_glad_glx_load_GLX_SGIX_fbconfig(load, userptr);
    sf_glad_glx_load_GLX_SGIX_hyperpipe(load, userptr);
    sf_glad_glx_load_GLX_SGIX_pbuffer(load, userptr);
    sf_glad_glx_load_GLX_SGIX_swap_barrier(load, userptr);
    sf_glad_glx_load_GLX_SGIX_swap_group(load, userptr);
    sf_glad_glx_load_GLX_SGIX_video_resize(load, userptr);
    sf_glad_glx_load_GLX_SGI_cushion(load, userptr);
    sf_glad_glx_load_GLX_SGI_make_current_read(load, userptr);
    sf_glad_glx_load_GLX_SGI_swap_control(load, userptr);
    sf_glad_glx_load_GLX_SGI_video_sync(load, userptr);
    sf_glad_glx_load_GLX_SUN_get_transparent_index(load, userptr);

    sf_glad_glx_resolve_aliases();

    return version;
}

static int gladLoadGLX(Display *display, int screen, GLADloadfunc load) {
    return gladLoadGLXUserPtr(display, screen, sf_glad_glx_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}

 

#ifdef SF_GLAD_GLX

#ifndef GLAD_LOADER_LIBRARY_C_
#define GLAD_LOADER_LIBRARY_C_

#include <stddef.h>
#include <stdlib.h>

#if GLAD_PLATFORM_WIN32
#include <windows.h>
#else
#include <dlfcn.h>
#endif


static void* sf_glad_get_dlopen_handle(const char *lib_names[], int length) {
    void *handle = NULL;
    int i;

    for (i = 0; i < length; ++i) {
#if GLAD_PLATFORM_WIN32
  #if GLAD_PLATFORM_UWP
        size_t buffer_size = (strlen(lib_names[i]) + 1) * sizeof(WCHAR);
        LPWSTR buffer = (LPWSTR) malloc(buffer_size);
        if (buffer != NULL) {
            int ret = MultiByteToWideChar(CP_ACP, 0, lib_names[i], -1, buffer, buffer_size);
            if (ret != 0) {
                handle = (void*) LoadPackagedLibrary(buffer, 0);
            }
            free((void*) buffer);
        }
  #else
        handle = (void*) LoadLibraryA(lib_names[i]);
  #endif
#else
        handle = dlopen(lib_names[i], RTLD_LAZY | RTLD_LOCAL);
#endif
        if (handle != NULL) {
            return handle;
        }
    }

    return NULL;
}

static void sf_glad_close_dlopen_handle(void* handle) {
    if (handle != NULL) {
#if GLAD_PLATFORM_WIN32
        FreeLibrary((HMODULE) handle);
#else
        dlclose(handle);
#endif
    }
}

static GLADapiproc sf_glad_dlsym_handle(void* handle, const char *name) {
    if (handle == NULL) {
        return NULL;
    }

#if GLAD_PLATFORM_WIN32
    return (GLADapiproc) GetProcAddress((HMODULE) handle, name);
#else
    return GLAD_GNUC_EXTENSION (GLADapiproc) dlsym(handle, name);
#endif
}

#endif /* GLAD_LOADER_LIBRARY_C_ */

typedef void* (GLAD_API_PTR *GLADglxprocaddrfunc)(const char*);

static GLADapiproc sf_glad_glx_get_proc(void *userptr, const char *name) {
    return GLAD_GNUC_EXTENSION ((GLADapiproc (*)(const char *name)) userptr)(name);
}

static void* _glx_handle;

static void* sf_glad_glx_dlopen_handle(void) {
    static const char *NAMES[] = {
#if defined __CYGWIN__
        "libGL-1.so",
#endif
        "libGL.so.1",
        "libGL.so"
    };

    if (_glx_handle == NULL) {
        _glx_handle = sf_glad_get_dlopen_handle(NAMES, sizeof(NAMES) / sizeof(NAMES[0]));
    }

    return _glx_handle;
}

static void gladLoaderUnloadGLX() {
    if (_glx_handle != NULL) {
        sf_glad_close_dlopen_handle(_glx_handle);
        _glx_handle = NULL;
    }
}

static int gladLoaderLoadGLX(Display *display, int screen) {
    int version = 0;
    void *handle = NULL;
    int did_load = 0;
    GLADglxprocaddrfunc loader;

    did_load = _glx_handle == NULL;
    handle = sf_glad_glx_dlopen_handle();
    if (handle != NULL) {
        loader = (GLADglxprocaddrfunc) sf_glad_dlsym_handle(handle, "glXGetProcAddressARB");
        if (loader != NULL) {
            version = gladLoadGLXUserPtr(display, screen, sf_glad_glx_get_proc, GLAD_GNUC_EXTENSION (void*) loader);
        }

        if (!version && did_load) {
            gladLoaderUnloadGLX();
        }
    }

    return version;
}

#endif /* SF_GLAD_GLX */

#ifdef __cplusplus
}
#endif

#endif /* SF_GLAD_GLX_IMPLEMENTATION */

