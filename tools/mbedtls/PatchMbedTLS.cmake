file(READ "${MBEDTLS_DIR}/CMakeLists.txt" MBEDTLS_CMAKELISTS_CONTENTS)
string(REPLACE "cmake_minimum_required(VERSION 3.5.1)" "cmake_minimum_required(VERSION 3.0...3.10)" MBEDTLS_CMAKELISTS_CONTENTS "${MBEDTLS_CMAKELISTS_CONTENTS}")
string(REPLACE "add_subdirectory(3rdparty)" "set(CMAKE_DEBUG_POSTFIX d)" MBEDTLS_CMAKELISTS_CONTENTS "${MBEDTLS_CMAKELISTS_CONTENTS}")
string(REPLACE "if(CMAKE_COMPILER_IS_MSVC)" "if(MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")" MBEDTLS_CMAKELISTS_CONTENTS "${MBEDTLS_CMAKELISTS_CONTENTS}")
string(REGEX REPLACE "ADD_CUSTOM_TARGET\\(\\$\\{MBEDTLS_TARGET_PREFIX\\}apidoc.*doxygen\\)" "" MBEDTLS_CMAKELISTS_CONTENTS "${MBEDTLS_CMAKELISTS_CONTENTS}")
file(WRITE "${MBEDTLS_DIR}/CMakeLists.txt" "${MBEDTLS_CMAKELISTS_CONTENTS}")

file(READ "${MBEDTLS_DIR}/library/CMakeLists.txt" MBEDTLS_LIBRARY_CMAKELISTS_CONTENTS)
string(REPLACE "add_custom_target(\${lib_target} DEPENDS \${mbedcrypto_target} \${mbedx509_target} \${mbedtls_target})" "" MBEDTLS_LIBRARY_CMAKELISTS_CONTENTS "${MBEDTLS_LIBRARY_CMAKELISTS_CONTENTS}")
file(WRITE "${MBEDTLS_DIR}/library/CMakeLists.txt" "${MBEDTLS_LIBRARY_CMAKELISTS_CONTENTS}")

# Mbed TLS configuration
file(READ "${MBEDTLS_DIR}/include/mbedtls/mbedtls_config.h" MBEDTLS_CONFIG_CONTENTS)
string(REPLACE "//#define MBEDTLS_DEPRECATED_REMOVED" "#define MBEDTLS_DEPRECATED_REMOVED" MBEDTLS_CONFIG_CONTENTS "${MBEDTLS_CONFIG_CONTENTS}")
string(REPLACE "//#define MBEDTLS_CHECK_RETURN_WARNING" "#define MBEDTLS_CHECK_RETURN_WARNING" MBEDTLS_CONFIG_CONTENTS "${MBEDTLS_CONFIG_CONTENTS}")
string(REPLACE "//#define MBEDTLS_THREADING_ALT" "#define MBEDTLS_THREADING_ALT" MBEDTLS_CONFIG_CONTENTS "${MBEDTLS_CONFIG_CONTENTS}")
string(REPLACE "//#define MBEDTLS_THREADING_C" "#define MBEDTLS_THREADING_C" MBEDTLS_CONFIG_CONTENTS "${MBEDTLS_CONFIG_CONTENTS}")
file(WRITE "${MBEDTLS_DIR}/include/mbedtls/mbedtls_config.h" "${MBEDTLS_CONFIG_CONTENTS}")

# Our mutex implementation
file(WRITE "${MBEDTLS_DIR}/include/mbedtls/threading_alt.h" "typedef void* mbedtls_threading_mutex_t;")
